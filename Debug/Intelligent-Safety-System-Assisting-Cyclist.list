
Intelligent-Safety-System-Assisting-Cyclist.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c164  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  0800c350  0800c350  0001c350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cefc  0800cefc  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800cefc  0800cefc  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cefc  0800cefc  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cefc  0800cefc  0001cefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf00  0800cf00  0001cf00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800cf04  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  20000218  0800d11c  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  0800d11c  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cd6  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003010  00000000  00000000  00034f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00037f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  000391e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc3d  00000000  00000000  0003a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173b4  00000000  00000000  00056f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f9e9  00000000  00000000  0006e339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010dd22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006150  00000000  00000000  0010dd74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000218 	.word	0x20000218
 8000204:	00000000 	.word	0x00000000
 8000208:	0800c334 	.word	0x0800c334

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000021c 	.word	0x2000021c
 8000224:	0800c334 	.word	0x0800c334

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <VL53L1X_SensorInit>:
	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80011fa:	232d      	movs	r3, #45	; 0x2d
 80011fc:	73bb      	strb	r3, [r7, #14]
 80011fe:	e011      	b.n	8001224 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	b299      	uxth	r1, r3
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	3b2d      	subs	r3, #45	; 0x2d
 8001208:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <VL53L1X_SensorInit+0xd4>)
 800120a:	5cd2      	ldrb	r2, [r2, r3]
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	4618      	mov	r0, r3
 8001210:	f002 f9aa 	bl	8003568 <VL53L1_WrByte>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	4313      	orrs	r3, r2
 800121c:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	3301      	adds	r3, #1
 8001222:	73bb      	strb	r3, [r7, #14]
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	2b87      	cmp	r3, #135	; 0x87
 8001228:	d9ea      	bls.n	8001200 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f889 	bl	8001344 <VL53L1X_StartRanging>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	4313      	orrs	r3, r2
 800123a:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8001240:	e00b      	b.n	800125a <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8001242:	f107 020d 	add.w	r2, r7, #13
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f8aa 	bl	80013a4 <VL53L1X_CheckForDataReady>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	4313      	orrs	r3, r2
 8001258:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 800125a:	7b7b      	ldrb	r3, [r7, #13]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f82c 	bl	80012c0 <VL53L1X_ClearInterrupt>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	4313      	orrs	r3, r2
 8001270:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f87d 	bl	8001374 <VL53L1X_StopRanging>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	4313      	orrs	r3, r2
 8001282:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	2209      	movs	r2, #9
 8001288:	2108      	movs	r1, #8
 800128a:	4618      	mov	r0, r3
 800128c:	f002 f96c 	bl	8003568 <VL53L1_WrByte>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	4313      	orrs	r3, r2
 8001298:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	2200      	movs	r2, #0
 800129e:	210b      	movs	r1, #11
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 f961 	bl	8003568 <VL53L1_WrByte>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	73fb      	strb	r3, [r7, #15]
	return status;
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0800c4a8 	.word	0x0800c4a8

080012c0 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	2201      	movs	r2, #1
 80012d2:	2186      	movs	r1, #134	; 0x86
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 f947 	bl	8003568 <VL53L1_WrByte>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	73fb      	strb	r3, [r7, #15]
	return status;
 80012e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8001300:	f107 020e 	add.w	r2, r7, #14
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	2130      	movs	r1, #48	; 0x30
 8001308:	4618      	mov	r0, r3
 800130a:	f002 f9c9 	bl	80036a0 <VL53L1_RdByte>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	4313      	orrs	r3, r2
 8001316:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf0c      	ite	eq
 800132c:	2301      	moveq	r3, #1
 800132e:	2300      	movne	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	701a      	strb	r2, [r3, #0]
	return status;
 8001338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	2240      	movs	r2, #64	; 0x40
 8001356:	2187      	movs	r1, #135	; 0x87
 8001358:	4618      	mov	r0, r3
 800135a:	f002 f905 	bl	8003568 <VL53L1_WrByte>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	4313      	orrs	r3, r2
 8001366:	73fb      	strb	r3, [r7, #15]
	return status;
 8001368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	2200      	movs	r2, #0
 8001386:	2187      	movs	r1, #135	; 0x87
 8001388:	4618      	mov	r0, r3
 800138a:	f002 f8ed 	bl	8003568 <VL53L1_WrByte>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	4313      	orrs	r3, r2
 8001396:	73fb      	strb	r3, [r7, #15]
	return status;
 8001398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 80013b4:	f107 020d 	add.w	r2, r7, #13
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff97 	bl	80012f0 <VL53L1X_GetInterruptPolarity>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 80013cc:	f107 020e 	add.w	r2, r7, #14
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	2131      	movs	r1, #49	; 0x31
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 f963 	bl	80036a0 <VL53L1_RdByte>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 80013e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10c      	bne.n	8001406 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	7b7a      	ldrb	r2, [r7, #13]
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d103      	bne.n	8001400 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	e002      	b.n	8001406 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	460a      	mov	r2, r1
 800141c:	80fb      	strh	r3, [r7, #6]
 800141e:	4613      	mov	r3, r2
 8001420:	80bb      	strh	r3, [r7, #4]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 8001426:	f107 020c 	add.w	r2, r7, #12
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fa2a 	bl	8001888 <VL53L1X_GetDistanceMode>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	4313      	orrs	r3, r2
 800143c:	73fb      	strb	r3, [r7, #15]
	if (DM == 0)
 800143e:	89bb      	ldrh	r3, [r7, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <VL53L1X_SetTimingBudgetInMs+0x36>
		return 1;
 8001444:	2301      	movs	r3, #1
 8001446:	e0f6      	b.n	8001636 <VL53L1X_SetTimingBudgetInMs+0x224>
	else if (DM == 1) {	/* Short DistanceMode */
 8001448:	89bb      	ldrh	r3, [r7, #12]
 800144a:	2b01      	cmp	r3, #1
 800144c:	f040 8082 	bne.w	8001554 <VL53L1X_SetTimingBudgetInMs+0x142>
		switch (TimingBudgetInMs) {
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001456:	d06b      	beq.n	8001530 <VL53L1X_SetTimingBudgetInMs+0x11e>
 8001458:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800145c:	dc77      	bgt.n	800154e <VL53L1X_SetTimingBudgetInMs+0x13c>
 800145e:	2bc8      	cmp	r3, #200	; 0xc8
 8001460:	d057      	beq.n	8001512 <VL53L1X_SetTimingBudgetInMs+0x100>
 8001462:	2bc8      	cmp	r3, #200	; 0xc8
 8001464:	dc73      	bgt.n	800154e <VL53L1X_SetTimingBudgetInMs+0x13c>
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d044      	beq.n	80014f4 <VL53L1X_SetTimingBudgetInMs+0xe2>
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	dc6f      	bgt.n	800154e <VL53L1X_SetTimingBudgetInMs+0x13c>
 800146e:	2b32      	cmp	r3, #50	; 0x32
 8001470:	d031      	beq.n	80014d6 <VL53L1X_SetTimingBudgetInMs+0xc4>
 8001472:	2b32      	cmp	r3, #50	; 0x32
 8001474:	dc6b      	bgt.n	800154e <VL53L1X_SetTimingBudgetInMs+0x13c>
 8001476:	2b21      	cmp	r3, #33	; 0x21
 8001478:	d020      	beq.n	80014bc <VL53L1X_SetTimingBudgetInMs+0xaa>
 800147a:	2b21      	cmp	r3, #33	; 0x21
 800147c:	dc67      	bgt.n	800154e <VL53L1X_SetTimingBudgetInMs+0x13c>
 800147e:	2b0f      	cmp	r3, #15
 8001480:	d002      	beq.n	8001488 <VL53L1X_SetTimingBudgetInMs+0x76>
 8001482:	2b14      	cmp	r3, #20
 8001484:	d00d      	beq.n	80014a2 <VL53L1X_SetTimingBudgetInMs+0x90>
 8001486:	e062      	b.n	800154e <VL53L1X_SetTimingBudgetInMs+0x13c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	221d      	movs	r2, #29
 800148c:	215e      	movs	r1, #94	; 0x5e
 800148e:	4618      	mov	r0, r3
 8001490:	f002 f896 	bl	80035c0 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2227      	movs	r2, #39	; 0x27
 8001498:	2161      	movs	r1, #97	; 0x61
 800149a:	4618      	mov	r0, r3
 800149c:	f002 f890 	bl	80035c0 <VL53L1_WrWord>
					0x0027);
			break;
 80014a0:	e0c7      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	2251      	movs	r2, #81	; 0x51
 80014a6:	215e      	movs	r1, #94	; 0x5e
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 f889 	bl	80035c0 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	226e      	movs	r2, #110	; 0x6e
 80014b2:	2161      	movs	r1, #97	; 0x61
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 f883 	bl	80035c0 <VL53L1_WrWord>
					0x006E);
			break;
 80014ba:	e0ba      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	22d6      	movs	r2, #214	; 0xd6
 80014c0:	215e      	movs	r1, #94	; 0x5e
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 f87c 	bl	80035c0 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	226e      	movs	r2, #110	; 0x6e
 80014cc:	2161      	movs	r1, #97	; 0x61
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 f876 	bl	80035c0 <VL53L1_WrWord>
					0x006E);
			break;
 80014d4:	e0ad      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80014dc:	215e      	movs	r1, #94	; 0x5e
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 f86e 	bl	80035c0 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80014ea:	2161      	movs	r1, #97	; 0x61
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 f867 	bl	80035c0 <VL53L1_WrWord>
					0x01E8);
			break;
 80014f2:	e09e      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	f240 22e1 	movw	r2, #737	; 0x2e1
 80014fa:	215e      	movs	r1, #94	; 0x5e
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 f85f 	bl	80035c0 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	f44f 7262 	mov.w	r2, #904	; 0x388
 8001508:	2161      	movs	r1, #97	; 0x61
 800150a:	4618      	mov	r0, r3
 800150c:	f002 f858 	bl	80035c0 <VL53L1_WrWord>
					0x0388);
			break;
 8001510:	e08f      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	f240 32e1 	movw	r2, #993	; 0x3e1
 8001518:	215e      	movs	r1, #94	; 0x5e
 800151a:	4618      	mov	r0, r3
 800151c:	f002 f850 	bl	80035c0 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	f240 4296 	movw	r2, #1174	; 0x496
 8001526:	2161      	movs	r1, #97	; 0x61
 8001528:	4618      	mov	r0, r3
 800152a:	f002 f849 	bl	80035c0 <VL53L1_WrWord>
					0x0496);
			break;
 800152e:	e080      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	f240 5291 	movw	r2, #1425	; 0x591
 8001536:	215e      	movs	r1, #94	; 0x5e
 8001538:	4618      	mov	r0, r3
 800153a:	f002 f841 	bl	80035c0 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001544:	2161      	movs	r1, #97	; 0x61
 8001546:	4618      	mov	r0, r3
 8001548:	f002 f83a 	bl	80035c0 <VL53L1_WrWord>
					0x05C1);
			break;
 800154c:	e071      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
			break;
 8001552:	e06e      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		}
	} else {
		switch (TimingBudgetInMs) {
 8001554:	88bb      	ldrh	r3, [r7, #4]
 8001556:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800155a:	d058      	beq.n	800160e <VL53L1X_SetTimingBudgetInMs+0x1fc>
 800155c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001560:	dc64      	bgt.n	800162c <VL53L1X_SetTimingBudgetInMs+0x21a>
 8001562:	2bc8      	cmp	r3, #200	; 0xc8
 8001564:	d044      	beq.n	80015f0 <VL53L1X_SetTimingBudgetInMs+0x1de>
 8001566:	2bc8      	cmp	r3, #200	; 0xc8
 8001568:	dc60      	bgt.n	800162c <VL53L1X_SetTimingBudgetInMs+0x21a>
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d031      	beq.n	80015d2 <VL53L1X_SetTimingBudgetInMs+0x1c0>
 800156e:	2b64      	cmp	r3, #100	; 0x64
 8001570:	dc5c      	bgt.n	800162c <VL53L1X_SetTimingBudgetInMs+0x21a>
 8001572:	2b32      	cmp	r3, #50	; 0x32
 8001574:	d020      	beq.n	80015b8 <VL53L1X_SetTimingBudgetInMs+0x1a6>
 8001576:	2b32      	cmp	r3, #50	; 0x32
 8001578:	dc58      	bgt.n	800162c <VL53L1X_SetTimingBudgetInMs+0x21a>
 800157a:	2b14      	cmp	r3, #20
 800157c:	d002      	beq.n	8001584 <VL53L1X_SetTimingBudgetInMs+0x172>
 800157e:	2b21      	cmp	r3, #33	; 0x21
 8001580:	d00d      	beq.n	800159e <VL53L1X_SetTimingBudgetInMs+0x18c>
 8001582:	e053      	b.n	800162c <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	221e      	movs	r2, #30
 8001588:	215e      	movs	r1, #94	; 0x5e
 800158a:	4618      	mov	r0, r3
 800158c:	f002 f818 	bl	80035c0 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	2222      	movs	r2, #34	; 0x22
 8001594:	2161      	movs	r1, #97	; 0x61
 8001596:	4618      	mov	r0, r3
 8001598:	f002 f812 	bl	80035c0 <VL53L1_WrWord>
					0x0022);
			break;
 800159c:	e049      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	2260      	movs	r2, #96	; 0x60
 80015a2:	215e      	movs	r1, #94	; 0x5e
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 f80b 	bl	80035c0 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	226e      	movs	r2, #110	; 0x6e
 80015ae:	2161      	movs	r1, #97	; 0x61
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 f805 	bl	80035c0 <VL53L1_WrWord>
					0x006E);
			break;
 80015b6:	e03c      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	22ad      	movs	r2, #173	; 0xad
 80015bc:	215e      	movs	r1, #94	; 0x5e
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 fffe 	bl	80035c0 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	22c6      	movs	r2, #198	; 0xc6
 80015c8:	2161      	movs	r1, #97	; 0x61
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 fff8 	bl	80035c0 <VL53L1_WrWord>
					0x00C6);
			break;
 80015d0:	e02f      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80015d8:	215e      	movs	r1, #94	; 0x5e
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 fff0 	bl	80035c0 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 80015e6:	2161      	movs	r1, #97	; 0x61
 80015e8:	4618      	mov	r0, r3
 80015ea:	f001 ffe9 	bl	80035c0 <VL53L1_WrWord>
					0x01EA);
			break;
 80015ee:	e020      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	f240 22d9 	movw	r2, #729	; 0x2d9
 80015f6:	215e      	movs	r1, #94	; 0x5e
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 ffe1 	bl	80035c0 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 8001604:	2161      	movs	r1, #97	; 0x61
 8001606:	4618      	mov	r0, r3
 8001608:	f001 ffda 	bl	80035c0 <VL53L1_WrWord>
					0x02F8);
			break;
 800160c:	e011      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	f240 428f 	movw	r2, #1167	; 0x48f
 8001614:	215e      	movs	r1, #94	; 0x5e
 8001616:	4618      	mov	r0, r3
 8001618:	f001 ffd2 	bl	80035c0 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	f240 42a4 	movw	r2, #1188	; 0x4a4
 8001622:	2161      	movs	r1, #97	; 0x61
 8001624:	4618      	mov	r0, r3
 8001626:	f001 ffcb 	bl	80035c0 <VL53L1_WrWord>
					0x04A4);
			break;
 800162a:	e002      	b.n	8001632 <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
			break;
 8001630:	bf00      	nop
		}
	}
	return status;
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	6039      	str	r1, [r7, #0]
 8001648:	80fb      	strh	r3, [r7, #6]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 800164e:	f107 020c 	add.w	r2, r7, #12
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	215e      	movs	r1, #94	; 0x5e
 8001656:	4618      	mov	r0, r3
 8001658:	f002 f85a 	bl	8003710 <VL53L1_RdWord>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	4313      	orrs	r3, r2
 8001664:	73fb      	strb	r3, [r7, #15]
	switch (Temp) {
 8001666:	89bb      	ldrh	r3, [r7, #12]
 8001668:	f240 5291 	movw	r2, #1425	; 0x591
 800166c:	4293      	cmp	r3, r2
 800166e:	d05b      	beq.n	8001728 <VL53L1X_GetTimingBudgetInMs+0xea>
 8001670:	f240 5291 	movw	r2, #1425	; 0x591
 8001674:	4293      	cmp	r3, r2
 8001676:	dc5c      	bgt.n	8001732 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001678:	f240 428f 	movw	r2, #1167	; 0x48f
 800167c:	4293      	cmp	r3, r2
 800167e:	d053      	beq.n	8001728 <VL53L1X_GetTimingBudgetInMs+0xea>
 8001680:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8001684:	da55      	bge.n	8001732 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001686:	f240 32e1 	movw	r2, #993	; 0x3e1
 800168a:	4293      	cmp	r3, r2
 800168c:	d048      	beq.n	8001720 <VL53L1X_GetTimingBudgetInMs+0xe2>
 800168e:	f240 32e1 	movw	r2, #993	; 0x3e1
 8001692:	4293      	cmp	r3, r2
 8001694:	dc4d      	bgt.n	8001732 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8001696:	f240 22e1 	movw	r2, #737	; 0x2e1
 800169a:	4293      	cmp	r3, r2
 800169c:	d03c      	beq.n	8001718 <VL53L1X_GetTimingBudgetInMs+0xda>
 800169e:	f240 22e1 	movw	r2, #737	; 0x2e1
 80016a2:	4293      	cmp	r3, r2
 80016a4:	dc45      	bgt.n	8001732 <VL53L1X_GetTimingBudgetInMs+0xf4>
 80016a6:	f240 22d9 	movw	r2, #729	; 0x2d9
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d038      	beq.n	8001720 <VL53L1X_GetTimingBudgetInMs+0xe2>
 80016ae:	f240 22d9 	movw	r2, #729	; 0x2d9
 80016b2:	4293      	cmp	r3, r2
 80016b4:	dc3d      	bgt.n	8001732 <VL53L1X_GetTimingBudgetInMs+0xf4>
 80016b6:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80016ba:	d02d      	beq.n	8001718 <VL53L1X_GetTimingBudgetInMs+0xda>
 80016bc:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80016c0:	dc37      	bgt.n	8001732 <VL53L1X_GetTimingBudgetInMs+0xf4>
 80016c2:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 80016c6:	d023      	beq.n	8001710 <VL53L1X_GetTimingBudgetInMs+0xd2>
 80016c8:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 80016cc:	dc31      	bgt.n	8001732 <VL53L1X_GetTimingBudgetInMs+0xf4>
 80016ce:	2bd6      	cmp	r3, #214	; 0xd6
 80016d0:	d01a      	beq.n	8001708 <VL53L1X_GetTimingBudgetInMs+0xca>
 80016d2:	2bd6      	cmp	r3, #214	; 0xd6
 80016d4:	dc2d      	bgt.n	8001732 <VL53L1X_GetTimingBudgetInMs+0xf4>
 80016d6:	2bad      	cmp	r3, #173	; 0xad
 80016d8:	d01a      	beq.n	8001710 <VL53L1X_GetTimingBudgetInMs+0xd2>
 80016da:	2bad      	cmp	r3, #173	; 0xad
 80016dc:	dc29      	bgt.n	8001732 <VL53L1X_GetTimingBudgetInMs+0xf4>
 80016de:	2b60      	cmp	r3, #96	; 0x60
 80016e0:	d012      	beq.n	8001708 <VL53L1X_GetTimingBudgetInMs+0xca>
 80016e2:	2b60      	cmp	r3, #96	; 0x60
 80016e4:	dc25      	bgt.n	8001732 <VL53L1X_GetTimingBudgetInMs+0xf4>
 80016e6:	2b51      	cmp	r3, #81	; 0x51
 80016e8:	d00a      	beq.n	8001700 <VL53L1X_GetTimingBudgetInMs+0xc2>
 80016ea:	2b51      	cmp	r3, #81	; 0x51
 80016ec:	dc21      	bgt.n	8001732 <VL53L1X_GetTimingBudgetInMs+0xf4>
 80016ee:	2b1d      	cmp	r3, #29
 80016f0:	d002      	beq.n	80016f8 <VL53L1X_GetTimingBudgetInMs+0xba>
 80016f2:	2b1e      	cmp	r3, #30
 80016f4:	d004      	beq.n	8001700 <VL53L1X_GetTimingBudgetInMs+0xc2>
 80016f6:	e01c      	b.n	8001732 <VL53L1X_GetTimingBudgetInMs+0xf4>
		case 0x001D :
			*pTimingBudget = 15;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	220f      	movs	r2, #15
 80016fc:	801a      	strh	r2, [r3, #0]
			break;
 80016fe:	e01d      	b.n	800173c <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2214      	movs	r2, #20
 8001704:	801a      	strh	r2, [r3, #0]
			break;
 8001706:	e019      	b.n	800173c <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2221      	movs	r2, #33	; 0x21
 800170c:	801a      	strh	r2, [r3, #0]
			break;
 800170e:	e015      	b.n	800173c <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2232      	movs	r2, #50	; 0x32
 8001714:	801a      	strh	r2, [r3, #0]
			break;
 8001716:	e011      	b.n	800173c <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2264      	movs	r2, #100	; 0x64
 800171c:	801a      	strh	r2, [r3, #0]
			break;
 800171e:	e00d      	b.n	800173c <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	22c8      	movs	r2, #200	; 0xc8
 8001724:	801a      	strh	r2, [r3, #0]
			break;
 8001726:	e009      	b.n	800173c <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800172e:	801a      	strh	r2, [r3, #0]
			break;
 8001730:	e004      	b.n	800173c <VL53L1X_GetTimingBudgetInMs+0xfe>
		default:
			status = 1;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
			*pTimingBudget = 0;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2200      	movs	r2, #0
 800173a:	801a      	strh	r2, [r3, #0]
	}
	return status;
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	460a      	mov	r2, r1
 8001752:	80fb      	strh	r3, [r7, #6]
 8001754:	4613      	mov	r3, r2
 8001756:	80bb      	strh	r3, [r7, #4]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 800175c:	f107 020c 	add.w	r2, r7, #12
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff6a 	bl	800163e <VL53L1X_GetTimingBudgetInMs>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	4313      	orrs	r3, r2
 8001772:	73fb      	strb	r3, [r7, #15]
	if (status != 0)
 8001774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <VL53L1X_SetDistanceMode+0x38>
		return 1;
 800177c:	2301      	movs	r3, #1
 800177e:	e07f      	b.n	8001880 <VL53L1X_SetDistanceMode+0x138>
	switch (DM) {
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d002      	beq.n	800178c <VL53L1X_SetDistanceMode+0x44>
 8001786:	2b02      	cmp	r3, #2
 8001788:	d033      	beq.n	80017f2 <VL53L1X_SetDistanceMode+0xaa>
 800178a:	e065      	b.n	8001858 <VL53L1X_SetDistanceMode+0x110>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	2214      	movs	r2, #20
 8001790:	214b      	movs	r1, #75	; 0x4b
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fee8 	bl	8003568 <VL53L1_WrByte>
 8001798:	4603      	mov	r3, r0
 800179a:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	2207      	movs	r2, #7
 80017a0:	2160      	movs	r1, #96	; 0x60
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 fee0 	bl	8003568 <VL53L1_WrByte>
 80017a8:	4603      	mov	r3, r0
 80017aa:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	2205      	movs	r2, #5
 80017b0:	2163      	movs	r1, #99	; 0x63
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 fed8 	bl	8003568 <VL53L1_WrByte>
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	2238      	movs	r2, #56	; 0x38
 80017c0:	2169      	movs	r1, #105	; 0x69
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 fed0 	bl	8003568 <VL53L1_WrByte>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	f240 7205 	movw	r2, #1797	; 0x705
 80017d2:	2178      	movs	r1, #120	; 0x78
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 fef3 	bl	80035c0 <VL53L1_WrWord>
 80017da:	4603      	mov	r3, r0
 80017dc:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	f240 6206 	movw	r2, #1542	; 0x606
 80017e4:	217a      	movs	r1, #122	; 0x7a
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 feea 	bl	80035c0 <VL53L1_WrWord>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
		break;
 80017f0:	e035      	b.n	800185e <VL53L1X_SetDistanceMode+0x116>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	220a      	movs	r2, #10
 80017f6:	214b      	movs	r1, #75	; 0x4b
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 feb5 	bl	8003568 <VL53L1_WrByte>
 80017fe:	4603      	mov	r3, r0
 8001800:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	220f      	movs	r2, #15
 8001806:	2160      	movs	r1, #96	; 0x60
 8001808:	4618      	mov	r0, r3
 800180a:	f001 fead 	bl	8003568 <VL53L1_WrByte>
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	220d      	movs	r2, #13
 8001816:	2163      	movs	r1, #99	; 0x63
 8001818:	4618      	mov	r0, r3
 800181a:	f001 fea5 	bl	8003568 <VL53L1_WrByte>
 800181e:	4603      	mov	r3, r0
 8001820:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	22b8      	movs	r2, #184	; 0xb8
 8001826:	2169      	movs	r1, #105	; 0x69
 8001828:	4618      	mov	r0, r3
 800182a:	f001 fe9d 	bl	8003568 <VL53L1_WrByte>
 800182e:	4603      	mov	r3, r0
 8001830:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	f640 720d 	movw	r2, #3853	; 0xf0d
 8001838:	2178      	movs	r1, #120	; 0x78
 800183a:	4618      	mov	r0, r3
 800183c:	f001 fec0 	bl	80035c0 <VL53L1_WrWord>
 8001840:	4603      	mov	r3, r0
 8001842:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	f640 620e 	movw	r2, #3598	; 0xe0e
 800184a:	217a      	movs	r1, #122	; 0x7a
 800184c:	4618      	mov	r0, r3
 800184e:	f001 feb7 	bl	80035c0 <VL53L1_WrWord>
 8001852:	4603      	mov	r3, r0
 8001854:	73fb      	strb	r3, [r7, #15]
		break;
 8001856:	e002      	b.n	800185e <VL53L1X_SetDistanceMode+0x116>
	default:
		status = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
		break;
 800185c:	bf00      	nop
	}

	if (status == 0)
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10a      	bne.n	800187c <VL53L1X_SetDistanceMode+0x134>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 8001866:	89ba      	ldrh	r2, [r7, #12]
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fdd0 	bl	8001412 <VL53L1X_SetTimingBudgetInMs>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	4313      	orrs	r3, r2
 800187a:	73fb      	strb	r3, [r7, #15]
	return status;
 800187c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	80fb      	strh	r3, [r7, #6]
	uint8_t TempDM, status=0;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8001898:	f107 020e 	add.w	r2, r7, #14
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	214b      	movs	r1, #75	; 0x4b
 80018a0:	4618      	mov	r0, r3
 80018a2:	f001 fefd 	bl	80036a0 <VL53L1_RdByte>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b25b      	sxtb	r3, r3
 80018b2:	73fb      	strb	r3, [r7, #15]
	if (TempDM == 0x14)
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	2b14      	cmp	r3, #20
 80018b8:	d102      	bne.n	80018c0 <VL53L1X_GetDistanceMode+0x38>
		*DM=1;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2201      	movs	r2, #1
 80018be:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 80018c0:	7bbb      	ldrb	r3, [r7, #14]
 80018c2:	2b0a      	cmp	r3, #10
 80018c4:	d102      	bne.n	80018cc <VL53L1X_GetDistanceMode+0x44>
		*DM=2;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2202      	movs	r2, #2
 80018ca:	801a      	strh	r2, [r3, #0]
	return status;
 80018cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	80fb      	strh	r3, [r7, #6]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 80018e8:	f107 020c 	add.w	r2, r7, #12
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	21de      	movs	r1, #222	; 0xde
 80018f0:	4618      	mov	r0, r3
 80018f2:	f001 ff0d 	bl	8003710 <VL53L1_RdWord>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	73fb      	strb	r3, [r7, #15]
	ClockPLL = ClockPLL&0x3FF;
 8001900:	89bb      	ldrh	r3, [r7, #12]
 8001902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001906:	b29b      	uxth	r3, r3
 8001908:	81bb      	strh	r3, [r7, #12]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 800190a:	89bb      	ldrh	r3, [r7, #12]
 800190c:	461a      	mov	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fdd1 	bl	80004bc <__aeabi_ui2d>
 800191a:	a30b      	add	r3, pc, #44	; (adr r3, 8001948 <VL53L1X_SetInterMeasurementInMs+0x70>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fe46 	bl	80005b0 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f918 	bl	8000b60 <__aeabi_d2uiz>
 8001930:	4602      	mov	r2, r0
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	216c      	movs	r1, #108	; 0x6c
 8001936:	4618      	mov	r0, r3
 8001938:	f001 fe76 	bl	8003628 <VL53L1_WrDWord>
	return status;
 800193c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	33333333 	.word	0x33333333
 800194c:	3ff13333 	.word	0x3ff13333

08001950 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8001964:	f107 020e 	add.w	r2, r7, #14
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	21e5      	movs	r1, #229	; 0xe5
 800196c:	4618      	mov	r0, r3
 800196e:	f001 fe97 	bl	80036a0 <VL53L1_RdByte>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	4313      	orrs	r3, r2
 800197a:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 800197c:	7bba      	ldrb	r2, [r7, #14]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	701a      	strb	r2, [r3, #0]
	return status;
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	6039      	str	r1, [r7, #0]
 8001998:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 800199e:	f107 020c 	add.w	r2, r7, #12
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	2196      	movs	r1, #150	; 0x96
 80019a6:	4618      	mov	r0, r3
 80019a8:	f001 feb2 	bl	8003710 <VL53L1_RdWord>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 80019b6:	89ba      	ldrh	r2, [r7, #12]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	801a      	strh	r2, [r3, #0]
	return status;
 80019bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <VL53L1X_GetSignalRate>:
	*ambPerSp=(uint16_t) (200.0 * AmbientRate / SpNb);
	return status;
}

VL53L1X_ERROR VL53L1X_GetSignalRate(uint16_t dev, uint16_t *signal)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= VL53L1_RdWord(dev,
 80019d8:	f107 020c 	add.w	r2, r7, #12
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	2198      	movs	r1, #152	; 0x98
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 fe95 	bl	8003710 <VL53L1_RdWord>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	73fb      	strb	r3, [r7, #15]
		VL53L1_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0, &tmp);
	*signal = tmp*8;
 80019f0:	89bb      	ldrh	r3, [r7, #12]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	801a      	strh	r2, [r3, #0]
	return status;
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <VL53L1X_GetSpadNb>:

VL53L1X_ERROR VL53L1X_GetSpadNb(uint16_t dev, uint16_t *spNb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	6039      	str	r1, [r7, #0]
 8001a10:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= VL53L1_RdWord(dev,
 8001a16:	f107 020c 	add.w	r2, r7, #12
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	218c      	movs	r1, #140	; 0x8c
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 fe76 	bl	8003710 <VL53L1_RdWord>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	73fb      	strb	r3, [r7, #15]
			      VL53L1_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0, &tmp);
	*spNb = tmp >> 8;
 8001a2e:	89bb      	ldrh	r3, [r7, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	801a      	strh	r2, [r3, #0]
	return status;
 8001a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <VL53L1X_GetAmbientRate>:

VL53L1X_ERROR VL53L1X_GetAmbientRate(uint16_t dev, uint16_t *ambRate)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= VL53L1_RdWord(dev, RESULT__AMBIENT_COUNT_RATE_MCPS_SD, &tmp);
 8001a54:	f107 020c 	add.w	r2, r7, #12
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	2190      	movs	r1, #144	; 0x90
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fe57 	bl	8003710 <VL53L1_RdWord>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	73fb      	strb	r3, [r7, #15]
	*ambRate = tmp*8;
 8001a6c:	89bb      	ldrh	r3, [r7, #12]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	801a      	strh	r2, [r3, #0]
	return status;
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <VL53L1X_GetRangeStatus>:

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
	uint8_t RgSt;

	*rangeStatus = 255;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	22ff      	movs	r2, #255	; 0xff
 8001a98:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8001a9a:	f107 020e 	add.w	r2, r7, #14
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	2189      	movs	r1, #137	; 0x89
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 fdfc 	bl	80036a0 <VL53L1_RdByte>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	73fb      	strb	r3, [r7, #15]
	RgSt = RgSt & 0x1F;
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	73bb      	strb	r3, [r7, #14]
	if (RgSt < 24)
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	2b17      	cmp	r3, #23
 8001ac0:	d805      	bhi.n	8001ace <VL53L1X_GetRangeStatus+0x4a>
		*rangeStatus = status_rtn[RgSt];
 8001ac2:	7bbb      	ldrb	r3, [r7, #14]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <VL53L1X_GetRangeStatus+0x58>)
 8001ac8:	5c9a      	ldrb	r2, [r3, r2]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	701a      	strb	r2, [r3, #0]
	return status;
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	0800c504 	.word	0x0800c504

08001ae0 <CountRPM>:
static uint16_t firstDetected;
static uint16_t newDetected;
static float time_diff;

void CountRPM(uint16_t counter)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
	static uint8_t flip = 0;

	if (flip != HAL_GPIO_ReadPin(A3144_Port, A3144_PIN))
 8001aea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aee:	4821      	ldr	r0, [pc, #132]	; (8001b74 <CountRPM+0x94>)
 8001af0:	f003 fcc8 	bl	8005484 <HAL_GPIO_ReadPin>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <CountRPM+0x98>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d034      	beq.n	8001b6a <CountRPM+0x8a>
	{
		flip = HAL_GPIO_ReadPin(A3144_Port, A3144_PIN);
 8001b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b04:	481b      	ldr	r0, [pc, #108]	; (8001b74 <CountRPM+0x94>)
 8001b06:	f003 fcbd 	bl	8005484 <HAL_GPIO_ReadPin>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <CountRPM+0x98>)
 8001b10:	701a      	strb	r2, [r3, #0]
		rotCount++;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <CountRPM+0x9c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <CountRPM+0x9c>)
 8001b1a:	6013      	str	r3, [r2, #0]

		if (rotCount == 1){
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <CountRPM+0x9c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d103      	bne.n	8001b2c <CountRPM+0x4c>
			firstDetected = counter;
 8001b24:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <CountRPM+0xa0>)
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	8013      	strh	r3, [r2, #0]
			rotSpeed = time_diff / 1000 ;

			rotCount = 0; //reset
		}
	}
}
 8001b2a:	e01e      	b.n	8001b6a <CountRPM+0x8a>
			newDetected = counter;
 8001b2c:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <CountRPM+0xa4>)
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	8013      	strh	r3, [r2, #0]
			time_diff = abs(newDetected - firstDetected);
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <CountRPM+0xa4>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <CountRPM+0xa0>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bfb8      	it	lt
 8001b42:	425b      	neglt	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f935 	bl	8000db4 <__aeabi_i2f>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <CountRPM+0xa8>)
 8001b4e:	6013      	str	r3, [r2, #0]
			rotSpeed = time_diff / 1000 ;
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <CountRPM+0xa8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	490d      	ldr	r1, [pc, #52]	; (8001b8c <CountRPM+0xac>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fa34 	bl	8000fc4 <__aeabi_fdiv>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <CountRPM+0xb0>)
 8001b62:	601a      	str	r2, [r3, #0]
			rotCount = 0; //reset
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <CountRPM+0x9c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40010c00 	.word	0x40010c00
 8001b78:	20000244 	.word	0x20000244
 8001b7c:	20000238 	.word	0x20000238
 8001b80:	2000023c 	.word	0x2000023c
 8001b84:	2000023e 	.word	0x2000023e
 8001b88:	20000240 	.word	0x20000240
 8001b8c:	447a0000 	.word	0x447a0000
 8001b90:	20000234 	.word	0x20000234
 8001b94:	00000000 	.word	0x00000000

08001b98 <GetRotationSpeed>:

float GetRotationSpeed(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
//	static float beforeSpeed = 0;
	static int clear = 0;
	clear++;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <GetRotationSpeed+0x60>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <GetRotationSpeed+0x60>)
 8001ba4:	6013      	str	r3, [r2, #0]
//
	if (clear == Time_Out_Period) //Time-out: stopped rotation => reset
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <GetRotationSpeed+0x60>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d115      	bne.n	8001bda <GetRotationSpeed+0x42>
	{
		clear = 0;
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <GetRotationSpeed+0x60>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
		rotSpeed *= 1.45;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <GetRotationSpeed+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fca1 	bl	8000500 <__aeabi_f2d>
 8001bbe:	a30c      	add	r3, pc, #48	; (adr r3, 8001bf0 <GetRotationSpeed+0x58>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fcf4 	bl	80005b0 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7fe ffe6 	bl	8000ba0 <__aeabi_d2f>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <GetRotationSpeed+0x64>)
 8001bd8:	6013      	str	r3, [r2, #0]
//
//		beforeSpeed = rotSpeed;
//		rotSpeed = 0;
//	}

	return 30 / rotSpeed;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <GetRotationSpeed+0x64>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <GetRotationSpeed+0x68>)
 8001be2:	f7ff f9ef 	bl	8000fc4 <__aeabi_fdiv>
 8001be6:	4603      	mov	r3, r0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	f3af 8000 	nop.w
 8001bf0:	33333333 	.word	0x33333333
 8001bf4:	3ff73333 	.word	0x3ff73333
 8001bf8:	20000248 	.word	0x20000248
 8001bfc:	20000234 	.word	0x20000234
 8001c00:	41f00000 	.word	0x41f00000

08001c04 <a3144_Init>:

void a3144_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <a3144_Init+0x10>)
 8001c0a:	f005 fdbb 	bl	8007784 <HAL_TIM_Base_Start_IT>
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200002a8 	.word	0x200002a8

08001c18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)   // Interrupt Call
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	static uint16_t counter_for_1s = 0;


	if (htim == &htim3)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d10a      	bne.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		CountRPM(counter_for_1s);
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff57 	bl	8001ae0 <CountRPM>
		counter_for_1s++;
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c3c:	801a      	strh	r2, [r3, #0]
	}
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200002a8 	.word	0x200002a8
 8001c4c:	2000024c 	.word	0x2000024c

08001c50 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	e002      	b.n	8001c60 <Delay+0x10>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f9      	bne.n	8001c5a <Delay+0xa>
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <LCD_INIT>:

void LCD_INIT ( void )
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f000 f829 	bl	8001cd0 <LCD_BackLed_Control>
	LCD_Rst();
 8001c7e:	f000 f80f 	bl	8001ca0 <LCD_Rst>
	LCD_REG_Config();
 8001c82:	f000 f85f 	bl	8001d44 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8001c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c90:	22f0      	movs	r2, #240	; 0xf0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2000      	movs	r0, #0
 8001c96:	f000 f9e6 	bl	8002066 <LCD_Clear>
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <LCD_Rst>:


void LCD_Rst ( void )
{			
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <LCD_Rst+0x28>)
 8001caa:	f003 fc02 	bl	80054b2 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001cae:	4807      	ldr	r0, [pc, #28]	; (8001ccc <LCD_Rst+0x2c>)
 8001cb0:	f7ff ffce 	bl	8001c50 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <LCD_Rst+0x28>)
 8001cba:	f003 fbfa 	bl	80054b2 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001cbe:	4803      	ldr	r0, [pc, #12]	; (8001ccc <LCD_Rst+0x2c>)
 8001cc0:	f7ff ffc6 	bl	8001c50 <Delay>
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40011800 	.word	0x40011800
 8001ccc:	0002bffc 	.word	0x0002bffc

08001cd0 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ce6:	4807      	ldr	r0, [pc, #28]	; (8001d04 <LCD_BackLed_Control+0x34>)
 8001ce8:	f003 fbe3 	bl	80054b2 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001cec:	e005      	b.n	8001cfa <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4803      	ldr	r0, [pc, #12]	; (8001d04 <LCD_BackLed_Control+0x34>)
 8001cf6:	f003 fbdc 	bl	80054b2 <HAL_GPIO_WritePin>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40011400 	.word	0x40011400

08001d08 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001d12:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	8013      	strh	r3, [r2, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <LCD_Write_Data+0x1c>)
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	8013      	strh	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	60020000 	.word	0x60020000

08001d44 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001d48:	20cf      	movs	r0, #207	; 0xcf
 8001d4a:	f7ff ffdd 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7ff ffe8 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8001d54:	2081      	movs	r0, #129	; 0x81
 8001d56:	f7ff ffe5 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001d5a:	2030      	movs	r0, #48	; 0x30
 8001d5c:	f7ff ffe2 	bl	8001d24 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001d60:	20ed      	movs	r0, #237	; 0xed
 8001d62:	f7ff ffd1 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001d66:	2064      	movs	r0, #100	; 0x64
 8001d68:	f7ff ffdc 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	f7ff ffd9 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8001d72:	2012      	movs	r0, #18
 8001d74:	f7ff ffd6 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001d78:	2081      	movs	r0, #129	; 0x81
 8001d7a:	f7ff ffd3 	bl	8001d24 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001d7e:	20e8      	movs	r0, #232	; 0xe8
 8001d80:	f7ff ffc2 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001d84:	2085      	movs	r0, #133	; 0x85
 8001d86:	f7ff ffcd 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001d8a:	2010      	movs	r0, #16
 8001d8c:	f7ff ffca 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001d90:	2078      	movs	r0, #120	; 0x78
 8001d92:	f7ff ffc7 	bl	8001d24 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8001d96:	20cb      	movs	r0, #203	; 0xcb
 8001d98:	f7ff ffb6 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001d9c:	2039      	movs	r0, #57	; 0x39
 8001d9e:	f7ff ffc1 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001da2:	202c      	movs	r0, #44	; 0x2c
 8001da4:	f7ff ffbe 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff ffbb 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001dae:	2034      	movs	r0, #52	; 0x34
 8001db0:	f7ff ffb8 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001db4:	2002      	movs	r0, #2
 8001db6:	f7ff ffb5 	bl	8001d24 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001dba:	20f7      	movs	r0, #247	; 0xf7
 8001dbc:	f7ff ffa4 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001dc0:	2020      	movs	r0, #32
 8001dc2:	f7ff ffaf 	bl	8001d24 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001dc6:	20ea      	movs	r0, #234	; 0xea
 8001dc8:	f7ff ff9e 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff ffa9 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff ffa6 	bl	8001d24 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001dd8:	20b1      	movs	r0, #177	; 0xb1
 8001dda:	f7ff ff95 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff ffa0 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001de4:	201b      	movs	r0, #27
 8001de6:	f7ff ff9d 	bl	8001d24 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001dea:	20b6      	movs	r0, #182	; 0xb6
 8001dec:	f7ff ff8c 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001df0:	200a      	movs	r0, #10
 8001df2:	f7ff ff97 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001df6:	20a2      	movs	r0, #162	; 0xa2
 8001df8:	f7ff ff94 	bl	8001d24 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001dfc:	20c0      	movs	r0, #192	; 0xc0
 8001dfe:	f7ff ff83 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001e02:	2035      	movs	r0, #53	; 0x35
 8001e04:	f7ff ff8e 	bl	8001d24 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001e08:	20c1      	movs	r0, #193	; 0xc1
 8001e0a:	f7ff ff7d 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001e0e:	2011      	movs	r0, #17
 8001e10:	f7ff ff88 	bl	8001d24 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001e14:	20c5      	movs	r0, #197	; 0xc5
 8001e16:	f7ff ff77 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001e1a:	2045      	movs	r0, #69	; 0x45
 8001e1c:	f7ff ff82 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001e20:	2045      	movs	r0, #69	; 0x45
 8001e22:	f7ff ff7f 	bl	8001d24 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001e26:	20c7      	movs	r0, #199	; 0xc7
 8001e28:	f7ff ff6e 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001e2c:	20a2      	movs	r0, #162	; 0xa2
 8001e2e:	f7ff ff79 	bl	8001d24 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001e32:	20f2      	movs	r0, #242	; 0xf2
 8001e34:	f7ff ff68 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff ff73 	bl	8001d24 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001e3e:	2026      	movs	r0, #38	; 0x26
 8001e40:	f7ff ff62 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7ff ff6d 	bl	8001d24 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001e4a:	20e0      	movs	r0, #224	; 0xe0
 8001e4c:	f7ff ff5c 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001e50:	200f      	movs	r0, #15
 8001e52:	f7ff ff67 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001e56:	2026      	movs	r0, #38	; 0x26
 8001e58:	f7ff ff64 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001e5c:	2024      	movs	r0, #36	; 0x24
 8001e5e:	f7ff ff61 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001e62:	200b      	movs	r0, #11
 8001e64:	f7ff ff5e 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001e68:	200e      	movs	r0, #14
 8001e6a:	f7ff ff5b 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001e6e:	2009      	movs	r0, #9
 8001e70:	f7ff ff58 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001e74:	2054      	movs	r0, #84	; 0x54
 8001e76:	f7ff ff55 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001e7a:	20a8      	movs	r0, #168	; 0xa8
 8001e7c:	f7ff ff52 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001e80:	2046      	movs	r0, #70	; 0x46
 8001e82:	f7ff ff4f 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001e86:	200c      	movs	r0, #12
 8001e88:	f7ff ff4c 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001e8c:	2017      	movs	r0, #23
 8001e8e:	f7ff ff49 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001e92:	2009      	movs	r0, #9
 8001e94:	f7ff ff46 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001e98:	200f      	movs	r0, #15
 8001e9a:	f7ff ff43 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001e9e:	2007      	movs	r0, #7
 8001ea0:	f7ff ff40 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff ff3d 	bl	8001d24 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001eaa:	20e1      	movs	r0, #225	; 0xe1
 8001eac:	f7ff ff2c 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff ff37 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001eb6:	2019      	movs	r0, #25
 8001eb8:	f7ff ff34 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001ebc:	201b      	movs	r0, #27
 8001ebe:	f7ff ff31 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001ec2:	2004      	movs	r0, #4
 8001ec4:	f7ff ff2e 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001ec8:	2010      	movs	r0, #16
 8001eca:	f7ff ff2b 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001ece:	2007      	movs	r0, #7
 8001ed0:	f7ff ff28 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001ed4:	202a      	movs	r0, #42	; 0x2a
 8001ed6:	f7ff ff25 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001eda:	2047      	movs	r0, #71	; 0x47
 8001edc:	f7ff ff22 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001ee0:	2039      	movs	r0, #57	; 0x39
 8001ee2:	f7ff ff1f 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	f7ff ff1c 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001eec:	2006      	movs	r0, #6
 8001eee:	f7ff ff19 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001ef2:	2006      	movs	r0, #6
 8001ef4:	f7ff ff16 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001ef8:	2030      	movs	r0, #48	; 0x30
 8001efa:	f7ff ff13 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001efe:	2038      	movs	r0, #56	; 0x38
 8001f00:	f7ff ff10 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001f04:	200f      	movs	r0, #15
 8001f06:	f7ff ff0d 	bl	8001d24 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001f0a:	2036      	movs	r0, #54	; 0x36
 8001f0c:	f7ff fefc 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001f10:	20c8      	movs	r0, #200	; 0xc8
 8001f12:	f7ff ff07 	bl	8001d24 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001f16:	202a      	movs	r0, #42	; 0x2a
 8001f18:	f7ff fef6 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff ff01 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7ff fefe 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f7ff fefb 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001f2e:	20ef      	movs	r0, #239	; 0xef
 8001f30:	f7ff fef8 	bl	8001d24 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001f34:	202b      	movs	r0, #43	; 0x2b
 8001f36:	f7ff fee7 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff fef2 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff feef 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7ff feec 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001f4c:	203f      	movs	r0, #63	; 0x3f
 8001f4e:	f7ff fee9 	bl	8001d24 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8001f52:	203a      	movs	r0, #58	; 0x3a
 8001f54:	f7ff fed8 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001f58:	2055      	movs	r0, #85	; 0x55
 8001f5a:	f7ff fee3 	bl	8001d24 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001f5e:	2011      	movs	r0, #17
 8001f60:	f7ff fed2 	bl	8001d08 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <LCD_REG_Config+0x230>)
 8001f66:	f7ff fe73 	bl	8001c50 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001f6a:	2029      	movs	r0, #41	; 0x29
 8001f6c:	f7ff fecc 	bl	8001d08 <LCD_Write_Cmd>
	
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	0002bffc 	.word	0x0002bffc

08001f78 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4604      	mov	r4, r0
 8001f80:	4608      	mov	r0, r1
 8001f82:	4611      	mov	r1, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	4623      	mov	r3, r4
 8001f88:	80fb      	strh	r3, [r7, #6]
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80bb      	strh	r3, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]
 8001f92:	4613      	mov	r3, r2
 8001f94:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001f96:	202a      	movs	r0, #42	; 0x2a
 8001f98:	f7ff feb6 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff febe 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff feb8 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001fb4:	88fa      	ldrh	r2, [r7, #6]
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	121b      	asrs	r3, r3, #8
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff feaf 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fea4 	bl	8001d24 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001fdc:	202b      	movs	r0, #43	; 0x2b
 8001fde:	f7ff fe93 	bl	8001d08 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001fe2:	88bb      	ldrh	r3, [r7, #4]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fe9b 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001fee:	88bb      	ldrh	r3, [r7, #4]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fe95 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001ffa:	88ba      	ldrh	r2, [r7, #4]
 8001ffc:	883b      	ldrh	r3, [r7, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	3b01      	subs	r3, #1
 8002002:	121b      	asrs	r3, r3, #8
 8002004:	b29b      	uxth	r3, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fe8c 	bl	8001d24 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800200c:	88ba      	ldrh	r2, [r7, #4]
 800200e:	883b      	ldrh	r3, [r7, #0]
 8002010:	4413      	add	r3, r2
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	b29b      	uxth	r3, r3
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fe81 	bl	8001d24 <LCD_Write_Data>
	
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}

0800202a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800203a:	202c      	movs	r0, #44	; 0x2c
 800203c:	f7ff fe64 	bl	8001d08 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e006      	b.n	8002054 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fe6b 	bl	8001d24 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3301      	adds	r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d3f4      	bcc.n	8002046 <LCD_FillColor+0x1c>
		
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8002066:	b590      	push	{r4, r7, lr}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	4604      	mov	r4, r0
 800206e:	4608      	mov	r0, r1
 8002070:	4611      	mov	r1, r2
 8002072:	461a      	mov	r2, r3
 8002074:	4623      	mov	r3, r4
 8002076:	80fb      	strh	r3, [r7, #6]
 8002078:	4603      	mov	r3, r0
 800207a:	80bb      	strh	r3, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	4613      	mov	r3, r2
 8002082:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8002084:	883b      	ldrh	r3, [r7, #0]
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	88b9      	ldrh	r1, [r7, #4]
 800208a:	88f8      	ldrh	r0, [r7, #6]
 800208c:	f7ff ff74 	bl	8001f78 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8002090:	887b      	ldrh	r3, [r7, #2]
 8002092:	883a      	ldrh	r2, [r7, #0]
 8002094:	fb02 f303 	mul.w	r3, r2, r3
 8002098:	461a      	mov	r2, r3
 800209a:	8b3b      	ldrh	r3, [r7, #24]
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f7ff ffc3 	bl	800202a <LCD_FillColor>
	
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}

080020ac <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
 80020b6:	460b      	mov	r3, r1
 80020b8:	80bb      	strh	r3, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	3b20      	subs	r3, #32
 80020c2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80020c4:	88b9      	ldrh	r1, [r7, #4]
 80020c6:	88f8      	ldrh	r0, [r7, #6]
 80020c8:	2310      	movs	r3, #16
 80020ca:	2208      	movs	r2, #8
 80020cc:	f7ff ff54 	bl	8001f78 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80020d0:	202c      	movs	r0, #44	; 0x2c
 80020d2:	f7ff fe19 	bl	8001d08 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80020d6:	2300      	movs	r3, #0
 80020d8:	73bb      	strb	r3, [r7, #14]
 80020da:	e023      	b.n	8002124 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80020dc:	7b3a      	ldrb	r2, [r7, #12]
 80020de:	7bbb      	ldrb	r3, [r7, #14]
 80020e0:	4914      	ldr	r1, [pc, #80]	; (8002134 <LCD_DrawChar+0x88>)
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	440a      	add	r2, r1
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80020ec:	2300      	movs	r3, #0
 80020ee:	737b      	strb	r3, [r7, #13]
 80020f0:	e012      	b.n	8002118 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80020fc:	201f      	movs	r0, #31
 80020fe:	f7ff fe11 	bl	8001d24 <LCD_Write_Data>
 8002102:	e003      	b.n	800210c <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8002104:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002108:	f7ff fe0c 	bl	8001d24 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002112:	7b7b      	ldrb	r3, [r7, #13]
 8002114:	3301      	adds	r3, #1
 8002116:	737b      	strb	r3, [r7, #13]
 8002118:	7b7b      	ldrb	r3, [r7, #13]
 800211a:	2b07      	cmp	r3, #7
 800211c:	d9e9      	bls.n	80020f2 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800211e:	7bbb      	ldrb	r3, [r7, #14]
 8002120:	3301      	adds	r3, #1
 8002122:	73bb      	strb	r3, [r7, #14]
 8002124:	7bbb      	ldrb	r3, [r7, #14]
 8002126:	2b0f      	cmp	r3, #15
 8002128:	d9d8      	bls.n	80020dc <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800212a:	bf00      	nop
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	0800c51c 	.word	0x0800c51c

08002138 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	603a      	str	r2, [r7, #0]
 8002142:	80fb      	strh	r3, [r7, #6]
 8002144:	460b      	mov	r3, r1
 8002146:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8002148:	e01c      	b.n	8002184 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	2be8      	cmp	r3, #232	; 0xe8
 800214e:	d904      	bls.n	800215a <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002150:	2300      	movs	r3, #0
 8002152:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8002154:	88bb      	ldrh	r3, [r7, #4]
 8002156:	3310      	adds	r3, #16
 8002158:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800215a:	88bb      	ldrh	r3, [r7, #4]
 800215c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002160:	d903      	bls.n	800216a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002162:	2300      	movs	r3, #0
 8002164:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8002166:	2300      	movs	r3, #0
 8002168:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	88b9      	ldrh	r1, [r7, #4]
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff9a 	bl	80020ac <LCD_DrawChar>
		
		pStr ++;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	3308      	adds	r3, #8
 8002182:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1de      	bne.n	800214a <LCD_DrawString+0x12>
		
	}
	
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <LCD_DrawChar_Color>:
{	

}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	4604      	mov	r4, r0
 80021a0:	4608      	mov	r0, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	4623      	mov	r3, r4
 80021a8:	80fb      	strh	r3, [r7, #6]
 80021aa:	4603      	mov	r3, r0
 80021ac:	80bb      	strh	r3, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	70fb      	strb	r3, [r7, #3]
 80021b2:	4613      	mov	r3, r2
 80021b4:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	3b20      	subs	r3, #32
 80021ba:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80021bc:	88b9      	ldrh	r1, [r7, #4]
 80021be:	88f8      	ldrh	r0, [r7, #6]
 80021c0:	2310      	movs	r3, #16
 80021c2:	2208      	movs	r2, #8
 80021c4:	f7ff fed8 	bl	8001f78 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80021c8:	202c      	movs	r0, #44	; 0x2c
 80021ca:	f7ff fd9d 	bl	8001d08 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80021ce:	2300      	movs	r3, #0
 80021d0:	73bb      	strb	r3, [r7, #14]
 80021d2:	e024      	b.n	800221e <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80021d4:	7b3a      	ldrb	r2, [r7, #12]
 80021d6:	7bbb      	ldrb	r3, [r7, #14]
 80021d8:	4915      	ldr	r1, [pc, #84]	; (8002230 <LCD_DrawChar_Color+0x98>)
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	440a      	add	r2, r1
 80021de:	4413      	add	r3, r2
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80021e4:	2300      	movs	r3, #0
 80021e6:	737b      	strb	r3, [r7, #13]
 80021e8:	e013      	b.n	8002212 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80021f4:	8c3b      	ldrh	r3, [r7, #32]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fd94 	bl	8001d24 <LCD_Write_Data>
 80021fc:	e003      	b.n	8002206 <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 80021fe:	883b      	ldrh	r3, [r7, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fd8f 	bl	8001d24 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800220c:	7b7b      	ldrb	r3, [r7, #13]
 800220e:	3301      	adds	r3, #1
 8002210:	737b      	strb	r3, [r7, #13]
 8002212:	7b7b      	ldrb	r3, [r7, #13]
 8002214:	2b07      	cmp	r3, #7
 8002216:	d9e8      	bls.n	80021ea <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002218:	7bbb      	ldrb	r3, [r7, #14]
 800221a:	3301      	adds	r3, #1
 800221c:	73bb      	strb	r3, [r7, #14]
 800221e:	7bbb      	ldrb	r3, [r7, #14]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d9d7      	bls.n	80021d4 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bd90      	pop	{r4, r7, pc}
 800222e:	bf00      	nop
 8002230:	0800c51c 	.word	0x0800c51c

08002234 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af02      	add	r7, sp, #8
 800223a:	4603      	mov	r3, r0
 800223c:	460a      	mov	r2, r1
 800223e:	80fb      	strh	r3, [r7, #6]
 8002240:	4613      	mov	r3, r2
 8002242:	80bb      	strh	r3, [r7, #4]
  LCD_Clear ( usX - 10, usY, 20, 1, RED);
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	3b0a      	subs	r3, #10
 8002248:	b298      	uxth	r0, r3
 800224a:	88b9      	ldrh	r1, [r7, #4]
 800224c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2301      	movs	r3, #1
 8002254:	2214      	movs	r2, #20
 8002256:	f7ff ff06 	bl	8002066 <LCD_Clear>
  LCD_Clear ( usX, usY - 10, 1, 20, RED);
 800225a:	88bb      	ldrh	r3, [r7, #4]
 800225c:	3b0a      	subs	r3, #10
 800225e:	b299      	uxth	r1, r3
 8002260:	88f8      	ldrh	r0, [r7, #6]
 8002262:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2314      	movs	r3, #20
 800226a:	2201      	movs	r2, #1
 800226c:	f7ff fefb 	bl	8002066 <LCD_Clear>
	
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b087      	sub	sp, #28
 800227c:	af02      	add	r7, sp, #8
 800227e:	60ba      	str	r2, [r7, #8]
 8002280:	461a      	mov	r2, r3
 8002282:	4603      	mov	r3, r0
 8002284:	81fb      	strh	r3, [r7, #14]
 8002286:	460b      	mov	r3, r1
 8002288:	81bb      	strh	r3, [r7, #12]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800228e:	e01f      	b.n	80022d0 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8002290:	89fb      	ldrh	r3, [r7, #14]
 8002292:	2be8      	cmp	r3, #232	; 0xe8
 8002294:	d904      	bls.n	80022a0 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002296:	2300      	movs	r3, #0
 8002298:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 800229a:	89bb      	ldrh	r3, [r7, #12]
 800229c:	3310      	adds	r3, #16
 800229e:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80022a0:	89bb      	ldrh	r3, [r7, #12]
 80022a2:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80022a6:	d903      	bls.n	80022b0 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80022a8:	2300      	movs	r3, #0
 80022aa:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	88fc      	ldrh	r4, [r7, #6]
 80022b6:	89b9      	ldrh	r1, [r7, #12]
 80022b8:	89f8      	ldrh	r0, [r7, #14]
 80022ba:	8c3b      	ldrh	r3, [r7, #32]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4623      	mov	r3, r4
 80022c0:	f7ff ff6a 	bl	8002198 <LCD_DrawChar_Color>
		
		pStr ++;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	3301      	adds	r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 80022ca:	89fb      	ldrh	r3, [r7, #14]
 80022cc:	3308      	adds	r3, #8
 80022ce:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1db      	bne.n	8002290 <LCD_DrawString_Color+0x18>
		
	}
	
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd90      	pop	{r4, r7, pc}
	...

080022e4 <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	f200 80a0 	bhi.w	8002438 <LCD_GramScan+0x154>
 80022f8:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <LCD_GramScan+0x1c>)
 80022fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fe:	bf00      	nop
 8002300:	08002311 	.word	0x08002311
 8002304:	0800235b 	.word	0x0800235b
 8002308:	080023a5 	.word	0x080023a5
 800230c:	080023ef 	.word	0x080023ef

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 8002310:	2036      	movs	r0, #54	; 0x36
 8002312:	f7ff fcf9 	bl	8001d08 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 8002316:	20c8      	movs	r0, #200	; 0xc8
 8002318:	f7ff fd04 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 800231c:	202a      	movs	r0, #42	; 0x2a
 800231e:	f7ff fcf3 	bl	8001d08 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 8002322:	2000      	movs	r0, #0
 8002324:	f7ff fcfe 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002328:	2000      	movs	r0, #0
 800232a:	f7ff fcfb 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff fcf8 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 8002334:	20ef      	movs	r0, #239	; 0xef
 8002336:	f7ff fcf5 	bl	8001d24 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 800233a:	202b      	movs	r0, #43	; 0x2b
 800233c:	f7ff fce4 	bl	8001d08 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 8002340:	2000      	movs	r0, #0
 8002342:	f7ff fcef 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002346:	2000      	movs	r0, #0
 8002348:	f7ff fcec 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 800234c:	2001      	movs	r0, #1
 800234e:	f7ff fce9 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 8002352:	203f      	movs	r0, #63	; 0x3f
 8002354:	f7ff fce6 	bl	8001d24 <LCD_Write_Data>
					
		  break;
 8002358:	e06e      	b.n	8002438 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 800235a:	2036      	movs	r0, #54	; 0x36
 800235c:	f7ff fcd4 	bl	8001d08 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 8002360:	2068      	movs	r0, #104	; 0x68
 8002362:	f7ff fcdf 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8002366:	202a      	movs	r0, #42	; 0x2a
 8002368:	f7ff fcce 	bl	8001d08 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff fcd9 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff fcd6 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8002378:	2001      	movs	r0, #1
 800237a:	f7ff fcd3 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 800237e:	203f      	movs	r0, #63	; 0x3f
 8002380:	f7ff fcd0 	bl	8001d24 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002384:	202b      	movs	r0, #43	; 0x2b
 8002386:	f7ff fcbf 	bl	8001d08 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 800238a:	2000      	movs	r0, #0
 800238c:	f7ff fcca 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002390:	2000      	movs	r0, #0
 8002392:	f7ff fcc7 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002396:	2000      	movs	r0, #0
 8002398:	f7ff fcc4 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 800239c:	20ef      	movs	r0, #239	; 0xef
 800239e:	f7ff fcc1 	bl	8001d24 <LCD_Write_Data>
		
		  break;
 80023a2:	e049      	b.n	8002438 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 80023a4:	2036      	movs	r0, #54	; 0x36
 80023a6:	f7ff fcaf 	bl	8001d08 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 80023aa:	2028      	movs	r0, #40	; 0x28
 80023ac:	f7ff fcba 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80023b0:	202a      	movs	r0, #42	; 0x2a
 80023b2:	f7ff fca9 	bl	8001d08 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7ff fcb4 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80023bc:	2000      	movs	r0, #0
 80023be:	f7ff fcb1 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 80023c2:	2001      	movs	r0, #1
 80023c4:	f7ff fcae 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 80023c8:	203f      	movs	r0, #63	; 0x3f
 80023ca:	f7ff fcab 	bl	8001d24 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 80023ce:	202b      	movs	r0, #43	; 0x2b
 80023d0:	f7ff fc9a 	bl	8001d08 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7ff fca5 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80023da:	2000      	movs	r0, #0
 80023dc:	f7ff fca2 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7ff fc9f 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 80023e6:	20ef      	movs	r0, #239	; 0xef
 80023e8:	f7ff fc9c 	bl	8001d24 <LCD_Write_Data>
		  
		  break;
 80023ec:	e024      	b.n	8002438 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 80023ee:	2036      	movs	r0, #54	; 0x36
 80023f0:	f7ff fc8a 	bl	8001d08 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 80023f4:	2048      	movs	r0, #72	; 0x48
 80023f6:	f7ff fc95 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 80023fa:	202a      	movs	r0, #42	; 0x2a
 80023fc:	f7ff fc84 	bl	8001d08 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff fc8f 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002406:	2000      	movs	r0, #0
 8002408:	f7ff fc8c 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 800240c:	2000      	movs	r0, #0
 800240e:	f7ff fc89 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 8002412:	20ef      	movs	r0, #239	; 0xef
 8002414:	f7ff fc86 	bl	8001d24 <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8002418:	202b      	movs	r0, #43	; 0x2b
 800241a:	f7ff fc75 	bl	8001d08 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 800241e:	2000      	movs	r0, #0
 8002420:	f7ff fc80 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8002424:	2000      	movs	r0, #0
 8002426:	f7ff fc7d 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 800242a:	2001      	movs	r0, #1
 800242c:	f7ff fc7a 	bl	8001d24 <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8002430:	203f      	movs	r0, #63	; 0x3f
 8002432:	f7ff fc77 	bl	8001d24 <LCD_Write_Data>
		
	    break;
 8002436:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8002438:	202c      	movs	r0, #44	; 0x2c
 800243a:	f7ff fc65 	bl	8001d08 <LCD_Write_Cmd>
	
	
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop

08002448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b098      	sub	sp, #96	; 0x60
 800244c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	//For VL53L1X ToF Sensor
	uint8_t byteData, sensorState=0;
 800244e:	2300      	movs	r3, #0
 8002450:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t wordData;
	uint8_t ToFSensor = 1; // 0=Left, 1=Center(default), 2=Right
 8002454:	2301      	movs	r3, #1
 8002456:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800245a:	f002 f8a3 	bl	80045a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800245e:	f000 fadf 	bl	8002a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002462:	f000 fc8b 	bl	8002d7c <MX_GPIO_Init>
  MX_FSMC_Init();
 8002466:	f000 fd21 	bl	8002eac <MX_FSMC_Init>
  MX_DMA_Init();
 800246a:	f000 fc69 	bl	8002d40 <MX_DMA_Init>
  MX_I2C2_Init();
 800246e:	f000 fb4b 	bl	8002b08 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002472:	f000 fb77 	bl	8002b64 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002476:	f000 fc15 	bl	8002ca4 <MX_TIM3_Init>
  MX_I2C1_Init();
 800247a:	f000 fb17 	bl	8002aac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Set_LED(0, 255, 255, 0);
 800247e:	2300      	movs	r3, #0
 8002480:	22ff      	movs	r2, #255	; 0xff
 8002482:	21ff      	movs	r1, #255	; 0xff
 8002484:	2000      	movs	r0, #0
 8002486:	f001 f999 	bl	80037bc <Set_LED>
  WS2812_Send();
 800248a:	f001 f9c3 	bl	8003814 <WS2812_Send>

  MPU6050_Initialize(&hi2c2);
 800248e:	48c0      	ldr	r0, [pc, #768]	; (8002790 <main+0x348>)
 8002490:	f006 fcba 	bl	8008e08 <MPU6050_Initialize>
  MPU6050_SetScaleAccelRange(&hi2c2, MPU6050_ACCEL_RANGE_8_G);
 8002494:	2110      	movs	r1, #16
 8002496:	48be      	ldr	r0, [pc, #760]	; (8002790 <main+0x348>)
 8002498:	f006 fd14 	bl	8008ec4 <MPU6050_SetScaleAccelRange>
  MPU6050_SetScaleGyroRange(&hi2c2, MPU6050_GYRO_RANGE_2000_DEG);
 800249c:	2118      	movs	r1, #24
 800249e:	48bc      	ldr	r0, [pc, #752]	; (8002790 <main+0x348>)
 80024a0:	f006 fd2c 	bl	8008efc <MPU6050_SetScaleGyroRange>

  macXPT2046_CS_DISABLE();
 80024a4:	2200      	movs	r2, #0
 80024a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024aa:	48ba      	ldr	r0, [pc, #744]	; (8002794 <main+0x34c>)
 80024ac:	f003 f801 	bl	80054b2 <HAL_GPIO_WritePin>
//  __HAL_RCC_I2C2_CLK_DISABLE();
//  __HAL_RCC_FSMC_CLK_ENABLE();

  LCD_INIT();
 80024b0:	f7ff fbdf 	bl	8001c72 <LCD_INIT>

  LCD_Clear (50, 80, 140, 70, RED);
 80024b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2346      	movs	r3, #70	; 0x46
 80024bc:	228c      	movs	r2, #140	; 0x8c
 80024be:	2150      	movs	r1, #80	; 0x50
 80024c0:	2032      	movs	r0, #50	; 0x32
 80024c2:	f7ff fdd0 	bl	8002066 <LCD_Clear>
  LCD_DrawString(65, 105, "SmartBike DEMO");
 80024c6:	4ab4      	ldr	r2, [pc, #720]	; (8002798 <main+0x350>)
 80024c8:	2169      	movs	r1, #105	; 0x69
 80024ca:	2041      	movs	r0, #65	; 0x41
 80024cc:	f7ff fe34 	bl	8002138 <LCD_DrawString>
  HAL_Delay(1000);
 80024d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024d4:	f002 f8c8 	bl	8004668 <HAL_Delay>

  while( ! XPT2046_Touch_Calibrate () );
 80024d8:	bf00      	nop
 80024da:	f001 fd75 	bl	8003fc8 <XPT2046_Touch_Calibrate>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0fa      	beq.n	80024da <main+0x92>

  LCD_GramScan ( 1 );
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7ff fefd 	bl	80022e4 <LCD_GramScan>
  LCD_Clear ( 0, 0, 240, 320, WHITE );
 80024ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80024f4:	22f0      	movs	r2, #240	; 0xf0
 80024f6:	2100      	movs	r1, #0
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7ff fdb4 	bl	8002066 <LCD_Clear>
  LCD_Clear ( 90,  230,  60, 60, BLUE	);
 80024fe:	231f      	movs	r3, #31
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	233c      	movs	r3, #60	; 0x3c
 8002504:	223c      	movs	r2, #60	; 0x3c
 8002506:	21e6      	movs	r1, #230	; 0xe6
 8002508:	205a      	movs	r0, #90	; 0x5a
 800250a:	f7ff fdac 	bl	8002066 <LCD_Clear>
  LCD_Clear ( 30,  230,  60, 60,  YELLOW);
 800250e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	233c      	movs	r3, #60	; 0x3c
 8002516:	223c      	movs	r2, #60	; 0x3c
 8002518:	21e6      	movs	r1, #230	; 0xe6
 800251a:	201e      	movs	r0, #30
 800251c:	f7ff fda3 	bl	8002066 <LCD_Clear>
  LCD_Clear ( 150,  230,  60, 60, YELLOW);
 8002520:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	233c      	movs	r3, #60	; 0x3c
 8002528:	223c      	movs	r2, #60	; 0x3c
 800252a:	21e6      	movs	r1, #230	; 0xe6
 800252c:	2096      	movs	r0, #150	; 0x96
 800252e:	f7ff fd9a 	bl	8002066 <LCD_Clear>
  char buf[9];
//  char text[10];
  float Ax, Ay, Az, Gx, Gy, Gz;

  strType_XPT2046_Coordinate touchCoordinate[4];
  int touchFlag = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	657b      	str	r3, [r7, #84]	; 0x54
  int SafetyStatus = 0;	// 0: Save, 1: Caution, 2: Response needed, 3: Danger
 8002536:	2300      	movs	r3, #0
 8002538:	64fb      	str	r3, [r7, #76]	; 0x4c


  /*
   * Init of RPM Counter with timer and A3144 Hall effect sensor
   * */
  a3144_Init();
 800253a:	f7ff fb63 	bl	8001c04 <a3144_Init>
  float rotSpeed = 0;
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	64bb      	str	r3, [r7, #72]	; 0x48
  float tempSpeed = 0;
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	647b      	str	r3, [r7, #68]	; 0x44

  /*
   * VL53L1X ToF Sensor init sequence
   * */

  VL53L1X_SensorInit(dev);
 800254a:	4b94      	ldr	r3, [pc, #592]	; (800279c <main+0x354>)
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fe4a 	bl	80011e8 <VL53L1X_SensorInit>
  ToFSensor =  1; // Select ToFSensor: 0=Left, 1=Center, 2=Right
 8002554:	2301      	movs	r3, #1
 8002556:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
//  status = XNUCLEO53L1A1_ResetId(ToFSensor, 0); // Reset ToF sensor
//  HAL_Delay(2);
//  status = XNUCLEO53L1A1_ResetId(ToFSensor, 1); // Reset ToF sensor
  HAL_Delay(2);
 800255a:	2002      	movs	r0, #2
 800255c:	f002 f884 	bl	8004668 <HAL_Delay>

  /* Those basic I2C read functions can be used to check your own I2C functions */
    status = VL53L1_RdByte(dev, 0x010F, &byteData);
 8002560:	4b8e      	ldr	r3, [pc, #568]	; (800279c <main+0x354>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8002568:	f240 110f 	movw	r1, #271	; 0x10f
 800256c:	4618      	mov	r0, r3
 800256e:	f001 f897 	bl	80036a0 <VL53L1_RdByte>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	4b8a      	ldr	r3, [pc, #552]	; (80027a0 <main+0x358>)
 8002578:	601a      	str	r2, [r3, #0]
//    printf("VL53L1X Model_ID: %X\n", byteData);
    status = VL53L1_RdByte(dev, 0x0110, &byteData);
 800257a:	4b88      	ldr	r3, [pc, #544]	; (800279c <main+0x354>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8002582:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002586:	4618      	mov	r0, r3
 8002588:	f001 f88a 	bl	80036a0 <VL53L1_RdByte>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	4b83      	ldr	r3, [pc, #524]	; (80027a0 <main+0x358>)
 8002592:	601a      	str	r2, [r3, #0]
//    printf("VL53L1X Module_Type: %X\n", byteData);
    status = VL53L1_RdWord(dev, 0x010F, &wordData);
 8002594:	4b81      	ldr	r3, [pc, #516]	; (800279c <main+0x354>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800259c:	f240 110f 	movw	r1, #271	; 0x10f
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 f8b5 	bl	8003710 <VL53L1_RdWord>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b7d      	ldr	r3, [pc, #500]	; (80027a0 <main+0x358>)
 80025ac:	601a      	str	r2, [r3, #0]
//    printf("VL53L1X: %X\n", wordData);
    while(sensorState==0){
 80025ae:	e00e      	b.n	80025ce <main+0x186>
  		status = VL53L1X_BootState(dev, &sensorState);
 80025b0:	4b7a      	ldr	r3, [pc, #488]	; (800279c <main+0x354>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff f9c8 	bl	8001950 <VL53L1X_BootState>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b76      	ldr	r3, [pc, #472]	; (80027a0 <main+0x358>)
 80025c6:	601a      	str	r2, [r3, #0]
  		HAL_Delay(2);
 80025c8:	2002      	movs	r0, #2
 80025ca:	f002 f84d 	bl	8004668 <HAL_Delay>
    while(sensorState==0){
 80025ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0ec      	beq.n	80025b0 <main+0x168>
    }
//    printf("Chip booted\n");

    /* This function must to be called to initialize the sensor with the default setting  */
    status = VL53L1X_SensorInit(dev);
 80025d6:	4b71      	ldr	r3, [pc, #452]	; (800279c <main+0x354>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fe04 	bl	80011e8 <VL53L1X_SensorInit>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b6e      	ldr	r3, [pc, #440]	; (80027a0 <main+0x358>)
 80025e6:	601a      	str	r2, [r3, #0]
    /* Optional functions to be used to change the main ranging parameters according the application requirements to get the best ranging performances */
    status = VL53L1X_SetDistanceMode(dev, 2); /* 1=short, 2=long */
 80025e8:	4b6c      	ldr	r3, [pc, #432]	; (800279c <main+0x354>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	2102      	movs	r1, #2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff f8aa 	bl	8001748 <VL53L1X_SetDistanceMode>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b69      	ldr	r3, [pc, #420]	; (80027a0 <main+0x358>)
 80025fa:	601a      	str	r2, [r3, #0]
    status = VL53L1X_SetTimingBudgetInMs(dev, 100); /* in ms possible values [20, 50, 100, 200, 500] */
 80025fc:	4b67      	ldr	r3, [pc, #412]	; (800279c <main+0x354>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	2164      	movs	r1, #100	; 0x64
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe ff05 	bl	8001412 <VL53L1X_SetTimingBudgetInMs>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	4b64      	ldr	r3, [pc, #400]	; (80027a0 <main+0x358>)
 800260e:	601a      	str	r2, [r3, #0]
    status = VL53L1X_SetInterMeasurementInMs(dev, 100); /* in ms, IM must be > = TB */
 8002610:	4b62      	ldr	r3, [pc, #392]	; (800279c <main+0x354>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	2164      	movs	r1, #100	; 0x64
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f95e 	bl	80018d8 <VL53L1X_SetInterMeasurementInMs>
 800261c:	4603      	mov	r3, r0
 800261e:	461a      	mov	r2, r3
 8002620:	4b5f      	ldr	r3, [pc, #380]	; (80027a0 <main+0x358>)
 8002622:	601a      	str	r2, [r3, #0]
  //  status = VL53L1X_SetOffset(dev,20); /* offset compensation in mm */
  //  status = VL53L1X_SetROI(dev, 16, 16); /* minimum ROI 4,4 */
  //	status = VL53L1X_CalibrateOffset(dev, 140, &offset); /* may take few second to perform the offset cal*/
  //	status = VL53L1X_CalibrateXtalk(dev, 1000, &xtalk); /* may take few second to perform the xtalk cal */
//    printf("VL53L1X Ultra Lite Driver Example running ...\n");
    status = VL53L1X_StartRanging(dev);   /* This function has to be called to enable the ranging */
 8002624:	4b5d      	ldr	r3, [pc, #372]	; (800279c <main+0x354>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fe8b 	bl	8001344 <VL53L1X_StartRanging>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <main+0x358>)
 8002634:	601a      	str	r2, [r3, #0]

    LCD_DrawString(10, 0, "Finish setting up VL53L1X");
 8002636:	4a5b      	ldr	r2, [pc, #364]	; (80027a4 <main+0x35c>)
 8002638:	2100      	movs	r1, #0
 800263a:	200a      	movs	r0, #10
 800263c:	f7ff fd7c 	bl	8002138 <LCD_DrawString>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  MPU6050_Read_DeviceID(&hi2c2);
	  MPU6050_Read_Gyro(&hi2c2);
 8002640:	4853      	ldr	r0, [pc, #332]	; (8002790 <main+0x348>)
 8002642:	f006 fded 	bl	8009220 <MPU6050_Read_Gyro>
	  MPU6050_Read_Accel(&hi2c2);
 8002646:	4852      	ldr	r0, [pc, #328]	; (8002790 <main+0x348>)
 8002648:	f006 fc74 	bl	8008f34 <MPU6050_Read_Accel>
//	  MPU6050_Read_Temp(&hi2c2);
//	  HAL_Delay(500);

	  Ax = MPU6050_Ax;
 800264c:	4b56      	ldr	r3, [pc, #344]	; (80027a8 <main+0x360>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	643b      	str	r3, [r7, #64]	; 0x40
	  Ay = MPU6050_Ay;
 8002652:	4b56      	ldr	r3, [pc, #344]	; (80027ac <main+0x364>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	63fb      	str	r3, [r7, #60]	; 0x3c
	  Az = MPU6050_Az;
 8002658:	4b55      	ldr	r3, [pc, #340]	; (80027b0 <main+0x368>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	63bb      	str	r3, [r7, #56]	; 0x38

	  Gx = MPU6050_Gx;
 800265e:	4b55      	ldr	r3, [pc, #340]	; (80027b4 <main+0x36c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
	  Gy = MPU6050_Gy;
 8002664:	4b54      	ldr	r3, [pc, #336]	; (80027b8 <main+0x370>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	633b      	str	r3, [r7, #48]	; 0x30
	  Gz = MPU6050_Gz;
 800266a:	4b54      	ldr	r3, [pc, #336]	; (80027bc <main+0x374>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c

	  sprintf(buf, "Ax: %0.2f", Ax);
 8002670:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002672:	f7fd ff45 	bl	8000500 <__aeabi_f2d>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	f107 0014 	add.w	r0, r7, #20
 800267e:	4950      	ldr	r1, [pc, #320]	; (80027c0 <main+0x378>)
 8002680:	f007 fbec 	bl	8009e5c <siprintf>
	  LCD_DrawString(20, 20, buf);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	461a      	mov	r2, r3
 800268a:	2114      	movs	r1, #20
 800268c:	2014      	movs	r0, #20
 800268e:	f7ff fd53 	bl	8002138 <LCD_DrawString>

	  sprintf(buf, "Ay: %0.2f", Ay);
 8002692:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002694:	f7fd ff34 	bl	8000500 <__aeabi_f2d>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	f107 0014 	add.w	r0, r7, #20
 80026a0:	4948      	ldr	r1, [pc, #288]	; (80027c4 <main+0x37c>)
 80026a2:	f007 fbdb 	bl	8009e5c <siprintf>
	  LCD_DrawString(20, 40, buf);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	461a      	mov	r2, r3
 80026ac:	2128      	movs	r1, #40	; 0x28
 80026ae:	2014      	movs	r0, #20
 80026b0:	f7ff fd42 	bl	8002138 <LCD_DrawString>

	  sprintf(buf, "Az: %0.2f", Az);
 80026b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026b6:	f7fd ff23 	bl	8000500 <__aeabi_f2d>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	f107 0014 	add.w	r0, r7, #20
 80026c2:	4941      	ldr	r1, [pc, #260]	; (80027c8 <main+0x380>)
 80026c4:	f007 fbca 	bl	8009e5c <siprintf>
	  LCD_DrawString(20, 60, buf);
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	461a      	mov	r2, r3
 80026ce:	213c      	movs	r1, #60	; 0x3c
 80026d0:	2014      	movs	r0, #20
 80026d2:	f7ff fd31 	bl	8002138 <LCD_DrawString>

	  sprintf(buf, "Gx: %0.2f", Gx);
 80026d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026d8:	f7fd ff12 	bl	8000500 <__aeabi_f2d>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	f107 0014 	add.w	r0, r7, #20
 80026e4:	4939      	ldr	r1, [pc, #228]	; (80027cc <main+0x384>)
 80026e6:	f007 fbb9 	bl	8009e5c <siprintf>
	  LCD_DrawString(20, 80, buf);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	461a      	mov	r2, r3
 80026f0:	2150      	movs	r1, #80	; 0x50
 80026f2:	2014      	movs	r0, #20
 80026f4:	f7ff fd20 	bl	8002138 <LCD_DrawString>

	  sprintf(buf, "Gy: %0.2f", Gy);
 80026f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026fa:	f7fd ff01 	bl	8000500 <__aeabi_f2d>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	f107 0014 	add.w	r0, r7, #20
 8002706:	4932      	ldr	r1, [pc, #200]	; (80027d0 <main+0x388>)
 8002708:	f007 fba8 	bl	8009e5c <siprintf>
	  LCD_DrawString(20, 100, buf);
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	461a      	mov	r2, r3
 8002712:	2164      	movs	r1, #100	; 0x64
 8002714:	2014      	movs	r0, #20
 8002716:	f7ff fd0f 	bl	8002138 <LCD_DrawString>

	  sprintf(buf, "Gz: %0.2f", Gz);
 800271a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800271c:	f7fd fef0 	bl	8000500 <__aeabi_f2d>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	f107 0014 	add.w	r0, r7, #20
 8002728:	492a      	ldr	r1, [pc, #168]	; (80027d4 <main+0x38c>)
 800272a:	f007 fb97 	bl	8009e5c <siprintf>
	  LCD_DrawString(20, 120, buf);
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	461a      	mov	r2, r3
 8002734:	2178      	movs	r1, #120	; 0x78
 8002736:	2014      	movs	r0, #20
 8002738:	f7ff fcfe 	bl	8002138 <LCD_DrawString>

	  if (Ay < -0.55){
 800273c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800273e:	f7fd fedf 	bl	8000500 <__aeabi_f2d>
 8002742:	a30f      	add	r3, pc, #60	; (adr r3, 8002780 <main+0x338>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f7fe f9a4 	bl	8000a94 <__aeabi_dcmplt>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <main+0x316>
		  LCD_DrawString(80, 140, "Pitch Down");
 8002752:	4a21      	ldr	r2, [pc, #132]	; (80027d8 <main+0x390>)
 8002754:	218c      	movs	r1, #140	; 0x8c
 8002756:	2050      	movs	r0, #80	; 0x50
 8002758:	f7ff fcee 	bl	8002138 <LCD_DrawString>
 800275c:	e045      	b.n	80027ea <main+0x3a2>
	  } else if (Ay > 0.55){
 800275e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002760:	f7fd fece 	bl	8000500 <__aeabi_f2d>
 8002764:	a308      	add	r3, pc, #32	; (adr r3, 8002788 <main+0x340>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	f7fe f9b1 	bl	8000ad0 <__aeabi_dcmpgt>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d035      	beq.n	80027e0 <main+0x398>
		  LCD_DrawString(80, 140, " Pitch up ");
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <main+0x394>)
 8002776:	218c      	movs	r1, #140	; 0x8c
 8002778:	2050      	movs	r0, #80	; 0x50
 800277a:	f7ff fcdd 	bl	8002138 <LCD_DrawString>
 800277e:	e034      	b.n	80027ea <main+0x3a2>
 8002780:	9999999a 	.word	0x9999999a
 8002784:	bfe19999 	.word	0xbfe19999
 8002788:	9999999a 	.word	0x9999999a
 800278c:	3fe19999 	.word	0x3fe19999
 8002790:	200003c0 	.word	0x200003c0
 8002794:	40011400 	.word	0x40011400
 8002798:	0800c350 	.word	0x0800c350
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000250 	.word	0x20000250
 80027a4:	0800c360 	.word	0x0800c360
 80027a8:	2000029c 	.word	0x2000029c
 80027ac:	20000284 	.word	0x20000284
 80027b0:	20000270 	.word	0x20000270
 80027b4:	20000278 	.word	0x20000278
 80027b8:	20000288 	.word	0x20000288
 80027bc:	200002a0 	.word	0x200002a0
 80027c0:	0800c37c 	.word	0x0800c37c
 80027c4:	0800c388 	.word	0x0800c388
 80027c8:	0800c394 	.word	0x0800c394
 80027cc:	0800c3a0 	.word	0x0800c3a0
 80027d0:	0800c3ac 	.word	0x0800c3ac
 80027d4:	0800c3b8 	.word	0x0800c3b8
 80027d8:	0800c3c4 	.word	0x0800c3c4
 80027dc:	0800c3d0 	.word	0x0800c3d0
	  } else{
		  LCD_DrawString(80, 140, "No Pitch  ");
 80027e0:	4a83      	ldr	r2, [pc, #524]	; (80029f0 <main+0x5a8>)
 80027e2:	218c      	movs	r1, #140	; 0x8c
 80027e4:	2050      	movs	r0, #80	; 0x50
 80027e6:	f7ff fca7 	bl	8002138 <LCD_DrawString>
	  }

	  if (Ax < -0.55){
 80027ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027ec:	f7fd fe88 	bl	8000500 <__aeabi_f2d>
 80027f0:	a37b      	add	r3, pc, #492	; (adr r3, 80029e0 <main+0x598>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f7fe f94d 	bl	8000a94 <__aeabi_dcmplt>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <main+0x3c4>
		  LCD_DrawString(90, 160, " Right ");
 8002800:	4a7c      	ldr	r2, [pc, #496]	; (80029f4 <main+0x5ac>)
 8002802:	21a0      	movs	r1, #160	; 0xa0
 8002804:	205a      	movs	r0, #90	; 0x5a
 8002806:	f7ff fc97 	bl	8002138 <LCD_DrawString>
 800280a:	e015      	b.n	8002838 <main+0x3f0>
	  } else if (Ax > 0.55){
 800280c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800280e:	f7fd fe77 	bl	8000500 <__aeabi_f2d>
 8002812:	a375      	add	r3, pc, #468	; (adr r3, 80029e8 <main+0x5a0>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f7fe f95a 	bl	8000ad0 <__aeabi_dcmpgt>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <main+0x3e6>
		  LCD_DrawString(90, 160, " Left ");
 8002822:	4a75      	ldr	r2, [pc, #468]	; (80029f8 <main+0x5b0>)
 8002824:	21a0      	movs	r1, #160	; 0xa0
 8002826:	205a      	movs	r0, #90	; 0x5a
 8002828:	f7ff fc86 	bl	8002138 <LCD_DrawString>
 800282c:	e004      	b.n	8002838 <main+0x3f0>
	  }	else{
		  LCD_DrawString(90, 160, " Still ");
 800282e:	4a73      	ldr	r2, [pc, #460]	; (80029fc <main+0x5b4>)
 8002830:	21a0      	movs	r1, #160	; 0xa0
 8002832:	205a      	movs	r0, #90	; 0x5a
 8002834:	f7ff fc80 	bl	8002138 <LCD_DrawString>
	  }

	  if (Az < 0) {
 8002838:	f04f 0100 	mov.w	r1, #0
 800283c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800283e:	f7fe fcab 	bl	8001198 <__aeabi_fcmplt>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <main+0x416>
		  LCD_DrawString_Color(90, 180, " Crash?? ", RED, BLACK);
 8002848:	2300      	movs	r3, #0
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002850:	4a6b      	ldr	r2, [pc, #428]	; (8002a00 <main+0x5b8>)
 8002852:	21b4      	movs	r1, #180	; 0xb4
 8002854:	205a      	movs	r0, #90	; 0x5a
 8002856:	f7ff fd0f 	bl	8002278 <LCD_DrawString_Color>
		  SafetyStatus = 2;
 800285a:	2302      	movs	r3, #2
 800285c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  }


	  HAL_Delay(200);
 800285e:	20c8      	movs	r0, #200	; 0xc8
 8002860:	f001 ff02 	bl	8004668 <HAL_Delay>

	  if ( touchFlag == 0 )
 8002864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002866:	2b00      	cmp	r3, #0
 8002868:	d144      	bne.n	80028f4 <main+0x4ac>
	  {
		  if ( XPT2046_Get_TouchedPoint ( & touchCoordinate, & strXPT2046_TouchPara ) )
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	4965      	ldr	r1, [pc, #404]	; (8002a04 <main+0x5bc>)
 800286e:	4618      	mov	r0, r3
 8002870:	f001 fdea 	bl	8004448 <XPT2046_Get_TouchedPoint>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d039      	beq.n	80028ee <main+0x4a6>
		  {
			  if ( ( touchCoordinate->y > 232 ) && ( touchCoordinate->y < 282 ) )
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	2be8      	cmp	r3, #232	; 0xe8
 800287e:	d936      	bls.n	80028ee <main+0x4a6>
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8002886:	d232      	bcs.n	80028ee <main+0x4a6>
			  {
				  if ( ( touchCoordinate->x > 95 ) && ( touchCoordinate->x < 145 ) )
 8002888:	88bb      	ldrh	r3, [r7, #4]
 800288a:	2b5f      	cmp	r3, #95	; 0x5f
 800288c:	d91b      	bls.n	80028c6 <main+0x47e>
 800288e:	88bb      	ldrh	r3, [r7, #4]
 8002890:	2b90      	cmp	r3, #144	; 0x90
 8002892:	d818      	bhi.n	80028c6 <main+0x47e>
				  {
					  LCD_DrawString(71, 200, "     Reset    ");
 8002894:	4a5c      	ldr	r2, [pc, #368]	; (8002a08 <main+0x5c0>)
 8002896:	21c8      	movs	r1, #200	; 0xc8
 8002898:	2047      	movs	r0, #71	; 0x47
 800289a:	f7ff fc4d 	bl	8002138 <LCD_DrawString>
					  SafetyStatus = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	64fb      	str	r3, [r7, #76]	; 0x4c
					  LCD_Clear(90, 180, 90, 20, WHITE);
 80028a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2314      	movs	r3, #20
 80028aa:	225a      	movs	r2, #90	; 0x5a
 80028ac:	21b4      	movs	r1, #180	; 0xb4
 80028ae:	205a      	movs	r0, #90	; 0x5a
 80028b0:	f7ff fbd9 	bl	8002066 <LCD_Clear>
					  LCD_Clear(70, 200, 90, 20, WHITE);
 80028b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2314      	movs	r3, #20
 80028bc:	225a      	movs	r2, #90	; 0x5a
 80028be:	21c8      	movs	r1, #200	; 0xc8
 80028c0:	2046      	movs	r0, #70	; 0x46
 80028c2:	f7ff fbd0 	bl	8002066 <LCD_Clear>
				  }

				  if (touchCoordinate->x < 90)
 80028c6:	88bb      	ldrh	r3, [r7, #4]
 80028c8:	2b59      	cmp	r3, #89	; 0x59
 80028ca:	d806      	bhi.n	80028da <main+0x492>
				  {
					  SafetyStatus = 1;
 80028cc:	2301      	movs	r3, #1
 80028ce:	64fb      	str	r3, [r7, #76]	; 0x4c
					  LCD_DrawString(71, 200, "Turning Left! ");
 80028d0:	4a4e      	ldr	r2, [pc, #312]	; (8002a0c <main+0x5c4>)
 80028d2:	21c8      	movs	r1, #200	; 0xc8
 80028d4:	2047      	movs	r0, #71	; 0x47
 80028d6:	f7ff fc2f 	bl	8002138 <LCD_DrawString>
				  }

				  if (touchCoordinate->x > 150)
 80028da:	88bb      	ldrh	r3, [r7, #4]
 80028dc:	2b96      	cmp	r3, #150	; 0x96
 80028de:	d906      	bls.n	80028ee <main+0x4a6>
				  {
					  SafetyStatus = 1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	64fb      	str	r3, [r7, #76]	; 0x4c
					  LCD_DrawString(71, 200, "Turning Right!");
 80028e4:	4a4a      	ldr	r2, [pc, #296]	; (8002a10 <main+0x5c8>)
 80028e6:	21c8      	movs	r1, #200	; 0xc8
 80028e8:	2047      	movs	r0, #71	; 0x47
 80028ea:	f7ff fc25 	bl	8002138 <LCD_DrawString>
				  }
			  }

		  }
		  touchFlag = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	657b      	str	r3, [r7, #84]	; 0x54
 80028f2:	e001      	b.n	80028f8 <main+0x4b0>
	  }
	  else {
//		  LCD_DrawString(70, 200, "..............");
		  touchFlag = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	657b      	str	r3, [r7, #84]	; 0x54
	  }
	  HAL_Delay(50);
 80028f8:	2032      	movs	r0, #50	; 0x32
 80028fa:	f001 feb5 	bl	8004668 <HAL_Delay>



	  rotSpeed = GetRotationSpeed();
 80028fe:	f7ff f94b 	bl	8001b98 <GetRotationSpeed>
 8002902:	64b8      	str	r0, [r7, #72]	; 0x48
	  sprintf(buf, "RotSpeed: %0.2f", rotSpeed);
 8002904:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002906:	f7fd fdfb 	bl	8000500 <__aeabi_f2d>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	f107 0014 	add.w	r0, r7, #20
 8002912:	4940      	ldr	r1, [pc, #256]	; (8002a14 <main+0x5cc>)
 8002914:	f007 faa2 	bl	8009e5c <siprintf>
	  LCD_DrawString(30, 0, buf);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	461a      	mov	r2, r3
 800291e:	2100      	movs	r1, #0
 8002920:	201e      	movs	r0, #30
 8002922:	f7ff fc09 	bl	8002138 <LCD_DrawString>

	  while (dataReady == 0){
 8002926:	e00e      	b.n	8002946 <main+0x4fe>
		  status = VL53L1X_CheckForDataReady(dev, &dataReady);
 8002928:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <main+0x5d0>)
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	f107 021e 	add.w	r2, r7, #30
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fd36 	bl	80013a4 <VL53L1X_CheckForDataReady>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <main+0x5d4>)
 800293e:	601a      	str	r2, [r3, #0]
		  HAL_Delay(2);
 8002940:	2002      	movs	r0, #2
 8002942:	f001 fe91 	bl	8004668 <HAL_Delay>
	  while (dataReady == 0){
 8002946:	7fbb      	ldrb	r3, [r7, #30]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ed      	beq.n	8002928 <main+0x4e0>
	  }
	  dataReady = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	77bb      	strb	r3, [r7, #30]
	  status = VL53L1X_GetRangeStatus(dev, &RangeStatus);
 8002950:	4b31      	ldr	r3, [pc, #196]	; (8002a18 <main+0x5d0>)
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	f107 021f 	add.w	r2, r7, #31
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f892 	bl	8001a84 <VL53L1X_GetRangeStatus>
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <main+0x5d4>)
 8002966:	601a      	str	r2, [r3, #0]
	  status = VL53L1X_GetDistance(dev, &Distance);
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <main+0x5d0>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f80b 	bl	800198e <VL53L1X_GetDistance>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <main+0x5d4>)
 800297e:	601a      	str	r2, [r3, #0]
	  status = VL53L1X_GetSignalRate(dev, &SignalRate);
 8002980:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <main+0x5d0>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f81c 	bl	80019c8 <VL53L1X_GetSignalRate>
 8002990:	4603      	mov	r3, r0
 8002992:	461a      	mov	r2, r3
 8002994:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <main+0x5d4>)
 8002996:	601a      	str	r2, [r3, #0]
	  status = VL53L1X_GetAmbientRate(dev, &AmbientRate);
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <main+0x5d0>)
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f84e 	bl	8001a44 <VL53L1X_GetAmbientRate>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461a      	mov	r2, r3
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <main+0x5d4>)
 80029ae:	601a      	str	r2, [r3, #0]
	  status = VL53L1X_GetSpadNb(dev, &SpadNum);
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <main+0x5d0>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	f107 0220 	add.w	r2, r7, #32
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff f823 	bl	8001a06 <VL53L1X_GetSpadNb>
 80029c0:	4603      	mov	r3, r0
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <main+0x5d4>)
 80029c6:	601a      	str	r2, [r3, #0]
	  status = VL53L1X_ClearInterrupt(dev); /* clear interrupt has to be called to enable next interrupt*/
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <main+0x5d0>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fc77 	bl	80012c0 <VL53L1X_ClearInterrupt>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <main+0x5d4>)
 80029d8:	601a      	str	r2, [r3, #0]
	  MPU6050_Read_Gyro(&hi2c2);
 80029da:	e631      	b.n	8002640 <main+0x1f8>
 80029dc:	f3af 8000 	nop.w
 80029e0:	9999999a 	.word	0x9999999a
 80029e4:	bfe19999 	.word	0xbfe19999
 80029e8:	9999999a 	.word	0x9999999a
 80029ec:	3fe19999 	.word	0x3fe19999
 80029f0:	0800c3dc 	.word	0x0800c3dc
 80029f4:	0800c3e8 	.word	0x0800c3e8
 80029f8:	0800c3f0 	.word	0x0800c3f0
 80029fc:	0800c3f8 	.word	0x0800c3f8
 8002a00:	0800c400 	.word	0x0800c400
 8002a04:	20000010 	.word	0x20000010
 8002a08:	0800c40c 	.word	0x0800c40c
 8002a0c:	0800c41c 	.word	0x0800c41c
 8002a10:	0800c42c 	.word	0x0800c42c
 8002a14:	0800c43c 	.word	0x0800c43c
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000250 	.word	0x20000250

08002a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b090      	sub	sp, #64	; 0x40
 8002a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a26:	f107 0318 	add.w	r3, r7, #24
 8002a2a:	2228      	movs	r2, #40	; 0x28
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f006 fdac 	bl	800958c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
 8002a40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a50:	2301      	movs	r3, #1
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a54:	2302      	movs	r3, #2
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a5e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a64:	f107 0318 	add.w	r3, r7, #24
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f004 f9e9 	bl	8006e40 <HAL_RCC_OscConfig>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002a74:	f000 fa98 	bl	8002fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a78:	230f      	movs	r3, #15
 8002a7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	2102      	movs	r1, #2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f004 fc55 	bl	8007344 <HAL_RCC_ClockConfig>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002aa0:	f000 fa82 	bl	8002fa8 <Error_Handler>
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	3740      	adds	r7, #64	; 0x40
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <MX_I2C1_Init+0x50>)
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <MX_I2C1_Init+0x54>)
 8002ab4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <MX_I2C1_Init+0x50>)
 8002ab8:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <MX_I2C1_Init+0x58>)
 8002aba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <MX_I2C1_Init+0x50>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <MX_I2C1_Init+0x50>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <MX_I2C1_Init+0x50>)
 8002aca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ace:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <MX_I2C1_Init+0x50>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <MX_I2C1_Init+0x50>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002adc:	4b07      	ldr	r3, [pc, #28]	; (8002afc <MX_I2C1_Init+0x50>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <MX_I2C1_Init+0x50>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ae8:	4804      	ldr	r0, [pc, #16]	; (8002afc <MX_I2C1_Init+0x50>)
 8002aea:	f002 fcfb 	bl	80054e4 <HAL_I2C_Init>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002af4:	f000 fa58 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	2000036c 	.word	0x2000036c
 8002b00:	40005400 	.word	0x40005400
 8002b04:	000186a0 	.word	0x000186a0

08002b08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <MX_I2C2_Init+0x50>)
 8002b0e:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <MX_I2C2_Init+0x54>)
 8002b10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <MX_I2C2_Init+0x50>)
 8002b14:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <MX_I2C2_Init+0x58>)
 8002b16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <MX_I2C2_Init+0x50>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <MX_I2C2_Init+0x50>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_I2C2_Init+0x50>)
 8002b26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <MX_I2C2_Init+0x50>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_I2C2_Init+0x50>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b38:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <MX_I2C2_Init+0x50>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <MX_I2C2_Init+0x50>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b44:	4804      	ldr	r0, [pc, #16]	; (8002b58 <MX_I2C2_Init+0x50>)
 8002b46:	f002 fccd 	bl	80054e4 <HAL_I2C_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b50:	f000 fa2a 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	200003c0 	.word	0x200003c0
 8002b5c:	40005800 	.word	0x40005800
 8002b60:	000186a0 	.word	0x000186a0

08002b64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b096      	sub	sp, #88	; 0x58
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	611a      	str	r2, [r3, #16]
 8002b92:	615a      	str	r2, [r3, #20]
 8002b94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	2220      	movs	r2, #32
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f006 fcf5 	bl	800958c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ba2:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002ba4:	4a3e      	ldr	r2, [pc, #248]	; (8002ca0 <MX_TIM1_Init+0x13c>)
 8002ba6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ba8:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72-1;
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002bb6:	2247      	movs	r2, #71	; 0x47
 8002bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bba:	4b38      	ldr	r3, [pc, #224]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bc0:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc6:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bcc:	4833      	ldr	r0, [pc, #204]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002bce:	f004 fd8a 	bl	80076e6 <HAL_TIM_Base_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002bd8:	f000 f9e6 	bl	8002fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002be2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002be6:	4619      	mov	r1, r3
 8002be8:	482c      	ldr	r0, [pc, #176]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002bea:	f005 fac5 	bl	8008178 <HAL_TIM_ConfigClockSource>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002bf4:	f000 f9d8 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bf8:	4828      	ldr	r0, [pc, #160]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002bfa:	f004 fe23 	bl	8007844 <HAL_TIM_PWM_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002c04:	f000 f9d0 	bl	8002fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c14:	4619      	mov	r1, r3
 8002c16:	4821      	ldr	r0, [pc, #132]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002c18:	f005 ff50 	bl	8008abc <HAL_TIMEx_MasterConfigSynchronization>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002c22:	f000 f9c1 	bl	8002fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c26:	2360      	movs	r3, #96	; 0x60
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c32:	2300      	movs	r3, #0
 8002c34:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c46:	2200      	movs	r2, #0
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4814      	ldr	r0, [pc, #80]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002c4c:	f005 f9d6 	bl	8007ffc <HAL_TIM_PWM_ConfigChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002c56:	f000 f9a7 	bl	8002fa8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4807      	ldr	r0, [pc, #28]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002c7e:	f005 ff89 	bl	8008b94 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002c88:	f000 f98e 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c8c:	4803      	ldr	r0, [pc, #12]	; (8002c9c <MX_TIM1_Init+0x138>)
 8002c8e:	f000 fa95 	bl	80031bc <HAL_TIM_MspPostInit>

}
 8002c92:	bf00      	nop
 8002c94:	3758      	adds	r7, #88	; 0x58
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200007a4 	.word	0x200007a4
 8002ca0:	40012c00 	.word	0x40012c00

08002ca4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002caa:	f107 0308 	add.w	r3, r7, #8
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb8:	463b      	mov	r3, r7
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <MX_TIM3_Init+0x94>)
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <MX_TIM3_Init+0x98>)
 8002cc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <MX_TIM3_Init+0x94>)
 8002cc8:	2247      	movs	r2, #71	; 0x47
 8002cca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <MX_TIM3_Init+0x94>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002cd2:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <MX_TIM3_Init+0x94>)
 8002cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cda:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <MX_TIM3_Init+0x94>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ce0:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <MX_TIM3_Init+0x94>)
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ce6:	4814      	ldr	r0, [pc, #80]	; (8002d38 <MX_TIM3_Init+0x94>)
 8002ce8:	f004 fcfd 	bl	80076e6 <HAL_TIM_Base_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002cf2:	f000 f959 	bl	8002fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cfc:	f107 0308 	add.w	r3, r7, #8
 8002d00:	4619      	mov	r1, r3
 8002d02:	480d      	ldr	r0, [pc, #52]	; (8002d38 <MX_TIM3_Init+0x94>)
 8002d04:	f005 fa38 	bl	8008178 <HAL_TIM_ConfigClockSource>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002d0e:	f000 f94b 	bl	8002fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d12:	2300      	movs	r3, #0
 8002d14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d1a:	463b      	mov	r3, r7
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4806      	ldr	r0, [pc, #24]	; (8002d38 <MX_TIM3_Init+0x94>)
 8002d20:	f005 fecc 	bl	8008abc <HAL_TIMEx_MasterConfigSynchronization>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002d2a:	f000 f93d 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d2e:	bf00      	nop
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200002a8 	.word	0x200002a8
 8002d3c:	40000400 	.word	0x40000400

08002d40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <MX_DMA_Init+0x38>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4a0b      	ldr	r2, [pc, #44]	; (8002d78 <MX_DMA_Init+0x38>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6153      	str	r3, [r2, #20]
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <MX_DMA_Init+0x38>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2100      	movs	r1, #0
 8002d62:	200c      	movs	r0, #12
 8002d64:	f001 fd7b 	bl	800485e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002d68:	200c      	movs	r0, #12
 8002d6a:	f001 fd94 	bl	8004896 <HAL_NVIC_EnableIRQ>

}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000

08002d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d82:	f107 0318 	add.w	r3, r7, #24
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d90:	4b42      	ldr	r3, [pc, #264]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	4a41      	ldr	r2, [pc, #260]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d9a:	6193      	str	r3, [r2, #24]
 8002d9c:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da8:	4b3c      	ldr	r3, [pc, #240]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a3b      	ldr	r2, [pc, #236]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002dae:	f043 0310 	orr.w	r3, r3, #16
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc0:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	4a35      	ldr	r2, [pc, #212]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002dc6:	f043 0308 	orr.w	r3, r3, #8
 8002dca:	6193      	str	r3, [r2, #24]
 8002dcc:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dd8:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4a2f      	ldr	r2, [pc, #188]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002dde:	f043 0320 	orr.w	r3, r3, #32
 8002de2:	6193      	str	r3, [r2, #24]
 8002de4:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	6193      	str	r3, [r2, #24]
 8002dfc:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <MX_GPIO_Init+0x120>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XPT2046_SPI_MOSI_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2106      	movs	r1, #6
 8002e0c:	4824      	ldr	r0, [pc, #144]	; (8002ea0 <MX_GPIO_Init+0x124>)
 8002e0e:	f002 fb50 	bl	80054b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin|XPT2046_SPI_CS_Pin, GPIO_PIN_RESET);
 8002e12:	2200      	movs	r2, #0
 8002e14:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002e18:	4822      	ldr	r0, [pc, #136]	; (8002ea4 <MX_GPIO_Init+0x128>)
 8002e1a:	f002 fb4a 	bl	80054b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XPT2046_SPI_CLK_GPIO_Port, XPT2046_SPI_CLK_Pin, GPIO_PIN_SET);
 8002e1e:	2201      	movs	r2, #1
 8002e20:	2101      	movs	r1, #1
 8002e22:	481f      	ldr	r0, [pc, #124]	; (8002ea0 <MX_GPIO_Init+0x124>)
 8002e24:	f002 fb45 	bl	80054b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : XPT2046_SPI_MOSI_Pin XPT2046_SPI_CLK_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = XPT2046_SPI_MOSI_Pin|XPT2046_SPI_CLK_Pin|LCD_RST_Pin;
 8002e28:	2307      	movs	r3, #7
 8002e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e38:	f107 0318 	add.w	r3, r7, #24
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4818      	ldr	r0, [pc, #96]	; (8002ea0 <MX_GPIO_Init+0x124>)
 8002e40:	f002 f98c 	bl	800515c <HAL_GPIO_Init>

  /*Configure GPIO pin : XPT2046_SPI_MISO_Pin */
  GPIO_InitStruct.Pin = XPT2046_SPI_MISO_Pin;
 8002e44:	2308      	movs	r3, #8
 8002e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(XPT2046_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8002e50:	f107 0318 	add.w	r3, r7, #24
 8002e54:	4619      	mov	r1, r3
 8002e56:	4812      	ldr	r0, [pc, #72]	; (8002ea0 <MX_GPIO_Init+0x124>)
 8002e58:	f002 f980 	bl	800515c <HAL_GPIO_Init>

  /*Configure GPIO pin : A3144_Pin */
  GPIO_InitStruct.Pin = A3144_Pin;
 8002e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A3144_GPIO_Port, &GPIO_InitStruct);
 8002e6a:	f107 0318 	add.w	r3, r7, #24
 8002e6e:	4619      	mov	r1, r3
 8002e70:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <MX_GPIO_Init+0x12c>)
 8002e72:	f002 f973 	bl	800515c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin XPT2046_SPI_CS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|XPT2046_SPI_CS_Pin;
 8002e76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e84:	2303      	movs	r3, #3
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e88:	f107 0318 	add.w	r3, r7, #24
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4805      	ldr	r0, [pc, #20]	; (8002ea4 <MX_GPIO_Init+0x128>)
 8002e90:	f002 f964 	bl	800515c <HAL_GPIO_Init>

}
 8002e94:	bf00      	nop
 8002e96:	3728      	adds	r7, #40	; 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40011800 	.word	0x40011800
 8002ea4:	40011400 	.word	0x40011400
 8002ea8:	40010c00 	.word	0x40010c00

08002eac <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	; 0x38
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002eb2:	f107 031c 	add.w	r3, r7, #28
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
 8002ec0:	611a      	str	r2, [r3, #16]
 8002ec2:	615a      	str	r2, [r3, #20]
 8002ec4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8002ec6:	463b      	mov	r3, r7
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
 8002ed4:	615a      	str	r2, [r3, #20]
 8002ed6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002ed8:	4b30      	ldr	r3, [pc, #192]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002eda:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002ede:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002ee0:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002ee2:	4a2f      	ldr	r2, [pc, #188]	; (8002fa0 <MX_FSMC_Init+0xf4>)
 8002ee4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002ee6:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002ef8:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002efa:	2210      	movs	r2, #16
 8002efc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002efe:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002f0a:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002f10:	4b22      	ldr	r3, [pc, #136]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002f16:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002f18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002f1e:	4b1f      	ldr	r3, [pc, #124]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002f32:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8002f3c:	230f      	movs	r3, #15
 8002f3e:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 26;
 8002f40:	231a      	movs	r3, #26
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8002f48:	2310      	movs	r3, #16
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8002f4c:	2311      	movs	r3, #17
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002f50:	2300      	movs	r3, #0
 8002f52:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8002f58:	230f      	movs	r3, #15
 8002f5a:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 1;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8002f64:	2310      	movs	r3, #16
 8002f66:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8002f68:	2311      	movs	r3, #17
 8002f6a:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8002f70:	463a      	mov	r2, r7
 8002f72:	f107 031c 	add.w	r3, r7, #28
 8002f76:	4619      	mov	r1, r3
 8002f78:	4808      	ldr	r0, [pc, #32]	; (8002f9c <MX_FSMC_Init+0xf0>)
 8002f7a:	f004 fb67 	bl	800764c <HAL_SRAM_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8002f84:	f000 f810 	bl	8002fa8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <MX_FSMC_Init+0xf8>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <MX_FSMC_Init+0xf8>)
 8002f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f92:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002f94:	bf00      	nop
 8002f96:	3738      	adds	r7, #56	; 0x38
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000450 	.word	0x20000450
 8002fa0:	a0000104 	.word	0xa0000104
 8002fa4:	40010000 	.word	0x40010000

08002fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fac:	b672      	cpsid	i
}
 8002fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <Error_Handler+0x8>
	...

08002fb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_MspInit+0x5c>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	4a14      	ldr	r2, [pc, #80]	; (8003010 <HAL_MspInit+0x5c>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6193      	str	r3, [r2, #24]
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_MspInit+0x5c>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_MspInit+0x5c>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <HAL_MspInit+0x5c>)
 8002fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	61d3      	str	r3, [r2, #28]
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_MspInit+0x5c>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_MspInit+0x60>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	4a04      	ldr	r2, [pc, #16]	; (8003014 <HAL_MspInit+0x60>)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	40021000 	.word	0x40021000
 8003014:	40010000 	.word	0x40010000

08003018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	; 0x28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 0318 	add.w	r3, r7, #24
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2b      	ldr	r2, [pc, #172]	; (80030e0 <HAL_I2C_MspInit+0xc8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d124      	bne.n	8003082 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003038:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <HAL_I2C_MspInit+0xcc>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <HAL_I2C_MspInit+0xcc>)
 800303e:	f043 0308 	orr.w	r3, r3, #8
 8003042:	6193      	str	r3, [r2, #24]
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_I2C_MspInit+0xcc>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = VL53_SCL_Pin|VL53_SDA_Pin;
 8003050:	23c0      	movs	r3, #192	; 0xc0
 8003052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003054:	2312      	movs	r3, #18
 8003056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003058:	2303      	movs	r3, #3
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305c:	f107 0318 	add.w	r3, r7, #24
 8003060:	4619      	mov	r1, r3
 8003062:	4821      	ldr	r0, [pc, #132]	; (80030e8 <HAL_I2C_MspInit+0xd0>)
 8003064:	f002 f87a 	bl	800515c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003068:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_I2C_MspInit+0xcc>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <HAL_I2C_MspInit+0xcc>)
 800306e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003072:	61d3      	str	r3, [r2, #28]
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_I2C_MspInit+0xcc>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003080:	e029      	b.n	80030d6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a19      	ldr	r2, [pc, #100]	; (80030ec <HAL_I2C_MspInit+0xd4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d124      	bne.n	80030d6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308c:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_I2C_MspInit+0xcc>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_I2C_MspInit+0xcc>)
 8003092:	f043 0308 	orr.w	r3, r3, #8
 8003096:	6193      	str	r3, [r2, #24]
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_I2C_MspInit+0xcc>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 80030a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030aa:	2312      	movs	r3, #18
 80030ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030ae:	2303      	movs	r3, #3
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b2:	f107 0318 	add.w	r3, r7, #24
 80030b6:	4619      	mov	r1, r3
 80030b8:	480b      	ldr	r0, [pc, #44]	; (80030e8 <HAL_I2C_MspInit+0xd0>)
 80030ba:	f002 f84f 	bl	800515c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_I2C_MspInit+0xcc>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <HAL_I2C_MspInit+0xcc>)
 80030c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030c8:	61d3      	str	r3, [r2, #28]
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_I2C_MspInit+0xcc>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
}
 80030d6:	bf00      	nop
 80030d8:	3728      	adds	r7, #40	; 0x28
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40005400 	.word	0x40005400
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40010c00 	.word	0x40010c00
 80030ec:	40005800 	.word	0x40005800

080030f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2a      	ldr	r2, [pc, #168]	; (80031a8 <HAL_TIM_Base_MspInit+0xb8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d134      	bne.n	800316c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003102:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <HAL_TIM_Base_MspInit+0xbc>)
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	4a29      	ldr	r2, [pc, #164]	; (80031ac <HAL_TIM_Base_MspInit+0xbc>)
 8003108:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800310c:	6193      	str	r3, [r2, #24]
 800310e:	4b27      	ldr	r3, [pc, #156]	; (80031ac <HAL_TIM_Base_MspInit+0xbc>)
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800311a:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <HAL_TIM_Base_MspInit+0xc0>)
 800311c:	4a25      	ldr	r2, [pc, #148]	; (80031b4 <HAL_TIM_Base_MspInit+0xc4>)
 800311e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003120:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <HAL_TIM_Base_MspInit+0xc0>)
 8003122:	2210      	movs	r2, #16
 8003124:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003126:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <HAL_TIM_Base_MspInit+0xc0>)
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_TIM_Base_MspInit+0xc0>)
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003132:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <HAL_TIM_Base_MspInit+0xc0>)
 8003134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003138:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800313a:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_TIM_Base_MspInit+0xc0>)
 800313c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003140:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003142:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_TIM_Base_MspInit+0xc0>)
 8003144:	2200      	movs	r2, #0
 8003146:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_TIM_Base_MspInit+0xc0>)
 800314a:	2200      	movs	r2, #0
 800314c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800314e:	4818      	ldr	r0, [pc, #96]	; (80031b0 <HAL_TIM_Base_MspInit+0xc0>)
 8003150:	f001 fbbc 	bl	80048cc <HAL_DMA_Init>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800315a:	f7ff ff25 	bl	8002fa8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <HAL_TIM_Base_MspInit+0xc0>)
 8003162:	625a      	str	r2, [r3, #36]	; 0x24
 8003164:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <HAL_TIM_Base_MspInit+0xc0>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800316a:	e018      	b.n	800319e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <HAL_TIM_Base_MspInit+0xc8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d113      	bne.n	800319e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <HAL_TIM_Base_MspInit+0xbc>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4a0c      	ldr	r2, [pc, #48]	; (80031ac <HAL_TIM_Base_MspInit+0xbc>)
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	61d3      	str	r3, [r2, #28]
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_TIM_Base_MspInit+0xbc>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2100      	movs	r1, #0
 8003192:	201d      	movs	r0, #29
 8003194:	f001 fb63 	bl	800485e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003198:	201d      	movs	r0, #29
 800319a:	f001 fb7c 	bl	8004896 <HAL_NVIC_EnableIRQ>
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40021000 	.word	0x40021000
 80031b0:	200002f0 	.word	0x200002f0
 80031b4:	4002001c 	.word	0x4002001c
 80031b8:	40000400 	.word	0x40000400

080031bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 0310 	add.w	r3, r7, #16
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a10      	ldr	r2, [pc, #64]	; (8003218 <HAL_TIM_MspPostInit+0x5c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d118      	bne.n	800320e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <HAL_TIM_MspPostInit+0x60>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	4a0e      	ldr	r2, [pc, #56]	; (800321c <HAL_TIM_MspPostInit+0x60>)
 80031e2:	f043 0304 	orr.w	r3, r3, #4
 80031e6:	6193      	str	r3, [r2, #24]
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <HAL_TIM_MspPostInit+0x60>)
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fe:	2302      	movs	r3, #2
 8003200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003202:	f107 0310 	add.w	r3, r7, #16
 8003206:	4619      	mov	r1, r3
 8003208:	4805      	ldr	r0, [pc, #20]	; (8003220 <HAL_TIM_MspPostInit+0x64>)
 800320a:	f001 ffa7 	bl	800515c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800320e:	bf00      	nop
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40012c00 	.word	0x40012c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40010800 	.word	0x40010800

08003224 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800322a:	f107 0308 	add.w	r3, r7, #8
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8003238:	4b18      	ldr	r3, [pc, #96]	; (800329c <HAL_FSMC_MspInit+0x78>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d129      	bne.n	8003294 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_FSMC_MspInit+0x78>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <HAL_FSMC_MspInit+0x7c>)
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <HAL_FSMC_MspInit+0x7c>)
 800324c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003250:	6153      	str	r3, [r2, #20]
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_FSMC_MspInit+0x7c>)
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800325e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003262:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003268:	2303      	movs	r3, #3
 800326a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800326c:	f107 0308 	add.w	r3, r7, #8
 8003270:	4619      	mov	r1, r3
 8003272:	480c      	ldr	r0, [pc, #48]	; (80032a4 <HAL_FSMC_MspInit+0x80>)
 8003274:	f001 ff72 	bl	800515c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003278:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800327c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327e:	2302      	movs	r3, #2
 8003280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003286:	f107 0308 	add.w	r3, r7, #8
 800328a:	4619      	mov	r1, r3
 800328c:	4806      	ldr	r0, [pc, #24]	; (80032a8 <HAL_FSMC_MspInit+0x84>)
 800328e:	f001 ff65 	bl	800515c <HAL_GPIO_Init>
 8003292:	e000      	b.n	8003296 <HAL_FSMC_MspInit+0x72>
    return;
 8003294:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000254 	.word	0x20000254
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40011800 	.word	0x40011800
 80032a8:	40011400 	.word	0x40011400

080032ac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80032b4:	f7ff ffb6 	bl	8003224 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <HardFault_Handler+0x4>

080032d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d2:	b480      	push	{r7}
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d6:	e7fe      	b.n	80032d6 <MemManage_Handler+0x4>

080032d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032dc:	e7fe      	b.n	80032dc <BusFault_Handler+0x4>

080032de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e2:	e7fe      	b.n	80032e2 <UsageFault_Handler+0x4>

080032e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800330c:	f001 f990 	bl	8004630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}

08003314 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003318:	4802      	ldr	r0, [pc, #8]	; (8003324 <DMA1_Channel2_IRQHandler+0x10>)
 800331a:	f001 fcb5 	bl	8004c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200002f0 	.word	0x200002f0

08003328 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800332c:	4802      	ldr	r0, [pc, #8]	; (8003338 <TIM3_IRQHandler+0x10>)
 800332e:	f004 fd5d 	bl	8007dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	200002a8 	.word	0x200002a8

0800333c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
	return 1;
 8003340:	2301      	movs	r3, #1
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <_kill>:

int _kill(int pid, int sig)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003354:	f006 f8e2 	bl	800951c <__errno>
 8003358:	4603      	mov	r3, r0
 800335a:	2216      	movs	r2, #22
 800335c:	601a      	str	r2, [r3, #0]
	return -1;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <_exit>:

void _exit (int status)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003372:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ffe7 	bl	800334a <_kill>
	while (1) {}		/* Make sure we hang here */
 800337c:	e7fe      	b.n	800337c <_exit+0x12>

0800337e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b086      	sub	sp, #24
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	e00a      	b.n	80033a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003390:	f3af 8000 	nop.w
 8003394:	4601      	mov	r1, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	60ba      	str	r2, [r7, #8]
 800339c:	b2ca      	uxtb	r2, r1
 800339e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3301      	adds	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	dbf0      	blt.n	8003390 <_read+0x12>
	}

return len;
 80033ae:	687b      	ldr	r3, [r7, #4]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	e009      	b.n	80033de <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	60ba      	str	r2, [r7, #8]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3301      	adds	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	dbf1      	blt.n	80033ca <_write+0x12>
	}
	return len;
 80033e6:	687b      	ldr	r3, [r7, #4]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <_close>:

int _close(int file)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	return -1;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003416:	605a      	str	r2, [r3, #4]
	return 0;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <_isatty>:

int _isatty(int file)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	return 1;
 800342c:	2301      	movs	r3, #1
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
	return 0;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <_sbrk+0x5c>)
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <_sbrk+0x60>)
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <_sbrk+0x64>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <_sbrk+0x64>)
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <_sbrk+0x68>)
 8003470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <_sbrk+0x64>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	429a      	cmp	r2, r3
 800347e:	d207      	bcs.n	8003490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003480:	f006 f84c 	bl	800951c <__errno>
 8003484:	4603      	mov	r3, r0
 8003486:	220c      	movs	r2, #12
 8003488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800348e:	e009      	b.n	80034a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <_sbrk+0x64>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <_sbrk+0x64>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <_sbrk+0x64>)
 80034a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034a2:	68fb      	ldr	r3, [r7, #12]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20010000 	.word	0x20010000
 80034b0:	00000400 	.word	0x00000400
 80034b4:	20000258 	.word	0x20000258
 80034b8:	200008f0 	.word	0x200008f0

080034bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <_I2CWrite>:

extern I2C_HandleTypeDef hi2c1;
extern I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef *hw[2] = {&hi2c1, &hi2c2};

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	4603      	mov	r3, r0
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	81fb      	strh	r3, [r7, #14]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	330a      	adds	r3, #10
 80034da:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(hw[dev >> 8], dev & 0xFF, pdata, count, i2c_time_out);
 80034dc:	89fb      	ldrh	r3, [r7, #14]
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <_I2CWrite+0x48>)
 80034e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80034ea:	89fb      	ldrh	r3, [r7, #14]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	b299      	uxth	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	f002 f936 	bl	800576c <HAL_I2C_Master_Transmit>
 8003500:	4603      	mov	r3, r0
 8003502:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev, count);
    }
    return status;
 8003504:	693b      	ldr	r3, [r7, #16]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000008 	.word	0x20000008

08003514 <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	4603      	mov	r3, r0
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	81fb      	strh	r3, [r7, #14]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	330a      	adds	r3, #10
 8003526:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(hw[dev >> 8], (dev & 0xFF)|1, pdata, count, i2c_time_out);
 8003528:	89fb      	ldrh	r3, [r7, #14]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	b29b      	uxth	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <_I2CRead+0x50>)
 8003532:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003536:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	b21b      	sxth	r3, r3
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	b21b      	sxth	r3, r3
 8003544:	b299      	uxth	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	b29a      	uxth	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	4613      	mov	r3, r2
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	f002 fa09 	bl	8005968 <HAL_I2C_Master_Receive>
 8003556:	4603      	mov	r3, r0
 8003558:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev, count);
    }
    return status;
 800355a:	693b      	ldr	r3, [r7, #16]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000008 	.word	0x20000008

08003568 <VL53L1_WrByte>:
    }
done:
    return err;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	80fb      	strh	r3, [r7, #6]
 8003572:	460b      	mov	r3, r1
 8003574:	80bb      	strh	r3, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	70fb      	strb	r3, [r7, #3]
    VL53L1X_Error err = VL53L1_ERROR_NONE;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800357e:	88bb      	ldrh	r3, [r7, #4]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	b29b      	uxth	r3, r3
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <VL53L1_WrByte+0x54>)
 8003588:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800358a:	88bb      	ldrh	r3, [r7, #4]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <VL53L1_WrByte+0x54>)
 8003590:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <VL53L1_WrByte+0x54>)
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	2203      	movs	r2, #3
 800359c:	4907      	ldr	r1, [pc, #28]	; (80035bc <VL53L1_WrByte+0x54>)
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ff92 	bl	80034c8 <_I2CWrite>
 80035a4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <VL53L1_WrByte+0x48>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
    }
    return err;
 80035b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	200007ec 	.word	0x200007ec

080035c0 <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	80fb      	strh	r3, [r7, #6]
 80035ca:	460b      	mov	r3, r1
 80035cc:	80bb      	strh	r3, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	807b      	strh	r3, [r7, #2]
    VL53L1X_Error err = VL53L1_ERROR_NONE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80035d6:	88bb      	ldrh	r3, [r7, #4]
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	b29b      	uxth	r3, r3
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <VL53L1_WrWord+0x64>)
 80035e0:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80035e2:	88bb      	ldrh	r3, [r7, #4]
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <VL53L1_WrWord+0x64>)
 80035e8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <VL53L1_WrWord+0x64>)
 80035f4:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80035f6:	887b      	ldrh	r3, [r7, #2]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <VL53L1_WrWord+0x64>)
 80035fc:	70da      	strb	r2, [r3, #3]

    status_int = _I2CWrite(dev, _I2CBuffer, 4);
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	2204      	movs	r2, #4
 8003602:	4908      	ldr	r1, [pc, #32]	; (8003624 <VL53L1_WrWord+0x64>)
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ff5f 	bl	80034c8 <_I2CWrite>
 800360a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <VL53L1_WrWord+0x56>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
    }
    return err;
 8003616:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	200007ec 	.word	0x200007ec

08003628 <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t dev, uint16_t index, uint32_t data) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	603a      	str	r2, [r7, #0]
 8003632:	80fb      	strh	r3, [r7, #6]
 8003634:	460b      	mov	r3, r1
 8003636:	80bb      	strh	r3, [r7, #4]
    VL53L1X_Error err = VL53L1_ERROR_NONE;
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 800363c:	88bb      	ldrh	r3, [r7, #4]
 800363e:	0a1b      	lsrs	r3, r3, #8
 8003640:	b29b      	uxth	r3, r3
 8003642:	b2da      	uxtb	r2, r3
 8003644:	4b15      	ldr	r3, [pc, #84]	; (800369c <VL53L1_WrDWord+0x74>)
 8003646:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8003648:	88bb      	ldrh	r3, [r7, #4]
 800364a:	b2da      	uxtb	r2, r3
 800364c:	4b13      	ldr	r3, [pc, #76]	; (800369c <VL53L1_WrDWord+0x74>)
 800364e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	0e1b      	lsrs	r3, r3, #24
 8003654:	b2da      	uxtb	r2, r3
 8003656:	4b11      	ldr	r3, [pc, #68]	; (800369c <VL53L1_WrDWord+0x74>)
 8003658:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	b2da      	uxtb	r2, r3
 8003660:	4b0e      	ldr	r3, [pc, #56]	; (800369c <VL53L1_WrDWord+0x74>)
 8003662:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	b2da      	uxtb	r2, r3
 800366a:	4b0c      	ldr	r3, [pc, #48]	; (800369c <VL53L1_WrDWord+0x74>)
 800366c:	711a      	strb	r2, [r3, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	4b0a      	ldr	r3, [pc, #40]	; (800369c <VL53L1_WrDWord+0x74>)
 8003674:	715a      	strb	r2, [r3, #5]

    status_int = _I2CWrite(dev, _I2CBuffer, 6);
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	2206      	movs	r2, #6
 800367a:	4908      	ldr	r1, [pc, #32]	; (800369c <VL53L1_WrDWord+0x74>)
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff23 	bl	80034c8 <_I2CWrite>
 8003682:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <VL53L1_WrDWord+0x66>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
    }
    return err;
 800368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	200007ec 	.word	0x200007ec

080036a0 <VL53L1_RdByte>:

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	603a      	str	r2, [r7, #0]
 80036aa:	80fb      	strh	r3, [r7, #6]
 80036ac:	460b      	mov	r3, r1
 80036ae:	80bb      	strh	r3, [r7, #4]
    VL53L1X_Error err = VL53L1_ERROR_NONE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80036b4:	88bb      	ldrh	r3, [r7, #4]
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <VL53L1_RdByte+0x6c>)
 80036be:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80036c0:	88bb      	ldrh	r3, [r7, #4]
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <VL53L1_RdByte+0x6c>)
 80036c6:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	2202      	movs	r2, #2
 80036cc:	490f      	ldr	r1, [pc, #60]	; (800370c <VL53L1_RdByte+0x6c>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fefa 	bl	80034c8 <_I2CWrite>
 80036d4:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <VL53L1_RdByte+0x42>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
        goto done;
 80036e0:	e00d      	b.n	80036fe <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(dev, data, 1);
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	2201      	movs	r2, #1
 80036e6:	6839      	ldr	r1, [r7, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff13 	bl	8003514 <_I2CRead>
 80036ee:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <VL53L1_RdByte+0x5c>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
 80036fa:	e000      	b.n	80036fe <VL53L1_RdByte+0x5e>
    }
done:
 80036fc:	bf00      	nop
    return err;
 80036fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	200007ec 	.word	0x200007ec

08003710 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	603a      	str	r2, [r7, #0]
 800371a:	80fb      	strh	r3, [r7, #6]
 800371c:	460b      	mov	r3, r1
 800371e:	80bb      	strh	r3, [r7, #4]
    VL53L1X_Error err = VL53L1_ERROR_NONE;
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8003724:	88bb      	ldrh	r3, [r7, #4]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	b29b      	uxth	r3, r3
 800372a:	b2da      	uxtb	r2, r3
 800372c:	4b18      	ldr	r3, [pc, #96]	; (8003790 <VL53L1_RdWord+0x80>)
 800372e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8003730:	88bb      	ldrh	r3, [r7, #4]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	4b16      	ldr	r3, [pc, #88]	; (8003790 <VL53L1_RdWord+0x80>)
 8003736:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	2202      	movs	r2, #2
 800373c:	4914      	ldr	r1, [pc, #80]	; (8003790 <VL53L1_RdWord+0x80>)
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fec2 	bl	80034c8 <_I2CWrite>
 8003744:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <VL53L1_RdWord+0x42>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
        goto done;
 8003750:	e018      	b.n	8003784 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2202      	movs	r2, #2
 8003756:	490e      	ldr	r1, [pc, #56]	; (8003790 <VL53L1_RdWord+0x80>)
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fedb 	bl	8003514 <_I2CRead>
 800375e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <VL53L1_RdWord+0x5c>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
        goto done;
 800376a:	e00b      	b.n	8003784 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <VL53L1_RdWord+0x80>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b29b      	uxth	r3, r3
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	b29a      	uxth	r2, r3
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <VL53L1_RdWord+0x80>)
 8003778:	785b      	ldrb	r3, [r3, #1]
 800377a:	b29b      	uxth	r3, r3
 800377c:	4413      	add	r3, r2
 800377e:	b29a      	uxth	r2, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	801a      	strh	r2, [r3, #0]
done:
    return err;
 8003784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	200007ec 	.word	0x200007ec

08003794 <HAL_TIM_PWM_PulseFinishedCallback>:
#include "ws2812.h"

TIM_HandleTypeDef htim1;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800379c:	2100      	movs	r1, #0
 800379e:	4805      	ldr	r0, [pc, #20]	; (80037b4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80037a0:	f004 fa5a 	bl	8007c58 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	200007a4 	.word	0x200007a4
 80037b8:	20000414 	.word	0x20000414

080037bc <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	b2d9      	uxtb	r1, r3
 80037ce:	4a10      	ldr	r2, [pc, #64]	; (8003810 <Set_LED+0x54>)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	b2d9      	uxtb	r1, r3
 80037da:	4a0d      	ldr	r2, [pc, #52]	; (8003810 <Set_LED+0x54>)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	460a      	mov	r2, r1
 80037e4:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	b2d9      	uxtb	r1, r3
 80037ea:	4a09      	ldr	r2, [pc, #36]	; (8003810 <Set_LED+0x54>)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	460a      	mov	r2, r1
 80037f4:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	b2d9      	uxtb	r1, r3
 80037fa:	4a05      	ldr	r2, [pc, #20]	; (8003810 <Set_LED+0x54>)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	460a      	mov	r2, r1
 8003804:	70da      	strb	r2, [r3, #3]
}
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	20000334 	.word	0x20000334

08003814 <WS2812_Send>:
#endif

}

void WS2812_Send (void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	e036      	b.n	8003892 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8003824:	4a2e      	ldr	r2, [pc, #184]	; (80038e0 <WS2812_Send+0xcc>)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	785b      	ldrb	r3, [r3, #1]
 800382e:	041a      	lsls	r2, r3, #16
 8003830:	492b      	ldr	r1, [pc, #172]	; (80038e0 <WS2812_Send+0xcc>)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	789b      	ldrb	r3, [r3, #2]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	431a      	orrs	r2, r3
 800383e:	4928      	ldr	r1, [pc, #160]	; (80038e0 <WS2812_Send+0xcc>)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	78db      	ldrb	r3, [r3, #3]
 8003848:	4313      	orrs	r3, r2
 800384a:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 800384c:	2317      	movs	r3, #23
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e019      	b.n	8003886 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8003852:	2201      	movs	r2, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	461a      	mov	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8003864:	4a1f      	ldr	r2, [pc, #124]	; (80038e4 <WS2812_Send+0xd0>)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	213c      	movs	r1, #60	; 0x3c
 800386a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800386e:	e004      	b.n	800387a <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8003870:	4a1c      	ldr	r2, [pc, #112]	; (80038e4 <WS2812_Send+0xd0>)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	211e      	movs	r1, #30
 8003876:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	3301      	adds	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3b01      	subs	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	dae2      	bge.n	8003852 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	3301      	adds	r3, #1
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b0d      	cmp	r3, #13
 8003896:	ddc5      	ble.n	8003824 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	e00a      	b.n	80038b4 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 800389e:	4a11      	ldr	r2, [pc, #68]	; (80038e4 <WS2812_Send+0xd0>)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2100      	movs	r1, #0
 80038a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	3301      	adds	r3, #1
 80038ac:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	3301      	adds	r3, #1
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b31      	cmp	r3, #49	; 0x31
 80038b8:	ddf1      	ble.n	800389e <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <WS2812_Send+0xd0>)
 80038c0:	2100      	movs	r1, #0
 80038c2:	4809      	ldr	r0, [pc, #36]	; (80038e8 <WS2812_Send+0xd4>)
 80038c4:	f004 f816 	bl	80078f4 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 80038c8:	bf00      	nop
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <WS2812_Send+0xd8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0fb      	beq.n	80038ca <WS2812_Send+0xb6>
	datasentflag = 0;
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <WS2812_Send+0xd8>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
}
 80038d8:	bf00      	nop
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20000418 	.word	0x20000418
 80038e4:	2000049c 	.word	0x2000049c
 80038e8:	200007a4 	.word	0x200007a4
 80038ec:	20000414 	.word	0x20000414

080038f0 <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	e00a      	b.n	8003914 <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 80038fe:	230c      	movs	r3, #12
 8003900:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 8003902:	bf00      	nop
 8003904:	7afb      	ldrb	r3, [r7, #11]
 8003906:	1e5a      	subs	r2, r3, #1
 8003908:	72fa      	strb	r2, [r7, #11]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1fa      	bne.n	8003904 <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3301      	adds	r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	429a      	cmp	r2, r3
 800391a:	d3f0      	bcc.n	80038fe <XPT2046_DelayUS+0xe>

	}
	
}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 8003932:	2200      	movs	r2, #0
 8003934:	2104      	movs	r1, #4
 8003936:	481d      	ldr	r0, [pc, #116]	; (80039ac <XPT2046_WriteCMD+0x84>)
 8003938:	f001 fdbb 	bl	80054b2 <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 800393c:	2200      	movs	r2, #0
 800393e:	2101      	movs	r1, #1
 8003940:	481a      	ldr	r0, [pc, #104]	; (80039ac <XPT2046_WriteCMD+0x84>)
 8003942:	f001 fdb6 	bl	80054b2 <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
 800394a:	e027      	b.n	800399c <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 800394c:	79fa      	ldrb	r2, [r7, #7]
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	f1c3 0307 	rsb	r3, r3, #7
 8003954:	fa42 f303 	asr.w	r3, r2, r3
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <XPT2046_WriteCMD+0x44>
 8003960:	2201      	movs	r2, #1
 8003962:	2104      	movs	r1, #4
 8003964:	4811      	ldr	r0, [pc, #68]	; (80039ac <XPT2046_WriteCMD+0x84>)
 8003966:	f001 fda4 	bl	80054b2 <HAL_GPIO_WritePin>
 800396a:	e004      	b.n	8003976 <XPT2046_WriteCMD+0x4e>
 800396c:	2200      	movs	r2, #0
 800396e:	2104      	movs	r1, #4
 8003970:	480e      	ldr	r0, [pc, #56]	; (80039ac <XPT2046_WriteCMD+0x84>)
 8003972:	f001 fd9e 	bl	80054b2 <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 8003976:	2005      	movs	r0, #5
 8003978:	f7ff ffba 	bl	80038f0 <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 800397c:	2201      	movs	r2, #1
 800397e:	2101      	movs	r1, #1
 8003980:	480a      	ldr	r0, [pc, #40]	; (80039ac <XPT2046_WriteCMD+0x84>)
 8003982:	f001 fd96 	bl	80054b2 <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 8003986:	2005      	movs	r0, #5
 8003988:	f7ff ffb2 	bl	80038f0 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 800398c:	2200      	movs	r2, #0
 800398e:	2101      	movs	r1, #1
 8003990:	4806      	ldr	r0, [pc, #24]	; (80039ac <XPT2046_WriteCMD+0x84>)
 8003992:	f001 fd8e 	bl	80054b2 <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	3301      	adds	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b07      	cmp	r3, #7
 80039a0:	d9d4      	bls.n	800394c <XPT2046_WriteCMD+0x24>
	}
	
}
 80039a2:	bf00      	nop
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40011800 	.word	0x40011800

080039b0 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 80039b6:	2300      	movs	r3, #0
 80039b8:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 80039ba:	2200      	movs	r2, #0
 80039bc:	2104      	movs	r1, #4
 80039be:	4819      	ldr	r0, [pc, #100]	; (8003a24 <XPT2046_ReadCMD+0x74>)
 80039c0:	f001 fd77 	bl	80054b2 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80039c4:	2201      	movs	r2, #1
 80039c6:	2101      	movs	r1, #1
 80039c8:	4816      	ldr	r0, [pc, #88]	; (8003a24 <XPT2046_ReadCMD+0x74>)
 80039ca:	f001 fd72 	bl	80054b2 <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 80039ce:	2300      	movs	r3, #0
 80039d0:	71fb      	strb	r3, [r7, #7]
 80039d2:	e01e      	b.n	8003a12 <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 80039d4:	2200      	movs	r2, #0
 80039d6:	2101      	movs	r1, #1
 80039d8:	4812      	ldr	r0, [pc, #72]	; (8003a24 <XPT2046_ReadCMD+0x74>)
 80039da:	f001 fd6a 	bl	80054b2 <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 80039de:	2108      	movs	r1, #8
 80039e0:	4810      	ldr	r0, [pc, #64]	; (8003a24 <XPT2046_ReadCMD+0x74>)
 80039e2:	f001 fd4f 	bl	8005484 <HAL_GPIO_ReadPin>
 80039e6:	4603      	mov	r3, r0
 80039e8:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 80039ea:	887a      	ldrh	r2, [r7, #2]
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	f1c3 030b 	rsb	r3, r3, #11
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	b21a      	sxth	r2, r3
 80039f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	b21b      	sxth	r3, r3
 8003a00:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 8003a02:	2201      	movs	r2, #1
 8003a04:	2101      	movs	r1, #1
 8003a06:	4807      	ldr	r0, [pc, #28]	; (8003a24 <XPT2046_ReadCMD+0x74>)
 8003a08:	f001 fd53 	bl	80054b2 <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	71fb      	strb	r3, [r7, #7]
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	2b0b      	cmp	r3, #11
 8003a16:	d9dd      	bls.n	80039d4 <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 8003a18:	88bb      	ldrh	r3, [r7, #4]

}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40011800 	.word	0x40011800

08003a28 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff77 	bl	8003928 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 8003a3a:	f7ff ffb9 	bl	80039b0 <XPT2046_ReadCMD>
 8003a3e:	4603      	mov	r3, r0
	
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 8003a52:	2090      	movs	r0, #144	; 0x90
 8003a54:	f7ff ffe8 	bl	8003a28 <XPT2046_ReadAdc>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	f7ff ff47 	bl	80038f0 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 8003a62:	20d0      	movs	r0, #208	; 0xd0
 8003a64:	f7ff ffe0 	bl	8003a28 <XPT2046_ReadAdc>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	89fa      	ldrh	r2, [r7, #14]
 8003a70:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	89ba      	ldrh	r2, [r7, #12]
 8003a76:	801a      	strh	r2, [r3, #0]
	
	
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b092      	sub	sp, #72	; 0x48
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 8003a8e:	f107 0308 	add.w	r3, r7, #8
 8003a92:	2228      	movs	r2, #40	; 0x28
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f005 fd78 	bl	800958c <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 8003a9c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003aa0:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ffce 	bl	8003a48 <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 8003aac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ab0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	3348      	adds	r3, #72	; 0x48
 8003ab8:	443b      	add	r3, r7
 8003aba:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 8003abe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ac2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8003ac6:	330a      	adds	r3, #10
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	3348      	adds	r3, #72	; 0x48
 8003acc:	443b      	add	r3, r7
 8003ace:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 8003ad2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 8003adc:	2110      	movs	r1, #16
 8003ade:	4871      	ldr	r0, [pc, #452]	; (8003ca4 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8003ae0:	f001 fcd0 	bl	8005484 <HAL_GPIO_ReadPin>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <XPT2046_ReadAdc_Smooth_XY+0x72>
 8003aea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003aee:	2b09      	cmp	r3, #9
 8003af0:	d9d4      	bls.n	8003a9c <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 8003af2:	2110      	movs	r1, #16
 8003af4:	486b      	ldr	r0, [pc, #428]	; (8003ca4 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8003af6:	f001 fcc5 	bl	8005484 <HAL_GPIO_ReadPin>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 8003b00:	4b69      	ldr	r3, [pc, #420]	; (8003ca8 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 8003b06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b0a:	2b0a      	cmp	r3, #10
 8003b0c:	f040 80c4 	bne.w	8003c98 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8003b10:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003b14:	643b      	str	r3, [r7, #64]	; 0x40
 8003b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b18:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 8003b1a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	637b      	str	r3, [r7, #52]	; 0x34
		
		for ( i = 1; i < 10; i ++ )
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003b2a:	e02b      	b.n	8003b84 <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 8003b2c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	3348      	adds	r3, #72	; 0x48
 8003b34:	443b      	add	r3, r7
 8003b36:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	dd08      	ble.n	8003b54 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8003b42:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	3348      	adds	r3, #72	; 0x48
 8003b4a:	443b      	add	r3, r7
 8003b4c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003b50:	643b      	str	r3, [r7, #64]	; 0x40
 8003b52:	e012      	b.n	8003b7a <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8003b54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	3348      	adds	r3, #72	; 0x48
 8003b5c:	443b      	add	r3, r7
 8003b5e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003b62:	461a      	mov	r2, r3
 8003b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b66:	4293      	cmp	r3, r2
 8003b68:	da07      	bge.n	8003b7a <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 8003b6a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	3348      	adds	r3, #72	; 0x48
 8003b72:	443b      	add	r3, r7
 8003b74:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 8003b7a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003b84:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003b88:	2b09      	cmp	r3, #9
 8003b8a:	d9cf      	bls.n	8003b2c <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003b92:	e02f      	b.n	8003bf4 <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 8003b94:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003b98:	330a      	adds	r3, #10
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	3348      	adds	r3, #72	; 0x48
 8003b9e:	443b      	add	r3, r7
 8003ba0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	dd09      	ble.n	8003bc0 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 8003bac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003bb0:	330a      	adds	r3, #10
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	3348      	adds	r3, #72	; 0x48
 8003bb6:	443b      	add	r3, r7
 8003bb8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bbe:	e014      	b.n	8003bea <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 8003bc0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003bc4:	330a      	adds	r3, #10
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	3348      	adds	r3, #72	; 0x48
 8003bca:	443b      	add	r3, r7
 8003bcc:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	da08      	bge.n	8003bea <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 8003bd8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003bdc:	330a      	adds	r3, #10
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	3348      	adds	r3, #72	; 0x48
 8003be2:	443b      	add	r3, r7
 8003be4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 8003bea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003bf4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003bf8:	2b09      	cmp	r3, #9
 8003bfa:	d9cb      	bls.n	8003b94 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003bfc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003c00:	461a      	mov	r2, r3
 8003c02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c06:	4413      	add	r3, r2
 8003c08:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003c12:	4413      	add	r3, r2
 8003c14:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003c18:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8003c1a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003c1e:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8003c20:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003c24:	4413      	add	r3, r2
 8003c26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003c30:	4413      	add	r3, r2
 8003c32:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003c36:	441a      	add	r2, r3
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	1ad2      	subs	r2, r2, r3
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8003c48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003c52:	4413      	add	r3, r2
 8003c54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003c5e:	4413      	add	r3, r2
 8003c60:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8003c64:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8003c66:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8003c6a:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8003c6c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8003c70:	4413      	add	r3, r2
 8003c72:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8003c76:	4413      	add	r3, r2
 8003c78:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8003c82:	441a      	add	r2, r3
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	1ad2      	subs	r2, r2, r3
 8003c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 8003c98:	2300      	movs	r3, #0
	
	
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3748      	adds	r7, #72	; 0x48
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40011800 	.word	0x40011800
 8003ca8:	2000025c 	.word	0x2000025c

08003cac <XPT2046_Calculate_CalibrationFactor>:
#endif



static uint8_t XPT2046_Calculate_CalibrationFactor ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_Coordinate * pScreenSample, strType_XPT2046_Calibration * pCalibrationFactor )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]


	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	3204      	adds	r2, #4
 8003cce:	8852      	ldrh	r2, [r2, #2]
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	3208      	adds	r2, #8
 8003cd6:	8852      	ldrh	r2, [r2, #2]
 8003cd8:	1a8a      	subs	r2, r1, r2
 8003cda:	fb03 f202 	mul.w	r2, r3, r2
									                 ( ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	1acb      	subs	r3, r1, r3
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	8849      	ldrh	r1, [r1, #2]
 8003cf2:	4608      	mov	r0, r1
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	3108      	adds	r1, #8
 8003cf8:	8849      	ldrh	r1, [r1, #2]
 8003cfa:	1a41      	subs	r1, r0, r1
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fbea 	bl	80004dc <__aeabi_i2d>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	
	
	if (  pCalibrationFactor -> Divider == 0  )
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	f7fc feae 	bl	8000a80 <__aeabi_dcmpeq>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]
 8003d2e:	e145      	b.n	8003fbc <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3308      	adds	r3, #8
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	3204      	adds	r2, #4
 8003d42:	8852      	ldrh	r2, [r2, #2]
 8003d44:	4611      	mov	r1, r2
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	3208      	adds	r2, #8
 8003d4a:	8852      	ldrh	r2, [r2, #2]
 8003d4c:	1a8a      	subs	r2, r1, r2
 8003d4e:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) );
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3304      	adds	r3, #4
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	1acb      	subs	r3, r1, r3
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	8849      	ldrh	r1, [r1, #2]
 8003d66:	4608      	mov	r0, r1
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	3108      	adds	r1, #8
 8003d6c:	8849      	ldrh	r1, [r1, #2]
 8003d6e:	1a41      	subs	r1, r0, r1
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fbb0 	bl	80004dc <__aeabi_i2d>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	e9c1 2300 	strd	r2, r3, [r1]
		
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	3308      	adds	r3, #8
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	3204      	adds	r2, #4
 8003d98:	8812      	ldrh	r2, [r2, #0]
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	3208      	adds	r2, #8
 8003da0:	8812      	ldrh	r2, [r2, #0]
 8003da2:	1a8a      	subs	r2, r1, r2
 8003da4:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) );
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	4619      	mov	r1, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3308      	adds	r3, #8
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	1acb      	subs	r3, r1, r3
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	3104      	adds	r1, #4
 8003dba:	8809      	ldrh	r1, [r1, #0]
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	3108      	adds	r1, #8
 8003dc2:	8809      	ldrh	r1, [r1, #0]
 8003dc4:	1a41      	subs	r1, r0, r1
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc fb85 	bl	80004dc <__aeabi_i2d>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	3308      	adds	r3, #8
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3304      	adds	r3, #4
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	fb03 f202 	mul.w	r2, r3, r2
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3304      	adds	r3, #4
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	4619      	mov	r1, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3308      	adds	r3, #8
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	8852      	ldrh	r2, [r2, #2]
 8003e06:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3308      	adds	r3, #8
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	fb03 f101 	mul.w	r1, r3, r1
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	fb00 f303 	mul.w	r3, r0, r3
 8003e2a:	1acb      	subs	r3, r1, r3
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	3104      	adds	r1, #4
 8003e30:	8849      	ldrh	r1, [r1, #2]
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8003e36:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .x - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .x ) * pScreenSample [ 2 ] .y ;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	fb03 f101 	mul.w	r1, r3, r1
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3304      	adds	r3, #4
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	fb00 f303 	mul.w	r3, r0, r3
 8003e58:	1acb      	subs	r3, r1, r3
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	3108      	adds	r1, #8
 8003e5e:	8849      	ldrh	r1, [r1, #2]
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 8003e64:	4413      	add	r3, r2
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fc fb38 	bl	80004dc <__aeabi_i2d>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	885b      	ldrh	r3, [r3, #2]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	885b      	ldrh	r3, [r3, #2]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	3204      	adds	r2, #4
 8003e88:	8852      	ldrh	r2, [r2, #2]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	3208      	adds	r2, #8
 8003e90:	8852      	ldrh	r2, [r2, #2]
 8003e92:	1a8a      	subs	r2, r1, r2
 8003e94:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	885b      	ldrh	r3, [r3, #2]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	885b      	ldrh	r3, [r3, #2]
 8003ea6:	1acb      	subs	r3, r1, r3
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	8849      	ldrh	r1, [r1, #2]
 8003eac:	4608      	mov	r0, r1
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	3108      	adds	r1, #8
 8003eb2:	8849      	ldrh	r1, [r1, #2]
 8003eb4:	1a41      	subs	r1, r0, r1
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc fb0d 	bl	80004dc <__aeabi_i2d>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	e9c1 2306 	strd	r2, r3, [r1, #24]
		
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	3204      	adds	r2, #4
 8003ede:	8852      	ldrh	r2, [r2, #2]
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	3208      	adds	r2, #8
 8003ee6:	8852      	ldrh	r2, [r2, #2]
 8003ee8:	1a8a      	subs	r2, r1, r2
 8003eea:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) ) ;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	885b      	ldrh	r3, [r3, #2]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	885b      	ldrh	r3, [r3, #2]
 8003efa:	1acb      	subs	r3, r1, r3
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	3104      	adds	r1, #4
 8003f00:	8809      	ldrh	r1, [r1, #0]
 8003f02:	4608      	mov	r0, r1
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	3108      	adds	r1, #8
 8003f08:	8809      	ldrh	r1, [r1, #0]
 8003f0a:	1a41      	subs	r1, r0, r1
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fc fae2 	bl	80004dc <__aeabi_i2d>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		

		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	3308      	adds	r3, #8
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	885b      	ldrh	r3, [r3, #2]
 8003f30:	fb03 f202 	mul.w	r2, r3, r2
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	3304      	adds	r3, #4
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3308      	adds	r3, #8
 8003f40:	885b      	ldrh	r3, [r3, #2]
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	8852      	ldrh	r2, [r2, #2]
 8003f4c:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	4619      	mov	r1, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	885b      	ldrh	r3, [r3, #2]
 8003f5c:	fb03 f101 	mul.w	r1, r3, r1
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	3308      	adds	r3, #8
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	885b      	ldrh	r3, [r3, #2]
 8003f6c:	fb00 f303 	mul.w	r3, r0, r3
 8003f70:	1acb      	subs	r3, r1, r3
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	3104      	adds	r1, #4
 8003f76:	8849      	ldrh	r1, [r1, #2]
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8003f7c:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .y - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .y ) * pScreenSample [ 2 ] .y;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	3304      	adds	r3, #4
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	4619      	mov	r1, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	885b      	ldrh	r3, [r3, #2]
 8003f8a:	fb03 f101 	mul.w	r1, r3, r1
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3304      	adds	r3, #4
 8003f98:	885b      	ldrh	r3, [r3, #2]
 8003f9a:	fb00 f303 	mul.w	r3, r0, r3
 8003f9e:	1acb      	subs	r3, r1, r3
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	3108      	adds	r1, #8
 8003fa4:	8849      	ldrh	r1, [r1, #2]
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8003faa:	4413      	add	r3, r2
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc fa95 	bl	80004dc <__aeabi_i2d>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			
	}
	
	
	return ucRet;
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
	
	
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <XPT2046_Touch_Calibrate>:



uint8_t XPT2046_Touch_Calibrate ( void )
{
 8003fc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003fcc:	b0a0      	sub	sp, #128	; 0x80
 8003fce:	af02      	add	r7, sp, #8
		uint8_t i;
		
		char cStr [ 10 ];
		
    uint16_t usScreenWidth, usScreenHeigth;
		uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		
	  char * pStr = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	66bb      	str	r3, [r7, #104]	; 0x68
	  
	  strType_XPT2046_Calibration CalibrationFactor;
    		

		#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	    usScreenWidth = LCD_Default_Max_Width;
 8003fec:	23f0      	movs	r3, #240	; 0xf0
 8003fee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	    usScreenHeigth = LCD_Default_Max_Heigth;
 8003ff2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003ff6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	
	  #endif
		
		

		strCrossCoordinate [ 0 ] .x = usScreenWidth >> 2;
 8003ffa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	b29b      	uxth	r3, r3
 8004002:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		strCrossCoordinate [ 0 ] .y = usScreenHeigth >> 2;
 8004006:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	b29b      	uxth	r3, r3
 800400e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		
		strCrossCoordinate [ 1 ] .x = strCrossCoordinate [ 0 ] .x;
 8004012:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004016:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		strCrossCoordinate [ 1 ] .y = ( usScreenHeigth * 3 ) >> 2;
 800401a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800401e:	4613      	mov	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	109b      	asrs	r3, r3, #2
 8004026:	b29b      	uxth	r3, r3
 8004028:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		
		strCrossCoordinate [ 2 ] .x = ( usScreenWidth * 3 ) >> 2;
 800402c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	109b      	asrs	r3, r3, #2
 8004038:	b29b      	uxth	r3, r3
 800403a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		strCrossCoordinate [ 2 ] .y = strCrossCoordinate [ 1 ] .y;
 800403e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004042:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		
		strCrossCoordinate [ 3 ] .x = strCrossCoordinate [ 2 ] .x;
 8004046:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800404a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		strCrossCoordinate [ 3 ] .y = strCrossCoordinate [ 0 ] .y;		
 800404e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004052:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  	
			
		LCD_GramScan (1 );
 8004056:	2001      	movs	r0, #1
 8004058:	f7fe f944 	bl	80022e4 <LCD_GramScan>
		
		
		for ( i = 0; i < 4; i ++ )
 800405c:	2300      	movs	r3, #0
 800405e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004062:	e066      	b.n	8004132 <XPT2046_Touch_Calibrate+0x16a>
		{ 
			LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );       
 8004064:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004068:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800406c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004070:	9100      	str	r1, [sp, #0]
 8004072:	2100      	movs	r1, #0
 8004074:	2000      	movs	r0, #0
 8004076:	f7fd fff6 	bl	8002066 <LCD_Clear>
			
			pStr = "Touch Calibrate ......";			
 800407a:	4bc6      	ldr	r3, [pc, #792]	; (8004394 <XPT2046_Touch_Calibrate+0x3cc>)
 800407c:	66bb      	str	r3, [r7, #104]	; 0x68
      LCD_DrawString_Color ( ( usScreenWidth - ( strlen ( pStr ) - 7 ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );			
 800407e:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8004082:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004084:	f7fc f8d0 	bl	8000228 <strlen>
 8004088:	4603      	mov	r3, r0
 800408a:	3b07      	subs	r3, #7
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	1ae3      	subs	r3, r4, r3
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	b298      	uxth	r0, r3
 8004094:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	b299      	uxth	r1, r3
 800409c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040a8:	f7fe f8e6 	bl	8002278 <LCD_DrawString_Color>
		
			sprintf ( cStr, "%d", i + 1 );
 80040ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040b6:	49b8      	ldr	r1, [pc, #736]	; (8004398 <XPT2046_Touch_Calibrate+0x3d0>)
 80040b8:	4618      	mov	r0, r3
 80040ba:	f005 fecf 	bl	8009e5c <siprintf>
			LCD_DrawString_Color ( usScreenWidth >> 1, ( usScreenHeigth >> 1 ) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED );
 80040be:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	b298      	uxth	r0, r3
 80040c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b10      	subs	r3, #16
 80040d0:	b299      	uxth	r1, r3
 80040d2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80040d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040e0:	f7fe f8ca 	bl	8002278 <LCD_DrawString_Color>
		
			XPT2046_DelayUS ( 100000 );		                                                   
 80040e4:	48ad      	ldr	r0, [pc, #692]	; (800439c <XPT2046_Touch_Calibrate+0x3d4>)
 80040e6:	f7ff fc03 	bl	80038f0 <XPT2046_DelayUS>
			
			LCD_DrawCross ( strCrossCoordinate [ i ] .x, strCrossCoordinate [ i ] .y );  
 80040ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	3378      	adds	r3, #120	; 0x78
 80040f2:	443b      	add	r3, r7
 80040f4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80040f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	3378      	adds	r3, #120	; 0x78
 8004100:	443b      	add	r3, r7
 8004102:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 8004106:	4619      	mov	r1, r3
 8004108:	4610      	mov	r0, r2
 800410a:	f7fe f893 	bl	8002234 <LCD_DrawCross>

			while ( ! XPT2046_ReadAdc_Smooth_XY ( & strScreenSample [ i ] ) );         
 800410e:	bf00      	nop
 8004110:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004114:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fcaf 	bl	8003a80 <XPT2046_ReadAdc_Smooth_XY>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f3      	beq.n	8004110 <XPT2046_Touch_Calibrate+0x148>
		for ( i = 0; i < 4; i ++ )
 8004128:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800412c:	3301      	adds	r3, #1
 800412e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004132:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004136:	2b03      	cmp	r3, #3
 8004138:	d994      	bls.n	8004064 <XPT2046_Touch_Calibrate+0x9c>

		}
		
		
		XPT2046_Calculate_CalibrationFactor ( strCrossCoordinate, strScreenSample, & CalibrationFactor ) ;  	 
 800413a:	463a      	mov	r2, r7
 800413c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004140:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff fdb1 	bl	8003cac <XPT2046_Calculate_CalibrationFactor>
		
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 800414a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	f7fc fc93 	bl	8000a80 <__aeabi_dcmpeq>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 8116 	bne.w	800438e <XPT2046_Touch_Calibrate+0x3c6>
		
			
		usTest_x = ( ( CalibrationFactor .An * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .Bn * strScreenSample [ 3 ] .y ) + CalibrationFactor .Cn ) / CalibrationFactor .Divider;		
 8004162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004166:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800416a:	4618      	mov	r0, r3
 800416c:	f7fc f9b6 	bl	80004dc <__aeabi_i2d>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4620      	mov	r0, r4
 8004176:	4629      	mov	r1, r5
 8004178:	f7fc fa1a 	bl	80005b0 <__aeabi_dmul>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4690      	mov	r8, r2
 8004182:	4699      	mov	r9, r3
 8004184:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004188:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800418c:	4618      	mov	r0, r3
 800418e:	f7fc f9a5 	bl	80004dc <__aeabi_i2d>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4620      	mov	r0, r4
 8004198:	4629      	mov	r1, r5
 800419a:	f7fc fa09 	bl	80005b0 <__aeabi_dmul>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4640      	mov	r0, r8
 80041a4:	4649      	mov	r1, r9
 80041a6:	f7fc f84d 	bl	8000244 <__adddf3>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041b6:	f7fc f845 	bl	8000244 <__adddf3>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4610      	mov	r0, r2
 80041c0:	4619      	mov	r1, r3
 80041c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041c6:	f7fc fb1d 	bl	8000804 <__aeabi_ddiv>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4610      	mov	r0, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	f7fc fcc5 	bl	8000b60 <__aeabi_d2uiz>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		usTest_y = ( ( CalibrationFactor .Dn * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .En * strScreenSample [ 3 ] .y ) + CalibrationFactor .Fn ) / CalibrationFactor .Divider;   
 80041dc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80041e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fc f979 	bl	80004dc <__aeabi_i2d>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4620      	mov	r0, r4
 80041f0:	4629      	mov	r1, r5
 80041f2:	f7fc f9dd 	bl	80005b0 <__aeabi_dmul>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4690      	mov	r8, r2
 80041fc:	4699      	mov	r9, r3
 80041fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004202:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc f968 	bl	80004dc <__aeabi_i2d>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4620      	mov	r0, r4
 8004212:	4629      	mov	r1, r5
 8004214:	f7fc f9cc 	bl	80005b0 <__aeabi_dmul>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4640      	mov	r0, r8
 800421e:	4649      	mov	r1, r9
 8004220:	f7fc f810 	bl	8000244 <__adddf3>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004230:	f7fc f808 	bl	8000244 <__adddf3>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004240:	f7fc fae0 	bl	8000804 <__aeabi_ddiv>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4610      	mov	r0, r2
 800424a:	4619      	mov	r1, r3
 800424c:	f7fc fc88 	bl	8000b60 <__aeabi_d2uiz>
 8004250:	4603      	mov	r3, r0
 8004252:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		
		usGap_x = ( usTest_x > strCrossCoordinate [ 3 ] .x ) ? ( usTest_x - strCrossCoordinate [ 3 ] .x ) : ( strCrossCoordinate [ 3 ] .x - usTest_x );  
 8004256:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800425a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800425e:	429a      	cmp	r2, r3
 8004260:	d906      	bls.n	8004270 <XPT2046_Touch_Calibrate+0x2a8>
 8004262:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004266:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	b29b      	uxth	r3, r3
 800426e:	e005      	b.n	800427c <XPT2046_Touch_Calibrate+0x2b4>
 8004270:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004274:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	b29b      	uxth	r3, r3
 800427c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		usGap_y = ( usTest_y > strCrossCoordinate [ 3 ] .y ) ? ( usTest_y - strCrossCoordinate [ 3 ] .y ) : ( strCrossCoordinate [ 3 ] .y - usTest_y );  
 8004280:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004284:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8004288:	429a      	cmp	r2, r3
 800428a:	d906      	bls.n	800429a <XPT2046_Touch_Calibrate+0x2d2>
 800428c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004290:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	b29b      	uxth	r3, r3
 8004298:	e005      	b.n	80042a6 <XPT2046_Touch_Calibrate+0x2de>
 800429a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800429e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 80042aa:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80042ae:	2b0a      	cmp	r3, #10
 80042b0:	d87c      	bhi.n	80043ac <XPT2046_Touch_Calibrate+0x3e4>
 80042b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80042b6:	2b0a      	cmp	r3, #10
 80042b8:	d878      	bhi.n	80043ac <XPT2046_Touch_Calibrate+0x3e4>
		

		strXPT2046_TouchPara .dX_X = ( CalibrationFactor .An * 1.0 ) / CalibrationFactor .Divider;
 80042ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042c2:	f7fc fa9f 	bl	8000804 <__aeabi_ddiv>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4935      	ldr	r1, [pc, #212]	; (80043a0 <XPT2046_Touch_Calibrate+0x3d8>)
 80042cc:	e9c1 2300 	strd	r2, r3, [r1]
		strXPT2046_TouchPara .dX_Y = ( CalibrationFactor .Bn * 1.0 ) / CalibrationFactor .Divider;
 80042d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042d8:	f7fc fa94 	bl	8000804 <__aeabi_ddiv>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	492f      	ldr	r1, [pc, #188]	; (80043a0 <XPT2046_Touch_Calibrate+0x3d8>)
 80042e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		strXPT2046_TouchPara .dX   = ( CalibrationFactor .Cn * 1.0 ) / CalibrationFactor .Divider;
 80042e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042ee:	f7fc fa89 	bl	8000804 <__aeabi_ddiv>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	492a      	ldr	r1, [pc, #168]	; (80043a0 <XPT2046_Touch_Calibrate+0x3d8>)
 80042f8:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		strXPT2046_TouchPara .dY_X = ( CalibrationFactor .Dn * 1.0 ) / CalibrationFactor .Divider;
 80042fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004300:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004304:	f7fc fa7e 	bl	8000804 <__aeabi_ddiv>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4924      	ldr	r1, [pc, #144]	; (80043a0 <XPT2046_Touch_Calibrate+0x3d8>)
 800430e:	e9c1 2306 	strd	r2, r3, [r1, #24]
		strXPT2046_TouchPara .dY_Y = ( CalibrationFactor .En * 1.0 ) / CalibrationFactor .Divider;
 8004312:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004316:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800431a:	f7fc fa73 	bl	8000804 <__aeabi_ddiv>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	491f      	ldr	r1, [pc, #124]	; (80043a0 <XPT2046_Touch_Calibrate+0x3d8>)
 8004324:	e9c1 2308 	strd	r2, r3, [r1, #32]
		strXPT2046_TouchPara .dY   = ( CalibrationFactor .Fn * 1.0 ) / CalibrationFactor .Divider;
 8004328:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800432c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004330:	f7fc fa68 	bl	8000804 <__aeabi_ddiv>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4919      	ldr	r1, [pc, #100]	; (80043a0 <XPT2046_Touch_Calibrate+0x3d8>)
 800433a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	

	#endif
	
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 800433e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004342:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004346:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800434a:	9100      	str	r1, [sp, #0]
 800434c:	2100      	movs	r1, #0
 800434e:	2000      	movs	r0, #0
 8004350:	f7fd fe89 	bl	8002066 <LCD_Clear>
	
	pStr = "Calibrate Succed";			
 8004354:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <XPT2046_Touch_Calibrate+0x3dc>)
 8004356:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 8004358:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800435c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800435e:	f7fb ff63 	bl	8000228 <strlen>
 8004362:	4603      	mov	r3, r0
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	1ae3      	subs	r3, r4, r3
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	b298      	uxth	r0, r3
 800436c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	b299      	uxth	r1, r3
 8004374:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800437e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004380:	f7fd ff7a 	bl	8002278 <LCD_DrawString_Color>

  XPT2046_DelayUS ( 200000 );
 8004384:	4808      	ldr	r0, [pc, #32]	; (80043a8 <XPT2046_Touch_Calibrate+0x3e0>)
 8004386:	f7ff fab3 	bl	80038f0 <XPT2046_DelayUS>

	return 1;    
 800438a:	2301      	movs	r3, #1
 800438c:	e050      	b.n	8004430 <XPT2046_Touch_Calibrate+0x468>
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 800438e:	bf00      	nop
 8004390:	e00d      	b.n	80043ae <XPT2046_Touch_Calibrate+0x3e6>
 8004392:	bf00      	nop
 8004394:	0800c44c 	.word	0x0800c44c
 8004398:	0800c464 	.word	0x0800c464
 800439c:	000186a0 	.word	0x000186a0
 80043a0:	20000010 	.word	0x20000010
 80043a4:	0800c468 	.word	0x0800c468
 80043a8:	00030d40 	.word	0x00030d40
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 80043ac:	bf00      	nop
	

	Failure:
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND ); 
 80043ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043b2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80043b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80043ba:	9100      	str	r1, [sp, #0]
 80043bc:	2100      	movs	r1, #0
 80043be:	2000      	movs	r0, #0
 80043c0:	f7fd fe51 	bl	8002066 <LCD_Clear>
	
	pStr = "Calibrate fail";			
 80043c4:	4b1d      	ldr	r3, [pc, #116]	; (800443c <XPT2046_Touch_Calibrate+0x474>)
 80043c6:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 80043c8:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80043cc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80043ce:	f7fb ff2b 	bl	8000228 <strlen>
 80043d2:	4603      	mov	r3, r0
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	1ae3      	subs	r3, r4, r3
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	b298      	uxth	r0, r3
 80043dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	b299      	uxth	r1, r3
 80043e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043f0:	f7fd ff42 	bl	8002278 <LCD_DrawString_Color>

	pStr = "try again";			
 80043f4:	4b12      	ldr	r3, [pc, #72]	; (8004440 <XPT2046_Touch_Calibrate+0x478>)
 80043f6:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, ( usScreenHeigth >> 1 ) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED );				
 80043f8:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80043fc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80043fe:	f7fb ff13 	bl	8000228 <strlen>
 8004402:	4603      	mov	r3, r0
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	1ae3      	subs	r3, r4, r3
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	b298      	uxth	r0, r3
 800440c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	b29b      	uxth	r3, r3
 8004414:	3310      	adds	r3, #16
 8004416:	b299      	uxth	r1, r3
 8004418:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004422:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004424:	f7fd ff28 	bl	8002278 <LCD_DrawString_Color>

	XPT2046_DelayUS ( 1000000 );		
 8004428:	4806      	ldr	r0, [pc, #24]	; (8004444 <XPT2046_Touch_Calibrate+0x47c>)
 800442a:	f7ff fa61 	bl	80038f0 <XPT2046_DelayUS>
	
	return 0; 
 800442e:	2300      	movs	r3, #0
		
		
}
 8004430:	4618      	mov	r0, r3
 8004432:	3778      	adds	r7, #120	; 0x78
 8004434:	46bd      	mov	sp, r7
 8004436:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800443a:	bf00      	nop
 800443c:	0800c47c 	.word	0x0800c47c
 8004440:	0800c48c 	.word	0x0800c48c
 8004444:	000f4240 	.word	0x000f4240

08004448 <XPT2046_Get_TouchedPoint>:

   

uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 8004448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 8004458:	f107 0308 	add.w	r3, r7, #8
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fb0f 	bl	8003a80 <XPT2046_ReadAdc_Smooth_XY>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d06e      	beq.n	8004546 <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800446e:	893b      	ldrh	r3, [r7, #8]
 8004470:	4618      	mov	r0, r3
 8004472:	f7fc f833 	bl	80004dc <__aeabi_i2d>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4620      	mov	r0, r4
 800447c:	4629      	mov	r1, r5
 800447e:	f7fc f897 	bl	80005b0 <__aeabi_dmul>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4690      	mov	r8, r2
 8004488:	4699      	mov	r9, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004490:	897b      	ldrh	r3, [r7, #10]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fc f822 	bl	80004dc <__aeabi_i2d>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4620      	mov	r0, r4
 800449e:	4629      	mov	r1, r5
 80044a0:	f7fc f886 	bl	80005b0 <__aeabi_dmul>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4640      	mov	r0, r8
 80044aa:	4649      	mov	r1, r9
 80044ac:	f7fb feca 	bl	8000244 <__adddf3>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80044be:	f7fb fec1 	bl	8000244 <__adddf3>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	f7fc fb49 	bl	8000b60 <__aeabi_d2uiz>
 80044ce:	4603      	mov	r3, r0
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80044dc:	893b      	ldrh	r3, [r7, #8]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fb fffc 	bl	80004dc <__aeabi_i2d>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4620      	mov	r0, r4
 80044ea:	4629      	mov	r1, r5
 80044ec:	f7fc f860 	bl	80005b0 <__aeabi_dmul>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4690      	mov	r8, r2
 80044f6:	4699      	mov	r9, r3
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80044fe:	897b      	ldrh	r3, [r7, #10]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fb ffeb 	bl	80004dc <__aeabi_i2d>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4620      	mov	r0, r4
 800450c:	4629      	mov	r1, r5
 800450e:	f7fc f84f 	bl	80005b0 <__aeabi_dmul>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4640      	mov	r0, r8
 8004518:	4649      	mov	r1, r9
 800451a:	f7fb fe93 	bl	8000244 <__adddf3>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800452c:	f7fb fe8a 	bl	8000244 <__adddf3>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	f7fc fb12 	bl	8000b60 <__aeabi_d2uiz>
 800453c:	4603      	mov	r3, r0
 800453e:	b29a      	uxth	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	805a      	strh	r2, [r3, #2]
 8004544:	e001      	b.n	800454a <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 8004546:	2300      	movs	r3, #0
 8004548:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 800454a:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08004558 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004558:	480c      	ldr	r0, [pc, #48]	; (800458c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800455a:	490d      	ldr	r1, [pc, #52]	; (8004590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800455c:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800455e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004560:	e002      	b.n	8004568 <LoopCopyDataInit>

08004562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004566:	3304      	adds	r3, #4

08004568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800456a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800456c:	d3f9      	bcc.n	8004562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004570:	4c0a      	ldr	r4, [pc, #40]	; (800459c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004574:	e001      	b.n	800457a <LoopFillZerobss>

08004576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004578:	3204      	adds	r2, #4

0800457a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800457a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800457c:	d3fb      	bcc.n	8004576 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800457e:	f7fe ff9d 	bl	80034bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004582:	f004 ffd1 	bl	8009528 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004586:	f7fd ff5f 	bl	8002448 <main>
  bx lr
 800458a:	4770      	bx	lr
  ldr r0, =_sdata
 800458c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004590:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8004594:	0800cf04 	.word	0x0800cf04
  ldr r2, =_sbss
 8004598:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800459c:	200008f0 	.word	0x200008f0

080045a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045a0:	e7fe      	b.n	80045a0 <ADC1_2_IRQHandler>
	...

080045a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045a8:	4b08      	ldr	r3, [pc, #32]	; (80045cc <HAL_Init+0x28>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a07      	ldr	r2, [pc, #28]	; (80045cc <HAL_Init+0x28>)
 80045ae:	f043 0310 	orr.w	r3, r3, #16
 80045b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045b4:	2003      	movs	r0, #3
 80045b6:	f000 f947 	bl	8004848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045ba:	200f      	movs	r0, #15
 80045bc:	f000 f808 	bl	80045d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045c0:	f7fe fcf8 	bl	8002fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40022000 	.word	0x40022000

080045d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045d8:	4b12      	ldr	r3, [pc, #72]	; (8004624 <HAL_InitTick+0x54>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b12      	ldr	r3, [pc, #72]	; (8004628 <HAL_InitTick+0x58>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	4619      	mov	r1, r3
 80045e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f95f 	bl	80048b2 <HAL_SYSTICK_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e00e      	b.n	800461c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b0f      	cmp	r3, #15
 8004602:	d80a      	bhi.n	800461a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004604:	2200      	movs	r2, #0
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800460c:	f000 f927 	bl	800485e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004610:	4a06      	ldr	r2, [pc, #24]	; (800462c <HAL_InitTick+0x5c>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e000      	b.n	800461c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000004 	.word	0x20000004
 8004628:	20000044 	.word	0x20000044
 800462c:	20000040 	.word	0x20000040

08004630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <HAL_IncTick+0x1c>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <HAL_IncTick+0x20>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4413      	add	r3, r2
 8004640:	4a03      	ldr	r2, [pc, #12]	; (8004650 <HAL_IncTick+0x20>)
 8004642:	6013      	str	r3, [r2, #0]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr
 800464c:	20000044 	.word	0x20000044
 8004650:	200008ec 	.word	0x200008ec

08004654 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return uwTick;
 8004658:	4b02      	ldr	r3, [pc, #8]	; (8004664 <HAL_GetTick+0x10>)
 800465a:	681b      	ldr	r3, [r3, #0]
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr
 8004664:	200008ec 	.word	0x200008ec

08004668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004670:	f7ff fff0 	bl	8004654 <HAL_GetTick>
 8004674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004680:	d005      	beq.n	800468e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004682:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <HAL_Delay+0x44>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800468e:	bf00      	nop
 8004690:	f7ff ffe0 	bl	8004654 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	429a      	cmp	r2, r3
 800469e:	d8f7      	bhi.n	8004690 <HAL_Delay+0x28>
  {
  }
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000044 	.word	0x20000044

080046b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <__NVIC_SetPriorityGrouping+0x44>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046cc:	4013      	ands	r3, r2
 80046ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046e2:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <__NVIC_SetPriorityGrouping+0x44>)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	60d3      	str	r3, [r2, #12]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	e000ed00 	.word	0xe000ed00

080046f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046fc:	4b04      	ldr	r3, [pc, #16]	; (8004710 <__NVIC_GetPriorityGrouping+0x18>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	0a1b      	lsrs	r3, r3, #8
 8004702:	f003 0307 	and.w	r3, r3, #7
}
 8004706:	4618      	mov	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	e000ed00 	.word	0xe000ed00

08004714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800471e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004722:	2b00      	cmp	r3, #0
 8004724:	db0b      	blt.n	800473e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	f003 021f 	and.w	r2, r3, #31
 800472c:	4906      	ldr	r1, [pc, #24]	; (8004748 <__NVIC_EnableIRQ+0x34>)
 800472e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	2001      	movs	r0, #1
 8004736:	fa00 f202 	lsl.w	r2, r0, r2
 800473a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	e000e100 	.word	0xe000e100

0800474c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	6039      	str	r1, [r7, #0]
 8004756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475c:	2b00      	cmp	r3, #0
 800475e:	db0a      	blt.n	8004776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	490c      	ldr	r1, [pc, #48]	; (8004798 <__NVIC_SetPriority+0x4c>)
 8004766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476a:	0112      	lsls	r2, r2, #4
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	440b      	add	r3, r1
 8004770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004774:	e00a      	b.n	800478c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4908      	ldr	r1, [pc, #32]	; (800479c <__NVIC_SetPriority+0x50>)
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	3b04      	subs	r3, #4
 8004784:	0112      	lsls	r2, r2, #4
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	440b      	add	r3, r1
 800478a:	761a      	strb	r2, [r3, #24]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	e000e100 	.word	0xe000e100
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f1c3 0307 	rsb	r3, r3, #7
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	bf28      	it	cs
 80047be:	2304      	movcs	r3, #4
 80047c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	3304      	adds	r3, #4
 80047c6:	2b06      	cmp	r3, #6
 80047c8:	d902      	bls.n	80047d0 <NVIC_EncodePriority+0x30>
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3b03      	subs	r3, #3
 80047ce:	e000      	b.n	80047d2 <NVIC_EncodePriority+0x32>
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43da      	mvns	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	401a      	ands	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	43d9      	mvns	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f8:	4313      	orrs	r3, r2
         );
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3724      	adds	r7, #36	; 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr

08004804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3b01      	subs	r3, #1
 8004810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004814:	d301      	bcc.n	800481a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004816:	2301      	movs	r3, #1
 8004818:	e00f      	b.n	800483a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800481a:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <SysTick_Config+0x40>)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3b01      	subs	r3, #1
 8004820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004822:	210f      	movs	r1, #15
 8004824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004828:	f7ff ff90 	bl	800474c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <SysTick_Config+0x40>)
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004832:	4b04      	ldr	r3, [pc, #16]	; (8004844 <SysTick_Config+0x40>)
 8004834:	2207      	movs	r2, #7
 8004836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	e000e010 	.word	0xe000e010

08004848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff ff2d 	bl	80046b0 <__NVIC_SetPriorityGrouping>
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800485e:	b580      	push	{r7, lr}
 8004860:	b086      	sub	sp, #24
 8004862:	af00      	add	r7, sp, #0
 8004864:	4603      	mov	r3, r0
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004870:	f7ff ff42 	bl	80046f8 <__NVIC_GetPriorityGrouping>
 8004874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	6978      	ldr	r0, [r7, #20]
 800487c:	f7ff ff90 	bl	80047a0 <NVIC_EncodePriority>
 8004880:	4602      	mov	r2, r0
 8004882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ff5f 	bl	800474c <__NVIC_SetPriority>
}
 800488e:	bf00      	nop
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	4603      	mov	r3, r0
 800489e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff ff35 	bl	8004714 <__NVIC_EnableIRQ>
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff ffa2 	bl	8004804 <SysTick_Config>
 80048c0:	4603      	mov	r3, r0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e059      	b.n	8004996 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <HAL_DMA_Init+0xd4>)
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d80f      	bhi.n	800490e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	4b2b      	ldr	r3, [pc, #172]	; (80049a4 <HAL_DMA_Init+0xd8>)
 80048f6:	4413      	add	r3, r2
 80048f8:	4a2b      	ldr	r2, [pc, #172]	; (80049a8 <HAL_DMA_Init+0xdc>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	091b      	lsrs	r3, r3, #4
 8004900:	009a      	lsls	r2, r3, #2
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a28      	ldr	r2, [pc, #160]	; (80049ac <HAL_DMA_Init+0xe0>)
 800490a:	63da      	str	r2, [r3, #60]	; 0x3c
 800490c:	e00e      	b.n	800492c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <HAL_DMA_Init+0xe4>)
 8004916:	4413      	add	r3, r2
 8004918:	4a23      	ldr	r2, [pc, #140]	; (80049a8 <HAL_DMA_Init+0xdc>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	009a      	lsls	r2, r3, #2
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <HAL_DMA_Init+0xe8>)
 800492a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004942:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004946:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004950:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800495c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004968:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	40020407 	.word	0x40020407
 80049a4:	bffdfff8 	.word	0xbffdfff8
 80049a8:	cccccccd 	.word	0xcccccccd
 80049ac:	40020000 	.word	0x40020000
 80049b0:	bffdfbf8 	.word	0xbffdfbf8
 80049b4:	40020400 	.word	0x40020400

080049b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_DMA_Start_IT+0x20>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e04a      	b.n	8004a6e <HAL_DMA_Start_IT+0xb6>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d13a      	bne.n	8004a60 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 fb76 	bl	8005100 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 020e 	orr.w	r2, r2, #14
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e00f      	b.n	8004a4e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0204 	bic.w	r2, r2, #4
 8004a3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 020a 	orr.w	r2, r2, #10
 8004a4c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e005      	b.n	8004a6c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d005      	beq.n	8004a9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2204      	movs	r2, #4
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
 8004a98:	e0d6      	b.n	8004c48 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 020e 	bic.w	r2, r2, #14
 8004aa8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	4b64      	ldr	r3, [pc, #400]	; (8004c54 <HAL_DMA_Abort_IT+0x1dc>)
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d958      	bls.n	8004b78 <HAL_DMA_Abort_IT+0x100>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a63      	ldr	r2, [pc, #396]	; (8004c58 <HAL_DMA_Abort_IT+0x1e0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d04f      	beq.n	8004b70 <HAL_DMA_Abort_IT+0xf8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a61      	ldr	r2, [pc, #388]	; (8004c5c <HAL_DMA_Abort_IT+0x1e4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d048      	beq.n	8004b6c <HAL_DMA_Abort_IT+0xf4>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a60      	ldr	r2, [pc, #384]	; (8004c60 <HAL_DMA_Abort_IT+0x1e8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d040      	beq.n	8004b66 <HAL_DMA_Abort_IT+0xee>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a5e      	ldr	r2, [pc, #376]	; (8004c64 <HAL_DMA_Abort_IT+0x1ec>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d038      	beq.n	8004b60 <HAL_DMA_Abort_IT+0xe8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a5d      	ldr	r2, [pc, #372]	; (8004c68 <HAL_DMA_Abort_IT+0x1f0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d030      	beq.n	8004b5a <HAL_DMA_Abort_IT+0xe2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a5b      	ldr	r2, [pc, #364]	; (8004c6c <HAL_DMA_Abort_IT+0x1f4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d028      	beq.n	8004b54 <HAL_DMA_Abort_IT+0xdc>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a53      	ldr	r2, [pc, #332]	; (8004c54 <HAL_DMA_Abort_IT+0x1dc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d020      	beq.n	8004b4e <HAL_DMA_Abort_IT+0xd6>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a57      	ldr	r2, [pc, #348]	; (8004c70 <HAL_DMA_Abort_IT+0x1f8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d019      	beq.n	8004b4a <HAL_DMA_Abort_IT+0xd2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a56      	ldr	r2, [pc, #344]	; (8004c74 <HAL_DMA_Abort_IT+0x1fc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d012      	beq.n	8004b46 <HAL_DMA_Abort_IT+0xce>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a54      	ldr	r2, [pc, #336]	; (8004c78 <HAL_DMA_Abort_IT+0x200>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00a      	beq.n	8004b40 <HAL_DMA_Abort_IT+0xc8>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a53      	ldr	r2, [pc, #332]	; (8004c7c <HAL_DMA_Abort_IT+0x204>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d102      	bne.n	8004b3a <HAL_DMA_Abort_IT+0xc2>
 8004b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b38:	e01b      	b.n	8004b72 <HAL_DMA_Abort_IT+0xfa>
 8004b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b3e:	e018      	b.n	8004b72 <HAL_DMA_Abort_IT+0xfa>
 8004b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b44:	e015      	b.n	8004b72 <HAL_DMA_Abort_IT+0xfa>
 8004b46:	2310      	movs	r3, #16
 8004b48:	e013      	b.n	8004b72 <HAL_DMA_Abort_IT+0xfa>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e011      	b.n	8004b72 <HAL_DMA_Abort_IT+0xfa>
 8004b4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b52:	e00e      	b.n	8004b72 <HAL_DMA_Abort_IT+0xfa>
 8004b54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b58:	e00b      	b.n	8004b72 <HAL_DMA_Abort_IT+0xfa>
 8004b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b5e:	e008      	b.n	8004b72 <HAL_DMA_Abort_IT+0xfa>
 8004b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b64:	e005      	b.n	8004b72 <HAL_DMA_Abort_IT+0xfa>
 8004b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b6a:	e002      	b.n	8004b72 <HAL_DMA_Abort_IT+0xfa>
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	e000      	b.n	8004b72 <HAL_DMA_Abort_IT+0xfa>
 8004b70:	2301      	movs	r3, #1
 8004b72:	4a43      	ldr	r2, [pc, #268]	; (8004c80 <HAL_DMA_Abort_IT+0x208>)
 8004b74:	6053      	str	r3, [r2, #4]
 8004b76:	e057      	b.n	8004c28 <HAL_DMA_Abort_IT+0x1b0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a36      	ldr	r2, [pc, #216]	; (8004c58 <HAL_DMA_Abort_IT+0x1e0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d04f      	beq.n	8004c22 <HAL_DMA_Abort_IT+0x1aa>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a35      	ldr	r2, [pc, #212]	; (8004c5c <HAL_DMA_Abort_IT+0x1e4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d048      	beq.n	8004c1e <HAL_DMA_Abort_IT+0x1a6>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a33      	ldr	r2, [pc, #204]	; (8004c60 <HAL_DMA_Abort_IT+0x1e8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d040      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x1a0>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a32      	ldr	r2, [pc, #200]	; (8004c64 <HAL_DMA_Abort_IT+0x1ec>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d038      	beq.n	8004c12 <HAL_DMA_Abort_IT+0x19a>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a30      	ldr	r2, [pc, #192]	; (8004c68 <HAL_DMA_Abort_IT+0x1f0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d030      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x194>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a2f      	ldr	r2, [pc, #188]	; (8004c6c <HAL_DMA_Abort_IT+0x1f4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d028      	beq.n	8004c06 <HAL_DMA_Abort_IT+0x18e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a26      	ldr	r2, [pc, #152]	; (8004c54 <HAL_DMA_Abort_IT+0x1dc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d020      	beq.n	8004c00 <HAL_DMA_Abort_IT+0x188>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a2b      	ldr	r2, [pc, #172]	; (8004c70 <HAL_DMA_Abort_IT+0x1f8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d019      	beq.n	8004bfc <HAL_DMA_Abort_IT+0x184>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a29      	ldr	r2, [pc, #164]	; (8004c74 <HAL_DMA_Abort_IT+0x1fc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d012      	beq.n	8004bf8 <HAL_DMA_Abort_IT+0x180>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a28      	ldr	r2, [pc, #160]	; (8004c78 <HAL_DMA_Abort_IT+0x200>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00a      	beq.n	8004bf2 <HAL_DMA_Abort_IT+0x17a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a26      	ldr	r2, [pc, #152]	; (8004c7c <HAL_DMA_Abort_IT+0x204>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d102      	bne.n	8004bec <HAL_DMA_Abort_IT+0x174>
 8004be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bea:	e01b      	b.n	8004c24 <HAL_DMA_Abort_IT+0x1ac>
 8004bec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bf0:	e018      	b.n	8004c24 <HAL_DMA_Abort_IT+0x1ac>
 8004bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bf6:	e015      	b.n	8004c24 <HAL_DMA_Abort_IT+0x1ac>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	e013      	b.n	8004c24 <HAL_DMA_Abort_IT+0x1ac>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e011      	b.n	8004c24 <HAL_DMA_Abort_IT+0x1ac>
 8004c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c04:	e00e      	b.n	8004c24 <HAL_DMA_Abort_IT+0x1ac>
 8004c06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c0a:	e00b      	b.n	8004c24 <HAL_DMA_Abort_IT+0x1ac>
 8004c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c10:	e008      	b.n	8004c24 <HAL_DMA_Abort_IT+0x1ac>
 8004c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c16:	e005      	b.n	8004c24 <HAL_DMA_Abort_IT+0x1ac>
 8004c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c1c:	e002      	b.n	8004c24 <HAL_DMA_Abort_IT+0x1ac>
 8004c1e:	2310      	movs	r3, #16
 8004c20:	e000      	b.n	8004c24 <HAL_DMA_Abort_IT+0x1ac>
 8004c22:	2301      	movs	r3, #1
 8004c24:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <HAL_DMA_Abort_IT+0x20c>)
 8004c26:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	4798      	blx	r3
    } 
  }
  return status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40020080 	.word	0x40020080
 8004c58:	40020008 	.word	0x40020008
 8004c5c:	4002001c 	.word	0x4002001c
 8004c60:	40020030 	.word	0x40020030
 8004c64:	40020044 	.word	0x40020044
 8004c68:	40020058 	.word	0x40020058
 8004c6c:	4002006c 	.word	0x4002006c
 8004c70:	40020408 	.word	0x40020408
 8004c74:	4002041c 	.word	0x4002041c
 8004c78:	40020430 	.word	0x40020430
 8004c7c:	40020444 	.word	0x40020444
 8004c80:	40020400 	.word	0x40020400
 8004c84:	40020000 	.word	0x40020000

08004c88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80f1 	beq.w	8004e94 <HAL_DMA_IRQHandler+0x20c>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80eb 	beq.w	8004e94 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d107      	bne.n	8004cdc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0204 	bic.w	r2, r2, #4
 8004cda:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4b5f      	ldr	r3, [pc, #380]	; (8004e60 <HAL_DMA_IRQHandler+0x1d8>)
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d958      	bls.n	8004d9a <HAL_DMA_IRQHandler+0x112>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a5d      	ldr	r2, [pc, #372]	; (8004e64 <HAL_DMA_IRQHandler+0x1dc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d04f      	beq.n	8004d92 <HAL_DMA_IRQHandler+0x10a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a5c      	ldr	r2, [pc, #368]	; (8004e68 <HAL_DMA_IRQHandler+0x1e0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d048      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x106>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a5a      	ldr	r2, [pc, #360]	; (8004e6c <HAL_DMA_IRQHandler+0x1e4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d040      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x100>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a59      	ldr	r2, [pc, #356]	; (8004e70 <HAL_DMA_IRQHandler+0x1e8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d038      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xfa>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a57      	ldr	r2, [pc, #348]	; (8004e74 <HAL_DMA_IRQHandler+0x1ec>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d030      	beq.n	8004d7c <HAL_DMA_IRQHandler+0xf4>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a56      	ldr	r2, [pc, #344]	; (8004e78 <HAL_DMA_IRQHandler+0x1f0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d028      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xee>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a4d      	ldr	r2, [pc, #308]	; (8004e60 <HAL_DMA_IRQHandler+0x1d8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d020      	beq.n	8004d70 <HAL_DMA_IRQHandler+0xe8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a52      	ldr	r2, [pc, #328]	; (8004e7c <HAL_DMA_IRQHandler+0x1f4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d019      	beq.n	8004d6c <HAL_DMA_IRQHandler+0xe4>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a50      	ldr	r2, [pc, #320]	; (8004e80 <HAL_DMA_IRQHandler+0x1f8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d012      	beq.n	8004d68 <HAL_DMA_IRQHandler+0xe0>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a4f      	ldr	r2, [pc, #316]	; (8004e84 <HAL_DMA_IRQHandler+0x1fc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00a      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xda>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a4d      	ldr	r2, [pc, #308]	; (8004e88 <HAL_DMA_IRQHandler+0x200>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d102      	bne.n	8004d5c <HAL_DMA_IRQHandler+0xd4>
 8004d56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d5a:	e01b      	b.n	8004d94 <HAL_DMA_IRQHandler+0x10c>
 8004d5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d60:	e018      	b.n	8004d94 <HAL_DMA_IRQHandler+0x10c>
 8004d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d66:	e015      	b.n	8004d94 <HAL_DMA_IRQHandler+0x10c>
 8004d68:	2340      	movs	r3, #64	; 0x40
 8004d6a:	e013      	b.n	8004d94 <HAL_DMA_IRQHandler+0x10c>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	e011      	b.n	8004d94 <HAL_DMA_IRQHandler+0x10c>
 8004d70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004d74:	e00e      	b.n	8004d94 <HAL_DMA_IRQHandler+0x10c>
 8004d76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d7a:	e00b      	b.n	8004d94 <HAL_DMA_IRQHandler+0x10c>
 8004d7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d80:	e008      	b.n	8004d94 <HAL_DMA_IRQHandler+0x10c>
 8004d82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d86:	e005      	b.n	8004d94 <HAL_DMA_IRQHandler+0x10c>
 8004d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d8c:	e002      	b.n	8004d94 <HAL_DMA_IRQHandler+0x10c>
 8004d8e:	2340      	movs	r3, #64	; 0x40
 8004d90:	e000      	b.n	8004d94 <HAL_DMA_IRQHandler+0x10c>
 8004d92:	2304      	movs	r3, #4
 8004d94:	4a3d      	ldr	r2, [pc, #244]	; (8004e8c <HAL_DMA_IRQHandler+0x204>)
 8004d96:	6053      	str	r3, [r2, #4]
 8004d98:	e057      	b.n	8004e4a <HAL_DMA_IRQHandler+0x1c2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a31      	ldr	r2, [pc, #196]	; (8004e64 <HAL_DMA_IRQHandler+0x1dc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d04f      	beq.n	8004e44 <HAL_DMA_IRQHandler+0x1bc>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2f      	ldr	r2, [pc, #188]	; (8004e68 <HAL_DMA_IRQHandler+0x1e0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d048      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x1b8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2e      	ldr	r2, [pc, #184]	; (8004e6c <HAL_DMA_IRQHandler+0x1e4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d040      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x1b2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2c      	ldr	r2, [pc, #176]	; (8004e70 <HAL_DMA_IRQHandler+0x1e8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d038      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x1ac>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2b      	ldr	r2, [pc, #172]	; (8004e74 <HAL_DMA_IRQHandler+0x1ec>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d030      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x1a6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a29      	ldr	r2, [pc, #164]	; (8004e78 <HAL_DMA_IRQHandler+0x1f0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d028      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x1a0>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a21      	ldr	r2, [pc, #132]	; (8004e60 <HAL_DMA_IRQHandler+0x1d8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d020      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x19a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a25      	ldr	r2, [pc, #148]	; (8004e7c <HAL_DMA_IRQHandler+0x1f4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d019      	beq.n	8004e1e <HAL_DMA_IRQHandler+0x196>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a24      	ldr	r2, [pc, #144]	; (8004e80 <HAL_DMA_IRQHandler+0x1f8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d012      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x192>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <HAL_DMA_IRQHandler+0x1fc>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00a      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x18c>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <HAL_DMA_IRQHandler+0x200>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d102      	bne.n	8004e0e <HAL_DMA_IRQHandler+0x186>
 8004e08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e0c:	e01b      	b.n	8004e46 <HAL_DMA_IRQHandler+0x1be>
 8004e0e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e12:	e018      	b.n	8004e46 <HAL_DMA_IRQHandler+0x1be>
 8004e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e18:	e015      	b.n	8004e46 <HAL_DMA_IRQHandler+0x1be>
 8004e1a:	2340      	movs	r3, #64	; 0x40
 8004e1c:	e013      	b.n	8004e46 <HAL_DMA_IRQHandler+0x1be>
 8004e1e:	2304      	movs	r3, #4
 8004e20:	e011      	b.n	8004e46 <HAL_DMA_IRQHandler+0x1be>
 8004e22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004e26:	e00e      	b.n	8004e46 <HAL_DMA_IRQHandler+0x1be>
 8004e28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e2c:	e00b      	b.n	8004e46 <HAL_DMA_IRQHandler+0x1be>
 8004e2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e32:	e008      	b.n	8004e46 <HAL_DMA_IRQHandler+0x1be>
 8004e34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e38:	e005      	b.n	8004e46 <HAL_DMA_IRQHandler+0x1be>
 8004e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e3e:	e002      	b.n	8004e46 <HAL_DMA_IRQHandler+0x1be>
 8004e40:	2340      	movs	r3, #64	; 0x40
 8004e42:	e000      	b.n	8004e46 <HAL_DMA_IRQHandler+0x1be>
 8004e44:	2304      	movs	r3, #4
 8004e46:	4a12      	ldr	r2, [pc, #72]	; (8004e90 <HAL_DMA_IRQHandler+0x208>)
 8004e48:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8136 	beq.w	80050c0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004e5c:	e130      	b.n	80050c0 <HAL_DMA_IRQHandler+0x438>
 8004e5e:	bf00      	nop
 8004e60:	40020080 	.word	0x40020080
 8004e64:	40020008 	.word	0x40020008
 8004e68:	4002001c 	.word	0x4002001c
 8004e6c:	40020030 	.word	0x40020030
 8004e70:	40020044 	.word	0x40020044
 8004e74:	40020058 	.word	0x40020058
 8004e78:	4002006c 	.word	0x4002006c
 8004e7c:	40020408 	.word	0x40020408
 8004e80:	4002041c 	.word	0x4002041c
 8004e84:	40020430 	.word	0x40020430
 8004e88:	40020444 	.word	0x40020444
 8004e8c:	40020400 	.word	0x40020400
 8004e90:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	2202      	movs	r2, #2
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80dd 	beq.w	8005060 <HAL_DMA_IRQHandler+0x3d8>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80d7 	beq.w	8005060 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 020a 	bic.w	r2, r2, #10
 8004ece:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	4b7b      	ldr	r3, [pc, #492]	; (80050cc <HAL_DMA_IRQHandler+0x444>)
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d958      	bls.n	8004f96 <HAL_DMA_IRQHandler+0x30e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a79      	ldr	r2, [pc, #484]	; (80050d0 <HAL_DMA_IRQHandler+0x448>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d04f      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x306>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a78      	ldr	r2, [pc, #480]	; (80050d4 <HAL_DMA_IRQHandler+0x44c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d048      	beq.n	8004f8a <HAL_DMA_IRQHandler+0x302>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a76      	ldr	r2, [pc, #472]	; (80050d8 <HAL_DMA_IRQHandler+0x450>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d040      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x2fc>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a75      	ldr	r2, [pc, #468]	; (80050dc <HAL_DMA_IRQHandler+0x454>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d038      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2f6>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a73      	ldr	r2, [pc, #460]	; (80050e0 <HAL_DMA_IRQHandler+0x458>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d030      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x2f0>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a72      	ldr	r2, [pc, #456]	; (80050e4 <HAL_DMA_IRQHandler+0x45c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d028      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ea>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a69      	ldr	r2, [pc, #420]	; (80050cc <HAL_DMA_IRQHandler+0x444>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d020      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x2e4>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a6e      	ldr	r2, [pc, #440]	; (80050e8 <HAL_DMA_IRQHandler+0x460>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d019      	beq.n	8004f68 <HAL_DMA_IRQHandler+0x2e0>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a6c      	ldr	r2, [pc, #432]	; (80050ec <HAL_DMA_IRQHandler+0x464>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d012      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x2dc>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a6b      	ldr	r2, [pc, #428]	; (80050f0 <HAL_DMA_IRQHandler+0x468>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00a      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x2d6>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a69      	ldr	r2, [pc, #420]	; (80050f4 <HAL_DMA_IRQHandler+0x46c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d102      	bne.n	8004f58 <HAL_DMA_IRQHandler+0x2d0>
 8004f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f56:	e01b      	b.n	8004f90 <HAL_DMA_IRQHandler+0x308>
 8004f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f5c:	e018      	b.n	8004f90 <HAL_DMA_IRQHandler+0x308>
 8004f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f62:	e015      	b.n	8004f90 <HAL_DMA_IRQHandler+0x308>
 8004f64:	2320      	movs	r3, #32
 8004f66:	e013      	b.n	8004f90 <HAL_DMA_IRQHandler+0x308>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e011      	b.n	8004f90 <HAL_DMA_IRQHandler+0x308>
 8004f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f70:	e00e      	b.n	8004f90 <HAL_DMA_IRQHandler+0x308>
 8004f72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f76:	e00b      	b.n	8004f90 <HAL_DMA_IRQHandler+0x308>
 8004f78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f7c:	e008      	b.n	8004f90 <HAL_DMA_IRQHandler+0x308>
 8004f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f82:	e005      	b.n	8004f90 <HAL_DMA_IRQHandler+0x308>
 8004f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f88:	e002      	b.n	8004f90 <HAL_DMA_IRQHandler+0x308>
 8004f8a:	2320      	movs	r3, #32
 8004f8c:	e000      	b.n	8004f90 <HAL_DMA_IRQHandler+0x308>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	4a59      	ldr	r2, [pc, #356]	; (80050f8 <HAL_DMA_IRQHandler+0x470>)
 8004f92:	6053      	str	r3, [r2, #4]
 8004f94:	e057      	b.n	8005046 <HAL_DMA_IRQHandler+0x3be>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a4d      	ldr	r2, [pc, #308]	; (80050d0 <HAL_DMA_IRQHandler+0x448>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d04f      	beq.n	8005040 <HAL_DMA_IRQHandler+0x3b8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a4b      	ldr	r2, [pc, #300]	; (80050d4 <HAL_DMA_IRQHandler+0x44c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d048      	beq.n	800503c <HAL_DMA_IRQHandler+0x3b4>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a4a      	ldr	r2, [pc, #296]	; (80050d8 <HAL_DMA_IRQHandler+0x450>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d040      	beq.n	8005036 <HAL_DMA_IRQHandler+0x3ae>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a48      	ldr	r2, [pc, #288]	; (80050dc <HAL_DMA_IRQHandler+0x454>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d038      	beq.n	8005030 <HAL_DMA_IRQHandler+0x3a8>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a47      	ldr	r2, [pc, #284]	; (80050e0 <HAL_DMA_IRQHandler+0x458>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d030      	beq.n	800502a <HAL_DMA_IRQHandler+0x3a2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a45      	ldr	r2, [pc, #276]	; (80050e4 <HAL_DMA_IRQHandler+0x45c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d028      	beq.n	8005024 <HAL_DMA_IRQHandler+0x39c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a3d      	ldr	r2, [pc, #244]	; (80050cc <HAL_DMA_IRQHandler+0x444>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d020      	beq.n	800501e <HAL_DMA_IRQHandler+0x396>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a41      	ldr	r2, [pc, #260]	; (80050e8 <HAL_DMA_IRQHandler+0x460>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d019      	beq.n	800501a <HAL_DMA_IRQHandler+0x392>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a40      	ldr	r2, [pc, #256]	; (80050ec <HAL_DMA_IRQHandler+0x464>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d012      	beq.n	8005016 <HAL_DMA_IRQHandler+0x38e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a3e      	ldr	r2, [pc, #248]	; (80050f0 <HAL_DMA_IRQHandler+0x468>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00a      	beq.n	8005010 <HAL_DMA_IRQHandler+0x388>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a3d      	ldr	r2, [pc, #244]	; (80050f4 <HAL_DMA_IRQHandler+0x46c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d102      	bne.n	800500a <HAL_DMA_IRQHandler+0x382>
 8005004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005008:	e01b      	b.n	8005042 <HAL_DMA_IRQHandler+0x3ba>
 800500a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800500e:	e018      	b.n	8005042 <HAL_DMA_IRQHandler+0x3ba>
 8005010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005014:	e015      	b.n	8005042 <HAL_DMA_IRQHandler+0x3ba>
 8005016:	2320      	movs	r3, #32
 8005018:	e013      	b.n	8005042 <HAL_DMA_IRQHandler+0x3ba>
 800501a:	2302      	movs	r3, #2
 800501c:	e011      	b.n	8005042 <HAL_DMA_IRQHandler+0x3ba>
 800501e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005022:	e00e      	b.n	8005042 <HAL_DMA_IRQHandler+0x3ba>
 8005024:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005028:	e00b      	b.n	8005042 <HAL_DMA_IRQHandler+0x3ba>
 800502a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800502e:	e008      	b.n	8005042 <HAL_DMA_IRQHandler+0x3ba>
 8005030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005034:	e005      	b.n	8005042 <HAL_DMA_IRQHandler+0x3ba>
 8005036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800503a:	e002      	b.n	8005042 <HAL_DMA_IRQHandler+0x3ba>
 800503c:	2320      	movs	r3, #32
 800503e:	e000      	b.n	8005042 <HAL_DMA_IRQHandler+0x3ba>
 8005040:	2302      	movs	r3, #2
 8005042:	4a2e      	ldr	r2, [pc, #184]	; (80050fc <HAL_DMA_IRQHandler+0x474>)
 8005044:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	d034      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800505e:	e02f      	b.n	80050c0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	2208      	movs	r2, #8
 8005066:	409a      	lsls	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d028      	beq.n	80050c2 <HAL_DMA_IRQHandler+0x43a>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d023      	beq.n	80050c2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 020e 	bic.w	r2, r2, #14
 8005088:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	2101      	movs	r1, #1
 8005094:	fa01 f202 	lsl.w	r2, r1, r2
 8005098:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d004      	beq.n	80050c2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	4798      	blx	r3
    }
  }
  return;
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
}
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40020080 	.word	0x40020080
 80050d0:	40020008 	.word	0x40020008
 80050d4:	4002001c 	.word	0x4002001c
 80050d8:	40020030 	.word	0x40020030
 80050dc:	40020044 	.word	0x40020044
 80050e0:	40020058 	.word	0x40020058
 80050e4:	4002006c 	.word	0x4002006c
 80050e8:	40020408 	.word	0x40020408
 80050ec:	4002041c 	.word	0x4002041c
 80050f0:	40020430 	.word	0x40020430
 80050f4:	40020444 	.word	0x40020444
 80050f8:	40020400 	.word	0x40020400
 80050fc:	40020000 	.word	0x40020000

08005100 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	2101      	movs	r1, #1
 8005118:	fa01 f202 	lsl.w	r2, r1, r2
 800511c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b10      	cmp	r3, #16
 800512c:	d108      	bne.n	8005140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800513e:	e007      	b.n	8005150 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	60da      	str	r2, [r3, #12]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr
	...

0800515c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800515c:	b480      	push	{r7}
 800515e:	b08b      	sub	sp, #44	; 0x2c
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800516a:	2300      	movs	r3, #0
 800516c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800516e:	e179      	b.n	8005464 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005170:	2201      	movs	r2, #1
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	429a      	cmp	r2, r3
 800518a:	f040 8168 	bne.w	800545e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4a96      	ldr	r2, [pc, #600]	; (80053ec <HAL_GPIO_Init+0x290>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d05e      	beq.n	8005256 <HAL_GPIO_Init+0xfa>
 8005198:	4a94      	ldr	r2, [pc, #592]	; (80053ec <HAL_GPIO_Init+0x290>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d875      	bhi.n	800528a <HAL_GPIO_Init+0x12e>
 800519e:	4a94      	ldr	r2, [pc, #592]	; (80053f0 <HAL_GPIO_Init+0x294>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d058      	beq.n	8005256 <HAL_GPIO_Init+0xfa>
 80051a4:	4a92      	ldr	r2, [pc, #584]	; (80053f0 <HAL_GPIO_Init+0x294>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d86f      	bhi.n	800528a <HAL_GPIO_Init+0x12e>
 80051aa:	4a92      	ldr	r2, [pc, #584]	; (80053f4 <HAL_GPIO_Init+0x298>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d052      	beq.n	8005256 <HAL_GPIO_Init+0xfa>
 80051b0:	4a90      	ldr	r2, [pc, #576]	; (80053f4 <HAL_GPIO_Init+0x298>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d869      	bhi.n	800528a <HAL_GPIO_Init+0x12e>
 80051b6:	4a90      	ldr	r2, [pc, #576]	; (80053f8 <HAL_GPIO_Init+0x29c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d04c      	beq.n	8005256 <HAL_GPIO_Init+0xfa>
 80051bc:	4a8e      	ldr	r2, [pc, #568]	; (80053f8 <HAL_GPIO_Init+0x29c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d863      	bhi.n	800528a <HAL_GPIO_Init+0x12e>
 80051c2:	4a8e      	ldr	r2, [pc, #568]	; (80053fc <HAL_GPIO_Init+0x2a0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d046      	beq.n	8005256 <HAL_GPIO_Init+0xfa>
 80051c8:	4a8c      	ldr	r2, [pc, #560]	; (80053fc <HAL_GPIO_Init+0x2a0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d85d      	bhi.n	800528a <HAL_GPIO_Init+0x12e>
 80051ce:	2b12      	cmp	r3, #18
 80051d0:	d82a      	bhi.n	8005228 <HAL_GPIO_Init+0xcc>
 80051d2:	2b12      	cmp	r3, #18
 80051d4:	d859      	bhi.n	800528a <HAL_GPIO_Init+0x12e>
 80051d6:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <HAL_GPIO_Init+0x80>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	08005257 	.word	0x08005257
 80051e0:	08005231 	.word	0x08005231
 80051e4:	08005243 	.word	0x08005243
 80051e8:	08005285 	.word	0x08005285
 80051ec:	0800528b 	.word	0x0800528b
 80051f0:	0800528b 	.word	0x0800528b
 80051f4:	0800528b 	.word	0x0800528b
 80051f8:	0800528b 	.word	0x0800528b
 80051fc:	0800528b 	.word	0x0800528b
 8005200:	0800528b 	.word	0x0800528b
 8005204:	0800528b 	.word	0x0800528b
 8005208:	0800528b 	.word	0x0800528b
 800520c:	0800528b 	.word	0x0800528b
 8005210:	0800528b 	.word	0x0800528b
 8005214:	0800528b 	.word	0x0800528b
 8005218:	0800528b 	.word	0x0800528b
 800521c:	0800528b 	.word	0x0800528b
 8005220:	08005239 	.word	0x08005239
 8005224:	0800524d 	.word	0x0800524d
 8005228:	4a75      	ldr	r2, [pc, #468]	; (8005400 <HAL_GPIO_Init+0x2a4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800522e:	e02c      	b.n	800528a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	623b      	str	r3, [r7, #32]
          break;
 8005236:	e029      	b.n	800528c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	3304      	adds	r3, #4
 800523e:	623b      	str	r3, [r7, #32]
          break;
 8005240:	e024      	b.n	800528c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	3308      	adds	r3, #8
 8005248:	623b      	str	r3, [r7, #32]
          break;
 800524a:	e01f      	b.n	800528c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	330c      	adds	r3, #12
 8005252:	623b      	str	r3, [r7, #32]
          break;
 8005254:	e01a      	b.n	800528c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800525e:	2304      	movs	r3, #4
 8005260:	623b      	str	r3, [r7, #32]
          break;
 8005262:	e013      	b.n	800528c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d105      	bne.n	8005278 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800526c:	2308      	movs	r3, #8
 800526e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	611a      	str	r2, [r3, #16]
          break;
 8005276:	e009      	b.n	800528c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005278:	2308      	movs	r3, #8
 800527a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	615a      	str	r2, [r3, #20]
          break;
 8005282:	e003      	b.n	800528c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005284:	2300      	movs	r3, #0
 8005286:	623b      	str	r3, [r7, #32]
          break;
 8005288:	e000      	b.n	800528c <HAL_GPIO_Init+0x130>
          break;
 800528a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	2bff      	cmp	r3, #255	; 0xff
 8005290:	d801      	bhi.n	8005296 <HAL_GPIO_Init+0x13a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	e001      	b.n	800529a <HAL_GPIO_Init+0x13e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3304      	adds	r3, #4
 800529a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2bff      	cmp	r3, #255	; 0xff
 80052a0:	d802      	bhi.n	80052a8 <HAL_GPIO_Init+0x14c>
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	e002      	b.n	80052ae <HAL_GPIO_Init+0x152>
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	3b08      	subs	r3, #8
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	210f      	movs	r1, #15
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	fa01 f303 	lsl.w	r3, r1, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	401a      	ands	r2, r3
 80052c0:	6a39      	ldr	r1, [r7, #32]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	431a      	orrs	r2, r3
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 80c1 	beq.w	800545e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80052dc:	4b49      	ldr	r3, [pc, #292]	; (8005404 <HAL_GPIO_Init+0x2a8>)
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	4a48      	ldr	r2, [pc, #288]	; (8005404 <HAL_GPIO_Init+0x2a8>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	6193      	str	r3, [r2, #24]
 80052e8:	4b46      	ldr	r3, [pc, #280]	; (8005404 <HAL_GPIO_Init+0x2a8>)
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80052f4:	4a44      	ldr	r2, [pc, #272]	; (8005408 <HAL_GPIO_Init+0x2ac>)
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	089b      	lsrs	r3, r3, #2
 80052fa:	3302      	adds	r3, #2
 80052fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005300:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	220f      	movs	r2, #15
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	43db      	mvns	r3, r3
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4013      	ands	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a3c      	ldr	r2, [pc, #240]	; (800540c <HAL_GPIO_Init+0x2b0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d01f      	beq.n	8005360 <HAL_GPIO_Init+0x204>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a3b      	ldr	r2, [pc, #236]	; (8005410 <HAL_GPIO_Init+0x2b4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d019      	beq.n	800535c <HAL_GPIO_Init+0x200>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a3a      	ldr	r2, [pc, #232]	; (8005414 <HAL_GPIO_Init+0x2b8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d013      	beq.n	8005358 <HAL_GPIO_Init+0x1fc>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a39      	ldr	r2, [pc, #228]	; (8005418 <HAL_GPIO_Init+0x2bc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00d      	beq.n	8005354 <HAL_GPIO_Init+0x1f8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a38      	ldr	r2, [pc, #224]	; (800541c <HAL_GPIO_Init+0x2c0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d007      	beq.n	8005350 <HAL_GPIO_Init+0x1f4>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a37      	ldr	r2, [pc, #220]	; (8005420 <HAL_GPIO_Init+0x2c4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d101      	bne.n	800534c <HAL_GPIO_Init+0x1f0>
 8005348:	2305      	movs	r3, #5
 800534a:	e00a      	b.n	8005362 <HAL_GPIO_Init+0x206>
 800534c:	2306      	movs	r3, #6
 800534e:	e008      	b.n	8005362 <HAL_GPIO_Init+0x206>
 8005350:	2304      	movs	r3, #4
 8005352:	e006      	b.n	8005362 <HAL_GPIO_Init+0x206>
 8005354:	2303      	movs	r3, #3
 8005356:	e004      	b.n	8005362 <HAL_GPIO_Init+0x206>
 8005358:	2302      	movs	r3, #2
 800535a:	e002      	b.n	8005362 <HAL_GPIO_Init+0x206>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <HAL_GPIO_Init+0x206>
 8005360:	2300      	movs	r3, #0
 8005362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005364:	f002 0203 	and.w	r2, r2, #3
 8005368:	0092      	lsls	r2, r2, #2
 800536a:	4093      	lsls	r3, r2
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005372:	4925      	ldr	r1, [pc, #148]	; (8005408 <HAL_GPIO_Init+0x2ac>)
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	089b      	lsrs	r3, r3, #2
 8005378:	3302      	adds	r3, #2
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d006      	beq.n	800539a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800538c:	4b25      	ldr	r3, [pc, #148]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4924      	ldr	r1, [pc, #144]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	4313      	orrs	r3, r2
 8005396:	600b      	str	r3, [r1, #0]
 8005398:	e006      	b.n	80053a8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800539a:	4b22      	ldr	r3, [pc, #136]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	4920      	ldr	r1, [pc, #128]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d006      	beq.n	80053c2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80053b4:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	491a      	ldr	r1, [pc, #104]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	4313      	orrs	r3, r2
 80053be:	604b      	str	r3, [r1, #4]
 80053c0:	e006      	b.n	80053d0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80053c2:	4b18      	ldr	r3, [pc, #96]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	43db      	mvns	r3, r3
 80053ca:	4916      	ldr	r1, [pc, #88]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d025      	beq.n	8005428 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80053dc:	4b11      	ldr	r3, [pc, #68]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	4910      	ldr	r1, [pc, #64]	; (8005424 <HAL_GPIO_Init+0x2c8>)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]
 80053e8:	e025      	b.n	8005436 <HAL_GPIO_Init+0x2da>
 80053ea:	bf00      	nop
 80053ec:	10320000 	.word	0x10320000
 80053f0:	10310000 	.word	0x10310000
 80053f4:	10220000 	.word	0x10220000
 80053f8:	10210000 	.word	0x10210000
 80053fc:	10120000 	.word	0x10120000
 8005400:	10110000 	.word	0x10110000
 8005404:	40021000 	.word	0x40021000
 8005408:	40010000 	.word	0x40010000
 800540c:	40010800 	.word	0x40010800
 8005410:	40010c00 	.word	0x40010c00
 8005414:	40011000 	.word	0x40011000
 8005418:	40011400 	.word	0x40011400
 800541c:	40011800 	.word	0x40011800
 8005420:	40011c00 	.word	0x40011c00
 8005424:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005428:	4b15      	ldr	r3, [pc, #84]	; (8005480 <HAL_GPIO_Init+0x324>)
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	43db      	mvns	r3, r3
 8005430:	4913      	ldr	r1, [pc, #76]	; (8005480 <HAL_GPIO_Init+0x324>)
 8005432:	4013      	ands	r3, r2
 8005434:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d006      	beq.n	8005450 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005442:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <HAL_GPIO_Init+0x324>)
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	490e      	ldr	r1, [pc, #56]	; (8005480 <HAL_GPIO_Init+0x324>)
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	4313      	orrs	r3, r2
 800544c:	60cb      	str	r3, [r1, #12]
 800544e:	e006      	b.n	800545e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_GPIO_Init+0x324>)
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	43db      	mvns	r3, r3
 8005458:	4909      	ldr	r1, [pc, #36]	; (8005480 <HAL_GPIO_Init+0x324>)
 800545a:	4013      	ands	r3, r2
 800545c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	3301      	adds	r3, #1
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	fa22 f303 	lsr.w	r3, r2, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	f47f ae7e 	bne.w	8005170 <HAL_GPIO_Init+0x14>
  }
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	372c      	adds	r7, #44	; 0x2c
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr
 8005480:	40010400 	.word	0x40010400

08005484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	887b      	ldrh	r3, [r7, #2]
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800549c:	2301      	movs	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
 80054a0:	e001      	b.n	80054a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054a2:	2300      	movs	r3, #0
 80054a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	460b      	mov	r3, r1
 80054bc:	807b      	strh	r3, [r7, #2]
 80054be:	4613      	mov	r3, r2
 80054c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054c2:	787b      	ldrb	r3, [r7, #1]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054c8:	887a      	ldrh	r2, [r7, #2]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80054ce:	e003      	b.n	80054d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80054d0:	887b      	ldrh	r3, [r7, #2]
 80054d2:	041a      	lsls	r2, r3, #16
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	611a      	str	r2, [r3, #16]
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e12b      	b.n	800574e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fd fd84 	bl	8003018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2224      	movs	r2, #36	; 0x24
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005548:	f002 f84e 	bl	80075e8 <HAL_RCC_GetPCLK1Freq>
 800554c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4a81      	ldr	r2, [pc, #516]	; (8005758 <HAL_I2C_Init+0x274>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d807      	bhi.n	8005568 <HAL_I2C_Init+0x84>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a80      	ldr	r2, [pc, #512]	; (800575c <HAL_I2C_Init+0x278>)
 800555c:	4293      	cmp	r3, r2
 800555e:	bf94      	ite	ls
 8005560:	2301      	movls	r3, #1
 8005562:	2300      	movhi	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	e006      	b.n	8005576 <HAL_I2C_Init+0x92>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a7d      	ldr	r2, [pc, #500]	; (8005760 <HAL_I2C_Init+0x27c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	bf94      	ite	ls
 8005570:	2301      	movls	r3, #1
 8005572:	2300      	movhi	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e0e7      	b.n	800574e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a78      	ldr	r2, [pc, #480]	; (8005764 <HAL_I2C_Init+0x280>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	0c9b      	lsrs	r3, r3, #18
 8005588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4a6a      	ldr	r2, [pc, #424]	; (8005758 <HAL_I2C_Init+0x274>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d802      	bhi.n	80055b8 <HAL_I2C_Init+0xd4>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	3301      	adds	r3, #1
 80055b6:	e009      	b.n	80055cc <HAL_I2C_Init+0xe8>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055be:	fb02 f303 	mul.w	r3, r2, r3
 80055c2:	4a69      	ldr	r2, [pc, #420]	; (8005768 <HAL_I2C_Init+0x284>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	099b      	lsrs	r3, r3, #6
 80055ca:	3301      	adds	r3, #1
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	495c      	ldr	r1, [pc, #368]	; (8005758 <HAL_I2C_Init+0x274>)
 80055e8:	428b      	cmp	r3, r1
 80055ea:	d819      	bhi.n	8005620 <HAL_I2C_Init+0x13c>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1e59      	subs	r1, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005600:	400b      	ands	r3, r1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_I2C_Init+0x138>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1e59      	subs	r1, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	fbb1 f3f3 	udiv	r3, r1, r3
 8005614:	3301      	adds	r3, #1
 8005616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561a:	e051      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 800561c:	2304      	movs	r3, #4
 800561e:	e04f      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d111      	bne.n	800564c <HAL_I2C_Init+0x168>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1e58      	subs	r0, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6859      	ldr	r1, [r3, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	440b      	add	r3, r1
 8005636:	fbb0 f3f3 	udiv	r3, r0, r3
 800563a:	3301      	adds	r3, #1
 800563c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	e012      	b.n	8005672 <HAL_I2C_Init+0x18e>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1e58      	subs	r0, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6859      	ldr	r1, [r3, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	0099      	lsls	r1, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005662:	3301      	adds	r3, #1
 8005664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_I2C_Init+0x196>
 8005676:	2301      	movs	r3, #1
 8005678:	e022      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10e      	bne.n	80056a0 <HAL_I2C_Init+0x1bc>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1e58      	subs	r0, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6859      	ldr	r1, [r3, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	440b      	add	r3, r1
 8005690:	fbb0 f3f3 	udiv	r3, r0, r3
 8005694:	3301      	adds	r3, #1
 8005696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569e:	e00f      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1e58      	subs	r0, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	0099      	lsls	r1, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b6:	3301      	adds	r3, #1
 80056b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	6809      	ldr	r1, [r1, #0]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6911      	ldr	r1, [r2, #16]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68d2      	ldr	r2, [r2, #12]
 80056fa:	4311      	orrs	r1, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	430b      	orrs	r3, r1
 8005702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	000186a0 	.word	0x000186a0
 800575c:	001e847f 	.word	0x001e847f
 8005760:	003d08ff 	.word	0x003d08ff
 8005764:	431bde83 	.word	0x431bde83
 8005768:	10624dd3 	.word	0x10624dd3

0800576c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	461a      	mov	r2, r3
 8005778:	460b      	mov	r3, r1
 800577a:	817b      	strh	r3, [r7, #10]
 800577c:	4613      	mov	r3, r2
 800577e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005780:	f7fe ff68 	bl	8004654 <HAL_GetTick>
 8005784:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b20      	cmp	r3, #32
 8005790:	f040 80e0 	bne.w	8005954 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	2319      	movs	r3, #25
 800579a:	2201      	movs	r2, #1
 800579c:	4970      	ldr	r1, [pc, #448]	; (8005960 <HAL_I2C_Master_Transmit+0x1f4>)
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f001 f972 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80057aa:	2302      	movs	r3, #2
 80057ac:	e0d3      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_I2C_Master_Transmit+0x50>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e0cc      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d007      	beq.n	80057e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2221      	movs	r2, #33	; 0x21
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2210      	movs	r2, #16
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	893a      	ldrh	r2, [r7, #8]
 8005812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4a50      	ldr	r2, [pc, #320]	; (8005964 <HAL_I2C_Master_Transmit+0x1f8>)
 8005822:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005824:	8979      	ldrh	r1, [r7, #10]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a3a      	ldr	r2, [r7, #32]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fe5e 	bl	80064ec <I2C_MasterRequestWrite>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e08d      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583a:	2300      	movs	r3, #0
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005850:	e066      	b.n	8005920 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	6a39      	ldr	r1, [r7, #32]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f001 f9ec 	bl	8006c34 <I2C_WaitOnTXEFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00d      	beq.n	800587e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	2b04      	cmp	r3, #4
 8005868:	d107      	bne.n	800587a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005878:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e06b      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	781a      	ldrb	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d11b      	bne.n	80058f4 <HAL_I2C_Master_Transmit+0x188>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d017      	beq.n	80058f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	781a      	ldrb	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	6a39      	ldr	r1, [r7, #32]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f001 f9dc 	bl	8006cb6 <I2C_WaitOnBTFFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	2b04      	cmp	r3, #4
 800590a:	d107      	bne.n	800591c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e01a      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005924:	2b00      	cmp	r3, #0
 8005926:	d194      	bne.n	8005852 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	e000      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005954:	2302      	movs	r3, #2
  }
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	00100002 	.word	0x00100002
 8005964:	ffff0000 	.word	0xffff0000

08005968 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08c      	sub	sp, #48	; 0x30
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	461a      	mov	r2, r3
 8005974:	460b      	mov	r3, r1
 8005976:	817b      	strh	r3, [r7, #10]
 8005978:	4613      	mov	r3, r2
 800597a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005980:	f7fe fe68 	bl	8004654 <HAL_GetTick>
 8005984:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b20      	cmp	r3, #32
 8005990:	f040 823f 	bne.w	8005e12 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	2319      	movs	r3, #25
 800599a:	2201      	movs	r2, #1
 800599c:	497f      	ldr	r1, [pc, #508]	; (8005b9c <HAL_I2C_Master_Receive+0x234>)
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f001 f872 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80059aa:	2302      	movs	r3, #2
 80059ac:	e232      	b.n	8005e14 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_I2C_Master_Receive+0x54>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e22b      	b.n	8005e14 <HAL_I2C_Master_Receive+0x4ac>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d007      	beq.n	80059e2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2222      	movs	r2, #34	; 0x22
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2210      	movs	r2, #16
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	893a      	ldrh	r2, [r7, #8]
 8005a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4a5f      	ldr	r2, [pc, #380]	; (8005ba0 <HAL_I2C_Master_Receive+0x238>)
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a24:	8979      	ldrh	r1, [r7, #10]
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fde0 	bl	80065f0 <I2C_MasterRequestRead>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e1ec      	b.n	8005e14 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d113      	bne.n	8005a6a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	61fb      	str	r3, [r7, #28]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	61fb      	str	r3, [r7, #28]
 8005a56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	e1c0      	b.n	8005dec <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d11e      	bne.n	8005ab0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a82:	b672      	cpsid	i
}
 8005a84:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a86:	2300      	movs	r3, #0
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005aac:	b662      	cpsie	i
}
 8005aae:	e035      	b.n	8005b1c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d11e      	bne.n	8005af6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ac8:	b672      	cpsid	i
}
 8005aca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005af2:	b662      	cpsie	i
}
 8005af4:	e012      	b.n	8005b1c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b06:	2300      	movs	r3, #0
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005b1c:	e166      	b.n	8005dec <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	f200 811f 	bhi.w	8005d66 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d123      	bne.n	8005b78 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f001 f8ff 	bl	8006d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e167      	b.n	8005e14 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b76:	e139      	b.n	8005dec <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d152      	bne.n	8005c26 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	2200      	movs	r2, #0
 8005b88:	4906      	ldr	r1, [pc, #24]	; (8005ba4 <HAL_I2C_Master_Receive+0x23c>)
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 ff7c 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e13c      	b.n	8005e14 <HAL_I2C_Master_Receive+0x4ac>
 8005b9a:	bf00      	nop
 8005b9c:	00100002 	.word	0x00100002
 8005ba0:	ffff0000 	.word	0xffff0000
 8005ba4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005ba8:	b672      	cpsid	i
}
 8005baa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005bee:	b662      	cpsie	i
}
 8005bf0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c24:	e0e2      	b.n	8005dec <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	497b      	ldr	r1, [pc, #492]	; (8005e1c <HAL_I2C_Master_Receive+0x4b4>)
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 ff29 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0e9      	b.n	8005e14 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c50:	b672      	cpsid	i
}
 8005c52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c86:	4b66      	ldr	r3, [pc, #408]	; (8005e20 <HAL_I2C_Master_Receive+0x4b8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	08db      	lsrs	r3, r3, #3
 8005c8c:	4a65      	ldr	r2, [pc, #404]	; (8005e24 <HAL_I2C_Master_Receive+0x4bc>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	0a1a      	lsrs	r2, r3, #8
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	00da      	lsls	r2, r3, #3
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d118      	bne.n	8005cde <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f043 0220 	orr.w	r2, r3, #32
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005cce:	b662      	cpsie	i
}
 8005cd0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e09a      	b.n	8005e14 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d1d9      	bne.n	8005ca0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691a      	ldr	r2, [r3, #16]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3b01      	subs	r3, #1
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005d2e:	b662      	cpsie	i
}
 8005d30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d64:	e042      	b.n	8005dec <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 ffe4 	bl	8006d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e04c      	b.n	8005e14 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d118      	bne.n	8005dec <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f47f ae94 	bne.w	8005b1e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e000      	b.n	8005e14 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8005e12:	2302      	movs	r3, #2
  }
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3728      	adds	r7, #40	; 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	00010004 	.word	0x00010004
 8005e20:	20000004 	.word	0x20000004
 8005e24:	14f8b589 	.word	0x14f8b589

08005e28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	4608      	mov	r0, r1
 8005e32:	4611      	mov	r1, r2
 8005e34:	461a      	mov	r2, r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	817b      	strh	r3, [r7, #10]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	813b      	strh	r3, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e42:	f7fe fc07 	bl	8004654 <HAL_GetTick>
 8005e46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	f040 80d9 	bne.w	8006008 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	2319      	movs	r3, #25
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	496d      	ldr	r1, [pc, #436]	; (8006014 <HAL_I2C_Mem_Write+0x1ec>)
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 fe11 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e0cc      	b.n	800600a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_I2C_Mem_Write+0x56>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e0c5      	b.n	800600a <HAL_I2C_Mem_Write+0x1e2>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d007      	beq.n	8005ea4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2221      	movs	r2, #33	; 0x21
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2240      	movs	r2, #64	; 0x40
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a3a      	ldr	r2, [r7, #32]
 8005ece:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4a4d      	ldr	r2, [pc, #308]	; (8006018 <HAL_I2C_Mem_Write+0x1f0>)
 8005ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ee6:	88f8      	ldrh	r0, [r7, #6]
 8005ee8:	893a      	ldrh	r2, [r7, #8]
 8005eea:	8979      	ldrh	r1, [r7, #10]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fc48 	bl	800678c <I2C_RequestMemoryWrite>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d052      	beq.n	8005fa8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e081      	b.n	800600a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fe92 	bl	8006c34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00d      	beq.n	8005f32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d107      	bne.n	8005f2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e06b      	b.n	800600a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	781a      	ldrb	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d11b      	bne.n	8005fa8 <HAL_I2C_Mem_Write+0x180>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d017      	beq.n	8005fa8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	781a      	ldrb	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1aa      	bne.n	8005f06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 fe7e 	bl	8006cb6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00d      	beq.n	8005fdc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d107      	bne.n	8005fd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e016      	b.n	800600a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	e000      	b.n	800600a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006008:	2302      	movs	r3, #2
  }
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	00100002 	.word	0x00100002
 8006018:	ffff0000 	.word	0xffff0000

0800601c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08c      	sub	sp, #48	; 0x30
 8006020:	af02      	add	r7, sp, #8
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	4608      	mov	r0, r1
 8006026:	4611      	mov	r1, r2
 8006028:	461a      	mov	r2, r3
 800602a:	4603      	mov	r3, r0
 800602c:	817b      	strh	r3, [r7, #10]
 800602e:	460b      	mov	r3, r1
 8006030:	813b      	strh	r3, [r7, #8]
 8006032:	4613      	mov	r3, r2
 8006034:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800603a:	f7fe fb0b 	bl	8004654 <HAL_GetTick>
 800603e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b20      	cmp	r3, #32
 800604a:	f040 8244 	bne.w	80064d6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	2319      	movs	r3, #25
 8006054:	2201      	movs	r2, #1
 8006056:	4982      	ldr	r1, [pc, #520]	; (8006260 <HAL_I2C_Mem_Read+0x244>)
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fd15 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006064:	2302      	movs	r3, #2
 8006066:	e237      	b.n	80064d8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_I2C_Mem_Read+0x5a>
 8006072:	2302      	movs	r3, #2
 8006074:	e230      	b.n	80064d8 <HAL_I2C_Mem_Read+0x4bc>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b01      	cmp	r3, #1
 800608a:	d007      	beq.n	800609c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2222      	movs	r2, #34	; 0x22
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2240      	movs	r2, #64	; 0x40
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80060cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4a62      	ldr	r2, [pc, #392]	; (8006264 <HAL_I2C_Mem_Read+0x248>)
 80060dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060de:	88f8      	ldrh	r0, [r7, #6]
 80060e0:	893a      	ldrh	r2, [r7, #8]
 80060e2:	8979      	ldrh	r1, [r7, #10]
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	4603      	mov	r3, r0
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fbe2 	bl	80068b8 <I2C_RequestMemoryRead>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e1ec      	b.n	80064d8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	d113      	bne.n	800612e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006106:	2300      	movs	r3, #0
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e1c0      	b.n	80064b0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006132:	2b01      	cmp	r3, #1
 8006134:	d11e      	bne.n	8006174 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006144:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006146:	b672      	cpsid	i
}
 8006148:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	61bb      	str	r3, [r7, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800616e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006170:	b662      	cpsie	i
}
 8006172:	e035      	b.n	80061e0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006178:	2b02      	cmp	r3, #2
 800617a:	d11e      	bne.n	80061ba <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800618a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800618c:	b672      	cpsid	i
}
 800618e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006190:	2300      	movs	r3, #0
 8006192:	617b      	str	r3, [r7, #20]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80061b6:	b662      	cpsie	i
}
 80061b8:	e012      	b.n	80061e0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061c8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ca:	2300      	movs	r3, #0
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80061e0:	e166      	b.n	80064b0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	f200 811f 	bhi.w	800642a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d123      	bne.n	800623c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fd9d 	bl	8006d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e167      	b.n	80064d8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	855a      	strh	r2, [r3, #42]	; 0x2a
 800623a:	e139      	b.n	80064b0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006240:	2b02      	cmp	r3, #2
 8006242:	d152      	bne.n	80062ea <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	2200      	movs	r2, #0
 800624c:	4906      	ldr	r1, [pc, #24]	; (8006268 <HAL_I2C_Mem_Read+0x24c>)
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fc1a 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d008      	beq.n	800626c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e13c      	b.n	80064d8 <HAL_I2C_Mem_Read+0x4bc>
 800625e:	bf00      	nop
 8006260:	00100002 	.word	0x00100002
 8006264:	ffff0000 	.word	0xffff0000
 8006268:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800626c:	b672      	cpsid	i
}
 800626e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800627e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691a      	ldr	r2, [r3, #16]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	b2d2      	uxtb	r2, r2
 800628c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80062b2:	b662      	cpsie	i
}
 80062b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062e8:	e0e2      	b.n	80064b0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	2200      	movs	r2, #0
 80062f2:	497b      	ldr	r1, [pc, #492]	; (80064e0 <HAL_I2C_Mem_Read+0x4c4>)
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 fbc7 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0e9      	b.n	80064d8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006312:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006314:	b672      	cpsid	i
}
 8006316:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800634a:	4b66      	ldr	r3, [pc, #408]	; (80064e4 <HAL_I2C_Mem_Read+0x4c8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	08db      	lsrs	r3, r3, #3
 8006350:	4a65      	ldr	r2, [pc, #404]	; (80064e8 <HAL_I2C_Mem_Read+0x4cc>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	0a1a      	lsrs	r2, r3, #8
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	00da      	lsls	r2, r3, #3
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	3b01      	subs	r3, #1
 8006368:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d118      	bne.n	80063a2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2220      	movs	r2, #32
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	f043 0220 	orr.w	r2, r3, #32
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006392:	b662      	cpsie	i
}
 8006394:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e09a      	b.n	80064d8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d1d9      	bne.n	8006364 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	3b01      	subs	r3, #1
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80063f2:	b662      	cpsie	i
}
 80063f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006428:	e042      	b.n	80064b0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800642a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 fc82 	bl	8006d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e04c      	b.n	80064d8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	691a      	ldr	r2, [r3, #16]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b04      	cmp	r3, #4
 800647c:	d118      	bne.n	80064b0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f47f ae94 	bne.w	80061e2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2220      	movs	r2, #32
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	e000      	b.n	80064d8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80064d6:	2302      	movs	r3, #2
  }
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3728      	adds	r7, #40	; 0x28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	00010004 	.word	0x00010004
 80064e4:	20000004 	.word	0x20000004
 80064e8:	14f8b589 	.word	0x14f8b589

080064ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	460b      	mov	r3, r1
 80064fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b08      	cmp	r3, #8
 8006506:	d006      	beq.n	8006516 <I2C_MasterRequestWrite+0x2a>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d003      	beq.n	8006516 <I2C_MasterRequestWrite+0x2a>
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006514:	d108      	bne.n	8006528 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e00b      	b.n	8006540 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	2b12      	cmp	r3, #18
 800652e:	d107      	bne.n	8006540 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800653e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fa9b 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00d      	beq.n	8006574 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006566:	d103      	bne.n	8006570 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800656e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e035      	b.n	80065e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800657c:	d108      	bne.n	8006590 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800657e:	897b      	ldrh	r3, [r7, #10]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	461a      	mov	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800658c:	611a      	str	r2, [r3, #16]
 800658e:	e01b      	b.n	80065c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006590:	897b      	ldrh	r3, [r7, #10]
 8006592:	11db      	asrs	r3, r3, #7
 8006594:	b2db      	uxtb	r3, r3
 8006596:	f003 0306 	and.w	r3, r3, #6
 800659a:	b2db      	uxtb	r3, r3
 800659c:	f063 030f 	orn	r3, r3, #15
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	490e      	ldr	r1, [pc, #56]	; (80065e8 <I2C_MasterRequestWrite+0xfc>)
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fac1 	bl	8006b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e010      	b.n	80065e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80065be:	897b      	ldrh	r3, [r7, #10]
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	4907      	ldr	r1, [pc, #28]	; (80065ec <I2C_MasterRequestWrite+0x100>)
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 fab1 	bl	8006b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e000      	b.n	80065e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	00010008 	.word	0x00010008
 80065ec:	00010002 	.word	0x00010002

080065f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	607a      	str	r2, [r7, #4]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	460b      	mov	r3, r1
 80065fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006614:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b08      	cmp	r3, #8
 800661a:	d006      	beq.n	800662a <I2C_MasterRequestRead+0x3a>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d003      	beq.n	800662a <I2C_MasterRequestRead+0x3a>
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006628:	d108      	bne.n	800663c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	e00b      	b.n	8006654 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	2b11      	cmp	r3, #17
 8006642:	d107      	bne.n	8006654 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006652:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 fa11 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00d      	beq.n	8006688 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800667a:	d103      	bne.n	8006684 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006682:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e079      	b.n	800677c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006690:	d108      	bne.n	80066a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006692:	897b      	ldrh	r3, [r7, #10]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	b2da      	uxtb	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	611a      	str	r2, [r3, #16]
 80066a2:	e05f      	b.n	8006764 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80066a4:	897b      	ldrh	r3, [r7, #10]
 80066a6:	11db      	asrs	r3, r3, #7
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f003 0306 	and.w	r3, r3, #6
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f063 030f 	orn	r3, r3, #15
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	4930      	ldr	r1, [pc, #192]	; (8006784 <I2C_MasterRequestRead+0x194>)
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fa37 	bl	8006b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e054      	b.n	800677c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80066d2:	897b      	ldrh	r3, [r7, #10]
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	4929      	ldr	r1, [pc, #164]	; (8006788 <I2C_MasterRequestRead+0x198>)
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fa27 	bl	8006b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e044      	b.n	800677c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006716:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f9af 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00d      	beq.n	800674c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673e:	d103      	bne.n	8006748 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006746:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e017      	b.n	800677c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800674c:	897b      	ldrh	r3, [r7, #10]
 800674e:	11db      	asrs	r3, r3, #7
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0306 	and.w	r3, r3, #6
 8006756:	b2db      	uxtb	r3, r3
 8006758:	f063 030e 	orn	r3, r3, #14
 800675c:	b2da      	uxtb	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	4907      	ldr	r1, [pc, #28]	; (8006788 <I2C_MasterRequestRead+0x198>)
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f9e3 	bl	8006b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	00010008 	.word	0x00010008
 8006788:	00010002 	.word	0x00010002

0800678c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af02      	add	r7, sp, #8
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	4608      	mov	r0, r1
 8006796:	4611      	mov	r1, r2
 8006798:	461a      	mov	r2, r3
 800679a:	4603      	mov	r3, r0
 800679c:	817b      	strh	r3, [r7, #10]
 800679e:	460b      	mov	r3, r1
 80067a0:	813b      	strh	r3, [r7, #8]
 80067a2:	4613      	mov	r3, r2
 80067a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	2200      	movs	r2, #0
 80067be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 f960 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00d      	beq.n	80067ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067dc:	d103      	bne.n	80067e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e05f      	b.n	80068aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067ea:	897b      	ldrh	r3, [r7, #10]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	461a      	mov	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	6a3a      	ldr	r2, [r7, #32]
 80067fe:	492d      	ldr	r1, [pc, #180]	; (80068b4 <I2C_RequestMemoryWrite+0x128>)
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 f998 	bl	8006b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e04c      	b.n	80068aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006828:	6a39      	ldr	r1, [r7, #32]
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fa02 	bl	8006c34 <I2C_WaitOnTXEFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00d      	beq.n	8006852 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	2b04      	cmp	r3, #4
 800683c:	d107      	bne.n	800684e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800684c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e02b      	b.n	80068aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d105      	bne.n	8006864 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006858:	893b      	ldrh	r3, [r7, #8]
 800685a:	b2da      	uxtb	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	611a      	str	r2, [r3, #16]
 8006862:	e021      	b.n	80068a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006864:	893b      	ldrh	r3, [r7, #8]
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	b29b      	uxth	r3, r3
 800686a:	b2da      	uxtb	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006874:	6a39      	ldr	r1, [r7, #32]
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 f9dc 	bl	8006c34 <I2C_WaitOnTXEFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00d      	beq.n	800689e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	2b04      	cmp	r3, #4
 8006888:	d107      	bne.n	800689a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006898:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e005      	b.n	80068aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800689e:	893b      	ldrh	r3, [r7, #8]
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	00010002 	.word	0x00010002

080068b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af02      	add	r7, sp, #8
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	4608      	mov	r0, r1
 80068c2:	4611      	mov	r1, r2
 80068c4:	461a      	mov	r2, r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	817b      	strh	r3, [r7, #10]
 80068ca:	460b      	mov	r3, r1
 80068cc:	813b      	strh	r3, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f8c2 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00d      	beq.n	8006926 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006918:	d103      	bne.n	8006922 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006920:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e0aa      	b.n	8006a7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006926:	897b      	ldrh	r3, [r7, #10]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	461a      	mov	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006934:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	6a3a      	ldr	r2, [r7, #32]
 800693a:	4952      	ldr	r1, [pc, #328]	; (8006a84 <I2C_RequestMemoryRead+0x1cc>)
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f8fa 	bl	8006b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e097      	b.n	8006a7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006964:	6a39      	ldr	r1, [r7, #32]
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f964 	bl	8006c34 <I2C_WaitOnTXEFlagUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00d      	beq.n	800698e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	2b04      	cmp	r3, #4
 8006978:	d107      	bne.n	800698a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006988:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e076      	b.n	8006a7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d105      	bne.n	80069a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006994:	893b      	ldrh	r3, [r7, #8]
 8006996:	b2da      	uxtb	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	611a      	str	r2, [r3, #16]
 800699e:	e021      	b.n	80069e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80069a0:	893b      	ldrh	r3, [r7, #8]
 80069a2:	0a1b      	lsrs	r3, r3, #8
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b0:	6a39      	ldr	r1, [r7, #32]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f93e 	bl	8006c34 <I2C_WaitOnTXEFlagUntilTimeout>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00d      	beq.n	80069da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d107      	bne.n	80069d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e050      	b.n	8006a7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069da:	893b      	ldrh	r3, [r7, #8]
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e6:	6a39      	ldr	r1, [r7, #32]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f923 	bl	8006c34 <I2C_WaitOnTXEFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00d      	beq.n	8006a10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d107      	bne.n	8006a0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e035      	b.n	8006a7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f82b 	bl	8006a88 <I2C_WaitOnFlagUntilTimeout>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00d      	beq.n	8006a54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a46:	d103      	bne.n	8006a50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e013      	b.n	8006a7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a54:	897b      	ldrh	r3, [r7, #10]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	f043 0301 	orr.w	r3, r3, #1
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	6a3a      	ldr	r2, [r7, #32]
 8006a68:	4906      	ldr	r1, [pc, #24]	; (8006a84 <I2C_RequestMemoryRead+0x1cc>)
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f863 	bl	8006b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	00010002 	.word	0x00010002

08006a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	4613      	mov	r3, r2
 8006a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a98:	e025      	b.n	8006ae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aa0:	d021      	beq.n	8006ae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa2:	f7fd fdd7 	bl	8004654 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d302      	bcc.n	8006ab8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d116      	bne.n	8006ae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e023      	b.n	8006b2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	0c1b      	lsrs	r3, r3, #16
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d10d      	bne.n	8006b0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	43da      	mvns	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4013      	ands	r3, r2
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bf0c      	ite	eq
 8006b02:	2301      	moveq	r3, #1
 8006b04:	2300      	movne	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	e00c      	b.n	8006b26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	43da      	mvns	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	4013      	ands	r3, r2
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bf0c      	ite	eq
 8006b1e:	2301      	moveq	r3, #1
 8006b20:	2300      	movne	r3, #0
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	79fb      	ldrb	r3, [r7, #7]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d0b6      	beq.n	8006a9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b44:	e051      	b.n	8006bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b54:	d123      	bne.n	8006b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	f043 0204 	orr.w	r2, r3, #4
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e046      	b.n	8006c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba4:	d021      	beq.n	8006bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba6:	f7fd fd55 	bl	8004654 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d302      	bcc.n	8006bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d116      	bne.n	8006bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	f043 0220 	orr.w	r2, r3, #32
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e020      	b.n	8006c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	0c1b      	lsrs	r3, r3, #16
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d10c      	bne.n	8006c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	43da      	mvns	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	bf14      	ite	ne
 8006c06:	2301      	movne	r3, #1
 8006c08:	2300      	moveq	r3, #0
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	e00b      	b.n	8006c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	43da      	mvns	r2, r3
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	bf14      	ite	ne
 8006c20:	2301      	movne	r3, #1
 8006c22:	2300      	moveq	r3, #0
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d18d      	bne.n	8006b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c40:	e02d      	b.n	8006c9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f8ce 	bl	8006de4 <I2C_IsAcknowledgeFailed>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e02d      	b.n	8006cae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c58:	d021      	beq.n	8006c9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c5a:	f7fd fcfb 	bl	8004654 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d302      	bcc.n	8006c70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d116      	bne.n	8006c9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f043 0220 	orr.w	r2, r3, #32
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e007      	b.n	8006cae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca8:	2b80      	cmp	r3, #128	; 0x80
 8006caa:	d1ca      	bne.n	8006c42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cc2:	e02d      	b.n	8006d20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 f88d 	bl	8006de4 <I2C_IsAcknowledgeFailed>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e02d      	b.n	8006d30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cda:	d021      	beq.n	8006d20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cdc:	f7fd fcba 	bl	8004654 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d302      	bcc.n	8006cf2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d116      	bne.n	8006d20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	f043 0220 	orr.w	r2, r3, #32
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e007      	b.n	8006d30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	f003 0304 	and.w	r3, r3, #4
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d1ca      	bne.n	8006cc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d44:	e042      	b.n	8006dcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	f003 0310 	and.w	r3, r3, #16
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	d119      	bne.n	8006d88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f06f 0210 	mvn.w	r2, #16
 8006d5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e029      	b.n	8006ddc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d88:	f7fd fc64 	bl	8004654 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d302      	bcc.n	8006d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d116      	bne.n	8006dcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	f043 0220 	orr.w	r2, r3, #32
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e007      	b.n	8006ddc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d1b5      	bne.n	8006d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dfa:	d11b      	bne.n	8006e34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e20:	f043 0204 	orr.w	r2, r3, #4
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr

08006e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e272      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 8087 	beq.w	8006f6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e60:	4b92      	ldr	r3, [pc, #584]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f003 030c 	and.w	r3, r3, #12
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d00c      	beq.n	8006e86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e6c:	4b8f      	ldr	r3, [pc, #572]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f003 030c 	and.w	r3, r3, #12
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d112      	bne.n	8006e9e <HAL_RCC_OscConfig+0x5e>
 8006e78:	4b8c      	ldr	r3, [pc, #560]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e84:	d10b      	bne.n	8006e9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e86:	4b89      	ldr	r3, [pc, #548]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d06c      	beq.n	8006f6c <HAL_RCC_OscConfig+0x12c>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d168      	bne.n	8006f6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e24c      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea6:	d106      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x76>
 8006ea8:	4b80      	ldr	r3, [pc, #512]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a7f      	ldr	r2, [pc, #508]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	e02e      	b.n	8006f14 <HAL_RCC_OscConfig+0xd4>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10c      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x98>
 8006ebe:	4b7b      	ldr	r3, [pc, #492]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a7a      	ldr	r2, [pc, #488]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	4b78      	ldr	r3, [pc, #480]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a77      	ldr	r2, [pc, #476]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	e01d      	b.n	8006f14 <HAL_RCC_OscConfig+0xd4>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ee0:	d10c      	bne.n	8006efc <HAL_RCC_OscConfig+0xbc>
 8006ee2:	4b72      	ldr	r3, [pc, #456]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a71      	ldr	r2, [pc, #452]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	4b6f      	ldr	r3, [pc, #444]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a6e      	ldr	r2, [pc, #440]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e00b      	b.n	8006f14 <HAL_RCC_OscConfig+0xd4>
 8006efc:	4b6b      	ldr	r3, [pc, #428]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a6a      	ldr	r2, [pc, #424]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	4b68      	ldr	r3, [pc, #416]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a67      	ldr	r2, [pc, #412]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d013      	beq.n	8006f44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f1c:	f7fd fb9a 	bl	8004654 <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f24:	f7fd fb96 	bl	8004654 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b64      	cmp	r3, #100	; 0x64
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e200      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f36:	4b5d      	ldr	r3, [pc, #372]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0f0      	beq.n	8006f24 <HAL_RCC_OscConfig+0xe4>
 8006f42:	e014      	b.n	8006f6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f44:	f7fd fb86 	bl	8004654 <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f4c:	f7fd fb82 	bl	8004654 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b64      	cmp	r3, #100	; 0x64
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e1ec      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f5e:	4b53      	ldr	r3, [pc, #332]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f0      	bne.n	8006f4c <HAL_RCC_OscConfig+0x10c>
 8006f6a:	e000      	b.n	8006f6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d063      	beq.n	8007042 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f7a:	4b4c      	ldr	r3, [pc, #304]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f003 030c 	and.w	r3, r3, #12
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00b      	beq.n	8006f9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006f86:	4b49      	ldr	r3, [pc, #292]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d11c      	bne.n	8006fcc <HAL_RCC_OscConfig+0x18c>
 8006f92:	4b46      	ldr	r3, [pc, #280]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d116      	bne.n	8006fcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f9e:	4b43      	ldr	r3, [pc, #268]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x176>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d001      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e1c0      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fb6:	4b3d      	ldr	r3, [pc, #244]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	4939      	ldr	r1, [pc, #228]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fca:	e03a      	b.n	8007042 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d020      	beq.n	8007016 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fd4:	4b36      	ldr	r3, [pc, #216]	; (80070b0 <HAL_RCC_OscConfig+0x270>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fda:	f7fd fb3b 	bl	8004654 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fe2:	f7fd fb37 	bl	8004654 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e1a1      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff4:	4b2d      	ldr	r3, [pc, #180]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007000:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	4927      	ldr	r1, [pc, #156]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8007010:	4313      	orrs	r3, r2
 8007012:	600b      	str	r3, [r1, #0]
 8007014:	e015      	b.n	8007042 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007016:	4b26      	ldr	r3, [pc, #152]	; (80070b0 <HAL_RCC_OscConfig+0x270>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800701c:	f7fd fb1a 	bl	8004654 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007024:	f7fd fb16 	bl	8004654 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e180      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007036:	4b1d      	ldr	r3, [pc, #116]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d03a      	beq.n	80070c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d019      	beq.n	800708a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007056:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <HAL_RCC_OscConfig+0x274>)
 8007058:	2201      	movs	r2, #1
 800705a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800705c:	f7fd fafa 	bl	8004654 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007064:	f7fd faf6 	bl	8004654 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e160      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007076:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <HAL_RCC_OscConfig+0x26c>)
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f0      	beq.n	8007064 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007082:	2001      	movs	r0, #1
 8007084:	f000 fac4 	bl	8007610 <RCC_Delay>
 8007088:	e01c      	b.n	80070c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800708a:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <HAL_RCC_OscConfig+0x274>)
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007090:	f7fd fae0 	bl	8004654 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007096:	e00f      	b.n	80070b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007098:	f7fd fadc 	bl	8004654 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d908      	bls.n	80070b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e146      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
 80070aa:	bf00      	nop
 80070ac:	40021000 	.word	0x40021000
 80070b0:	42420000 	.word	0x42420000
 80070b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070b8:	4b92      	ldr	r3, [pc, #584]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e9      	bne.n	8007098 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 80a6 	beq.w	800721e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070d6:	4b8b      	ldr	r3, [pc, #556]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10d      	bne.n	80070fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070e2:	4b88      	ldr	r3, [pc, #544]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	4a87      	ldr	r2, [pc, #540]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80070e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ec:	61d3      	str	r3, [r2, #28]
 80070ee:	4b85      	ldr	r3, [pc, #532]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070f6:	60bb      	str	r3, [r7, #8]
 80070f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070fa:	2301      	movs	r3, #1
 80070fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070fe:	4b82      	ldr	r3, [pc, #520]	; (8007308 <HAL_RCC_OscConfig+0x4c8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007106:	2b00      	cmp	r3, #0
 8007108:	d118      	bne.n	800713c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800710a:	4b7f      	ldr	r3, [pc, #508]	; (8007308 <HAL_RCC_OscConfig+0x4c8>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a7e      	ldr	r2, [pc, #504]	; (8007308 <HAL_RCC_OscConfig+0x4c8>)
 8007110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007116:	f7fd fa9d 	bl	8004654 <HAL_GetTick>
 800711a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800711c:	e008      	b.n	8007130 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800711e:	f7fd fa99 	bl	8004654 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b64      	cmp	r3, #100	; 0x64
 800712a:	d901      	bls.n	8007130 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e103      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007130:	4b75      	ldr	r3, [pc, #468]	; (8007308 <HAL_RCC_OscConfig+0x4c8>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007138:	2b00      	cmp	r3, #0
 800713a:	d0f0      	beq.n	800711e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d106      	bne.n	8007152 <HAL_RCC_OscConfig+0x312>
 8007144:	4b6f      	ldr	r3, [pc, #444]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	4a6e      	ldr	r2, [pc, #440]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800714a:	f043 0301 	orr.w	r3, r3, #1
 800714e:	6213      	str	r3, [r2, #32]
 8007150:	e02d      	b.n	80071ae <HAL_RCC_OscConfig+0x36e>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10c      	bne.n	8007174 <HAL_RCC_OscConfig+0x334>
 800715a:	4b6a      	ldr	r3, [pc, #424]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	4a69      	ldr	r2, [pc, #420]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007160:	f023 0301 	bic.w	r3, r3, #1
 8007164:	6213      	str	r3, [r2, #32]
 8007166:	4b67      	ldr	r3, [pc, #412]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	4a66      	ldr	r2, [pc, #408]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800716c:	f023 0304 	bic.w	r3, r3, #4
 8007170:	6213      	str	r3, [r2, #32]
 8007172:	e01c      	b.n	80071ae <HAL_RCC_OscConfig+0x36e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	2b05      	cmp	r3, #5
 800717a:	d10c      	bne.n	8007196 <HAL_RCC_OscConfig+0x356>
 800717c:	4b61      	ldr	r3, [pc, #388]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	4a60      	ldr	r2, [pc, #384]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007182:	f043 0304 	orr.w	r3, r3, #4
 8007186:	6213      	str	r3, [r2, #32]
 8007188:	4b5e      	ldr	r3, [pc, #376]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	4a5d      	ldr	r2, [pc, #372]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800718e:	f043 0301 	orr.w	r3, r3, #1
 8007192:	6213      	str	r3, [r2, #32]
 8007194:	e00b      	b.n	80071ae <HAL_RCC_OscConfig+0x36e>
 8007196:	4b5b      	ldr	r3, [pc, #364]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	4a5a      	ldr	r2, [pc, #360]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	6213      	str	r3, [r2, #32]
 80071a2:	4b58      	ldr	r3, [pc, #352]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	4a57      	ldr	r2, [pc, #348]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80071a8:	f023 0304 	bic.w	r3, r3, #4
 80071ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d015      	beq.n	80071e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071b6:	f7fd fa4d 	bl	8004654 <HAL_GetTick>
 80071ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071bc:	e00a      	b.n	80071d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071be:	f7fd fa49 	bl	8004654 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d901      	bls.n	80071d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e0b1      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d4:	4b4b      	ldr	r3, [pc, #300]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0ee      	beq.n	80071be <HAL_RCC_OscConfig+0x37e>
 80071e0:	e014      	b.n	800720c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071e2:	f7fd fa37 	bl	8004654 <HAL_GetTick>
 80071e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071e8:	e00a      	b.n	8007200 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ea:	f7fd fa33 	bl	8004654 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e09b      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007200:	4b40      	ldr	r3, [pc, #256]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1ee      	bne.n	80071ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d105      	bne.n	800721e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007212:	4b3c      	ldr	r3, [pc, #240]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	4a3b      	ldr	r2, [pc, #236]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800721c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 8087 	beq.w	8007336 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007228:	4b36      	ldr	r3, [pc, #216]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f003 030c 	and.w	r3, r3, #12
 8007230:	2b08      	cmp	r3, #8
 8007232:	d061      	beq.n	80072f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	2b02      	cmp	r3, #2
 800723a:	d146      	bne.n	80072ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800723c:	4b33      	ldr	r3, [pc, #204]	; (800730c <HAL_RCC_OscConfig+0x4cc>)
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007242:	f7fd fa07 	bl	8004654 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007248:	e008      	b.n	800725c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800724a:	f7fd fa03 	bl	8004654 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e06d      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800725c:	4b29      	ldr	r3, [pc, #164]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1f0      	bne.n	800724a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007270:	d108      	bne.n	8007284 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007272:	4b24      	ldr	r3, [pc, #144]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	4921      	ldr	r1, [pc, #132]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007280:	4313      	orrs	r3, r2
 8007282:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007284:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a19      	ldr	r1, [r3, #32]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	430b      	orrs	r3, r1
 8007296:	491b      	ldr	r1, [pc, #108]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 8007298:	4313      	orrs	r3, r2
 800729a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800729c:	4b1b      	ldr	r3, [pc, #108]	; (800730c <HAL_RCC_OscConfig+0x4cc>)
 800729e:	2201      	movs	r2, #1
 80072a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072a2:	f7fd f9d7 	bl	8004654 <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072aa:	f7fd f9d3 	bl	8004654 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e03d      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072bc:	4b11      	ldr	r3, [pc, #68]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f0      	beq.n	80072aa <HAL_RCC_OscConfig+0x46a>
 80072c8:	e035      	b.n	8007336 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ca:	4b10      	ldr	r3, [pc, #64]	; (800730c <HAL_RCC_OscConfig+0x4cc>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d0:	f7fd f9c0 	bl	8004654 <HAL_GetTick>
 80072d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d8:	f7fd f9bc 	bl	8004654 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e026      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072ea:	4b06      	ldr	r3, [pc, #24]	; (8007304 <HAL_RCC_OscConfig+0x4c4>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1f0      	bne.n	80072d8 <HAL_RCC_OscConfig+0x498>
 80072f6:	e01e      	b.n	8007336 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d107      	bne.n	8007310 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e019      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
 8007304:	40021000 	.word	0x40021000
 8007308:	40007000 	.word	0x40007000
 800730c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007310:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <HAL_RCC_OscConfig+0x500>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	429a      	cmp	r2, r3
 8007322:	d106      	bne.n	8007332 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800732e:	429a      	cmp	r2, r3
 8007330:	d001      	beq.n	8007336 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	40021000 	.word	0x40021000

08007344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e0d0      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007358:	4b6a      	ldr	r3, [pc, #424]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d910      	bls.n	8007388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007366:	4b67      	ldr	r3, [pc, #412]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f023 0207 	bic.w	r2, r3, #7
 800736e:	4965      	ldr	r1, [pc, #404]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	4313      	orrs	r3, r2
 8007374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007376:	4b63      	ldr	r3, [pc, #396]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d001      	beq.n	8007388 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e0b8      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d020      	beq.n	80073d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	d005      	beq.n	80073ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073a0:	4b59      	ldr	r3, [pc, #356]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	4a58      	ldr	r2, [pc, #352]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80073aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d005      	beq.n	80073c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073b8:	4b53      	ldr	r3, [pc, #332]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	4a52      	ldr	r2, [pc, #328]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80073c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073c4:	4b50      	ldr	r3, [pc, #320]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	494d      	ldr	r1, [pc, #308]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d040      	beq.n	8007464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d107      	bne.n	80073fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ea:	4b47      	ldr	r3, [pc, #284]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d115      	bne.n	8007422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e07f      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d107      	bne.n	8007412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007402:	4b41      	ldr	r3, [pc, #260]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e073      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007412:	4b3d      	ldr	r3, [pc, #244]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e06b      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007422:	4b39      	ldr	r3, [pc, #228]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f023 0203 	bic.w	r2, r3, #3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	4936      	ldr	r1, [pc, #216]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 8007430:	4313      	orrs	r3, r2
 8007432:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007434:	f7fd f90e 	bl	8004654 <HAL_GetTick>
 8007438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743a:	e00a      	b.n	8007452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800743c:	f7fd f90a 	bl	8004654 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	f241 3288 	movw	r2, #5000	; 0x1388
 800744a:	4293      	cmp	r3, r2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e053      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007452:	4b2d      	ldr	r3, [pc, #180]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f003 020c 	and.w	r2, r3, #12
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	429a      	cmp	r2, r3
 8007462:	d1eb      	bne.n	800743c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007464:	4b27      	ldr	r3, [pc, #156]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d210      	bcs.n	8007494 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007472:	4b24      	ldr	r3, [pc, #144]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f023 0207 	bic.w	r2, r3, #7
 800747a:	4922      	ldr	r1, [pc, #136]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	4313      	orrs	r3, r2
 8007480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007482:	4b20      	ldr	r3, [pc, #128]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	d001      	beq.n	8007494 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e032      	b.n	80074fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	d008      	beq.n	80074b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074a0:	4b19      	ldr	r3, [pc, #100]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	4916      	ldr	r1, [pc, #88]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0308 	and.w	r3, r3, #8
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d009      	beq.n	80074d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80074be:	4b12      	ldr	r3, [pc, #72]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	490e      	ldr	r1, [pc, #56]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074d2:	f000 f821 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 80074d6:	4602      	mov	r2, r0
 80074d8:	4b0b      	ldr	r3, [pc, #44]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	091b      	lsrs	r3, r3, #4
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	490a      	ldr	r1, [pc, #40]	; (800750c <HAL_RCC_ClockConfig+0x1c8>)
 80074e4:	5ccb      	ldrb	r3, [r1, r3]
 80074e6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ea:	4a09      	ldr	r2, [pc, #36]	; (8007510 <HAL_RCC_ClockConfig+0x1cc>)
 80074ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <HAL_RCC_ClockConfig+0x1d0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fd f86c 	bl	80045d0 <HAL_InitTick>

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40022000 	.word	0x40022000
 8007508:	40021000 	.word	0x40021000
 800750c:	0800cb0c 	.word	0x0800cb0c
 8007510:	20000004 	.word	0x20000004
 8007514:	20000040 	.word	0x20000040

08007518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007518:	b490      	push	{r4, r7}
 800751a:	b08a      	sub	sp, #40	; 0x28
 800751c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800751e:	4b29      	ldr	r3, [pc, #164]	; (80075c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8007520:	1d3c      	adds	r4, r7, #4
 8007522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007528:	f240 2301 	movw	r3, #513	; 0x201
 800752c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	2300      	movs	r3, #0
 8007534:	61bb      	str	r3, [r7, #24]
 8007536:	2300      	movs	r3, #0
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
 800753a:	2300      	movs	r3, #0
 800753c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007542:	4b21      	ldr	r3, [pc, #132]	; (80075c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	f003 030c 	and.w	r3, r3, #12
 800754e:	2b04      	cmp	r3, #4
 8007550:	d002      	beq.n	8007558 <HAL_RCC_GetSysClockFreq+0x40>
 8007552:	2b08      	cmp	r3, #8
 8007554:	d003      	beq.n	800755e <HAL_RCC_GetSysClockFreq+0x46>
 8007556:	e02b      	b.n	80075b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007558:	4b1c      	ldr	r3, [pc, #112]	; (80075cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800755a:	623b      	str	r3, [r7, #32]
      break;
 800755c:	e02b      	b.n	80075b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	0c9b      	lsrs	r3, r3, #18
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	3328      	adds	r3, #40	; 0x28
 8007568:	443b      	add	r3, r7
 800756a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800756e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d012      	beq.n	80075a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800757a:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	0c5b      	lsrs	r3, r3, #17
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	3328      	adds	r3, #40	; 0x28
 8007586:	443b      	add	r3, r7
 8007588:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800758c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	4a0e      	ldr	r2, [pc, #56]	; (80075cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8007592:	fb03 f202 	mul.w	r2, r3, r2
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	fbb2 f3f3 	udiv	r3, r2, r3
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
 800759e:	e004      	b.n	80075aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	4a0b      	ldr	r2, [pc, #44]	; (80075d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075a4:	fb02 f303 	mul.w	r3, r2, r3
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	623b      	str	r3, [r7, #32]
      break;
 80075ae:	e002      	b.n	80075b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80075b0:	4b06      	ldr	r3, [pc, #24]	; (80075cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80075b2:	623b      	str	r3, [r7, #32]
      break;
 80075b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075b6:	6a3b      	ldr	r3, [r7, #32]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3728      	adds	r7, #40	; 0x28
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc90      	pop	{r4, r7}
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	0800c498 	.word	0x0800c498
 80075c8:	40021000 	.word	0x40021000
 80075cc:	007a1200 	.word	0x007a1200
 80075d0:	003d0900 	.word	0x003d0900

080075d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075d8:	4b02      	ldr	r3, [pc, #8]	; (80075e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80075da:	681b      	ldr	r3, [r3, #0]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr
 80075e4:	20000004 	.word	0x20000004

080075e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075ec:	f7ff fff2 	bl	80075d4 <HAL_RCC_GetHCLKFreq>
 80075f0:	4602      	mov	r2, r0
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	4903      	ldr	r1, [pc, #12]	; (800760c <HAL_RCC_GetPCLK1Freq+0x24>)
 80075fe:	5ccb      	ldrb	r3, [r1, r3]
 8007600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007604:	4618      	mov	r0, r3
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40021000 	.word	0x40021000
 800760c:	0800cb1c 	.word	0x0800cb1c

08007610 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <RCC_Delay+0x34>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a0a      	ldr	r2, [pc, #40]	; (8007648 <RCC_Delay+0x38>)
 800761e:	fba2 2303 	umull	r2, r3, r2, r3
 8007622:	0a5b      	lsrs	r3, r3, #9
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	fb02 f303 	mul.w	r3, r2, r3
 800762a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800762c:	bf00      	nop
  }
  while (Delay --);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	1e5a      	subs	r2, r3, #1
 8007632:	60fa      	str	r2, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1f9      	bne.n	800762c <RCC_Delay+0x1c>
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	bc80      	pop	{r7}
 8007642:	4770      	bx	lr
 8007644:	20000004 	.word	0x20000004
 8007648:	10624dd3 	.word	0x10624dd3

0800764c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d004      	beq.n	8007668 <HAL_SRAM_Init+0x1c>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007666:	d101      	bne.n	800766c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e038      	b.n	80076de <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d106      	bne.n	8007686 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f7fb fe13 	bl	80032ac <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3308      	adds	r3, #8
 800768e:	4619      	mov	r1, r3
 8007690:	4610      	mov	r0, r2
 8007692:	f001 fae3 	bl	8008c5c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	461a      	mov	r2, r3
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	f001 fb45 	bl	8008d30 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6858      	ldr	r0, [r3, #4]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	f001 fb70 	bl	8008d98 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	6892      	ldr	r2, [r2, #8]
 80076c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	6892      	ldr	r2, [r2, #8]
 80076cc:	f041 0101 	orr.w	r1, r1, #1
 80076d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e041      	b.n	800777c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7fb fcef 	bl	80030f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2202      	movs	r2, #2
 8007716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3304      	adds	r3, #4
 8007722:	4619      	mov	r1, r3
 8007724:	4610      	mov	r0, r2
 8007726:	f000 fee9 	bl	80084fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	d001      	beq.n	800779c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e044      	b.n	8007826 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a1d      	ldr	r2, [pc, #116]	; (8007830 <HAL_TIM_Base_Start_IT+0xac>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d018      	beq.n	80077f0 <HAL_TIM_Base_Start_IT+0x6c>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a1c      	ldr	r2, [pc, #112]	; (8007834 <HAL_TIM_Base_Start_IT+0xb0>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d013      	beq.n	80077f0 <HAL_TIM_Base_Start_IT+0x6c>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d0:	d00e      	beq.n	80077f0 <HAL_TIM_Base_Start_IT+0x6c>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a18      	ldr	r2, [pc, #96]	; (8007838 <HAL_TIM_Base_Start_IT+0xb4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d009      	beq.n	80077f0 <HAL_TIM_Base_Start_IT+0x6c>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a16      	ldr	r2, [pc, #88]	; (800783c <HAL_TIM_Base_Start_IT+0xb8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d004      	beq.n	80077f0 <HAL_TIM_Base_Start_IT+0x6c>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a15      	ldr	r2, [pc, #84]	; (8007840 <HAL_TIM_Base_Start_IT+0xbc>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d111      	bne.n	8007814 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0307 	and.w	r3, r3, #7
 80077fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b06      	cmp	r3, #6
 8007800:	d010      	beq.n	8007824 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0201 	orr.w	r2, r2, #1
 8007810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007812:	e007      	b.n	8007824 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f042 0201 	orr.w	r2, r2, #1
 8007822:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr
 8007830:	40012c00 	.word	0x40012c00
 8007834:	40013400 	.word	0x40013400
 8007838:	40000400 	.word	0x40000400
 800783c:	40000800 	.word	0x40000800
 8007840:	40000c00 	.word	0x40000c00

08007844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e041      	b.n	80078da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f839 	bl	80078e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	3304      	adds	r3, #4
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f000 fe3a 	bl	80084fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bc80      	pop	{r7}
 80078f2:	4770      	bx	lr

080078f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d109      	bne.n	800791c <HAL_TIM_PWM_Start_DMA+0x28>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	bf0c      	ite	eq
 8007914:	2301      	moveq	r3, #1
 8007916:	2300      	movne	r3, #0
 8007918:	b2db      	uxtb	r3, r3
 800791a:	e022      	b.n	8007962 <HAL_TIM_PWM_Start_DMA+0x6e>
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b04      	cmp	r3, #4
 8007920:	d109      	bne.n	8007936 <HAL_TIM_PWM_Start_DMA+0x42>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	bf0c      	ite	eq
 800792e:	2301      	moveq	r3, #1
 8007930:	2300      	movne	r3, #0
 8007932:	b2db      	uxtb	r3, r3
 8007934:	e015      	b.n	8007962 <HAL_TIM_PWM_Start_DMA+0x6e>
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b08      	cmp	r3, #8
 800793a:	d109      	bne.n	8007950 <HAL_TIM_PWM_Start_DMA+0x5c>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b02      	cmp	r3, #2
 8007946:	bf0c      	ite	eq
 8007948:	2301      	moveq	r3, #1
 800794a:	2300      	movne	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	e008      	b.n	8007962 <HAL_TIM_PWM_Start_DMA+0x6e>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b02      	cmp	r3, #2
 800795a:	bf0c      	ite	eq
 800795c:	2301      	moveq	r3, #1
 800795e:	2300      	movne	r3, #0
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8007966:	2302      	movs	r3, #2
 8007968:	e162      	b.n	8007c30 <HAL_TIM_PWM_Start_DMA+0x33c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d109      	bne.n	8007984 <HAL_TIM_PWM_Start_DMA+0x90>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b01      	cmp	r3, #1
 800797a:	bf0c      	ite	eq
 800797c:	2301      	moveq	r3, #1
 800797e:	2300      	movne	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	e022      	b.n	80079ca <HAL_TIM_PWM_Start_DMA+0xd6>
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b04      	cmp	r3, #4
 8007988:	d109      	bne.n	800799e <HAL_TIM_PWM_Start_DMA+0xaa>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b01      	cmp	r3, #1
 8007994:	bf0c      	ite	eq
 8007996:	2301      	moveq	r3, #1
 8007998:	2300      	movne	r3, #0
 800799a:	b2db      	uxtb	r3, r3
 800799c:	e015      	b.n	80079ca <HAL_TIM_PWM_Start_DMA+0xd6>
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d109      	bne.n	80079b8 <HAL_TIM_PWM_Start_DMA+0xc4>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	bf0c      	ite	eq
 80079b0:	2301      	moveq	r3, #1
 80079b2:	2300      	movne	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	e008      	b.n	80079ca <HAL_TIM_PWM_Start_DMA+0xd6>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	bf0c      	ite	eq
 80079c4:	2301      	moveq	r3, #1
 80079c6:	2300      	movne	r3, #0
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d024      	beq.n	8007a18 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d104      	bne.n	80079de <HAL_TIM_PWM_Start_DMA+0xea>
 80079d4:	887b      	ldrh	r3, [r7, #2]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e128      	b.n	8007c30 <HAL_TIM_PWM_Start_DMA+0x33c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d104      	bne.n	80079ee <HAL_TIM_PWM_Start_DMA+0xfa>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079ec:	e016      	b.n	8007a1c <HAL_TIM_PWM_Start_DMA+0x128>
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d104      	bne.n	80079fe <HAL_TIM_PWM_Start_DMA+0x10a>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079fc:	e00e      	b.n	8007a1c <HAL_TIM_PWM_Start_DMA+0x128>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d104      	bne.n	8007a0e <HAL_TIM_PWM_Start_DMA+0x11a>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a0c:	e006      	b.n	8007a1c <HAL_TIM_PWM_Start_DMA+0x128>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2202      	movs	r2, #2
 8007a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a16:	e001      	b.n	8007a1c <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e109      	b.n	8007c30 <HAL_TIM_PWM_Start_DMA+0x33c>
  }

  switch (Channel)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2b0c      	cmp	r3, #12
 8007a20:	f200 80ae 	bhi.w	8007b80 <HAL_TIM_PWM_Start_DMA+0x28c>
 8007a24:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <HAL_TIM_PWM_Start_DMA+0x138>)
 8007a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2a:	bf00      	nop
 8007a2c:	08007a61 	.word	0x08007a61
 8007a30:	08007b81 	.word	0x08007b81
 8007a34:	08007b81 	.word	0x08007b81
 8007a38:	08007b81 	.word	0x08007b81
 8007a3c:	08007aa9 	.word	0x08007aa9
 8007a40:	08007b81 	.word	0x08007b81
 8007a44:	08007b81 	.word	0x08007b81
 8007a48:	08007b81 	.word	0x08007b81
 8007a4c:	08007af1 	.word	0x08007af1
 8007a50:	08007b81 	.word	0x08007b81
 8007a54:	08007b81 	.word	0x08007b81
 8007a58:	08007b81 	.word	0x08007b81
 8007a5c:	08007b39 	.word	0x08007b39
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	4a74      	ldr	r2, [pc, #464]	; (8007c38 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007a66:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	4a73      	ldr	r2, [pc, #460]	; (8007c3c <HAL_TIM_PWM_Start_DMA+0x348>)
 8007a6e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	4a72      	ldr	r2, [pc, #456]	; (8007c40 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8007a76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007a7c:	6879      	ldr	r1, [r7, #4]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3334      	adds	r3, #52	; 0x34
 8007a84:	461a      	mov	r2, r3
 8007a86:	887b      	ldrh	r3, [r7, #2]
 8007a88:	f7fc ff96 	bl	80049b8 <HAL_DMA_Start_IT>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e0cc      	b.n	8007c30 <HAL_TIM_PWM_Start_DMA+0x33c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aa4:	60da      	str	r2, [r3, #12]
      break;
 8007aa6:	e06c      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	4a62      	ldr	r2, [pc, #392]	; (8007c38 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007aae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab4:	4a61      	ldr	r2, [pc, #388]	; (8007c3c <HAL_TIM_PWM_Start_DMA+0x348>)
 8007ab6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abc:	4a60      	ldr	r2, [pc, #384]	; (8007c40 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8007abe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3338      	adds	r3, #56	; 0x38
 8007acc:	461a      	mov	r2, r3
 8007ace:	887b      	ldrh	r3, [r7, #2]
 8007ad0:	f7fc ff72 	bl	80049b8 <HAL_DMA_Start_IT>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e0a8      	b.n	8007c30 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007aec:	60da      	str	r2, [r3, #12]
      break;
 8007aee:	e048      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	4a50      	ldr	r2, [pc, #320]	; (8007c38 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007af6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afc:	4a4f      	ldr	r2, [pc, #316]	; (8007c3c <HAL_TIM_PWM_Start_DMA+0x348>)
 8007afe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	4a4e      	ldr	r2, [pc, #312]	; (8007c40 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8007b06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007b0c:	6879      	ldr	r1, [r7, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	333c      	adds	r3, #60	; 0x3c
 8007b14:	461a      	mov	r2, r3
 8007b16:	887b      	ldrh	r3, [r7, #2]
 8007b18:	f7fc ff4e 	bl	80049b8 <HAL_DMA_Start_IT>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e084      	b.n	8007c30 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b34:	60da      	str	r2, [r3, #12]
      break;
 8007b36:	e024      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	4a3e      	ldr	r2, [pc, #248]	; (8007c38 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007b3e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b44:	4a3d      	ldr	r2, [pc, #244]	; (8007c3c <HAL_TIM_PWM_Start_DMA+0x348>)
 8007b46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4c:	4a3c      	ldr	r2, [pc, #240]	; (8007c40 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8007b4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b54:	6879      	ldr	r1, [r7, #4]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3340      	adds	r3, #64	; 0x40
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	887b      	ldrh	r3, [r7, #2]
 8007b60:	f7fc ff2a 	bl	80049b8 <HAL_DMA_Start_IT>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e060      	b.n	8007c30 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b7c:	60da      	str	r2, [r3, #12]
      break;
 8007b7e:	e000      	b.n	8007b82 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8007b80:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2201      	movs	r2, #1
 8007b88:	68b9      	ldr	r1, [r7, #8]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 ff72 	bl	8008a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a2b      	ldr	r2, [pc, #172]	; (8007c44 <HAL_TIM_PWM_Start_DMA+0x350>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d004      	beq.n	8007ba4 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a2a      	ldr	r2, [pc, #168]	; (8007c48 <HAL_TIM_PWM_Start_DMA+0x354>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d101      	bne.n	8007ba8 <HAL_TIM_PWM_Start_DMA+0x2b4>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e000      	b.n	8007baa <HAL_TIM_PWM_Start_DMA+0x2b6>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d007      	beq.n	8007bbe <HAL_TIM_PWM_Start_DMA+0x2ca>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a20      	ldr	r2, [pc, #128]	; (8007c44 <HAL_TIM_PWM_Start_DMA+0x350>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d018      	beq.n	8007bfa <HAL_TIM_PWM_Start_DMA+0x306>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a1e      	ldr	r2, [pc, #120]	; (8007c48 <HAL_TIM_PWM_Start_DMA+0x354>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d013      	beq.n	8007bfa <HAL_TIM_PWM_Start_DMA+0x306>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bda:	d00e      	beq.n	8007bfa <HAL_TIM_PWM_Start_DMA+0x306>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a1a      	ldr	r2, [pc, #104]	; (8007c4c <HAL_TIM_PWM_Start_DMA+0x358>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d009      	beq.n	8007bfa <HAL_TIM_PWM_Start_DMA+0x306>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a19      	ldr	r2, [pc, #100]	; (8007c50 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d004      	beq.n	8007bfa <HAL_TIM_PWM_Start_DMA+0x306>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a17      	ldr	r2, [pc, #92]	; (8007c54 <HAL_TIM_PWM_Start_DMA+0x360>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d111      	bne.n	8007c1e <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b06      	cmp	r3, #6
 8007c0a:	d010      	beq.n	8007c2e <HAL_TIM_PWM_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f042 0201 	orr.w	r2, r2, #1
 8007c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1c:	e007      	b.n	8007c2e <HAL_TIM_PWM_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0201 	orr.w	r2, r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	080083ed 	.word	0x080083ed
 8007c3c:	08008495 	.word	0x08008495
 8007c40:	0800835b 	.word	0x0800835b
 8007c44:	40012c00 	.word	0x40012c00
 8007c48:	40013400 	.word	0x40013400
 8007c4c:	40000400 	.word	0x40000400
 8007c50:	40000800 	.word	0x40000800
 8007c54:	40000c00 	.word	0x40000c00

08007c58 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b0c      	cmp	r3, #12
 8007c66:	d855      	bhi.n	8007d14 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8007c68:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007ca5 	.word	0x08007ca5
 8007c74:	08007d15 	.word	0x08007d15
 8007c78:	08007d15 	.word	0x08007d15
 8007c7c:	08007d15 	.word	0x08007d15
 8007c80:	08007cc1 	.word	0x08007cc1
 8007c84:	08007d15 	.word	0x08007d15
 8007c88:	08007d15 	.word	0x08007d15
 8007c8c:	08007d15 	.word	0x08007d15
 8007c90:	08007cdd 	.word	0x08007cdd
 8007c94:	08007d15 	.word	0x08007d15
 8007c98:	08007d15 	.word	0x08007d15
 8007c9c:	08007d15 	.word	0x08007d15
 8007ca0:	08007cf9 	.word	0x08007cf9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007cb2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fc fedd 	bl	8004a78 <HAL_DMA_Abort_IT>
      break;
 8007cbe:	e02a      	b.n	8007d16 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fc fecf 	bl	8004a78 <HAL_DMA_Abort_IT>
      break;
 8007cda:	e01c      	b.n	8007d16 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fc fec1 	bl	8004a78 <HAL_DMA_Abort_IT>
      break;
 8007cf6:	e00e      	b.n	8007d16 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fc feb3 	bl	8004a78 <HAL_DMA_Abort_IT>
      break;
 8007d12:	e000      	b.n	8007d16 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8007d14:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 fea8 	bl	8008a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a2e      	ldr	r2, [pc, #184]	; (8007de4 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d004      	beq.n	8007d38 <HAL_TIM_PWM_Stop_DMA+0xe0>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a2d      	ldr	r2, [pc, #180]	; (8007de8 <HAL_TIM_PWM_Stop_DMA+0x190>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d101      	bne.n	8007d3c <HAL_TIM_PWM_Stop_DMA+0xe4>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e000      	b.n	8007d3e <HAL_TIM_PWM_Stop_DMA+0xe6>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d017      	beq.n	8007d72 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6a1a      	ldr	r2, [r3, #32]
 8007d48:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10f      	bne.n	8007d72 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6a1a      	ldr	r2, [r3, #32]
 8007d58:	f240 4344 	movw	r3, #1092	; 0x444
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d107      	bne.n	8007d72 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6a1a      	ldr	r2, [r3, #32]
 8007d78:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10f      	bne.n	8007da2 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6a1a      	ldr	r2, [r3, #32]
 8007d88:	f240 4344 	movw	r3, #1092	; 0x444
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d107      	bne.n	8007da2 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0201 	bic.w	r2, r2, #1
 8007da0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d104      	bne.n	8007db2 <HAL_TIM_PWM_Stop_DMA+0x15a>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007db0:	e013      	b.n	8007dda <HAL_TIM_PWM_Stop_DMA+0x182>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d104      	bne.n	8007dc2 <HAL_TIM_PWM_Stop_DMA+0x16a>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dc0:	e00b      	b.n	8007dda <HAL_TIM_PWM_Stop_DMA+0x182>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d104      	bne.n	8007dd2 <HAL_TIM_PWM_Stop_DMA+0x17a>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dd0:	e003      	b.n	8007dda <HAL_TIM_PWM_Stop_DMA+0x182>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	40012c00 	.word	0x40012c00
 8007de8:	40013400 	.word	0x40013400

08007dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d122      	bne.n	8007e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f003 0302 	and.w	r3, r3, #2
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d11b      	bne.n	8007e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f06f 0202 	mvn.w	r2, #2
 8007e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fa6f 	bl	8008312 <HAL_TIM_IC_CaptureCallback>
 8007e34:	e005      	b.n	8007e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa62 	bl	8008300 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7fb fca9 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	d122      	bne.n	8007e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d11b      	bne.n	8007e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f06f 0204 	mvn.w	r2, #4
 8007e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2202      	movs	r2, #2
 8007e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa45 	bl	8008312 <HAL_TIM_IC_CaptureCallback>
 8007e88:	e005      	b.n	8007e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fa38 	bl	8008300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7fb fc7f 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	2b08      	cmp	r3, #8
 8007ea8:	d122      	bne.n	8007ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f003 0308 	and.w	r3, r3, #8
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d11b      	bne.n	8007ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f06f 0208 	mvn.w	r2, #8
 8007ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2204      	movs	r2, #4
 8007ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fa1b 	bl	8008312 <HAL_TIM_IC_CaptureCallback>
 8007edc:	e005      	b.n	8007eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa0e 	bl	8008300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fb fc55 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	f003 0310 	and.w	r3, r3, #16
 8007efa:	2b10      	cmp	r3, #16
 8007efc:	d122      	bne.n	8007f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b10      	cmp	r3, #16
 8007f0a:	d11b      	bne.n	8007f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f06f 0210 	mvn.w	r2, #16
 8007f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2208      	movs	r2, #8
 8007f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f9f1 	bl	8008312 <HAL_TIM_IC_CaptureCallback>
 8007f30:	e005      	b.n	8007f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9e4 	bl	8008300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7fb fc2b 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d10e      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d107      	bne.n	8007f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f06f 0201 	mvn.w	r2, #1
 8007f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7f9 fe54 	bl	8001c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f7a:	2b80      	cmp	r3, #128	; 0x80
 8007f7c:	d10e      	bne.n	8007f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f88:	2b80      	cmp	r3, #128	; 0x80
 8007f8a:	d107      	bne.n	8007f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fe56 	bl	8008c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa6:	2b40      	cmp	r3, #64	; 0x40
 8007fa8:	d10e      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb4:	2b40      	cmp	r3, #64	; 0x40
 8007fb6:	d107      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f9b7 	bl	8008336 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0320 	and.w	r3, r3, #32
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	d10e      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0320 	and.w	r3, r3, #32
 8007fe0:	2b20      	cmp	r3, #32
 8007fe2:	d107      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0220 	mvn.w	r2, #32
 8007fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fe21 	bl	8008c36 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ff4:	bf00      	nop
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800800e:	2b01      	cmp	r3, #1
 8008010:	d101      	bne.n	8008016 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008012:	2302      	movs	r3, #2
 8008014:	e0ac      	b.n	8008170 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b0c      	cmp	r3, #12
 8008022:	f200 809f 	bhi.w	8008164 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	08008061 	.word	0x08008061
 8008030:	08008165 	.word	0x08008165
 8008034:	08008165 	.word	0x08008165
 8008038:	08008165 	.word	0x08008165
 800803c:	080080a1 	.word	0x080080a1
 8008040:	08008165 	.word	0x08008165
 8008044:	08008165 	.word	0x08008165
 8008048:	08008165 	.word	0x08008165
 800804c:	080080e3 	.word	0x080080e3
 8008050:	08008165 	.word	0x08008165
 8008054:	08008165 	.word	0x08008165
 8008058:	08008165 	.word	0x08008165
 800805c:	08008123 	.word	0x08008123
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fac2 	bl	80085f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0208 	orr.w	r2, r2, #8
 800807a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	699a      	ldr	r2, [r3, #24]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0204 	bic.w	r2, r2, #4
 800808a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6999      	ldr	r1, [r3, #24]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	691a      	ldr	r2, [r3, #16]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	619a      	str	r2, [r3, #24]
      break;
 800809e:	e062      	b.n	8008166 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68b9      	ldr	r1, [r7, #8]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fb12 	bl	80086d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699a      	ldr	r2, [r3, #24]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6999      	ldr	r1, [r3, #24]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	021a      	lsls	r2, r3, #8
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	619a      	str	r2, [r3, #24]
      break;
 80080e0:	e041      	b.n	8008166 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fb65 	bl	80087b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	69da      	ldr	r2, [r3, #28]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f042 0208 	orr.w	r2, r2, #8
 80080fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69da      	ldr	r2, [r3, #28]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0204 	bic.w	r2, r2, #4
 800810c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69d9      	ldr	r1, [r3, #28]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	691a      	ldr	r2, [r3, #16]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	61da      	str	r2, [r3, #28]
      break;
 8008120:	e021      	b.n	8008166 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	4618      	mov	r0, r3
 800812a:	f000 fbb9 	bl	80088a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	69da      	ldr	r2, [r3, #28]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800813c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69da      	ldr	r2, [r3, #28]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800814c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69d9      	ldr	r1, [r3, #28]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	021a      	lsls	r2, r3, #8
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	61da      	str	r2, [r3, #28]
      break;
 8008162:	e000      	b.n	8008166 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008164:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_TIM_ConfigClockSource+0x18>
 800818c:	2302      	movs	r3, #2
 800818e:	e0b3      	b.n	80082f8 <HAL_TIM_ConfigClockSource+0x180>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c8:	d03e      	beq.n	8008248 <HAL_TIM_ConfigClockSource+0xd0>
 80081ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ce:	f200 8087 	bhi.w	80082e0 <HAL_TIM_ConfigClockSource+0x168>
 80081d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d6:	f000 8085 	beq.w	80082e4 <HAL_TIM_ConfigClockSource+0x16c>
 80081da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081de:	d87f      	bhi.n	80082e0 <HAL_TIM_ConfigClockSource+0x168>
 80081e0:	2b70      	cmp	r3, #112	; 0x70
 80081e2:	d01a      	beq.n	800821a <HAL_TIM_ConfigClockSource+0xa2>
 80081e4:	2b70      	cmp	r3, #112	; 0x70
 80081e6:	d87b      	bhi.n	80082e0 <HAL_TIM_ConfigClockSource+0x168>
 80081e8:	2b60      	cmp	r3, #96	; 0x60
 80081ea:	d050      	beq.n	800828e <HAL_TIM_ConfigClockSource+0x116>
 80081ec:	2b60      	cmp	r3, #96	; 0x60
 80081ee:	d877      	bhi.n	80082e0 <HAL_TIM_ConfigClockSource+0x168>
 80081f0:	2b50      	cmp	r3, #80	; 0x50
 80081f2:	d03c      	beq.n	800826e <HAL_TIM_ConfigClockSource+0xf6>
 80081f4:	2b50      	cmp	r3, #80	; 0x50
 80081f6:	d873      	bhi.n	80082e0 <HAL_TIM_ConfigClockSource+0x168>
 80081f8:	2b40      	cmp	r3, #64	; 0x40
 80081fa:	d058      	beq.n	80082ae <HAL_TIM_ConfigClockSource+0x136>
 80081fc:	2b40      	cmp	r3, #64	; 0x40
 80081fe:	d86f      	bhi.n	80082e0 <HAL_TIM_ConfigClockSource+0x168>
 8008200:	2b30      	cmp	r3, #48	; 0x30
 8008202:	d064      	beq.n	80082ce <HAL_TIM_ConfigClockSource+0x156>
 8008204:	2b30      	cmp	r3, #48	; 0x30
 8008206:	d86b      	bhi.n	80082e0 <HAL_TIM_ConfigClockSource+0x168>
 8008208:	2b20      	cmp	r3, #32
 800820a:	d060      	beq.n	80082ce <HAL_TIM_ConfigClockSource+0x156>
 800820c:	2b20      	cmp	r3, #32
 800820e:	d867      	bhi.n	80082e0 <HAL_TIM_ConfigClockSource+0x168>
 8008210:	2b00      	cmp	r3, #0
 8008212:	d05c      	beq.n	80082ce <HAL_TIM_ConfigClockSource+0x156>
 8008214:	2b10      	cmp	r3, #16
 8008216:	d05a      	beq.n	80082ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008218:	e062      	b.n	80082e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	6899      	ldr	r1, [r3, #8]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f000 fc04 	bl	8008a36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800823c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	609a      	str	r2, [r3, #8]
      break;
 8008246:	e04e      	b.n	80082e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	6899      	ldr	r1, [r3, #8]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	f000 fbed 	bl	8008a36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800826a:	609a      	str	r2, [r3, #8]
      break;
 800826c:	e03b      	b.n	80082e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	6859      	ldr	r1, [r3, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	461a      	mov	r2, r3
 800827c:	f000 fb64 	bl	8008948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2150      	movs	r1, #80	; 0x50
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fbbb 	bl	8008a02 <TIM_ITRx_SetConfig>
      break;
 800828c:	e02b      	b.n	80082e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	6859      	ldr	r1, [r3, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	461a      	mov	r2, r3
 800829c:	f000 fb82 	bl	80089a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2160      	movs	r1, #96	; 0x60
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 fbab 	bl	8008a02 <TIM_ITRx_SetConfig>
      break;
 80082ac:	e01b      	b.n	80082e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	6859      	ldr	r1, [r3, #4]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	461a      	mov	r2, r3
 80082bc:	f000 fb44 	bl	8008948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2140      	movs	r1, #64	; 0x40
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fb9b 	bl	8008a02 <TIM_ITRx_SetConfig>
      break;
 80082cc:	e00b      	b.n	80082e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4619      	mov	r1, r3
 80082d8:	4610      	mov	r0, r2
 80082da:	f000 fb92 	bl	8008a02 <TIM_ITRx_SetConfig>
        break;
 80082de:	e002      	b.n	80082e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80082e0:	bf00      	nop
 80082e2:	e000      	b.n	80082e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80082e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	bc80      	pop	{r7}
 8008310:	4770      	bx	lr

08008312 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	bc80      	pop	{r7}
 8008334:	4770      	bx	lr

08008336 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr

08008348 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr

0800835a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	429a      	cmp	r2, r3
 8008370:	d107      	bne.n	8008382 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008380:	e02a      	b.n	80083d8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	429a      	cmp	r2, r3
 800838a:	d107      	bne.n	800839c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2202      	movs	r2, #2
 8008390:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800839a:	e01d      	b.n	80083d8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d107      	bne.n	80083b6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2204      	movs	r2, #4
 80083aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083b4:	e010      	b.n	80083d8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d107      	bne.n	80083d0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2208      	movs	r2, #8
 80083c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083ce:	e003      	b.n	80083d8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f7ff ffb5 	bl	8008348 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	771a      	strb	r2, [r3, #28]
}
 80083e4:	bf00      	nop
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	429a      	cmp	r2, r3
 8008402:	d10b      	bne.n	800841c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d136      	bne.n	8008480 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800841a:	e031      	b.n	8008480 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	429a      	cmp	r2, r3
 8008424:	d10b      	bne.n	800843e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2202      	movs	r2, #2
 800842a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d125      	bne.n	8008480 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800843c:	e020      	b.n	8008480 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	429a      	cmp	r2, r3
 8008446:	d10b      	bne.n	8008460 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2204      	movs	r2, #4
 800844c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d114      	bne.n	8008480 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800845e:	e00f      	b.n	8008480 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d10a      	bne.n	8008480 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2208      	movs	r2, #8
 800846e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d103      	bne.n	8008480 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7fb f987 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	771a      	strb	r2, [r3, #28]
}
 800848c:	bf00      	nop
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d103      	bne.n	80084b4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2201      	movs	r2, #1
 80084b0:	771a      	strb	r2, [r3, #28]
 80084b2:	e019      	b.n	80084e8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d103      	bne.n	80084c6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2202      	movs	r2, #2
 80084c2:	771a      	strb	r2, [r3, #28]
 80084c4:	e010      	b.n	80084e8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d103      	bne.n	80084d8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2204      	movs	r2, #4
 80084d4:	771a      	strb	r2, [r3, #28]
 80084d6:	e007      	b.n	80084e8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d102      	bne.n	80084e8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2208      	movs	r2, #8
 80084e6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7ff ff1b 	bl	8008324 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	771a      	strb	r2, [r3, #28]
}
 80084f4:	bf00      	nop
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a33      	ldr	r2, [pc, #204]	; (80085dc <TIM_Base_SetConfig+0xe0>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d013      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a32      	ldr	r2, [pc, #200]	; (80085e0 <TIM_Base_SetConfig+0xe4>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00f      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008522:	d00b      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a2f      	ldr	r2, [pc, #188]	; (80085e4 <TIM_Base_SetConfig+0xe8>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d007      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a2e      	ldr	r2, [pc, #184]	; (80085e8 <TIM_Base_SetConfig+0xec>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d003      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a2d      	ldr	r2, [pc, #180]	; (80085ec <TIM_Base_SetConfig+0xf0>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d108      	bne.n	800854e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a22      	ldr	r2, [pc, #136]	; (80085dc <TIM_Base_SetConfig+0xe0>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d013      	beq.n	800857e <TIM_Base_SetConfig+0x82>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a21      	ldr	r2, [pc, #132]	; (80085e0 <TIM_Base_SetConfig+0xe4>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d00f      	beq.n	800857e <TIM_Base_SetConfig+0x82>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008564:	d00b      	beq.n	800857e <TIM_Base_SetConfig+0x82>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a1e      	ldr	r2, [pc, #120]	; (80085e4 <TIM_Base_SetConfig+0xe8>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d007      	beq.n	800857e <TIM_Base_SetConfig+0x82>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a1d      	ldr	r2, [pc, #116]	; (80085e8 <TIM_Base_SetConfig+0xec>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d003      	beq.n	800857e <TIM_Base_SetConfig+0x82>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <TIM_Base_SetConfig+0xf0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d108      	bne.n	8008590 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	4313      	orrs	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a09      	ldr	r2, [pc, #36]	; (80085dc <TIM_Base_SetConfig+0xe0>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d003      	beq.n	80085c4 <TIM_Base_SetConfig+0xc8>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a08      	ldr	r2, [pc, #32]	; (80085e0 <TIM_Base_SetConfig+0xe4>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d103      	bne.n	80085cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	615a      	str	r2, [r3, #20]
}
 80085d2:	bf00      	nop
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bc80      	pop	{r7}
 80085da:	4770      	bx	lr
 80085dc:	40012c00 	.word	0x40012c00
 80085e0:	40013400 	.word	0x40013400
 80085e4:	40000400 	.word	0x40000400
 80085e8:	40000800 	.word	0x40000800
 80085ec:	40000c00 	.word	0x40000c00

080085f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	f023 0201 	bic.w	r2, r3, #1
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800861e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0303 	bic.w	r3, r3, #3
 8008626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	4313      	orrs	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f023 0302 	bic.w	r3, r3, #2
 8008638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4313      	orrs	r3, r2
 8008642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a20      	ldr	r2, [pc, #128]	; (80086c8 <TIM_OC1_SetConfig+0xd8>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d003      	beq.n	8008654 <TIM_OC1_SetConfig+0x64>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a1f      	ldr	r2, [pc, #124]	; (80086cc <TIM_OC1_SetConfig+0xdc>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d10c      	bne.n	800866e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f023 0308 	bic.w	r3, r3, #8
 800865a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4313      	orrs	r3, r2
 8008664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f023 0304 	bic.w	r3, r3, #4
 800866c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a15      	ldr	r2, [pc, #84]	; (80086c8 <TIM_OC1_SetConfig+0xd8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d003      	beq.n	800867e <TIM_OC1_SetConfig+0x8e>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a14      	ldr	r2, [pc, #80]	; (80086cc <TIM_OC1_SetConfig+0xdc>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d111      	bne.n	80086a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800868c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	4313      	orrs	r3, r2
 8008696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	4313      	orrs	r3, r2
 80086a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	621a      	str	r2, [r3, #32]
}
 80086bc:	bf00      	nop
 80086be:	371c      	adds	r7, #28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	40012c00 	.word	0x40012c00
 80086cc:	40013400 	.word	0x40013400

080086d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	f023 0210 	bic.w	r2, r3, #16
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	021b      	lsls	r3, r3, #8
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	4313      	orrs	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f023 0320 	bic.w	r3, r3, #32
 800871a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	4313      	orrs	r3, r2
 8008726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a21      	ldr	r2, [pc, #132]	; (80087b0 <TIM_OC2_SetConfig+0xe0>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d003      	beq.n	8008738 <TIM_OC2_SetConfig+0x68>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a20      	ldr	r2, [pc, #128]	; (80087b4 <TIM_OC2_SetConfig+0xe4>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d10d      	bne.n	8008754 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800873e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	4313      	orrs	r3, r2
 800874a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a16      	ldr	r2, [pc, #88]	; (80087b0 <TIM_OC2_SetConfig+0xe0>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d003      	beq.n	8008764 <TIM_OC2_SetConfig+0x94>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a15      	ldr	r2, [pc, #84]	; (80087b4 <TIM_OC2_SetConfig+0xe4>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d113      	bne.n	800878c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800876a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	4313      	orrs	r3, r2
 800877e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	621a      	str	r2, [r3, #32]
}
 80087a6:	bf00      	nop
 80087a8:	371c      	adds	r7, #28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc80      	pop	{r7}
 80087ae:	4770      	bx	lr
 80087b0:	40012c00 	.word	0x40012c00
 80087b4:	40013400 	.word	0x40013400

080087b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 0303 	bic.w	r3, r3, #3
 80087ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a21      	ldr	r2, [pc, #132]	; (8008898 <TIM_OC3_SetConfig+0xe0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d003      	beq.n	800881e <TIM_OC3_SetConfig+0x66>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a20      	ldr	r2, [pc, #128]	; (800889c <TIM_OC3_SetConfig+0xe4>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d10d      	bne.n	800883a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	021b      	lsls	r3, r3, #8
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	4313      	orrs	r3, r2
 8008830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a16      	ldr	r2, [pc, #88]	; (8008898 <TIM_OC3_SetConfig+0xe0>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d003      	beq.n	800884a <TIM_OC3_SetConfig+0x92>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a15      	ldr	r2, [pc, #84]	; (800889c <TIM_OC3_SetConfig+0xe4>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d113      	bne.n	8008872 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	011b      	lsls	r3, r3, #4
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	4313      	orrs	r3, r2
 8008864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	011b      	lsls	r3, r3, #4
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	4313      	orrs	r3, r2
 8008870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	621a      	str	r2, [r3, #32]
}
 800888c:	bf00      	nop
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	bc80      	pop	{r7}
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40012c00 	.word	0x40012c00
 800889c:	40013400 	.word	0x40013400

080088a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	021b      	lsls	r3, r3, #8
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	031b      	lsls	r3, r3, #12
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a11      	ldr	r2, [pc, #68]	; (8008940 <TIM_OC4_SetConfig+0xa0>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d003      	beq.n	8008908 <TIM_OC4_SetConfig+0x68>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a10      	ldr	r2, [pc, #64]	; (8008944 <TIM_OC4_SetConfig+0xa4>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d109      	bne.n	800891c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800890e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	019b      	lsls	r3, r3, #6
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	621a      	str	r2, [r3, #32]
}
 8008936:	bf00      	nop
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	bc80      	pop	{r7}
 800893e:	4770      	bx	lr
 8008940:	40012c00 	.word	0x40012c00
 8008944:	40013400 	.word	0x40013400

08008948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	f023 0201 	bic.w	r2, r3, #1
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f023 030a 	bic.w	r3, r3, #10
 8008984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	4313      	orrs	r3, r2
 800898c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	621a      	str	r2, [r3, #32]
}
 800899a:	bf00      	nop
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	bc80      	pop	{r7}
 80089a2:	4770      	bx	lr

080089a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	f023 0210 	bic.w	r2, r3, #16
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	031b      	lsls	r3, r3, #12
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	621a      	str	r2, [r3, #32]
}
 80089f8:	bf00      	nop
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc80      	pop	{r7}
 8008a00:	4770      	bx	lr

08008a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b085      	sub	sp, #20
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	f043 0307 	orr.w	r3, r3, #7
 8008a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	609a      	str	r2, [r3, #8]
}
 8008a2c:	bf00      	nop
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc80      	pop	{r7}
 8008a34:	4770      	bx	lr

08008a36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b087      	sub	sp, #28
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	607a      	str	r2, [r7, #4]
 8008a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	021a      	lsls	r2, r3, #8
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	609a      	str	r2, [r3, #8]
}
 8008a6a:	bf00      	nop
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bc80      	pop	{r7}
 8008a72:	4770      	bx	lr

08008a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f003 031f 	and.w	r3, r3, #31
 8008a86:	2201      	movs	r2, #1
 8008a88:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a1a      	ldr	r2, [r3, #32]
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	43db      	mvns	r3, r3
 8008a96:	401a      	ands	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a1a      	ldr	r2, [r3, #32]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f003 031f 	and.w	r3, r3, #31
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8008aac:	431a      	orrs	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	621a      	str	r2, [r3, #32]
}
 8008ab2:	bf00      	nop
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr

08008abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d101      	bne.n	8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	e050      	b.n	8008b76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a1b      	ldr	r2, [pc, #108]	; (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d018      	beq.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a19      	ldr	r2, [pc, #100]	; (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d013      	beq.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b2a:	d00e      	beq.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a15      	ldr	r2, [pc, #84]	; (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d009      	beq.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a14      	ldr	r2, [pc, #80]	; (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d004      	beq.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a12      	ldr	r2, [pc, #72]	; (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d10c      	bne.n	8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bc80      	pop	{r7}
 8008b7e:	4770      	bx	lr
 8008b80:	40012c00 	.word	0x40012c00
 8008b84:	40013400 	.word	0x40013400
 8008b88:	40000400 	.word	0x40000400
 8008b8c:	40000800 	.word	0x40000800
 8008b90:	40000c00 	.word	0x40000c00

08008b94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d101      	bne.n	8008bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008bac:	2302      	movs	r3, #2
 8008bae:	e03d      	b.n	8008c2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3714      	adds	r7, #20
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bc80      	pop	{r7}
 8008c34:	4770      	bx	lr

08008c36 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c3e:	bf00      	nop
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bc80      	pop	{r7}
 8008c46:	4770      	bx	lr

08008c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bc80      	pop	{r7}
 8008c58:	4770      	bx	lr
	...

08008c5c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	6812      	ldr	r2, [r2, #0]
 8008c74:	f023 0101 	bic.w	r1, r3, #1
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	2b08      	cmp	r3, #8
 8008c84:	d102      	bne.n	8008c8c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008c86:	2340      	movs	r3, #64	; 0x40
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	e001      	b.n	8008c90 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008c9c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008ca2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008ca8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008cae:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008cb4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008cba:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8008cc0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8008cc6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8008ccc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8008cea:	4b10      	ldr	r3, [pc, #64]	; (8008d2c <FSMC_NORSRAM_Init+0xd0>)
 8008cec:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008cf4:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008cfc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	43db      	mvns	r3, r3
 8008d0c:	ea02 0103 	and.w	r1, r2, r3
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	4319      	orrs	r1, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	371c      	adds	r7, #28
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bc80      	pop	{r7}
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	0008fb7f 	.word	0x0008fb7f

08008d30 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d46:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	011b      	lsls	r3, r3, #4
 8008d54:	431a      	orrs	r2, r3
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	041b      	lsls	r3, r3, #16
 8008d64:	431a      	orrs	r2, r3
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	051b      	lsls	r3, r3, #20
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	3b02      	subs	r3, #2
 8008d76:	061b      	lsls	r3, r3, #24
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	3201      	adds	r2, #1
 8008d84:	4319      	orrs	r1, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bc80      	pop	{r7}
 8008d96:	4770      	bx	lr

08008d98 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dac:	d11d      	bne.n	8008dea <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008db6:	4b13      	ldr	r3, [pc, #76]	; (8008e04 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	6811      	ldr	r1, [r2, #0]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	6852      	ldr	r2, [r2, #4]
 8008dc2:	0112      	lsls	r2, r2, #4
 8008dc4:	4311      	orrs	r1, r2
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	6892      	ldr	r2, [r2, #8]
 8008dca:	0212      	lsls	r2, r2, #8
 8008dcc:	4311      	orrs	r1, r2
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	6992      	ldr	r2, [r2, #24]
 8008dd2:	4311      	orrs	r1, r2
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	68d2      	ldr	r2, [r2, #12]
 8008dd8:	0412      	lsls	r2, r2, #16
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	ea43 0102 	orr.w	r1, r3, r2
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008de8:	e005      	b.n	8008df6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bc80      	pop	{r7}
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	cff00000 	.word	0xcff00000

08008e08 <MPU6050_Initialize>:
/* Includes */
#include "MPU6050.h"
#include "stm32f1xx.h"

/////functions////
void MPU6050_Initialize(I2C_HandleTypeDef *handle_i2c) {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af04      	add	r7, sp, #16
 8008e0e:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &check, 1,10000);
 8008e10:	f242 7310 	movw	r3, #10000	; 0x2710
 8008e14:	9302      	str	r3, [sp, #8]
 8008e16:	2301      	movs	r3, #1
 8008e18:	9301      	str	r3, [sp, #4]
 8008e1a:	f107 030f 	add.w	r3, r7, #15
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	2301      	movs	r3, #1
 8008e22:	2275      	movs	r2, #117	; 0x75
 8008e24:	21d0      	movs	r1, #208	; 0xd0
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7fd f8f8 	bl	800601c <HAL_I2C_Mem_Read>

	if (check == 0x68) {
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
 8008e2e:	2b68      	cmp	r3, #104	; 0x68
 8008e30:	d13f      	bne.n	8008eb2 <MPU6050_Initialize+0xaa>

		Data = 0;
 8008e32:	2300      	movs	r3, #0
 8008e34:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &Data, 1,10000);
 8008e36:	f242 7310 	movw	r3, #10000	; 0x2710
 8008e3a:	9302      	str	r3, [sp, #8]
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	9301      	str	r3, [sp, #4]
 8008e40:	f107 030e 	add.w	r3, r7, #14
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	2301      	movs	r3, #1
 8008e48:	226b      	movs	r2, #107	; 0x6b
 8008e4a:	21d0      	movs	r1, #208	; 0xd0
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7fc ffeb 	bl	8005e28 <HAL_I2C_Mem_Write>

		Data = 0x07;
 8008e52:	2307      	movs	r3, #7
 8008e54:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_SMPLRT_DIV, 1, &Data, 1,10000);
 8008e56:	f242 7310 	movw	r3, #10000	; 0x2710
 8008e5a:	9302      	str	r3, [sp, #8]
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	f107 030e 	add.w	r3, r7, #14
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	2301      	movs	r3, #1
 8008e68:	2219      	movs	r2, #25
 8008e6a:	21d0      	movs	r1, #208	; 0xd0
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7fc ffdb 	bl	8005e28 <HAL_I2C_Mem_Write>

		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1, MPU6050_ACCEL_RANGE_2_G, 1,10000);
 8008e72:	f242 7310 	movw	r3, #10000	; 0x2710
 8008e76:	9302      	str	r3, [sp, #8]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	9301      	str	r3, [sp, #4]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	2301      	movs	r3, #1
 8008e82:	221c      	movs	r2, #28
 8008e84:	21d0      	movs	r1, #208	; 0xd0
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fc ffce 	bl	8005e28 <HAL_I2C_Mem_Write>
		MPU6050_AFS_SEL=MPU6050_ACCEL_RANGE_2_G;
 8008e8c:	4b0b      	ldr	r3, [pc, #44]	; (8008ebc <MPU6050_Initialize+0xb4>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	701a      	strb	r2, [r3, #0]

		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, MPU6050_GYRO_RANGE_250_DEG, 1, 10000);
 8008e92:	f242 7310 	movw	r3, #10000	; 0x2710
 8008e96:	9302      	str	r3, [sp, #8]
 8008e98:	2301      	movs	r3, #1
 8008e9a:	9301      	str	r3, [sp, #4]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	221b      	movs	r2, #27
 8008ea4:	21d0      	movs	r1, #208	; 0xd0
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7fc ffbe 	bl	8005e28 <HAL_I2C_Mem_Write>
		MPU6050_FS_SEL=MPU6050_GYRO_RANGE_250_DEG;
 8008eac:	4b04      	ldr	r3, [pc, #16]	; (8008ec0 <MPU6050_Initialize+0xb8>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	701a      	strb	r2, [r3, #0]
	}

}
 8008eb2:	bf00      	nop
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	20000274 	.word	0x20000274
 8008ec0:	200002a4 	.word	0x200002a4

08008ec4 <MPU6050_SetScaleAccelRange>:
void MPU6050_Read_DeviceID(I2C_HandleTypeDef *handle_i2c){
    HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &MPU6050_Dev_ID, 1, 10000);
}

void MPU6050_SetScaleAccelRange(I2C_HandleTypeDef *handle_i2c,mpu6050_accel_range_t MPU6050_ACCEL_RANGE_X_G)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af04      	add	r7, sp, #16
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1,&MPU6050_ACCEL_RANGE_X_G, 1,10000);
 8008ed0:	f242 7310 	movw	r3, #10000	; 0x2710
 8008ed4:	9302      	str	r3, [sp, #8]
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	1cfb      	adds	r3, r7, #3
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	2301      	movs	r3, #1
 8008ee0:	221c      	movs	r2, #28
 8008ee2:	21d0      	movs	r1, #208	; 0xd0
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7fc ff9f 	bl	8005e28 <HAL_I2C_Mem_Write>
	MPU6050_AFS_SEL=MPU6050_ACCEL_RANGE_X_G;
 8008eea:	78fa      	ldrb	r2, [r7, #3]
 8008eec:	4b02      	ldr	r3, [pc, #8]	; (8008ef8 <MPU6050_SetScaleAccelRange+0x34>)
 8008eee:	701a      	strb	r2, [r3, #0]
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20000274 	.word	0x20000274

08008efc <MPU6050_SetScaleGyroRange>:


void MPU6050_SetScaleGyroRange(I2C_HandleTypeDef *handle_i2c,MPU6050_gyro_range_t MPU6050_GYRO_RANGE_XXX_DEG)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af04      	add	r7, sp, #16
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1,&MPU6050_GYRO_RANGE_XXX_DEG, 1,10000);
 8008f08:	f242 7310 	movw	r3, #10000	; 0x2710
 8008f0c:	9302      	str	r3, [sp, #8]
 8008f0e:	2301      	movs	r3, #1
 8008f10:	9301      	str	r3, [sp, #4]
 8008f12:	1cfb      	adds	r3, r7, #3
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	2301      	movs	r3, #1
 8008f18:	221b      	movs	r2, #27
 8008f1a:	21d0      	movs	r1, #208	; 0xd0
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7fc ff83 	bl	8005e28 <HAL_I2C_Mem_Write>
	MPU6050_FS_SEL=MPU6050_GYRO_RANGE_XXX_DEG;
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <MPU6050_SetScaleGyroRange+0x34>)
 8008f26:	701a      	strb	r2, [r3, #0]
}
 8008f28:	bf00      	nop
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	200002a4 	.word	0x200002a4

08008f34 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *handle_i2c) {
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af04      	add	r7, sp, #16
 8008f3a:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, Rec_Data, 6,10000);
 8008f3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8008f40:	9302      	str	r3, [sp, #8]
 8008f42:	2306      	movs	r3, #6
 8008f44:	9301      	str	r3, [sp, #4]
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	223b      	movs	r2, #59	; 0x3b
 8008f50:	21d0      	movs	r1, #208	; 0xd0
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7fd f862 	bl	800601c <HAL_I2C_Mem_Read>

	MPU6050_Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8008f58:	7a3b      	ldrb	r3, [r7, #8]
 8008f5a:	021b      	lsls	r3, r3, #8
 8008f5c:	b21a      	sxth	r2, r3
 8008f5e:	7a7b      	ldrb	r3, [r7, #9]
 8008f60:	b21b      	sxth	r3, r3
 8008f62:	4313      	orrs	r3, r2
 8008f64:	b21a      	sxth	r2, r3
 8008f66:	4ba3      	ldr	r3, [pc, #652]	; (80091f4 <MPU6050_Read_Accel+0x2c0>)
 8008f68:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8008f6a:	7abb      	ldrb	r3, [r7, #10]
 8008f6c:	021b      	lsls	r3, r3, #8
 8008f6e:	b21a      	sxth	r2, r3
 8008f70:	7afb      	ldrb	r3, [r7, #11]
 8008f72:	b21b      	sxth	r3, r3
 8008f74:	4313      	orrs	r3, r2
 8008f76:	b21a      	sxth	r2, r3
 8008f78:	4b9f      	ldr	r3, [pc, #636]	; (80091f8 <MPU6050_Read_Accel+0x2c4>)
 8008f7a:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8008f7c:	7b3b      	ldrb	r3, [r7, #12]
 8008f7e:	021b      	lsls	r3, r3, #8
 8008f80:	b21a      	sxth	r2, r3
 8008f82:	7b7b      	ldrb	r3, [r7, #13]
 8008f84:	b21b      	sxth	r3, r3
 8008f86:	4313      	orrs	r3, r2
 8008f88:	b21a      	sxth	r2, r3
 8008f8a:	4b9c      	ldr	r3, [pc, #624]	; (80091fc <MPU6050_Read_Accel+0x2c8>)
 8008f8c:	801a      	strh	r2, [r3, #0]
	0 ±2g 16384 LSB/g
	1 ±4g 8192 LSB/g
	2 ±8g 4096 LSB/g
	3 ±16g 2048 LSB/g
	 */
	switch (MPU6050_AFS_SEL) {
 8008f8e:	4b9c      	ldr	r3, [pc, #624]	; (8009200 <MPU6050_Read_Accel+0x2cc>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b18      	cmp	r3, #24
 8008f94:	f200 812a 	bhi.w	80091ec <MPU6050_Read_Accel+0x2b8>
 8008f98:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <MPU6050_Read_Accel+0x6c>)
 8008f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9e:	bf00      	nop
 8008fa0:	08009005 	.word	0x08009005
 8008fa4:	080091ed 	.word	0x080091ed
 8008fa8:	080091ed 	.word	0x080091ed
 8008fac:	080091ed 	.word	0x080091ed
 8008fb0:	080091ed 	.word	0x080091ed
 8008fb4:	080091ed 	.word	0x080091ed
 8008fb8:	080091ed 	.word	0x080091ed
 8008fbc:	080091ed 	.word	0x080091ed
 8008fc0:	0800907f 	.word	0x0800907f
 8008fc4:	080091ed 	.word	0x080091ed
 8008fc8:	080091ed 	.word	0x080091ed
 8008fcc:	080091ed 	.word	0x080091ed
 8008fd0:	080091ed 	.word	0x080091ed
 8008fd4:	080091ed 	.word	0x080091ed
 8008fd8:	080091ed 	.word	0x080091ed
 8008fdc:	080091ed 	.word	0x080091ed
 8008fe0:	080090f9 	.word	0x080090f9
 8008fe4:	080091ed 	.word	0x080091ed
 8008fe8:	080091ed 	.word	0x080091ed
 8008fec:	080091ed 	.word	0x080091ed
 8008ff0:	080091ed 	.word	0x080091ed
 8008ff4:	080091ed 	.word	0x080091ed
 8008ff8:	080091ed 	.word	0x080091ed
 8008ffc:	080091ed 	.word	0x080091ed
 8009000:	08009173 	.word	0x08009173
	case 0x00://0
		MPU6050_Ax = MPU6050_Accel_X_RAW / 16384.0;
 8009004:	4b7b      	ldr	r3, [pc, #492]	; (80091f4 <MPU6050_Read_Accel+0x2c0>)
 8009006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800900a:	4618      	mov	r0, r3
 800900c:	f7f7 fa66 	bl	80004dc <__aeabi_i2d>
 8009010:	f04f 0200 	mov.w	r2, #0
 8009014:	4b7b      	ldr	r3, [pc, #492]	; (8009204 <MPU6050_Read_Accel+0x2d0>)
 8009016:	f7f7 fbf5 	bl	8000804 <__aeabi_ddiv>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4610      	mov	r0, r2
 8009020:	4619      	mov	r1, r3
 8009022:	f7f7 fdbd 	bl	8000ba0 <__aeabi_d2f>
 8009026:	4603      	mov	r3, r0
 8009028:	4a77      	ldr	r2, [pc, #476]	; (8009208 <MPU6050_Read_Accel+0x2d4>)
 800902a:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 16384.0;
 800902c:	4b72      	ldr	r3, [pc, #456]	; (80091f8 <MPU6050_Read_Accel+0x2c4>)
 800902e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009032:	4618      	mov	r0, r3
 8009034:	f7f7 fa52 	bl	80004dc <__aeabi_i2d>
 8009038:	f04f 0200 	mov.w	r2, #0
 800903c:	4b71      	ldr	r3, [pc, #452]	; (8009204 <MPU6050_Read_Accel+0x2d0>)
 800903e:	f7f7 fbe1 	bl	8000804 <__aeabi_ddiv>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	4610      	mov	r0, r2
 8009048:	4619      	mov	r1, r3
 800904a:	f7f7 fda9 	bl	8000ba0 <__aeabi_d2f>
 800904e:	4603      	mov	r3, r0
 8009050:	4a6e      	ldr	r2, [pc, #440]	; (800920c <MPU6050_Read_Accel+0x2d8>)
 8009052:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 16384.0;
 8009054:	4b69      	ldr	r3, [pc, #420]	; (80091fc <MPU6050_Read_Accel+0x2c8>)
 8009056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800905a:	4618      	mov	r0, r3
 800905c:	f7f7 fa3e 	bl	80004dc <__aeabi_i2d>
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	4b67      	ldr	r3, [pc, #412]	; (8009204 <MPU6050_Read_Accel+0x2d0>)
 8009066:	f7f7 fbcd 	bl	8000804 <__aeabi_ddiv>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4610      	mov	r0, r2
 8009070:	4619      	mov	r1, r3
 8009072:	f7f7 fd95 	bl	8000ba0 <__aeabi_d2f>
 8009076:	4603      	mov	r3, r0
 8009078:	4a65      	ldr	r2, [pc, #404]	; (8009210 <MPU6050_Read_Accel+0x2dc>)
 800907a:	6013      	str	r3, [r2, #0]

		break;
 800907c:	e0b6      	b.n	80091ec <MPU6050_Read_Accel+0x2b8>
	case 0x08://1
		MPU6050_Ax = MPU6050_Accel_X_RAW / 8192.0;
 800907e:	4b5d      	ldr	r3, [pc, #372]	; (80091f4 <MPU6050_Read_Accel+0x2c0>)
 8009080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009084:	4618      	mov	r0, r3
 8009086:	f7f7 fa29 	bl	80004dc <__aeabi_i2d>
 800908a:	f04f 0200 	mov.w	r2, #0
 800908e:	4b61      	ldr	r3, [pc, #388]	; (8009214 <MPU6050_Read_Accel+0x2e0>)
 8009090:	f7f7 fbb8 	bl	8000804 <__aeabi_ddiv>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4610      	mov	r0, r2
 800909a:	4619      	mov	r1, r3
 800909c:	f7f7 fd80 	bl	8000ba0 <__aeabi_d2f>
 80090a0:	4603      	mov	r3, r0
 80090a2:	4a59      	ldr	r2, [pc, #356]	; (8009208 <MPU6050_Read_Accel+0x2d4>)
 80090a4:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 8192.0;
 80090a6:	4b54      	ldr	r3, [pc, #336]	; (80091f8 <MPU6050_Read_Accel+0x2c4>)
 80090a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7f7 fa15 	bl	80004dc <__aeabi_i2d>
 80090b2:	f04f 0200 	mov.w	r2, #0
 80090b6:	4b57      	ldr	r3, [pc, #348]	; (8009214 <MPU6050_Read_Accel+0x2e0>)
 80090b8:	f7f7 fba4 	bl	8000804 <__aeabi_ddiv>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4610      	mov	r0, r2
 80090c2:	4619      	mov	r1, r3
 80090c4:	f7f7 fd6c 	bl	8000ba0 <__aeabi_d2f>
 80090c8:	4603      	mov	r3, r0
 80090ca:	4a50      	ldr	r2, [pc, #320]	; (800920c <MPU6050_Read_Accel+0x2d8>)
 80090cc:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 8192.0;
 80090ce:	4b4b      	ldr	r3, [pc, #300]	; (80091fc <MPU6050_Read_Accel+0x2c8>)
 80090d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7f7 fa01 	bl	80004dc <__aeabi_i2d>
 80090da:	f04f 0200 	mov.w	r2, #0
 80090de:	4b4d      	ldr	r3, [pc, #308]	; (8009214 <MPU6050_Read_Accel+0x2e0>)
 80090e0:	f7f7 fb90 	bl	8000804 <__aeabi_ddiv>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4610      	mov	r0, r2
 80090ea:	4619      	mov	r1, r3
 80090ec:	f7f7 fd58 	bl	8000ba0 <__aeabi_d2f>
 80090f0:	4603      	mov	r3, r0
 80090f2:	4a47      	ldr	r2, [pc, #284]	; (8009210 <MPU6050_Read_Accel+0x2dc>)
 80090f4:	6013      	str	r3, [r2, #0]

		break;
 80090f6:	e079      	b.n	80091ec <MPU6050_Read_Accel+0x2b8>
	case 0x10://2
		MPU6050_Ax = MPU6050_Accel_X_RAW / 4096.0;
 80090f8:	4b3e      	ldr	r3, [pc, #248]	; (80091f4 <MPU6050_Read_Accel+0x2c0>)
 80090fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090fe:	4618      	mov	r0, r3
 8009100:	f7f7 f9ec 	bl	80004dc <__aeabi_i2d>
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	4b43      	ldr	r3, [pc, #268]	; (8009218 <MPU6050_Read_Accel+0x2e4>)
 800910a:	f7f7 fb7b 	bl	8000804 <__aeabi_ddiv>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4610      	mov	r0, r2
 8009114:	4619      	mov	r1, r3
 8009116:	f7f7 fd43 	bl	8000ba0 <__aeabi_d2f>
 800911a:	4603      	mov	r3, r0
 800911c:	4a3a      	ldr	r2, [pc, #232]	; (8009208 <MPU6050_Read_Accel+0x2d4>)
 800911e:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 4096.0;
 8009120:	4b35      	ldr	r3, [pc, #212]	; (80091f8 <MPU6050_Read_Accel+0x2c4>)
 8009122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009126:	4618      	mov	r0, r3
 8009128:	f7f7 f9d8 	bl	80004dc <__aeabi_i2d>
 800912c:	f04f 0200 	mov.w	r2, #0
 8009130:	4b39      	ldr	r3, [pc, #228]	; (8009218 <MPU6050_Read_Accel+0x2e4>)
 8009132:	f7f7 fb67 	bl	8000804 <__aeabi_ddiv>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4610      	mov	r0, r2
 800913c:	4619      	mov	r1, r3
 800913e:	f7f7 fd2f 	bl	8000ba0 <__aeabi_d2f>
 8009142:	4603      	mov	r3, r0
 8009144:	4a31      	ldr	r2, [pc, #196]	; (800920c <MPU6050_Read_Accel+0x2d8>)
 8009146:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 4096.0;
 8009148:	4b2c      	ldr	r3, [pc, #176]	; (80091fc <MPU6050_Read_Accel+0x2c8>)
 800914a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800914e:	4618      	mov	r0, r3
 8009150:	f7f7 f9c4 	bl	80004dc <__aeabi_i2d>
 8009154:	f04f 0200 	mov.w	r2, #0
 8009158:	4b2f      	ldr	r3, [pc, #188]	; (8009218 <MPU6050_Read_Accel+0x2e4>)
 800915a:	f7f7 fb53 	bl	8000804 <__aeabi_ddiv>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	4610      	mov	r0, r2
 8009164:	4619      	mov	r1, r3
 8009166:	f7f7 fd1b 	bl	8000ba0 <__aeabi_d2f>
 800916a:	4603      	mov	r3, r0
 800916c:	4a28      	ldr	r2, [pc, #160]	; (8009210 <MPU6050_Read_Accel+0x2dc>)
 800916e:	6013      	str	r3, [r2, #0]

		break;
 8009170:	e03c      	b.n	80091ec <MPU6050_Read_Accel+0x2b8>
	case 0x18://3
		MPU6050_Ax = MPU6050_Accel_X_RAW / 2048.0;
 8009172:	4b20      	ldr	r3, [pc, #128]	; (80091f4 <MPU6050_Read_Accel+0x2c0>)
 8009174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009178:	4618      	mov	r0, r3
 800917a:	f7f7 f9af 	bl	80004dc <__aeabi_i2d>
 800917e:	f04f 0200 	mov.w	r2, #0
 8009182:	4b26      	ldr	r3, [pc, #152]	; (800921c <MPU6050_Read_Accel+0x2e8>)
 8009184:	f7f7 fb3e 	bl	8000804 <__aeabi_ddiv>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4610      	mov	r0, r2
 800918e:	4619      	mov	r1, r3
 8009190:	f7f7 fd06 	bl	8000ba0 <__aeabi_d2f>
 8009194:	4603      	mov	r3, r0
 8009196:	4a1c      	ldr	r2, [pc, #112]	; (8009208 <MPU6050_Read_Accel+0x2d4>)
 8009198:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 2048.0;
 800919a:	4b17      	ldr	r3, [pc, #92]	; (80091f8 <MPU6050_Read_Accel+0x2c4>)
 800919c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7f7 f99b 	bl	80004dc <__aeabi_i2d>
 80091a6:	f04f 0200 	mov.w	r2, #0
 80091aa:	4b1c      	ldr	r3, [pc, #112]	; (800921c <MPU6050_Read_Accel+0x2e8>)
 80091ac:	f7f7 fb2a 	bl	8000804 <__aeabi_ddiv>
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	4610      	mov	r0, r2
 80091b6:	4619      	mov	r1, r3
 80091b8:	f7f7 fcf2 	bl	8000ba0 <__aeabi_d2f>
 80091bc:	4603      	mov	r3, r0
 80091be:	4a13      	ldr	r2, [pc, #76]	; (800920c <MPU6050_Read_Accel+0x2d8>)
 80091c0:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 2048.0;
 80091c2:	4b0e      	ldr	r3, [pc, #56]	; (80091fc <MPU6050_Read_Accel+0x2c8>)
 80091c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7f7 f987 	bl	80004dc <__aeabi_i2d>
 80091ce:	f04f 0200 	mov.w	r2, #0
 80091d2:	4b12      	ldr	r3, [pc, #72]	; (800921c <MPU6050_Read_Accel+0x2e8>)
 80091d4:	f7f7 fb16 	bl	8000804 <__aeabi_ddiv>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4610      	mov	r0, r2
 80091de:	4619      	mov	r1, r3
 80091e0:	f7f7 fcde 	bl	8000ba0 <__aeabi_d2f>
 80091e4:	4603      	mov	r3, r0
 80091e6:	4a0a      	ldr	r2, [pc, #40]	; (8009210 <MPU6050_Read_Accel+0x2dc>)
 80091e8:	6013      	str	r3, [r2, #0]

		break;
 80091ea:	bf00      	nop
	}
}
 80091ec:	bf00      	nop
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20000294 	.word	0x20000294
 80091f8:	20000296 	.word	0x20000296
 80091fc:	2000027c 	.word	0x2000027c
 8009200:	20000274 	.word	0x20000274
 8009204:	40d00000 	.word	0x40d00000
 8009208:	2000029c 	.word	0x2000029c
 800920c:	20000284 	.word	0x20000284
 8009210:	20000270 	.word	0x20000270
 8009214:	40c00000 	.word	0x40c00000
 8009218:	40b00000 	.word	0x40b00000
 800921c:	40a00000 	.word	0x40a00000

08009220 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(I2C_HandleTypeDef *handle_i2c) {
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af04      	add	r7, sp, #16
 8009226:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, Rec_Data, 6,10000);
 8009228:	f242 7310 	movw	r3, #10000	; 0x2710
 800922c:	9302      	str	r3, [sp, #8]
 800922e:	2306      	movs	r3, #6
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	f107 0308 	add.w	r3, r7, #8
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	2301      	movs	r3, #1
 800923a:	2243      	movs	r2, #67	; 0x43
 800923c:	21d0      	movs	r1, #208	; 0xd0
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7fc feec 	bl	800601c <HAL_I2C_Mem_Read>

	MPU6050_Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8009244:	7a3b      	ldrb	r3, [r7, #8]
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	b21a      	sxth	r2, r3
 800924a:	7a7b      	ldrb	r3, [r7, #9]
 800924c:	b21b      	sxth	r3, r3
 800924e:	4313      	orrs	r3, r2
 8009250:	b21a      	sxth	r2, r3
 8009252:	4bab      	ldr	r3, [pc, #684]	; (8009500 <MPU6050_Read_Gyro+0x2e0>)
 8009254:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8009256:	7abb      	ldrb	r3, [r7, #10]
 8009258:	021b      	lsls	r3, r3, #8
 800925a:	b21a      	sxth	r2, r3
 800925c:	7afb      	ldrb	r3, [r7, #11]
 800925e:	b21b      	sxth	r3, r3
 8009260:	4313      	orrs	r3, r2
 8009262:	b21a      	sxth	r2, r3
 8009264:	4ba7      	ldr	r3, [pc, #668]	; (8009504 <MPU6050_Read_Gyro+0x2e4>)
 8009266:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8009268:	7b3b      	ldrb	r3, [r7, #12]
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	b21a      	sxth	r2, r3
 800926e:	7b7b      	ldrb	r3, [r7, #13]
 8009270:	b21b      	sxth	r3, r3
 8009272:	4313      	orrs	r3, r2
 8009274:	b21a      	sxth	r2, r3
 8009276:	4ba4      	ldr	r3, [pc, #656]	; (8009508 <MPU6050_Read_Gyro+0x2e8>)
 8009278:	801a      	strh	r2, [r3, #0]
	1 ± 500 °/s 65.5 LSB/°/s
	2 ± 1000 °/s 32.8 LSB/°/s
	3 ± 2000 °/s 16.4 LSB/°/s
	 */

	switch (MPU6050_FS_SEL) {
 800927a:	4ba4      	ldr	r3, [pc, #656]	; (800950c <MPU6050_Read_Gyro+0x2ec>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	2b18      	cmp	r3, #24
 8009280:	f200 812a 	bhi.w	80094d8 <MPU6050_Read_Gyro+0x2b8>
 8009284:	a201      	add	r2, pc, #4	; (adr r2, 800928c <MPU6050_Read_Gyro+0x6c>)
 8009286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928a:	bf00      	nop
 800928c:	080092f1 	.word	0x080092f1
 8009290:	080094d9 	.word	0x080094d9
 8009294:	080094d9 	.word	0x080094d9
 8009298:	080094d9 	.word	0x080094d9
 800929c:	080094d9 	.word	0x080094d9
 80092a0:	080094d9 	.word	0x080094d9
 80092a4:	080094d9 	.word	0x080094d9
 80092a8:	080094d9 	.word	0x080094d9
 80092ac:	0800936b 	.word	0x0800936b
 80092b0:	080094d9 	.word	0x080094d9
 80092b4:	080094d9 	.word	0x080094d9
 80092b8:	080094d9 	.word	0x080094d9
 80092bc:	080094d9 	.word	0x080094d9
 80092c0:	080094d9 	.word	0x080094d9
 80092c4:	080094d9 	.word	0x080094d9
 80092c8:	080094d9 	.word	0x080094d9
 80092cc:	080093e5 	.word	0x080093e5
 80092d0:	080094d9 	.word	0x080094d9
 80092d4:	080094d9 	.word	0x080094d9
 80092d8:	080094d9 	.word	0x080094d9
 80092dc:	080094d9 	.word	0x080094d9
 80092e0:	080094d9 	.word	0x080094d9
 80092e4:	080094d9 	.word	0x080094d9
 80092e8:	080094d9 	.word	0x080094d9
 80092ec:	0800945f 	.word	0x0800945f
	case 0x00://0
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 131.0;
 80092f0:	4b83      	ldr	r3, [pc, #524]	; (8009500 <MPU6050_Read_Gyro+0x2e0>)
 80092f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7f7 f8f0 	bl	80004dc <__aeabi_i2d>
 80092fc:	a378      	add	r3, pc, #480	; (adr r3, 80094e0 <MPU6050_Read_Gyro+0x2c0>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	f7f7 fa7f 	bl	8000804 <__aeabi_ddiv>
 8009306:	4602      	mov	r2, r0
 8009308:	460b      	mov	r3, r1
 800930a:	4610      	mov	r0, r2
 800930c:	4619      	mov	r1, r3
 800930e:	f7f7 fc47 	bl	8000ba0 <__aeabi_d2f>
 8009312:	4603      	mov	r3, r0
 8009314:	4a7e      	ldr	r2, [pc, #504]	; (8009510 <MPU6050_Read_Gyro+0x2f0>)
 8009316:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 131.0;
 8009318:	4b7a      	ldr	r3, [pc, #488]	; (8009504 <MPU6050_Read_Gyro+0x2e4>)
 800931a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800931e:	4618      	mov	r0, r3
 8009320:	f7f7 f8dc 	bl	80004dc <__aeabi_i2d>
 8009324:	a36e      	add	r3, pc, #440	; (adr r3, 80094e0 <MPU6050_Read_Gyro+0x2c0>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f7 fa6b 	bl	8000804 <__aeabi_ddiv>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4610      	mov	r0, r2
 8009334:	4619      	mov	r1, r3
 8009336:	f7f7 fc33 	bl	8000ba0 <__aeabi_d2f>
 800933a:	4603      	mov	r3, r0
 800933c:	4a75      	ldr	r2, [pc, #468]	; (8009514 <MPU6050_Read_Gyro+0x2f4>)
 800933e:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 131.0;
 8009340:	4b71      	ldr	r3, [pc, #452]	; (8009508 <MPU6050_Read_Gyro+0x2e8>)
 8009342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009346:	4618      	mov	r0, r3
 8009348:	f7f7 f8c8 	bl	80004dc <__aeabi_i2d>
 800934c:	a364      	add	r3, pc, #400	; (adr r3, 80094e0 <MPU6050_Read_Gyro+0x2c0>)
 800934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009352:	f7f7 fa57 	bl	8000804 <__aeabi_ddiv>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4610      	mov	r0, r2
 800935c:	4619      	mov	r1, r3
 800935e:	f7f7 fc1f 	bl	8000ba0 <__aeabi_d2f>
 8009362:	4603      	mov	r3, r0
 8009364:	4a6c      	ldr	r2, [pc, #432]	; (8009518 <MPU6050_Read_Gyro+0x2f8>)
 8009366:	6013      	str	r3, [r2, #0]
		break;
 8009368:	e0b6      	b.n	80094d8 <MPU6050_Read_Gyro+0x2b8>
	case 0x08://1
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 65.5;
 800936a:	4b65      	ldr	r3, [pc, #404]	; (8009500 <MPU6050_Read_Gyro+0x2e0>)
 800936c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009370:	4618      	mov	r0, r3
 8009372:	f7f7 f8b3 	bl	80004dc <__aeabi_i2d>
 8009376:	a35c      	add	r3, pc, #368	; (adr r3, 80094e8 <MPU6050_Read_Gyro+0x2c8>)
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	f7f7 fa42 	bl	8000804 <__aeabi_ddiv>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4610      	mov	r0, r2
 8009386:	4619      	mov	r1, r3
 8009388:	f7f7 fc0a 	bl	8000ba0 <__aeabi_d2f>
 800938c:	4603      	mov	r3, r0
 800938e:	4a60      	ldr	r2, [pc, #384]	; (8009510 <MPU6050_Read_Gyro+0x2f0>)
 8009390:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 65.5;
 8009392:	4b5c      	ldr	r3, [pc, #368]	; (8009504 <MPU6050_Read_Gyro+0x2e4>)
 8009394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009398:	4618      	mov	r0, r3
 800939a:	f7f7 f89f 	bl	80004dc <__aeabi_i2d>
 800939e:	a352      	add	r3, pc, #328	; (adr r3, 80094e8 <MPU6050_Read_Gyro+0x2c8>)
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	f7f7 fa2e 	bl	8000804 <__aeabi_ddiv>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4610      	mov	r0, r2
 80093ae:	4619      	mov	r1, r3
 80093b0:	f7f7 fbf6 	bl	8000ba0 <__aeabi_d2f>
 80093b4:	4603      	mov	r3, r0
 80093b6:	4a57      	ldr	r2, [pc, #348]	; (8009514 <MPU6050_Read_Gyro+0x2f4>)
 80093b8:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 65.5;
 80093ba:	4b53      	ldr	r3, [pc, #332]	; (8009508 <MPU6050_Read_Gyro+0x2e8>)
 80093bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7f7 f88b 	bl	80004dc <__aeabi_i2d>
 80093c6:	a348      	add	r3, pc, #288	; (adr r3, 80094e8 <MPU6050_Read_Gyro+0x2c8>)
 80093c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093cc:	f7f7 fa1a 	bl	8000804 <__aeabi_ddiv>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4610      	mov	r0, r2
 80093d6:	4619      	mov	r1, r3
 80093d8:	f7f7 fbe2 	bl	8000ba0 <__aeabi_d2f>
 80093dc:	4603      	mov	r3, r0
 80093de:	4a4e      	ldr	r2, [pc, #312]	; (8009518 <MPU6050_Read_Gyro+0x2f8>)
 80093e0:	6013      	str	r3, [r2, #0]
		break;
 80093e2:	e079      	b.n	80094d8 <MPU6050_Read_Gyro+0x2b8>
	case 0x10://2
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 32.8;
 80093e4:	4b46      	ldr	r3, [pc, #280]	; (8009500 <MPU6050_Read_Gyro+0x2e0>)
 80093e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7f7 f876 	bl	80004dc <__aeabi_i2d>
 80093f0:	a33f      	add	r3, pc, #252	; (adr r3, 80094f0 <MPU6050_Read_Gyro+0x2d0>)
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	f7f7 fa05 	bl	8000804 <__aeabi_ddiv>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	4610      	mov	r0, r2
 8009400:	4619      	mov	r1, r3
 8009402:	f7f7 fbcd 	bl	8000ba0 <__aeabi_d2f>
 8009406:	4603      	mov	r3, r0
 8009408:	4a41      	ldr	r2, [pc, #260]	; (8009510 <MPU6050_Read_Gyro+0x2f0>)
 800940a:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 32.8;
 800940c:	4b3d      	ldr	r3, [pc, #244]	; (8009504 <MPU6050_Read_Gyro+0x2e4>)
 800940e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009412:	4618      	mov	r0, r3
 8009414:	f7f7 f862 	bl	80004dc <__aeabi_i2d>
 8009418:	a335      	add	r3, pc, #212	; (adr r3, 80094f0 <MPU6050_Read_Gyro+0x2d0>)
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	f7f7 f9f1 	bl	8000804 <__aeabi_ddiv>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4610      	mov	r0, r2
 8009428:	4619      	mov	r1, r3
 800942a:	f7f7 fbb9 	bl	8000ba0 <__aeabi_d2f>
 800942e:	4603      	mov	r3, r0
 8009430:	4a38      	ldr	r2, [pc, #224]	; (8009514 <MPU6050_Read_Gyro+0x2f4>)
 8009432:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 32.8;
 8009434:	4b34      	ldr	r3, [pc, #208]	; (8009508 <MPU6050_Read_Gyro+0x2e8>)
 8009436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800943a:	4618      	mov	r0, r3
 800943c:	f7f7 f84e 	bl	80004dc <__aeabi_i2d>
 8009440:	a32b      	add	r3, pc, #172	; (adr r3, 80094f0 <MPU6050_Read_Gyro+0x2d0>)
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	f7f7 f9dd 	bl	8000804 <__aeabi_ddiv>
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	4610      	mov	r0, r2
 8009450:	4619      	mov	r1, r3
 8009452:	f7f7 fba5 	bl	8000ba0 <__aeabi_d2f>
 8009456:	4603      	mov	r3, r0
 8009458:	4a2f      	ldr	r2, [pc, #188]	; (8009518 <MPU6050_Read_Gyro+0x2f8>)
 800945a:	6013      	str	r3, [r2, #0]
		break;
 800945c:	e03c      	b.n	80094d8 <MPU6050_Read_Gyro+0x2b8>
	case 0x18://3
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 16.4;
 800945e:	4b28      	ldr	r3, [pc, #160]	; (8009500 <MPU6050_Read_Gyro+0x2e0>)
 8009460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009464:	4618      	mov	r0, r3
 8009466:	f7f7 f839 	bl	80004dc <__aeabi_i2d>
 800946a:	a323      	add	r3, pc, #140	; (adr r3, 80094f8 <MPU6050_Read_Gyro+0x2d8>)
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f7f7 f9c8 	bl	8000804 <__aeabi_ddiv>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4610      	mov	r0, r2
 800947a:	4619      	mov	r1, r3
 800947c:	f7f7 fb90 	bl	8000ba0 <__aeabi_d2f>
 8009480:	4603      	mov	r3, r0
 8009482:	4a23      	ldr	r2, [pc, #140]	; (8009510 <MPU6050_Read_Gyro+0x2f0>)
 8009484:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 16.4;
 8009486:	4b1f      	ldr	r3, [pc, #124]	; (8009504 <MPU6050_Read_Gyro+0x2e4>)
 8009488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800948c:	4618      	mov	r0, r3
 800948e:	f7f7 f825 	bl	80004dc <__aeabi_i2d>
 8009492:	a319      	add	r3, pc, #100	; (adr r3, 80094f8 <MPU6050_Read_Gyro+0x2d8>)
 8009494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009498:	f7f7 f9b4 	bl	8000804 <__aeabi_ddiv>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	4610      	mov	r0, r2
 80094a2:	4619      	mov	r1, r3
 80094a4:	f7f7 fb7c 	bl	8000ba0 <__aeabi_d2f>
 80094a8:	4603      	mov	r3, r0
 80094aa:	4a1a      	ldr	r2, [pc, #104]	; (8009514 <MPU6050_Read_Gyro+0x2f4>)
 80094ac:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 16.4;
 80094ae:	4b16      	ldr	r3, [pc, #88]	; (8009508 <MPU6050_Read_Gyro+0x2e8>)
 80094b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7f7 f811 	bl	80004dc <__aeabi_i2d>
 80094ba:	a30f      	add	r3, pc, #60	; (adr r3, 80094f8 <MPU6050_Read_Gyro+0x2d8>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f7 f9a0 	bl	8000804 <__aeabi_ddiv>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4610      	mov	r0, r2
 80094ca:	4619      	mov	r1, r3
 80094cc:	f7f7 fb68 	bl	8000ba0 <__aeabi_d2f>
 80094d0:	4603      	mov	r3, r0
 80094d2:	4a11      	ldr	r2, [pc, #68]	; (8009518 <MPU6050_Read_Gyro+0x2f8>)
 80094d4:	6013      	str	r3, [r2, #0]
		break;
 80094d6:	bf00      	nop
	}
}
 80094d8:	bf00      	nop
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	00000000 	.word	0x00000000
 80094e4:	40606000 	.word	0x40606000
 80094e8:	00000000 	.word	0x00000000
 80094ec:	40506000 	.word	0x40506000
 80094f0:	66666666 	.word	0x66666666
 80094f4:	40406666 	.word	0x40406666
 80094f8:	66666666 	.word	0x66666666
 80094fc:	40306666 	.word	0x40306666
 8009500:	20000298 	.word	0x20000298
 8009504:	2000028c 	.word	0x2000028c
 8009508:	20000280 	.word	0x20000280
 800950c:	200002a4 	.word	0x200002a4
 8009510:	20000278 	.word	0x20000278
 8009514:	20000288 	.word	0x20000288
 8009518:	200002a0 	.word	0x200002a0

0800951c <__errno>:
 800951c:	4b01      	ldr	r3, [pc, #4]	; (8009524 <__errno+0x8>)
 800951e:	6818      	ldr	r0, [r3, #0]
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20000048 	.word	0x20000048

08009528 <__libc_init_array>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	2600      	movs	r6, #0
 800952c:	4d0c      	ldr	r5, [pc, #48]	; (8009560 <__libc_init_array+0x38>)
 800952e:	4c0d      	ldr	r4, [pc, #52]	; (8009564 <__libc_init_array+0x3c>)
 8009530:	1b64      	subs	r4, r4, r5
 8009532:	10a4      	asrs	r4, r4, #2
 8009534:	42a6      	cmp	r6, r4
 8009536:	d109      	bne.n	800954c <__libc_init_array+0x24>
 8009538:	f002 fefc 	bl	800c334 <_init>
 800953c:	2600      	movs	r6, #0
 800953e:	4d0a      	ldr	r5, [pc, #40]	; (8009568 <__libc_init_array+0x40>)
 8009540:	4c0a      	ldr	r4, [pc, #40]	; (800956c <__libc_init_array+0x44>)
 8009542:	1b64      	subs	r4, r4, r5
 8009544:	10a4      	asrs	r4, r4, #2
 8009546:	42a6      	cmp	r6, r4
 8009548:	d105      	bne.n	8009556 <__libc_init_array+0x2e>
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009550:	4798      	blx	r3
 8009552:	3601      	adds	r6, #1
 8009554:	e7ee      	b.n	8009534 <__libc_init_array+0xc>
 8009556:	f855 3b04 	ldr.w	r3, [r5], #4
 800955a:	4798      	blx	r3
 800955c:	3601      	adds	r6, #1
 800955e:	e7f2      	b.n	8009546 <__libc_init_array+0x1e>
 8009560:	0800cefc 	.word	0x0800cefc
 8009564:	0800cefc 	.word	0x0800cefc
 8009568:	0800cefc 	.word	0x0800cefc
 800956c:	0800cf00 	.word	0x0800cf00

08009570 <memcpy>:
 8009570:	440a      	add	r2, r1
 8009572:	4291      	cmp	r1, r2
 8009574:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009578:	d100      	bne.n	800957c <memcpy+0xc>
 800957a:	4770      	bx	lr
 800957c:	b510      	push	{r4, lr}
 800957e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009582:	4291      	cmp	r1, r2
 8009584:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009588:	d1f9      	bne.n	800957e <memcpy+0xe>
 800958a:	bd10      	pop	{r4, pc}

0800958c <memset>:
 800958c:	4603      	mov	r3, r0
 800958e:	4402      	add	r2, r0
 8009590:	4293      	cmp	r3, r2
 8009592:	d100      	bne.n	8009596 <memset+0xa>
 8009594:	4770      	bx	lr
 8009596:	f803 1b01 	strb.w	r1, [r3], #1
 800959a:	e7f9      	b.n	8009590 <memset+0x4>

0800959c <__cvt>:
 800959c:	2b00      	cmp	r3, #0
 800959e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a2:	461f      	mov	r7, r3
 80095a4:	bfbb      	ittet	lt
 80095a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80095aa:	461f      	movlt	r7, r3
 80095ac:	2300      	movge	r3, #0
 80095ae:	232d      	movlt	r3, #45	; 0x2d
 80095b0:	b088      	sub	sp, #32
 80095b2:	4614      	mov	r4, r2
 80095b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80095b8:	7013      	strb	r3, [r2, #0]
 80095ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80095c0:	f023 0820 	bic.w	r8, r3, #32
 80095c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095c8:	d005      	beq.n	80095d6 <__cvt+0x3a>
 80095ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80095ce:	d100      	bne.n	80095d2 <__cvt+0x36>
 80095d0:	3501      	adds	r5, #1
 80095d2:	2302      	movs	r3, #2
 80095d4:	e000      	b.n	80095d8 <__cvt+0x3c>
 80095d6:	2303      	movs	r3, #3
 80095d8:	aa07      	add	r2, sp, #28
 80095da:	9204      	str	r2, [sp, #16]
 80095dc:	aa06      	add	r2, sp, #24
 80095de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80095e2:	e9cd 3500 	strd	r3, r5, [sp]
 80095e6:	4622      	mov	r2, r4
 80095e8:	463b      	mov	r3, r7
 80095ea:	f000 fce5 	bl	8009fb8 <_dtoa_r>
 80095ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80095f2:	4606      	mov	r6, r0
 80095f4:	d102      	bne.n	80095fc <__cvt+0x60>
 80095f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095f8:	07db      	lsls	r3, r3, #31
 80095fa:	d522      	bpl.n	8009642 <__cvt+0xa6>
 80095fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009600:	eb06 0905 	add.w	r9, r6, r5
 8009604:	d110      	bne.n	8009628 <__cvt+0x8c>
 8009606:	7833      	ldrb	r3, [r6, #0]
 8009608:	2b30      	cmp	r3, #48	; 0x30
 800960a:	d10a      	bne.n	8009622 <__cvt+0x86>
 800960c:	2200      	movs	r2, #0
 800960e:	2300      	movs	r3, #0
 8009610:	4620      	mov	r0, r4
 8009612:	4639      	mov	r1, r7
 8009614:	f7f7 fa34 	bl	8000a80 <__aeabi_dcmpeq>
 8009618:	b918      	cbnz	r0, 8009622 <__cvt+0x86>
 800961a:	f1c5 0501 	rsb	r5, r5, #1
 800961e:	f8ca 5000 	str.w	r5, [sl]
 8009622:	f8da 3000 	ldr.w	r3, [sl]
 8009626:	4499      	add	r9, r3
 8009628:	2200      	movs	r2, #0
 800962a:	2300      	movs	r3, #0
 800962c:	4620      	mov	r0, r4
 800962e:	4639      	mov	r1, r7
 8009630:	f7f7 fa26 	bl	8000a80 <__aeabi_dcmpeq>
 8009634:	b108      	cbz	r0, 800963a <__cvt+0x9e>
 8009636:	f8cd 901c 	str.w	r9, [sp, #28]
 800963a:	2230      	movs	r2, #48	; 0x30
 800963c:	9b07      	ldr	r3, [sp, #28]
 800963e:	454b      	cmp	r3, r9
 8009640:	d307      	bcc.n	8009652 <__cvt+0xb6>
 8009642:	4630      	mov	r0, r6
 8009644:	9b07      	ldr	r3, [sp, #28]
 8009646:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009648:	1b9b      	subs	r3, r3, r6
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	b008      	add	sp, #32
 800964e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009652:	1c59      	adds	r1, r3, #1
 8009654:	9107      	str	r1, [sp, #28]
 8009656:	701a      	strb	r2, [r3, #0]
 8009658:	e7f0      	b.n	800963c <__cvt+0xa0>

0800965a <__exponent>:
 800965a:	4603      	mov	r3, r0
 800965c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800965e:	2900      	cmp	r1, #0
 8009660:	f803 2b02 	strb.w	r2, [r3], #2
 8009664:	bfb6      	itet	lt
 8009666:	222d      	movlt	r2, #45	; 0x2d
 8009668:	222b      	movge	r2, #43	; 0x2b
 800966a:	4249      	neglt	r1, r1
 800966c:	2909      	cmp	r1, #9
 800966e:	7042      	strb	r2, [r0, #1]
 8009670:	dd2b      	ble.n	80096ca <__exponent+0x70>
 8009672:	f10d 0407 	add.w	r4, sp, #7
 8009676:	46a4      	mov	ip, r4
 8009678:	270a      	movs	r7, #10
 800967a:	fb91 f6f7 	sdiv	r6, r1, r7
 800967e:	460a      	mov	r2, r1
 8009680:	46a6      	mov	lr, r4
 8009682:	fb07 1516 	mls	r5, r7, r6, r1
 8009686:	2a63      	cmp	r2, #99	; 0x63
 8009688:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800968c:	4631      	mov	r1, r6
 800968e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009692:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009696:	dcf0      	bgt.n	800967a <__exponent+0x20>
 8009698:	3130      	adds	r1, #48	; 0x30
 800969a:	f1ae 0502 	sub.w	r5, lr, #2
 800969e:	f804 1c01 	strb.w	r1, [r4, #-1]
 80096a2:	4629      	mov	r1, r5
 80096a4:	1c44      	adds	r4, r0, #1
 80096a6:	4561      	cmp	r1, ip
 80096a8:	d30a      	bcc.n	80096c0 <__exponent+0x66>
 80096aa:	f10d 0209 	add.w	r2, sp, #9
 80096ae:	eba2 020e 	sub.w	r2, r2, lr
 80096b2:	4565      	cmp	r5, ip
 80096b4:	bf88      	it	hi
 80096b6:	2200      	movhi	r2, #0
 80096b8:	4413      	add	r3, r2
 80096ba:	1a18      	subs	r0, r3, r0
 80096bc:	b003      	add	sp, #12
 80096be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096c4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80096c8:	e7ed      	b.n	80096a6 <__exponent+0x4c>
 80096ca:	2330      	movs	r3, #48	; 0x30
 80096cc:	3130      	adds	r1, #48	; 0x30
 80096ce:	7083      	strb	r3, [r0, #2]
 80096d0:	70c1      	strb	r1, [r0, #3]
 80096d2:	1d03      	adds	r3, r0, #4
 80096d4:	e7f1      	b.n	80096ba <__exponent+0x60>
	...

080096d8 <_printf_float>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	b091      	sub	sp, #68	; 0x44
 80096de:	460c      	mov	r4, r1
 80096e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80096e4:	4616      	mov	r6, r2
 80096e6:	461f      	mov	r7, r3
 80096e8:	4605      	mov	r5, r0
 80096ea:	f001 fa53 	bl	800ab94 <_localeconv_r>
 80096ee:	6803      	ldr	r3, [r0, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	9309      	str	r3, [sp, #36]	; 0x24
 80096f4:	f7f6 fd98 	bl	8000228 <strlen>
 80096f8:	2300      	movs	r3, #0
 80096fa:	930e      	str	r3, [sp, #56]	; 0x38
 80096fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009700:	900a      	str	r0, [sp, #40]	; 0x28
 8009702:	3307      	adds	r3, #7
 8009704:	f023 0307 	bic.w	r3, r3, #7
 8009708:	f103 0208 	add.w	r2, r3, #8
 800970c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009710:	f8d4 b000 	ldr.w	fp, [r4]
 8009714:	f8c8 2000 	str.w	r2, [r8]
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009720:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009724:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009728:	930b      	str	r3, [sp, #44]	; 0x2c
 800972a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800972e:	4640      	mov	r0, r8
 8009730:	4b9c      	ldr	r3, [pc, #624]	; (80099a4 <_printf_float+0x2cc>)
 8009732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009734:	f7f7 f9d6 	bl	8000ae4 <__aeabi_dcmpun>
 8009738:	bb70      	cbnz	r0, 8009798 <_printf_float+0xc0>
 800973a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800973e:	4640      	mov	r0, r8
 8009740:	4b98      	ldr	r3, [pc, #608]	; (80099a4 <_printf_float+0x2cc>)
 8009742:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009744:	f7f7 f9b0 	bl	8000aa8 <__aeabi_dcmple>
 8009748:	bb30      	cbnz	r0, 8009798 <_printf_float+0xc0>
 800974a:	2200      	movs	r2, #0
 800974c:	2300      	movs	r3, #0
 800974e:	4640      	mov	r0, r8
 8009750:	4651      	mov	r1, sl
 8009752:	f7f7 f99f 	bl	8000a94 <__aeabi_dcmplt>
 8009756:	b110      	cbz	r0, 800975e <_printf_float+0x86>
 8009758:	232d      	movs	r3, #45	; 0x2d
 800975a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800975e:	4b92      	ldr	r3, [pc, #584]	; (80099a8 <_printf_float+0x2d0>)
 8009760:	4892      	ldr	r0, [pc, #584]	; (80099ac <_printf_float+0x2d4>)
 8009762:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009766:	bf94      	ite	ls
 8009768:	4698      	movls	r8, r3
 800976a:	4680      	movhi	r8, r0
 800976c:	2303      	movs	r3, #3
 800976e:	f04f 0a00 	mov.w	sl, #0
 8009772:	6123      	str	r3, [r4, #16]
 8009774:	f02b 0304 	bic.w	r3, fp, #4
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	4633      	mov	r3, r6
 800977c:	4621      	mov	r1, r4
 800977e:	4628      	mov	r0, r5
 8009780:	9700      	str	r7, [sp, #0]
 8009782:	aa0f      	add	r2, sp, #60	; 0x3c
 8009784:	f000 f9d4 	bl	8009b30 <_printf_common>
 8009788:	3001      	adds	r0, #1
 800978a:	f040 8090 	bne.w	80098ae <_printf_float+0x1d6>
 800978e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009792:	b011      	add	sp, #68	; 0x44
 8009794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009798:	4642      	mov	r2, r8
 800979a:	4653      	mov	r3, sl
 800979c:	4640      	mov	r0, r8
 800979e:	4651      	mov	r1, sl
 80097a0:	f7f7 f9a0 	bl	8000ae4 <__aeabi_dcmpun>
 80097a4:	b148      	cbz	r0, 80097ba <_printf_float+0xe2>
 80097a6:	f1ba 0f00 	cmp.w	sl, #0
 80097aa:	bfb8      	it	lt
 80097ac:	232d      	movlt	r3, #45	; 0x2d
 80097ae:	4880      	ldr	r0, [pc, #512]	; (80099b0 <_printf_float+0x2d8>)
 80097b0:	bfb8      	it	lt
 80097b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80097b6:	4b7f      	ldr	r3, [pc, #508]	; (80099b4 <_printf_float+0x2dc>)
 80097b8:	e7d3      	b.n	8009762 <_printf_float+0x8a>
 80097ba:	6863      	ldr	r3, [r4, #4]
 80097bc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	d142      	bne.n	800984a <_printf_float+0x172>
 80097c4:	2306      	movs	r3, #6
 80097c6:	6063      	str	r3, [r4, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	9206      	str	r2, [sp, #24]
 80097cc:	aa0e      	add	r2, sp, #56	; 0x38
 80097ce:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80097d2:	aa0d      	add	r2, sp, #52	; 0x34
 80097d4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80097d8:	9203      	str	r2, [sp, #12]
 80097da:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80097de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80097e2:	6023      	str	r3, [r4, #0]
 80097e4:	6863      	ldr	r3, [r4, #4]
 80097e6:	4642      	mov	r2, r8
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	4628      	mov	r0, r5
 80097ec:	4653      	mov	r3, sl
 80097ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80097f0:	f7ff fed4 	bl	800959c <__cvt>
 80097f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097f6:	4680      	mov	r8, r0
 80097f8:	2947      	cmp	r1, #71	; 0x47
 80097fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80097fc:	d108      	bne.n	8009810 <_printf_float+0x138>
 80097fe:	1cc8      	adds	r0, r1, #3
 8009800:	db02      	blt.n	8009808 <_printf_float+0x130>
 8009802:	6863      	ldr	r3, [r4, #4]
 8009804:	4299      	cmp	r1, r3
 8009806:	dd40      	ble.n	800988a <_printf_float+0x1b2>
 8009808:	f1a9 0902 	sub.w	r9, r9, #2
 800980c:	fa5f f989 	uxtb.w	r9, r9
 8009810:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009814:	d81f      	bhi.n	8009856 <_printf_float+0x17e>
 8009816:	464a      	mov	r2, r9
 8009818:	3901      	subs	r1, #1
 800981a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800981e:	910d      	str	r1, [sp, #52]	; 0x34
 8009820:	f7ff ff1b 	bl	800965a <__exponent>
 8009824:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009826:	4682      	mov	sl, r0
 8009828:	1813      	adds	r3, r2, r0
 800982a:	2a01      	cmp	r2, #1
 800982c:	6123      	str	r3, [r4, #16]
 800982e:	dc02      	bgt.n	8009836 <_printf_float+0x15e>
 8009830:	6822      	ldr	r2, [r4, #0]
 8009832:	07d2      	lsls	r2, r2, #31
 8009834:	d501      	bpl.n	800983a <_printf_float+0x162>
 8009836:	3301      	adds	r3, #1
 8009838:	6123      	str	r3, [r4, #16]
 800983a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800983e:	2b00      	cmp	r3, #0
 8009840:	d09b      	beq.n	800977a <_printf_float+0xa2>
 8009842:	232d      	movs	r3, #45	; 0x2d
 8009844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009848:	e797      	b.n	800977a <_printf_float+0xa2>
 800984a:	2947      	cmp	r1, #71	; 0x47
 800984c:	d1bc      	bne.n	80097c8 <_printf_float+0xf0>
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1ba      	bne.n	80097c8 <_printf_float+0xf0>
 8009852:	2301      	movs	r3, #1
 8009854:	e7b7      	b.n	80097c6 <_printf_float+0xee>
 8009856:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800985a:	d118      	bne.n	800988e <_printf_float+0x1b6>
 800985c:	2900      	cmp	r1, #0
 800985e:	6863      	ldr	r3, [r4, #4]
 8009860:	dd0b      	ble.n	800987a <_printf_float+0x1a2>
 8009862:	6121      	str	r1, [r4, #16]
 8009864:	b913      	cbnz	r3, 800986c <_printf_float+0x194>
 8009866:	6822      	ldr	r2, [r4, #0]
 8009868:	07d0      	lsls	r0, r2, #31
 800986a:	d502      	bpl.n	8009872 <_printf_float+0x19a>
 800986c:	3301      	adds	r3, #1
 800986e:	440b      	add	r3, r1
 8009870:	6123      	str	r3, [r4, #16]
 8009872:	f04f 0a00 	mov.w	sl, #0
 8009876:	65a1      	str	r1, [r4, #88]	; 0x58
 8009878:	e7df      	b.n	800983a <_printf_float+0x162>
 800987a:	b913      	cbnz	r3, 8009882 <_printf_float+0x1aa>
 800987c:	6822      	ldr	r2, [r4, #0]
 800987e:	07d2      	lsls	r2, r2, #31
 8009880:	d501      	bpl.n	8009886 <_printf_float+0x1ae>
 8009882:	3302      	adds	r3, #2
 8009884:	e7f4      	b.n	8009870 <_printf_float+0x198>
 8009886:	2301      	movs	r3, #1
 8009888:	e7f2      	b.n	8009870 <_printf_float+0x198>
 800988a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800988e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009890:	4299      	cmp	r1, r3
 8009892:	db05      	blt.n	80098a0 <_printf_float+0x1c8>
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	6121      	str	r1, [r4, #16]
 8009898:	07d8      	lsls	r0, r3, #31
 800989a:	d5ea      	bpl.n	8009872 <_printf_float+0x19a>
 800989c:	1c4b      	adds	r3, r1, #1
 800989e:	e7e7      	b.n	8009870 <_printf_float+0x198>
 80098a0:	2900      	cmp	r1, #0
 80098a2:	bfcc      	ite	gt
 80098a4:	2201      	movgt	r2, #1
 80098a6:	f1c1 0202 	rsble	r2, r1, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	e7e0      	b.n	8009870 <_printf_float+0x198>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	055a      	lsls	r2, r3, #21
 80098b2:	d407      	bmi.n	80098c4 <_printf_float+0x1ec>
 80098b4:	6923      	ldr	r3, [r4, #16]
 80098b6:	4642      	mov	r2, r8
 80098b8:	4631      	mov	r1, r6
 80098ba:	4628      	mov	r0, r5
 80098bc:	47b8      	blx	r7
 80098be:	3001      	adds	r0, #1
 80098c0:	d12b      	bne.n	800991a <_printf_float+0x242>
 80098c2:	e764      	b.n	800978e <_printf_float+0xb6>
 80098c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80098c8:	f240 80dd 	bls.w	8009a86 <_printf_float+0x3ae>
 80098cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098d0:	2200      	movs	r2, #0
 80098d2:	2300      	movs	r3, #0
 80098d4:	f7f7 f8d4 	bl	8000a80 <__aeabi_dcmpeq>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d033      	beq.n	8009944 <_printf_float+0x26c>
 80098dc:	2301      	movs	r3, #1
 80098de:	4631      	mov	r1, r6
 80098e0:	4628      	mov	r0, r5
 80098e2:	4a35      	ldr	r2, [pc, #212]	; (80099b8 <_printf_float+0x2e0>)
 80098e4:	47b8      	blx	r7
 80098e6:	3001      	adds	r0, #1
 80098e8:	f43f af51 	beq.w	800978e <_printf_float+0xb6>
 80098ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80098f0:	429a      	cmp	r2, r3
 80098f2:	db02      	blt.n	80098fa <_printf_float+0x222>
 80098f4:	6823      	ldr	r3, [r4, #0]
 80098f6:	07d8      	lsls	r0, r3, #31
 80098f8:	d50f      	bpl.n	800991a <_printf_float+0x242>
 80098fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098fe:	4631      	mov	r1, r6
 8009900:	4628      	mov	r0, r5
 8009902:	47b8      	blx	r7
 8009904:	3001      	adds	r0, #1
 8009906:	f43f af42 	beq.w	800978e <_printf_float+0xb6>
 800990a:	f04f 0800 	mov.w	r8, #0
 800990e:	f104 091a 	add.w	r9, r4, #26
 8009912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009914:	3b01      	subs	r3, #1
 8009916:	4543      	cmp	r3, r8
 8009918:	dc09      	bgt.n	800992e <_printf_float+0x256>
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	079b      	lsls	r3, r3, #30
 800991e:	f100 8102 	bmi.w	8009b26 <_printf_float+0x44e>
 8009922:	68e0      	ldr	r0, [r4, #12]
 8009924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009926:	4298      	cmp	r0, r3
 8009928:	bfb8      	it	lt
 800992a:	4618      	movlt	r0, r3
 800992c:	e731      	b.n	8009792 <_printf_float+0xba>
 800992e:	2301      	movs	r3, #1
 8009930:	464a      	mov	r2, r9
 8009932:	4631      	mov	r1, r6
 8009934:	4628      	mov	r0, r5
 8009936:	47b8      	blx	r7
 8009938:	3001      	adds	r0, #1
 800993a:	f43f af28 	beq.w	800978e <_printf_float+0xb6>
 800993e:	f108 0801 	add.w	r8, r8, #1
 8009942:	e7e6      	b.n	8009912 <_printf_float+0x23a>
 8009944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009946:	2b00      	cmp	r3, #0
 8009948:	dc38      	bgt.n	80099bc <_printf_float+0x2e4>
 800994a:	2301      	movs	r3, #1
 800994c:	4631      	mov	r1, r6
 800994e:	4628      	mov	r0, r5
 8009950:	4a19      	ldr	r2, [pc, #100]	; (80099b8 <_printf_float+0x2e0>)
 8009952:	47b8      	blx	r7
 8009954:	3001      	adds	r0, #1
 8009956:	f43f af1a 	beq.w	800978e <_printf_float+0xb6>
 800995a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800995e:	4313      	orrs	r3, r2
 8009960:	d102      	bne.n	8009968 <_printf_float+0x290>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	07d9      	lsls	r1, r3, #31
 8009966:	d5d8      	bpl.n	800991a <_printf_float+0x242>
 8009968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800996c:	4631      	mov	r1, r6
 800996e:	4628      	mov	r0, r5
 8009970:	47b8      	blx	r7
 8009972:	3001      	adds	r0, #1
 8009974:	f43f af0b 	beq.w	800978e <_printf_float+0xb6>
 8009978:	f04f 0900 	mov.w	r9, #0
 800997c:	f104 0a1a 	add.w	sl, r4, #26
 8009980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009982:	425b      	negs	r3, r3
 8009984:	454b      	cmp	r3, r9
 8009986:	dc01      	bgt.n	800998c <_printf_float+0x2b4>
 8009988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800998a:	e794      	b.n	80098b6 <_printf_float+0x1de>
 800998c:	2301      	movs	r3, #1
 800998e:	4652      	mov	r2, sl
 8009990:	4631      	mov	r1, r6
 8009992:	4628      	mov	r0, r5
 8009994:	47b8      	blx	r7
 8009996:	3001      	adds	r0, #1
 8009998:	f43f aef9 	beq.w	800978e <_printf_float+0xb6>
 800999c:	f109 0901 	add.w	r9, r9, #1
 80099a0:	e7ee      	b.n	8009980 <_printf_float+0x2a8>
 80099a2:	bf00      	nop
 80099a4:	7fefffff 	.word	0x7fefffff
 80099a8:	0800cb28 	.word	0x0800cb28
 80099ac:	0800cb2c 	.word	0x0800cb2c
 80099b0:	0800cb34 	.word	0x0800cb34
 80099b4:	0800cb30 	.word	0x0800cb30
 80099b8:	0800cb38 	.word	0x0800cb38
 80099bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099c0:	429a      	cmp	r2, r3
 80099c2:	bfa8      	it	ge
 80099c4:	461a      	movge	r2, r3
 80099c6:	2a00      	cmp	r2, #0
 80099c8:	4691      	mov	r9, r2
 80099ca:	dc37      	bgt.n	8009a3c <_printf_float+0x364>
 80099cc:	f04f 0b00 	mov.w	fp, #0
 80099d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099d4:	f104 021a 	add.w	r2, r4, #26
 80099d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80099dc:	ebaa 0309 	sub.w	r3, sl, r9
 80099e0:	455b      	cmp	r3, fp
 80099e2:	dc33      	bgt.n	8009a4c <_printf_float+0x374>
 80099e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80099e8:	429a      	cmp	r2, r3
 80099ea:	db3b      	blt.n	8009a64 <_printf_float+0x38c>
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	07da      	lsls	r2, r3, #31
 80099f0:	d438      	bmi.n	8009a64 <_printf_float+0x38c>
 80099f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80099f6:	eba3 020a 	sub.w	r2, r3, sl
 80099fa:	eba3 0901 	sub.w	r9, r3, r1
 80099fe:	4591      	cmp	r9, r2
 8009a00:	bfa8      	it	ge
 8009a02:	4691      	movge	r9, r2
 8009a04:	f1b9 0f00 	cmp.w	r9, #0
 8009a08:	dc34      	bgt.n	8009a74 <_printf_float+0x39c>
 8009a0a:	f04f 0800 	mov.w	r8, #0
 8009a0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a12:	f104 0a1a 	add.w	sl, r4, #26
 8009a16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a1a:	1a9b      	subs	r3, r3, r2
 8009a1c:	eba3 0309 	sub.w	r3, r3, r9
 8009a20:	4543      	cmp	r3, r8
 8009a22:	f77f af7a 	ble.w	800991a <_printf_float+0x242>
 8009a26:	2301      	movs	r3, #1
 8009a28:	4652      	mov	r2, sl
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b8      	blx	r7
 8009a30:	3001      	adds	r0, #1
 8009a32:	f43f aeac 	beq.w	800978e <_printf_float+0xb6>
 8009a36:	f108 0801 	add.w	r8, r8, #1
 8009a3a:	e7ec      	b.n	8009a16 <_printf_float+0x33e>
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	4631      	mov	r1, r6
 8009a40:	4642      	mov	r2, r8
 8009a42:	4628      	mov	r0, r5
 8009a44:	47b8      	blx	r7
 8009a46:	3001      	adds	r0, #1
 8009a48:	d1c0      	bne.n	80099cc <_printf_float+0x2f4>
 8009a4a:	e6a0      	b.n	800978e <_printf_float+0xb6>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4628      	mov	r0, r5
 8009a52:	920b      	str	r2, [sp, #44]	; 0x2c
 8009a54:	47b8      	blx	r7
 8009a56:	3001      	adds	r0, #1
 8009a58:	f43f ae99 	beq.w	800978e <_printf_float+0xb6>
 8009a5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a5e:	f10b 0b01 	add.w	fp, fp, #1
 8009a62:	e7b9      	b.n	80099d8 <_printf_float+0x300>
 8009a64:	4631      	mov	r1, r6
 8009a66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	47b8      	blx	r7
 8009a6e:	3001      	adds	r0, #1
 8009a70:	d1bf      	bne.n	80099f2 <_printf_float+0x31a>
 8009a72:	e68c      	b.n	800978e <_printf_float+0xb6>
 8009a74:	464b      	mov	r3, r9
 8009a76:	4631      	mov	r1, r6
 8009a78:	4628      	mov	r0, r5
 8009a7a:	eb08 020a 	add.w	r2, r8, sl
 8009a7e:	47b8      	blx	r7
 8009a80:	3001      	adds	r0, #1
 8009a82:	d1c2      	bne.n	8009a0a <_printf_float+0x332>
 8009a84:	e683      	b.n	800978e <_printf_float+0xb6>
 8009a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a88:	2a01      	cmp	r2, #1
 8009a8a:	dc01      	bgt.n	8009a90 <_printf_float+0x3b8>
 8009a8c:	07db      	lsls	r3, r3, #31
 8009a8e:	d537      	bpl.n	8009b00 <_printf_float+0x428>
 8009a90:	2301      	movs	r3, #1
 8009a92:	4642      	mov	r2, r8
 8009a94:	4631      	mov	r1, r6
 8009a96:	4628      	mov	r0, r5
 8009a98:	47b8      	blx	r7
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	f43f ae77 	beq.w	800978e <_printf_float+0xb6>
 8009aa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	47b8      	blx	r7
 8009aaa:	3001      	adds	r0, #1
 8009aac:	f43f ae6f 	beq.w	800978e <_printf_float+0xb6>
 8009ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f7f6 ffe2 	bl	8000a80 <__aeabi_dcmpeq>
 8009abc:	b9d8      	cbnz	r0, 8009af6 <_printf_float+0x41e>
 8009abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ac0:	f108 0201 	add.w	r2, r8, #1
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4628      	mov	r0, r5
 8009aca:	47b8      	blx	r7
 8009acc:	3001      	adds	r0, #1
 8009ace:	d10e      	bne.n	8009aee <_printf_float+0x416>
 8009ad0:	e65d      	b.n	800978e <_printf_float+0xb6>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	464a      	mov	r2, r9
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	4628      	mov	r0, r5
 8009ada:	47b8      	blx	r7
 8009adc:	3001      	adds	r0, #1
 8009ade:	f43f ae56 	beq.w	800978e <_printf_float+0xb6>
 8009ae2:	f108 0801 	add.w	r8, r8, #1
 8009ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	4543      	cmp	r3, r8
 8009aec:	dcf1      	bgt.n	8009ad2 <_printf_float+0x3fa>
 8009aee:	4653      	mov	r3, sl
 8009af0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009af4:	e6e0      	b.n	80098b8 <_printf_float+0x1e0>
 8009af6:	f04f 0800 	mov.w	r8, #0
 8009afa:	f104 091a 	add.w	r9, r4, #26
 8009afe:	e7f2      	b.n	8009ae6 <_printf_float+0x40e>
 8009b00:	2301      	movs	r3, #1
 8009b02:	4642      	mov	r2, r8
 8009b04:	e7df      	b.n	8009ac6 <_printf_float+0x3ee>
 8009b06:	2301      	movs	r3, #1
 8009b08:	464a      	mov	r2, r9
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	47b8      	blx	r7
 8009b10:	3001      	adds	r0, #1
 8009b12:	f43f ae3c 	beq.w	800978e <_printf_float+0xb6>
 8009b16:	f108 0801 	add.w	r8, r8, #1
 8009b1a:	68e3      	ldr	r3, [r4, #12]
 8009b1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009b1e:	1a5b      	subs	r3, r3, r1
 8009b20:	4543      	cmp	r3, r8
 8009b22:	dcf0      	bgt.n	8009b06 <_printf_float+0x42e>
 8009b24:	e6fd      	b.n	8009922 <_printf_float+0x24a>
 8009b26:	f04f 0800 	mov.w	r8, #0
 8009b2a:	f104 0919 	add.w	r9, r4, #25
 8009b2e:	e7f4      	b.n	8009b1a <_printf_float+0x442>

08009b30 <_printf_common>:
 8009b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b34:	4616      	mov	r6, r2
 8009b36:	4699      	mov	r9, r3
 8009b38:	688a      	ldr	r2, [r1, #8]
 8009b3a:	690b      	ldr	r3, [r1, #16]
 8009b3c:	4607      	mov	r7, r0
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	bfb8      	it	lt
 8009b42:	4613      	movlt	r3, r2
 8009b44:	6033      	str	r3, [r6, #0]
 8009b46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b50:	b10a      	cbz	r2, 8009b56 <_printf_common+0x26>
 8009b52:	3301      	adds	r3, #1
 8009b54:	6033      	str	r3, [r6, #0]
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	0699      	lsls	r1, r3, #26
 8009b5a:	bf42      	ittt	mi
 8009b5c:	6833      	ldrmi	r3, [r6, #0]
 8009b5e:	3302      	addmi	r3, #2
 8009b60:	6033      	strmi	r3, [r6, #0]
 8009b62:	6825      	ldr	r5, [r4, #0]
 8009b64:	f015 0506 	ands.w	r5, r5, #6
 8009b68:	d106      	bne.n	8009b78 <_printf_common+0x48>
 8009b6a:	f104 0a19 	add.w	sl, r4, #25
 8009b6e:	68e3      	ldr	r3, [r4, #12]
 8009b70:	6832      	ldr	r2, [r6, #0]
 8009b72:	1a9b      	subs	r3, r3, r2
 8009b74:	42ab      	cmp	r3, r5
 8009b76:	dc28      	bgt.n	8009bca <_printf_common+0x9a>
 8009b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b7c:	1e13      	subs	r3, r2, #0
 8009b7e:	6822      	ldr	r2, [r4, #0]
 8009b80:	bf18      	it	ne
 8009b82:	2301      	movne	r3, #1
 8009b84:	0692      	lsls	r2, r2, #26
 8009b86:	d42d      	bmi.n	8009be4 <_printf_common+0xb4>
 8009b88:	4649      	mov	r1, r9
 8009b8a:	4638      	mov	r0, r7
 8009b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b90:	47c0      	blx	r8
 8009b92:	3001      	adds	r0, #1
 8009b94:	d020      	beq.n	8009bd8 <_printf_common+0xa8>
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	68e5      	ldr	r5, [r4, #12]
 8009b9a:	f003 0306 	and.w	r3, r3, #6
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	bf18      	it	ne
 8009ba2:	2500      	movne	r5, #0
 8009ba4:	6832      	ldr	r2, [r6, #0]
 8009ba6:	f04f 0600 	mov.w	r6, #0
 8009baa:	68a3      	ldr	r3, [r4, #8]
 8009bac:	bf08      	it	eq
 8009bae:	1aad      	subeq	r5, r5, r2
 8009bb0:	6922      	ldr	r2, [r4, #16]
 8009bb2:	bf08      	it	eq
 8009bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	bfc4      	itt	gt
 8009bbc:	1a9b      	subgt	r3, r3, r2
 8009bbe:	18ed      	addgt	r5, r5, r3
 8009bc0:	341a      	adds	r4, #26
 8009bc2:	42b5      	cmp	r5, r6
 8009bc4:	d11a      	bne.n	8009bfc <_printf_common+0xcc>
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	e008      	b.n	8009bdc <_printf_common+0xac>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	4652      	mov	r2, sl
 8009bce:	4649      	mov	r1, r9
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	47c0      	blx	r8
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	d103      	bne.n	8009be0 <_printf_common+0xb0>
 8009bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be0:	3501      	adds	r5, #1
 8009be2:	e7c4      	b.n	8009b6e <_printf_common+0x3e>
 8009be4:	2030      	movs	r0, #48	; 0x30
 8009be6:	18e1      	adds	r1, r4, r3
 8009be8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bec:	1c5a      	adds	r2, r3, #1
 8009bee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bf2:	4422      	add	r2, r4
 8009bf4:	3302      	adds	r3, #2
 8009bf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bfa:	e7c5      	b.n	8009b88 <_printf_common+0x58>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	4622      	mov	r2, r4
 8009c00:	4649      	mov	r1, r9
 8009c02:	4638      	mov	r0, r7
 8009c04:	47c0      	blx	r8
 8009c06:	3001      	adds	r0, #1
 8009c08:	d0e6      	beq.n	8009bd8 <_printf_common+0xa8>
 8009c0a:	3601      	adds	r6, #1
 8009c0c:	e7d9      	b.n	8009bc2 <_printf_common+0x92>
	...

08009c10 <_printf_i>:
 8009c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c14:	7e0f      	ldrb	r7, [r1, #24]
 8009c16:	4691      	mov	r9, r2
 8009c18:	2f78      	cmp	r7, #120	; 0x78
 8009c1a:	4680      	mov	r8, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	469a      	mov	sl, r3
 8009c20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c26:	d807      	bhi.n	8009c38 <_printf_i+0x28>
 8009c28:	2f62      	cmp	r7, #98	; 0x62
 8009c2a:	d80a      	bhi.n	8009c42 <_printf_i+0x32>
 8009c2c:	2f00      	cmp	r7, #0
 8009c2e:	f000 80d9 	beq.w	8009de4 <_printf_i+0x1d4>
 8009c32:	2f58      	cmp	r7, #88	; 0x58
 8009c34:	f000 80a4 	beq.w	8009d80 <_printf_i+0x170>
 8009c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c40:	e03a      	b.n	8009cb8 <_printf_i+0xa8>
 8009c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c46:	2b15      	cmp	r3, #21
 8009c48:	d8f6      	bhi.n	8009c38 <_printf_i+0x28>
 8009c4a:	a101      	add	r1, pc, #4	; (adr r1, 8009c50 <_printf_i+0x40>)
 8009c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c50:	08009ca9 	.word	0x08009ca9
 8009c54:	08009cbd 	.word	0x08009cbd
 8009c58:	08009c39 	.word	0x08009c39
 8009c5c:	08009c39 	.word	0x08009c39
 8009c60:	08009c39 	.word	0x08009c39
 8009c64:	08009c39 	.word	0x08009c39
 8009c68:	08009cbd 	.word	0x08009cbd
 8009c6c:	08009c39 	.word	0x08009c39
 8009c70:	08009c39 	.word	0x08009c39
 8009c74:	08009c39 	.word	0x08009c39
 8009c78:	08009c39 	.word	0x08009c39
 8009c7c:	08009dcb 	.word	0x08009dcb
 8009c80:	08009ced 	.word	0x08009ced
 8009c84:	08009dad 	.word	0x08009dad
 8009c88:	08009c39 	.word	0x08009c39
 8009c8c:	08009c39 	.word	0x08009c39
 8009c90:	08009ded 	.word	0x08009ded
 8009c94:	08009c39 	.word	0x08009c39
 8009c98:	08009ced 	.word	0x08009ced
 8009c9c:	08009c39 	.word	0x08009c39
 8009ca0:	08009c39 	.word	0x08009c39
 8009ca4:	08009db5 	.word	0x08009db5
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	1d1a      	adds	r2, r3, #4
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	602a      	str	r2, [r5, #0]
 8009cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e0a4      	b.n	8009e06 <_printf_i+0x1f6>
 8009cbc:	6820      	ldr	r0, [r4, #0]
 8009cbe:	6829      	ldr	r1, [r5, #0]
 8009cc0:	0606      	lsls	r6, r0, #24
 8009cc2:	f101 0304 	add.w	r3, r1, #4
 8009cc6:	d50a      	bpl.n	8009cde <_printf_i+0xce>
 8009cc8:	680e      	ldr	r6, [r1, #0]
 8009cca:	602b      	str	r3, [r5, #0]
 8009ccc:	2e00      	cmp	r6, #0
 8009cce:	da03      	bge.n	8009cd8 <_printf_i+0xc8>
 8009cd0:	232d      	movs	r3, #45	; 0x2d
 8009cd2:	4276      	negs	r6, r6
 8009cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cd8:	230a      	movs	r3, #10
 8009cda:	485e      	ldr	r0, [pc, #376]	; (8009e54 <_printf_i+0x244>)
 8009cdc:	e019      	b.n	8009d12 <_printf_i+0x102>
 8009cde:	680e      	ldr	r6, [r1, #0]
 8009ce0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ce4:	602b      	str	r3, [r5, #0]
 8009ce6:	bf18      	it	ne
 8009ce8:	b236      	sxthne	r6, r6
 8009cea:	e7ef      	b.n	8009ccc <_printf_i+0xbc>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	6820      	ldr	r0, [r4, #0]
 8009cf0:	1d19      	adds	r1, r3, #4
 8009cf2:	6029      	str	r1, [r5, #0]
 8009cf4:	0601      	lsls	r1, r0, #24
 8009cf6:	d501      	bpl.n	8009cfc <_printf_i+0xec>
 8009cf8:	681e      	ldr	r6, [r3, #0]
 8009cfa:	e002      	b.n	8009d02 <_printf_i+0xf2>
 8009cfc:	0646      	lsls	r6, r0, #25
 8009cfe:	d5fb      	bpl.n	8009cf8 <_printf_i+0xe8>
 8009d00:	881e      	ldrh	r6, [r3, #0]
 8009d02:	2f6f      	cmp	r7, #111	; 0x6f
 8009d04:	bf0c      	ite	eq
 8009d06:	2308      	moveq	r3, #8
 8009d08:	230a      	movne	r3, #10
 8009d0a:	4852      	ldr	r0, [pc, #328]	; (8009e54 <_printf_i+0x244>)
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d12:	6865      	ldr	r5, [r4, #4]
 8009d14:	2d00      	cmp	r5, #0
 8009d16:	bfa8      	it	ge
 8009d18:	6821      	ldrge	r1, [r4, #0]
 8009d1a:	60a5      	str	r5, [r4, #8]
 8009d1c:	bfa4      	itt	ge
 8009d1e:	f021 0104 	bicge.w	r1, r1, #4
 8009d22:	6021      	strge	r1, [r4, #0]
 8009d24:	b90e      	cbnz	r6, 8009d2a <_printf_i+0x11a>
 8009d26:	2d00      	cmp	r5, #0
 8009d28:	d04d      	beq.n	8009dc6 <_printf_i+0x1b6>
 8009d2a:	4615      	mov	r5, r2
 8009d2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d30:	fb03 6711 	mls	r7, r3, r1, r6
 8009d34:	5dc7      	ldrb	r7, [r0, r7]
 8009d36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d3a:	4637      	mov	r7, r6
 8009d3c:	42bb      	cmp	r3, r7
 8009d3e:	460e      	mov	r6, r1
 8009d40:	d9f4      	bls.n	8009d2c <_printf_i+0x11c>
 8009d42:	2b08      	cmp	r3, #8
 8009d44:	d10b      	bne.n	8009d5e <_printf_i+0x14e>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	07de      	lsls	r6, r3, #31
 8009d4a:	d508      	bpl.n	8009d5e <_printf_i+0x14e>
 8009d4c:	6923      	ldr	r3, [r4, #16]
 8009d4e:	6861      	ldr	r1, [r4, #4]
 8009d50:	4299      	cmp	r1, r3
 8009d52:	bfde      	ittt	le
 8009d54:	2330      	movle	r3, #48	; 0x30
 8009d56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d5a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d5e:	1b52      	subs	r2, r2, r5
 8009d60:	6122      	str	r2, [r4, #16]
 8009d62:	464b      	mov	r3, r9
 8009d64:	4621      	mov	r1, r4
 8009d66:	4640      	mov	r0, r8
 8009d68:	f8cd a000 	str.w	sl, [sp]
 8009d6c:	aa03      	add	r2, sp, #12
 8009d6e:	f7ff fedf 	bl	8009b30 <_printf_common>
 8009d72:	3001      	adds	r0, #1
 8009d74:	d14c      	bne.n	8009e10 <_printf_i+0x200>
 8009d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d7a:	b004      	add	sp, #16
 8009d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d80:	4834      	ldr	r0, [pc, #208]	; (8009e54 <_printf_i+0x244>)
 8009d82:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d86:	6829      	ldr	r1, [r5, #0]
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d8e:	6029      	str	r1, [r5, #0]
 8009d90:	061d      	lsls	r5, r3, #24
 8009d92:	d514      	bpl.n	8009dbe <_printf_i+0x1ae>
 8009d94:	07df      	lsls	r7, r3, #31
 8009d96:	bf44      	itt	mi
 8009d98:	f043 0320 	orrmi.w	r3, r3, #32
 8009d9c:	6023      	strmi	r3, [r4, #0]
 8009d9e:	b91e      	cbnz	r6, 8009da8 <_printf_i+0x198>
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	f023 0320 	bic.w	r3, r3, #32
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	2310      	movs	r3, #16
 8009daa:	e7af      	b.n	8009d0c <_printf_i+0xfc>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	f043 0320 	orr.w	r3, r3, #32
 8009db2:	6023      	str	r3, [r4, #0]
 8009db4:	2378      	movs	r3, #120	; 0x78
 8009db6:	4828      	ldr	r0, [pc, #160]	; (8009e58 <_printf_i+0x248>)
 8009db8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dbc:	e7e3      	b.n	8009d86 <_printf_i+0x176>
 8009dbe:	0659      	lsls	r1, r3, #25
 8009dc0:	bf48      	it	mi
 8009dc2:	b2b6      	uxthmi	r6, r6
 8009dc4:	e7e6      	b.n	8009d94 <_printf_i+0x184>
 8009dc6:	4615      	mov	r5, r2
 8009dc8:	e7bb      	b.n	8009d42 <_printf_i+0x132>
 8009dca:	682b      	ldr	r3, [r5, #0]
 8009dcc:	6826      	ldr	r6, [r4, #0]
 8009dce:	1d18      	adds	r0, r3, #4
 8009dd0:	6961      	ldr	r1, [r4, #20]
 8009dd2:	6028      	str	r0, [r5, #0]
 8009dd4:	0635      	lsls	r5, r6, #24
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	d501      	bpl.n	8009dde <_printf_i+0x1ce>
 8009dda:	6019      	str	r1, [r3, #0]
 8009ddc:	e002      	b.n	8009de4 <_printf_i+0x1d4>
 8009dde:	0670      	lsls	r0, r6, #25
 8009de0:	d5fb      	bpl.n	8009dda <_printf_i+0x1ca>
 8009de2:	8019      	strh	r1, [r3, #0]
 8009de4:	2300      	movs	r3, #0
 8009de6:	4615      	mov	r5, r2
 8009de8:	6123      	str	r3, [r4, #16]
 8009dea:	e7ba      	b.n	8009d62 <_printf_i+0x152>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	2100      	movs	r1, #0
 8009df0:	1d1a      	adds	r2, r3, #4
 8009df2:	602a      	str	r2, [r5, #0]
 8009df4:	681d      	ldr	r5, [r3, #0]
 8009df6:	6862      	ldr	r2, [r4, #4]
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f000 fed7 	bl	800abac <memchr>
 8009dfe:	b108      	cbz	r0, 8009e04 <_printf_i+0x1f4>
 8009e00:	1b40      	subs	r0, r0, r5
 8009e02:	6060      	str	r0, [r4, #4]
 8009e04:	6863      	ldr	r3, [r4, #4]
 8009e06:	6123      	str	r3, [r4, #16]
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e0e:	e7a8      	b.n	8009d62 <_printf_i+0x152>
 8009e10:	462a      	mov	r2, r5
 8009e12:	4649      	mov	r1, r9
 8009e14:	4640      	mov	r0, r8
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	47d0      	blx	sl
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	d0ab      	beq.n	8009d76 <_printf_i+0x166>
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	079b      	lsls	r3, r3, #30
 8009e22:	d413      	bmi.n	8009e4c <_printf_i+0x23c>
 8009e24:	68e0      	ldr	r0, [r4, #12]
 8009e26:	9b03      	ldr	r3, [sp, #12]
 8009e28:	4298      	cmp	r0, r3
 8009e2a:	bfb8      	it	lt
 8009e2c:	4618      	movlt	r0, r3
 8009e2e:	e7a4      	b.n	8009d7a <_printf_i+0x16a>
 8009e30:	2301      	movs	r3, #1
 8009e32:	4632      	mov	r2, r6
 8009e34:	4649      	mov	r1, r9
 8009e36:	4640      	mov	r0, r8
 8009e38:	47d0      	blx	sl
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d09b      	beq.n	8009d76 <_printf_i+0x166>
 8009e3e:	3501      	adds	r5, #1
 8009e40:	68e3      	ldr	r3, [r4, #12]
 8009e42:	9903      	ldr	r1, [sp, #12]
 8009e44:	1a5b      	subs	r3, r3, r1
 8009e46:	42ab      	cmp	r3, r5
 8009e48:	dcf2      	bgt.n	8009e30 <_printf_i+0x220>
 8009e4a:	e7eb      	b.n	8009e24 <_printf_i+0x214>
 8009e4c:	2500      	movs	r5, #0
 8009e4e:	f104 0619 	add.w	r6, r4, #25
 8009e52:	e7f5      	b.n	8009e40 <_printf_i+0x230>
 8009e54:	0800cb3a 	.word	0x0800cb3a
 8009e58:	0800cb4b 	.word	0x0800cb4b

08009e5c <siprintf>:
 8009e5c:	b40e      	push	{r1, r2, r3}
 8009e5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e62:	b500      	push	{lr}
 8009e64:	b09c      	sub	sp, #112	; 0x70
 8009e66:	ab1d      	add	r3, sp, #116	; 0x74
 8009e68:	9002      	str	r0, [sp, #8]
 8009e6a:	9006      	str	r0, [sp, #24]
 8009e6c:	9107      	str	r1, [sp, #28]
 8009e6e:	9104      	str	r1, [sp, #16]
 8009e70:	4808      	ldr	r0, [pc, #32]	; (8009e94 <siprintf+0x38>)
 8009e72:	4909      	ldr	r1, [pc, #36]	; (8009e98 <siprintf+0x3c>)
 8009e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e78:	9105      	str	r1, [sp, #20]
 8009e7a:	6800      	ldr	r0, [r0, #0]
 8009e7c:	a902      	add	r1, sp, #8
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	f001 fb70 	bl	800b564 <_svfiprintf_r>
 8009e84:	2200      	movs	r2, #0
 8009e86:	9b02      	ldr	r3, [sp, #8]
 8009e88:	701a      	strb	r2, [r3, #0]
 8009e8a:	b01c      	add	sp, #112	; 0x70
 8009e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e90:	b003      	add	sp, #12
 8009e92:	4770      	bx	lr
 8009e94:	20000048 	.word	0x20000048
 8009e98:	ffff0208 	.word	0xffff0208

08009e9c <quorem>:
 8009e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	6903      	ldr	r3, [r0, #16]
 8009ea2:	690c      	ldr	r4, [r1, #16]
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	42a3      	cmp	r3, r4
 8009ea8:	f2c0 8082 	blt.w	8009fb0 <quorem+0x114>
 8009eac:	3c01      	subs	r4, #1
 8009eae:	f100 0514 	add.w	r5, r0, #20
 8009eb2:	f101 0814 	add.w	r8, r1, #20
 8009eb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eba:	9301      	str	r3, [sp, #4]
 8009ebc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ec0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ecc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ed0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ed4:	d331      	bcc.n	8009f3a <quorem+0x9e>
 8009ed6:	f04f 0e00 	mov.w	lr, #0
 8009eda:	4640      	mov	r0, r8
 8009edc:	46ac      	mov	ip, r5
 8009ede:	46f2      	mov	sl, lr
 8009ee0:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ee4:	b293      	uxth	r3, r2
 8009ee6:	fb06 e303 	mla	r3, r6, r3, lr
 8009eea:	0c12      	lsrs	r2, r2, #16
 8009eec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	fb06 e202 	mla	r2, r6, r2, lr
 8009ef6:	ebaa 0303 	sub.w	r3, sl, r3
 8009efa:	f8dc a000 	ldr.w	sl, [ip]
 8009efe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f02:	fa1f fa8a 	uxth.w	sl, sl
 8009f06:	4453      	add	r3, sl
 8009f08:	f8dc a000 	ldr.w	sl, [ip]
 8009f0c:	b292      	uxth	r2, r2
 8009f0e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f1c:	4581      	cmp	r9, r0
 8009f1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f22:	f84c 3b04 	str.w	r3, [ip], #4
 8009f26:	d2db      	bcs.n	8009ee0 <quorem+0x44>
 8009f28:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f2c:	b92b      	cbnz	r3, 8009f3a <quorem+0x9e>
 8009f2e:	9b01      	ldr	r3, [sp, #4]
 8009f30:	3b04      	subs	r3, #4
 8009f32:	429d      	cmp	r5, r3
 8009f34:	461a      	mov	r2, r3
 8009f36:	d32f      	bcc.n	8009f98 <quorem+0xfc>
 8009f38:	613c      	str	r4, [r7, #16]
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	f001 f8c2 	bl	800b0c4 <__mcmp>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	db25      	blt.n	8009f90 <quorem+0xf4>
 8009f44:	4628      	mov	r0, r5
 8009f46:	f04f 0c00 	mov.w	ip, #0
 8009f4a:	3601      	adds	r6, #1
 8009f4c:	f858 1b04 	ldr.w	r1, [r8], #4
 8009f50:	f8d0 e000 	ldr.w	lr, [r0]
 8009f54:	b28b      	uxth	r3, r1
 8009f56:	ebac 0303 	sub.w	r3, ip, r3
 8009f5a:	fa1f f28e 	uxth.w	r2, lr
 8009f5e:	4413      	add	r3, r2
 8009f60:	0c0a      	lsrs	r2, r1, #16
 8009f62:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f70:	45c1      	cmp	r9, r8
 8009f72:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f76:	f840 3b04 	str.w	r3, [r0], #4
 8009f7a:	d2e7      	bcs.n	8009f4c <quorem+0xb0>
 8009f7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f84:	b922      	cbnz	r2, 8009f90 <quorem+0xf4>
 8009f86:	3b04      	subs	r3, #4
 8009f88:	429d      	cmp	r5, r3
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	d30a      	bcc.n	8009fa4 <quorem+0x108>
 8009f8e:	613c      	str	r4, [r7, #16]
 8009f90:	4630      	mov	r0, r6
 8009f92:	b003      	add	sp, #12
 8009f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f98:	6812      	ldr	r2, [r2, #0]
 8009f9a:	3b04      	subs	r3, #4
 8009f9c:	2a00      	cmp	r2, #0
 8009f9e:	d1cb      	bne.n	8009f38 <quorem+0x9c>
 8009fa0:	3c01      	subs	r4, #1
 8009fa2:	e7c6      	b.n	8009f32 <quorem+0x96>
 8009fa4:	6812      	ldr	r2, [r2, #0]
 8009fa6:	3b04      	subs	r3, #4
 8009fa8:	2a00      	cmp	r2, #0
 8009faa:	d1f0      	bne.n	8009f8e <quorem+0xf2>
 8009fac:	3c01      	subs	r4, #1
 8009fae:	e7eb      	b.n	8009f88 <quorem+0xec>
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7ee      	b.n	8009f92 <quorem+0xf6>
 8009fb4:	0000      	movs	r0, r0
	...

08009fb8 <_dtoa_r>:
 8009fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	4616      	mov	r6, r2
 8009fbe:	461f      	mov	r7, r3
 8009fc0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009fc2:	b099      	sub	sp, #100	; 0x64
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009fca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009fce:	b974      	cbnz	r4, 8009fee <_dtoa_r+0x36>
 8009fd0:	2010      	movs	r0, #16
 8009fd2:	f000 fde3 	bl	800ab9c <malloc>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	6268      	str	r0, [r5, #36]	; 0x24
 8009fda:	b920      	cbnz	r0, 8009fe6 <_dtoa_r+0x2e>
 8009fdc:	21ea      	movs	r1, #234	; 0xea
 8009fde:	4ba8      	ldr	r3, [pc, #672]	; (800a280 <_dtoa_r+0x2c8>)
 8009fe0:	48a8      	ldr	r0, [pc, #672]	; (800a284 <_dtoa_r+0x2cc>)
 8009fe2:	f001 fbcf 	bl	800b784 <__assert_func>
 8009fe6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fea:	6004      	str	r4, [r0, #0]
 8009fec:	60c4      	str	r4, [r0, #12]
 8009fee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ff0:	6819      	ldr	r1, [r3, #0]
 8009ff2:	b151      	cbz	r1, 800a00a <_dtoa_r+0x52>
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	4093      	lsls	r3, r2
 8009ffa:	604a      	str	r2, [r1, #4]
 8009ffc:	608b      	str	r3, [r1, #8]
 8009ffe:	4628      	mov	r0, r5
 800a000:	f000 fe22 	bl	800ac48 <_Bfree>
 800a004:	2200      	movs	r2, #0
 800a006:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	1e3b      	subs	r3, r7, #0
 800a00c:	bfaf      	iteee	ge
 800a00e:	2300      	movge	r3, #0
 800a010:	2201      	movlt	r2, #1
 800a012:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a016:	9305      	strlt	r3, [sp, #20]
 800a018:	bfa8      	it	ge
 800a01a:	f8c8 3000 	strge.w	r3, [r8]
 800a01e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a022:	4b99      	ldr	r3, [pc, #612]	; (800a288 <_dtoa_r+0x2d0>)
 800a024:	bfb8      	it	lt
 800a026:	f8c8 2000 	strlt.w	r2, [r8]
 800a02a:	ea33 0309 	bics.w	r3, r3, r9
 800a02e:	d119      	bne.n	800a064 <_dtoa_r+0xac>
 800a030:	f242 730f 	movw	r3, #9999	; 0x270f
 800a034:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a03c:	4333      	orrs	r3, r6
 800a03e:	f000 857f 	beq.w	800ab40 <_dtoa_r+0xb88>
 800a042:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a044:	b953      	cbnz	r3, 800a05c <_dtoa_r+0xa4>
 800a046:	4b91      	ldr	r3, [pc, #580]	; (800a28c <_dtoa_r+0x2d4>)
 800a048:	e022      	b.n	800a090 <_dtoa_r+0xd8>
 800a04a:	4b91      	ldr	r3, [pc, #580]	; (800a290 <_dtoa_r+0x2d8>)
 800a04c:	9303      	str	r3, [sp, #12]
 800a04e:	3308      	adds	r3, #8
 800a050:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	9803      	ldr	r0, [sp, #12]
 800a056:	b019      	add	sp, #100	; 0x64
 800a058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05c:	4b8b      	ldr	r3, [pc, #556]	; (800a28c <_dtoa_r+0x2d4>)
 800a05e:	9303      	str	r3, [sp, #12]
 800a060:	3303      	adds	r3, #3
 800a062:	e7f5      	b.n	800a050 <_dtoa_r+0x98>
 800a064:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a068:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a06c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a070:	2200      	movs	r2, #0
 800a072:	2300      	movs	r3, #0
 800a074:	f7f6 fd04 	bl	8000a80 <__aeabi_dcmpeq>
 800a078:	4680      	mov	r8, r0
 800a07a:	b158      	cbz	r0, 800a094 <_dtoa_r+0xdc>
 800a07c:	2301      	movs	r3, #1
 800a07e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 8558 	beq.w	800ab3a <_dtoa_r+0xb82>
 800a08a:	4882      	ldr	r0, [pc, #520]	; (800a294 <_dtoa_r+0x2dc>)
 800a08c:	6018      	str	r0, [r3, #0]
 800a08e:	1e43      	subs	r3, r0, #1
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	e7df      	b.n	800a054 <_dtoa_r+0x9c>
 800a094:	ab16      	add	r3, sp, #88	; 0x58
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	ab17      	add	r3, sp, #92	; 0x5c
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	4628      	mov	r0, r5
 800a09e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0a2:	f001 f8b7 	bl	800b214 <__d2b>
 800a0a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a0aa:	4683      	mov	fp, r0
 800a0ac:	2c00      	cmp	r4, #0
 800a0ae:	d07f      	beq.n	800a1b0 <_dtoa_r+0x1f8>
 800a0b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a0ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a0c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a0c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	4b72      	ldr	r3, [pc, #456]	; (800a298 <_dtoa_r+0x2e0>)
 800a0ce:	f7f6 f8b7 	bl	8000240 <__aeabi_dsub>
 800a0d2:	a365      	add	r3, pc, #404	; (adr r3, 800a268 <_dtoa_r+0x2b0>)
 800a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d8:	f7f6 fa6a 	bl	80005b0 <__aeabi_dmul>
 800a0dc:	a364      	add	r3, pc, #400	; (adr r3, 800a270 <_dtoa_r+0x2b8>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 f8af 	bl	8000244 <__adddf3>
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	460f      	mov	r7, r1
 800a0ec:	f7f6 f9f6 	bl	80004dc <__aeabi_i2d>
 800a0f0:	a361      	add	r3, pc, #388	; (adr r3, 800a278 <_dtoa_r+0x2c0>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 fa5b 	bl	80005b0 <__aeabi_dmul>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4630      	mov	r0, r6
 800a100:	4639      	mov	r1, r7
 800a102:	f7f6 f89f 	bl	8000244 <__adddf3>
 800a106:	4606      	mov	r6, r0
 800a108:	460f      	mov	r7, r1
 800a10a:	f7f6 fd01 	bl	8000b10 <__aeabi_d2iz>
 800a10e:	2200      	movs	r2, #0
 800a110:	4682      	mov	sl, r0
 800a112:	2300      	movs	r3, #0
 800a114:	4630      	mov	r0, r6
 800a116:	4639      	mov	r1, r7
 800a118:	f7f6 fcbc 	bl	8000a94 <__aeabi_dcmplt>
 800a11c:	b148      	cbz	r0, 800a132 <_dtoa_r+0x17a>
 800a11e:	4650      	mov	r0, sl
 800a120:	f7f6 f9dc 	bl	80004dc <__aeabi_i2d>
 800a124:	4632      	mov	r2, r6
 800a126:	463b      	mov	r3, r7
 800a128:	f7f6 fcaa 	bl	8000a80 <__aeabi_dcmpeq>
 800a12c:	b908      	cbnz	r0, 800a132 <_dtoa_r+0x17a>
 800a12e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a132:	f1ba 0f16 	cmp.w	sl, #22
 800a136:	d858      	bhi.n	800a1ea <_dtoa_r+0x232>
 800a138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a13c:	4b57      	ldr	r3, [pc, #348]	; (800a29c <_dtoa_r+0x2e4>)
 800a13e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	f7f6 fca5 	bl	8000a94 <__aeabi_dcmplt>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d04f      	beq.n	800a1ee <_dtoa_r+0x236>
 800a14e:	2300      	movs	r3, #0
 800a150:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a154:	930f      	str	r3, [sp, #60]	; 0x3c
 800a156:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a158:	1b1c      	subs	r4, r3, r4
 800a15a:	1e63      	subs	r3, r4, #1
 800a15c:	9309      	str	r3, [sp, #36]	; 0x24
 800a15e:	bf49      	itett	mi
 800a160:	f1c4 0301 	rsbmi	r3, r4, #1
 800a164:	2300      	movpl	r3, #0
 800a166:	9306      	strmi	r3, [sp, #24]
 800a168:	2300      	movmi	r3, #0
 800a16a:	bf54      	ite	pl
 800a16c:	9306      	strpl	r3, [sp, #24]
 800a16e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a170:	f1ba 0f00 	cmp.w	sl, #0
 800a174:	db3d      	blt.n	800a1f2 <_dtoa_r+0x23a>
 800a176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a178:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a17c:	4453      	add	r3, sl
 800a17e:	9309      	str	r3, [sp, #36]	; 0x24
 800a180:	2300      	movs	r3, #0
 800a182:	930a      	str	r3, [sp, #40]	; 0x28
 800a184:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a186:	2b09      	cmp	r3, #9
 800a188:	f200 808c 	bhi.w	800a2a4 <_dtoa_r+0x2ec>
 800a18c:	2b05      	cmp	r3, #5
 800a18e:	bfc4      	itt	gt
 800a190:	3b04      	subgt	r3, #4
 800a192:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a194:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a196:	bfc8      	it	gt
 800a198:	2400      	movgt	r4, #0
 800a19a:	f1a3 0302 	sub.w	r3, r3, #2
 800a19e:	bfd8      	it	le
 800a1a0:	2401      	movle	r4, #1
 800a1a2:	2b03      	cmp	r3, #3
 800a1a4:	f200 808a 	bhi.w	800a2bc <_dtoa_r+0x304>
 800a1a8:	e8df f003 	tbb	[pc, r3]
 800a1ac:	5b4d4f2d 	.word	0x5b4d4f2d
 800a1b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a1b4:	441c      	add	r4, r3
 800a1b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a1ba:	2b20      	cmp	r3, #32
 800a1bc:	bfc3      	ittte	gt
 800a1be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1c2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a1c6:	fa09 f303 	lslgt.w	r3, r9, r3
 800a1ca:	f1c3 0320 	rsble	r3, r3, #32
 800a1ce:	bfc6      	itte	gt
 800a1d0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a1d4:	4318      	orrgt	r0, r3
 800a1d6:	fa06 f003 	lslle.w	r0, r6, r3
 800a1da:	f7f6 f96f 	bl	80004bc <__aeabi_ui2d>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a1e4:	3c01      	subs	r4, #1
 800a1e6:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1e8:	e76f      	b.n	800a0ca <_dtoa_r+0x112>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e7b2      	b.n	800a154 <_dtoa_r+0x19c>
 800a1ee:	900f      	str	r0, [sp, #60]	; 0x3c
 800a1f0:	e7b1      	b.n	800a156 <_dtoa_r+0x19e>
 800a1f2:	9b06      	ldr	r3, [sp, #24]
 800a1f4:	eba3 030a 	sub.w	r3, r3, sl
 800a1f8:	9306      	str	r3, [sp, #24]
 800a1fa:	f1ca 0300 	rsb	r3, sl, #0
 800a1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a200:	2300      	movs	r3, #0
 800a202:	930e      	str	r3, [sp, #56]	; 0x38
 800a204:	e7be      	b.n	800a184 <_dtoa_r+0x1cc>
 800a206:	2300      	movs	r3, #0
 800a208:	930b      	str	r3, [sp, #44]	; 0x2c
 800a20a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dc58      	bgt.n	800a2c2 <_dtoa_r+0x30a>
 800a210:	f04f 0901 	mov.w	r9, #1
 800a214:	464b      	mov	r3, r9
 800a216:	f8cd 9020 	str.w	r9, [sp, #32]
 800a21a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a21e:	2200      	movs	r2, #0
 800a220:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a222:	6042      	str	r2, [r0, #4]
 800a224:	2204      	movs	r2, #4
 800a226:	f102 0614 	add.w	r6, r2, #20
 800a22a:	429e      	cmp	r6, r3
 800a22c:	6841      	ldr	r1, [r0, #4]
 800a22e:	d94e      	bls.n	800a2ce <_dtoa_r+0x316>
 800a230:	4628      	mov	r0, r5
 800a232:	f000 fcc9 	bl	800abc8 <_Balloc>
 800a236:	9003      	str	r0, [sp, #12]
 800a238:	2800      	cmp	r0, #0
 800a23a:	d14c      	bne.n	800a2d6 <_dtoa_r+0x31e>
 800a23c:	4602      	mov	r2, r0
 800a23e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a242:	4b17      	ldr	r3, [pc, #92]	; (800a2a0 <_dtoa_r+0x2e8>)
 800a244:	e6cc      	b.n	8009fe0 <_dtoa_r+0x28>
 800a246:	2301      	movs	r3, #1
 800a248:	e7de      	b.n	800a208 <_dtoa_r+0x250>
 800a24a:	2300      	movs	r3, #0
 800a24c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a24e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a250:	eb0a 0903 	add.w	r9, sl, r3
 800a254:	f109 0301 	add.w	r3, r9, #1
 800a258:	2b01      	cmp	r3, #1
 800a25a:	9308      	str	r3, [sp, #32]
 800a25c:	bfb8      	it	lt
 800a25e:	2301      	movlt	r3, #1
 800a260:	e7dd      	b.n	800a21e <_dtoa_r+0x266>
 800a262:	2301      	movs	r3, #1
 800a264:	e7f2      	b.n	800a24c <_dtoa_r+0x294>
 800a266:	bf00      	nop
 800a268:	636f4361 	.word	0x636f4361
 800a26c:	3fd287a7 	.word	0x3fd287a7
 800a270:	8b60c8b3 	.word	0x8b60c8b3
 800a274:	3fc68a28 	.word	0x3fc68a28
 800a278:	509f79fb 	.word	0x509f79fb
 800a27c:	3fd34413 	.word	0x3fd34413
 800a280:	0800cb69 	.word	0x0800cb69
 800a284:	0800cb80 	.word	0x0800cb80
 800a288:	7ff00000 	.word	0x7ff00000
 800a28c:	0800cb65 	.word	0x0800cb65
 800a290:	0800cb5c 	.word	0x0800cb5c
 800a294:	0800cb39 	.word	0x0800cb39
 800a298:	3ff80000 	.word	0x3ff80000
 800a29c:	0800cc70 	.word	0x0800cc70
 800a2a0:	0800cbdb 	.word	0x0800cbdb
 800a2a4:	2401      	movs	r4, #1
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a2aa:	9322      	str	r3, [sp, #136]	; 0x88
 800a2ac:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	2312      	movs	r3, #18
 800a2b4:	f8cd 9020 	str.w	r9, [sp, #32]
 800a2b8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a2ba:	e7b0      	b.n	800a21e <_dtoa_r+0x266>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2c0:	e7f4      	b.n	800a2ac <_dtoa_r+0x2f4>
 800a2c2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a2c6:	464b      	mov	r3, r9
 800a2c8:	f8cd 9020 	str.w	r9, [sp, #32]
 800a2cc:	e7a7      	b.n	800a21e <_dtoa_r+0x266>
 800a2ce:	3101      	adds	r1, #1
 800a2d0:	6041      	str	r1, [r0, #4]
 800a2d2:	0052      	lsls	r2, r2, #1
 800a2d4:	e7a7      	b.n	800a226 <_dtoa_r+0x26e>
 800a2d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2d8:	9a03      	ldr	r2, [sp, #12]
 800a2da:	601a      	str	r2, [r3, #0]
 800a2dc:	9b08      	ldr	r3, [sp, #32]
 800a2de:	2b0e      	cmp	r3, #14
 800a2e0:	f200 80a8 	bhi.w	800a434 <_dtoa_r+0x47c>
 800a2e4:	2c00      	cmp	r4, #0
 800a2e6:	f000 80a5 	beq.w	800a434 <_dtoa_r+0x47c>
 800a2ea:	f1ba 0f00 	cmp.w	sl, #0
 800a2ee:	dd34      	ble.n	800a35a <_dtoa_r+0x3a2>
 800a2f0:	4a9a      	ldr	r2, [pc, #616]	; (800a55c <_dtoa_r+0x5a4>)
 800a2f2:	f00a 030f 	and.w	r3, sl, #15
 800a2f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2fa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a2fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a302:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a306:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a30a:	d016      	beq.n	800a33a <_dtoa_r+0x382>
 800a30c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a310:	4b93      	ldr	r3, [pc, #588]	; (800a560 <_dtoa_r+0x5a8>)
 800a312:	2703      	movs	r7, #3
 800a314:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a318:	f7f6 fa74 	bl	8000804 <__aeabi_ddiv>
 800a31c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a320:	f004 040f 	and.w	r4, r4, #15
 800a324:	4e8e      	ldr	r6, [pc, #568]	; (800a560 <_dtoa_r+0x5a8>)
 800a326:	b954      	cbnz	r4, 800a33e <_dtoa_r+0x386>
 800a328:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a32c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a330:	f7f6 fa68 	bl	8000804 <__aeabi_ddiv>
 800a334:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a338:	e029      	b.n	800a38e <_dtoa_r+0x3d6>
 800a33a:	2702      	movs	r7, #2
 800a33c:	e7f2      	b.n	800a324 <_dtoa_r+0x36c>
 800a33e:	07e1      	lsls	r1, r4, #31
 800a340:	d508      	bpl.n	800a354 <_dtoa_r+0x39c>
 800a342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a346:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a34a:	f7f6 f931 	bl	80005b0 <__aeabi_dmul>
 800a34e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a352:	3701      	adds	r7, #1
 800a354:	1064      	asrs	r4, r4, #1
 800a356:	3608      	adds	r6, #8
 800a358:	e7e5      	b.n	800a326 <_dtoa_r+0x36e>
 800a35a:	f000 80a5 	beq.w	800a4a8 <_dtoa_r+0x4f0>
 800a35e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a362:	f1ca 0400 	rsb	r4, sl, #0
 800a366:	4b7d      	ldr	r3, [pc, #500]	; (800a55c <_dtoa_r+0x5a4>)
 800a368:	f004 020f 	and.w	r2, r4, #15
 800a36c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f6 f91c 	bl	80005b0 <__aeabi_dmul>
 800a378:	2702      	movs	r7, #2
 800a37a:	2300      	movs	r3, #0
 800a37c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a380:	4e77      	ldr	r6, [pc, #476]	; (800a560 <_dtoa_r+0x5a8>)
 800a382:	1124      	asrs	r4, r4, #4
 800a384:	2c00      	cmp	r4, #0
 800a386:	f040 8084 	bne.w	800a492 <_dtoa_r+0x4da>
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1d2      	bne.n	800a334 <_dtoa_r+0x37c>
 800a38e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 808b 	beq.w	800a4ac <_dtoa_r+0x4f4>
 800a396:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a39a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a39e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	4b6f      	ldr	r3, [pc, #444]	; (800a564 <_dtoa_r+0x5ac>)
 800a3a6:	f7f6 fb75 	bl	8000a94 <__aeabi_dcmplt>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d07e      	beq.n	800a4ac <_dtoa_r+0x4f4>
 800a3ae:	9b08      	ldr	r3, [sp, #32]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d07b      	beq.n	800a4ac <_dtoa_r+0x4f4>
 800a3b4:	f1b9 0f00 	cmp.w	r9, #0
 800a3b8:	dd38      	ble.n	800a42c <_dtoa_r+0x474>
 800a3ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3be:	2200      	movs	r2, #0
 800a3c0:	4b69      	ldr	r3, [pc, #420]	; (800a568 <_dtoa_r+0x5b0>)
 800a3c2:	f7f6 f8f5 	bl	80005b0 <__aeabi_dmul>
 800a3c6:	464c      	mov	r4, r9
 800a3c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3cc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800a3d0:	3701      	adds	r7, #1
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	f7f6 f882 	bl	80004dc <__aeabi_i2d>
 800a3d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3dc:	f7f6 f8e8 	bl	80005b0 <__aeabi_dmul>
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	4b62      	ldr	r3, [pc, #392]	; (800a56c <_dtoa_r+0x5b4>)
 800a3e4:	f7f5 ff2e 	bl	8000244 <__adddf3>
 800a3e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a3ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a3f0:	9611      	str	r6, [sp, #68]	; 0x44
 800a3f2:	2c00      	cmp	r4, #0
 800a3f4:	d15d      	bne.n	800a4b2 <_dtoa_r+0x4fa>
 800a3f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	4b5c      	ldr	r3, [pc, #368]	; (800a570 <_dtoa_r+0x5b8>)
 800a3fe:	f7f5 ff1f 	bl	8000240 <__aeabi_dsub>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a40a:	4633      	mov	r3, r6
 800a40c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a40e:	f7f6 fb5f 	bl	8000ad0 <__aeabi_dcmpgt>
 800a412:	2800      	cmp	r0, #0
 800a414:	f040 829c 	bne.w	800a950 <_dtoa_r+0x998>
 800a418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a41c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a41e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a422:	f7f6 fb37 	bl	8000a94 <__aeabi_dcmplt>
 800a426:	2800      	cmp	r0, #0
 800a428:	f040 8290 	bne.w	800a94c <_dtoa_r+0x994>
 800a42c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a430:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a434:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a436:	2b00      	cmp	r3, #0
 800a438:	f2c0 8152 	blt.w	800a6e0 <_dtoa_r+0x728>
 800a43c:	f1ba 0f0e 	cmp.w	sl, #14
 800a440:	f300 814e 	bgt.w	800a6e0 <_dtoa_r+0x728>
 800a444:	4b45      	ldr	r3, [pc, #276]	; (800a55c <_dtoa_r+0x5a4>)
 800a446:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a44a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a44e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a452:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a454:	2b00      	cmp	r3, #0
 800a456:	f280 80db 	bge.w	800a610 <_dtoa_r+0x658>
 800a45a:	9b08      	ldr	r3, [sp, #32]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f300 80d7 	bgt.w	800a610 <_dtoa_r+0x658>
 800a462:	f040 8272 	bne.w	800a94a <_dtoa_r+0x992>
 800a466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a46a:	2200      	movs	r2, #0
 800a46c:	4b40      	ldr	r3, [pc, #256]	; (800a570 <_dtoa_r+0x5b8>)
 800a46e:	f7f6 f89f 	bl	80005b0 <__aeabi_dmul>
 800a472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a476:	f7f6 fb21 	bl	8000abc <__aeabi_dcmpge>
 800a47a:	9c08      	ldr	r4, [sp, #32]
 800a47c:	4626      	mov	r6, r4
 800a47e:	2800      	cmp	r0, #0
 800a480:	f040 8248 	bne.w	800a914 <_dtoa_r+0x95c>
 800a484:	2331      	movs	r3, #49	; 0x31
 800a486:	9f03      	ldr	r7, [sp, #12]
 800a488:	f10a 0a01 	add.w	sl, sl, #1
 800a48c:	f807 3b01 	strb.w	r3, [r7], #1
 800a490:	e244      	b.n	800a91c <_dtoa_r+0x964>
 800a492:	07e2      	lsls	r2, r4, #31
 800a494:	d505      	bpl.n	800a4a2 <_dtoa_r+0x4ea>
 800a496:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a49a:	f7f6 f889 	bl	80005b0 <__aeabi_dmul>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	3701      	adds	r7, #1
 800a4a2:	1064      	asrs	r4, r4, #1
 800a4a4:	3608      	adds	r6, #8
 800a4a6:	e76d      	b.n	800a384 <_dtoa_r+0x3cc>
 800a4a8:	2702      	movs	r7, #2
 800a4aa:	e770      	b.n	800a38e <_dtoa_r+0x3d6>
 800a4ac:	46d0      	mov	r8, sl
 800a4ae:	9c08      	ldr	r4, [sp, #32]
 800a4b0:	e78f      	b.n	800a3d2 <_dtoa_r+0x41a>
 800a4b2:	9903      	ldr	r1, [sp, #12]
 800a4b4:	4b29      	ldr	r3, [pc, #164]	; (800a55c <_dtoa_r+0x5a4>)
 800a4b6:	4421      	add	r1, r4
 800a4b8:	9112      	str	r1, [sp, #72]	; 0x48
 800a4ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a4c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4c8:	2900      	cmp	r1, #0
 800a4ca:	d055      	beq.n	800a578 <_dtoa_r+0x5c0>
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	4929      	ldr	r1, [pc, #164]	; (800a574 <_dtoa_r+0x5bc>)
 800a4d0:	f7f6 f998 	bl	8000804 <__aeabi_ddiv>
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	4632      	mov	r2, r6
 800a4d8:	f7f5 feb2 	bl	8000240 <__aeabi_dsub>
 800a4dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4e0:	9f03      	ldr	r7, [sp, #12]
 800a4e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4e6:	f7f6 fb13 	bl	8000b10 <__aeabi_d2iz>
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	f7f5 fff6 	bl	80004dc <__aeabi_i2d>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4f8:	f7f5 fea2 	bl	8000240 <__aeabi_dsub>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	3430      	adds	r4, #48	; 0x30
 800a502:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a50a:	f807 4b01 	strb.w	r4, [r7], #1
 800a50e:	f7f6 fac1 	bl	8000a94 <__aeabi_dcmplt>
 800a512:	2800      	cmp	r0, #0
 800a514:	d174      	bne.n	800a600 <_dtoa_r+0x648>
 800a516:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a51a:	2000      	movs	r0, #0
 800a51c:	4911      	ldr	r1, [pc, #68]	; (800a564 <_dtoa_r+0x5ac>)
 800a51e:	f7f5 fe8f 	bl	8000240 <__aeabi_dsub>
 800a522:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a526:	f7f6 fab5 	bl	8000a94 <__aeabi_dcmplt>
 800a52a:	2800      	cmp	r0, #0
 800a52c:	f040 80b7 	bne.w	800a69e <_dtoa_r+0x6e6>
 800a530:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a532:	429f      	cmp	r7, r3
 800a534:	f43f af7a 	beq.w	800a42c <_dtoa_r+0x474>
 800a538:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a53c:	2200      	movs	r2, #0
 800a53e:	4b0a      	ldr	r3, [pc, #40]	; (800a568 <_dtoa_r+0x5b0>)
 800a540:	f7f6 f836 	bl	80005b0 <__aeabi_dmul>
 800a544:	2200      	movs	r2, #0
 800a546:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a54a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a54e:	4b06      	ldr	r3, [pc, #24]	; (800a568 <_dtoa_r+0x5b0>)
 800a550:	f7f6 f82e 	bl	80005b0 <__aeabi_dmul>
 800a554:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a558:	e7c3      	b.n	800a4e2 <_dtoa_r+0x52a>
 800a55a:	bf00      	nop
 800a55c:	0800cc70 	.word	0x0800cc70
 800a560:	0800cc48 	.word	0x0800cc48
 800a564:	3ff00000 	.word	0x3ff00000
 800a568:	40240000 	.word	0x40240000
 800a56c:	401c0000 	.word	0x401c0000
 800a570:	40140000 	.word	0x40140000
 800a574:	3fe00000 	.word	0x3fe00000
 800a578:	4630      	mov	r0, r6
 800a57a:	4639      	mov	r1, r7
 800a57c:	f7f6 f818 	bl	80005b0 <__aeabi_dmul>
 800a580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a582:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a586:	9c03      	ldr	r4, [sp, #12]
 800a588:	9314      	str	r3, [sp, #80]	; 0x50
 800a58a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a58e:	f7f6 fabf 	bl	8000b10 <__aeabi_d2iz>
 800a592:	9015      	str	r0, [sp, #84]	; 0x54
 800a594:	f7f5 ffa2 	bl	80004dc <__aeabi_i2d>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5a0:	f7f5 fe4e 	bl	8000240 <__aeabi_dsub>
 800a5a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	3330      	adds	r3, #48	; 0x30
 800a5aa:	f804 3b01 	strb.w	r3, [r4], #1
 800a5ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5b0:	460f      	mov	r7, r1
 800a5b2:	429c      	cmp	r4, r3
 800a5b4:	f04f 0200 	mov.w	r2, #0
 800a5b8:	d124      	bne.n	800a604 <_dtoa_r+0x64c>
 800a5ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5be:	4bb0      	ldr	r3, [pc, #704]	; (800a880 <_dtoa_r+0x8c8>)
 800a5c0:	f7f5 fe40 	bl	8000244 <__adddf3>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	4639      	mov	r1, r7
 800a5cc:	f7f6 fa80 	bl	8000ad0 <__aeabi_dcmpgt>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d163      	bne.n	800a69c <_dtoa_r+0x6e4>
 800a5d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5d8:	2000      	movs	r0, #0
 800a5da:	49a9      	ldr	r1, [pc, #676]	; (800a880 <_dtoa_r+0x8c8>)
 800a5dc:	f7f5 fe30 	bl	8000240 <__aeabi_dsub>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7f6 fa54 	bl	8000a94 <__aeabi_dcmplt>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	f43f af1d 	beq.w	800a42c <_dtoa_r+0x474>
 800a5f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a5f4:	1e7b      	subs	r3, r7, #1
 800a5f6:	9314      	str	r3, [sp, #80]	; 0x50
 800a5f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a5fc:	2b30      	cmp	r3, #48	; 0x30
 800a5fe:	d0f8      	beq.n	800a5f2 <_dtoa_r+0x63a>
 800a600:	46c2      	mov	sl, r8
 800a602:	e03b      	b.n	800a67c <_dtoa_r+0x6c4>
 800a604:	4b9f      	ldr	r3, [pc, #636]	; (800a884 <_dtoa_r+0x8cc>)
 800a606:	f7f5 ffd3 	bl	80005b0 <__aeabi_dmul>
 800a60a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a60e:	e7bc      	b.n	800a58a <_dtoa_r+0x5d2>
 800a610:	9f03      	ldr	r7, [sp, #12]
 800a612:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a616:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a61a:	4640      	mov	r0, r8
 800a61c:	4649      	mov	r1, r9
 800a61e:	f7f6 f8f1 	bl	8000804 <__aeabi_ddiv>
 800a622:	f7f6 fa75 	bl	8000b10 <__aeabi_d2iz>
 800a626:	4604      	mov	r4, r0
 800a628:	f7f5 ff58 	bl	80004dc <__aeabi_i2d>
 800a62c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a630:	f7f5 ffbe 	bl	80005b0 <__aeabi_dmul>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4640      	mov	r0, r8
 800a63a:	4649      	mov	r1, r9
 800a63c:	f7f5 fe00 	bl	8000240 <__aeabi_dsub>
 800a640:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a644:	f807 6b01 	strb.w	r6, [r7], #1
 800a648:	9e03      	ldr	r6, [sp, #12]
 800a64a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a64e:	1bbe      	subs	r6, r7, r6
 800a650:	45b4      	cmp	ip, r6
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	d136      	bne.n	800a6c6 <_dtoa_r+0x70e>
 800a658:	f7f5 fdf4 	bl	8000244 <__adddf3>
 800a65c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a660:	4680      	mov	r8, r0
 800a662:	4689      	mov	r9, r1
 800a664:	f7f6 fa34 	bl	8000ad0 <__aeabi_dcmpgt>
 800a668:	bb58      	cbnz	r0, 800a6c2 <_dtoa_r+0x70a>
 800a66a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a66e:	4640      	mov	r0, r8
 800a670:	4649      	mov	r1, r9
 800a672:	f7f6 fa05 	bl	8000a80 <__aeabi_dcmpeq>
 800a676:	b108      	cbz	r0, 800a67c <_dtoa_r+0x6c4>
 800a678:	07e1      	lsls	r1, r4, #31
 800a67a:	d422      	bmi.n	800a6c2 <_dtoa_r+0x70a>
 800a67c:	4628      	mov	r0, r5
 800a67e:	4659      	mov	r1, fp
 800a680:	f000 fae2 	bl	800ac48 <_Bfree>
 800a684:	2300      	movs	r3, #0
 800a686:	703b      	strb	r3, [r7, #0]
 800a688:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a68a:	f10a 0001 	add.w	r0, sl, #1
 800a68e:	6018      	str	r0, [r3, #0]
 800a690:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a692:	2b00      	cmp	r3, #0
 800a694:	f43f acde 	beq.w	800a054 <_dtoa_r+0x9c>
 800a698:	601f      	str	r7, [r3, #0]
 800a69a:	e4db      	b.n	800a054 <_dtoa_r+0x9c>
 800a69c:	4627      	mov	r7, r4
 800a69e:	463b      	mov	r3, r7
 800a6a0:	461f      	mov	r7, r3
 800a6a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6a6:	2a39      	cmp	r2, #57	; 0x39
 800a6a8:	d107      	bne.n	800a6ba <_dtoa_r+0x702>
 800a6aa:	9a03      	ldr	r2, [sp, #12]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d1f7      	bne.n	800a6a0 <_dtoa_r+0x6e8>
 800a6b0:	2230      	movs	r2, #48	; 0x30
 800a6b2:	9903      	ldr	r1, [sp, #12]
 800a6b4:	f108 0801 	add.w	r8, r8, #1
 800a6b8:	700a      	strb	r2, [r1, #0]
 800a6ba:	781a      	ldrb	r2, [r3, #0]
 800a6bc:	3201      	adds	r2, #1
 800a6be:	701a      	strb	r2, [r3, #0]
 800a6c0:	e79e      	b.n	800a600 <_dtoa_r+0x648>
 800a6c2:	46d0      	mov	r8, sl
 800a6c4:	e7eb      	b.n	800a69e <_dtoa_r+0x6e6>
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	4b6e      	ldr	r3, [pc, #440]	; (800a884 <_dtoa_r+0x8cc>)
 800a6ca:	f7f5 ff71 	bl	80005b0 <__aeabi_dmul>
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	4680      	mov	r8, r0
 800a6d4:	4689      	mov	r9, r1
 800a6d6:	f7f6 f9d3 	bl	8000a80 <__aeabi_dcmpeq>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d09b      	beq.n	800a616 <_dtoa_r+0x65e>
 800a6de:	e7cd      	b.n	800a67c <_dtoa_r+0x6c4>
 800a6e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6e2:	2a00      	cmp	r2, #0
 800a6e4:	f000 80d0 	beq.w	800a888 <_dtoa_r+0x8d0>
 800a6e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a6ea:	2a01      	cmp	r2, #1
 800a6ec:	f300 80ae 	bgt.w	800a84c <_dtoa_r+0x894>
 800a6f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6f2:	2a00      	cmp	r2, #0
 800a6f4:	f000 80a6 	beq.w	800a844 <_dtoa_r+0x88c>
 800a6f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a6fe:	9f06      	ldr	r7, [sp, #24]
 800a700:	9a06      	ldr	r2, [sp, #24]
 800a702:	2101      	movs	r1, #1
 800a704:	441a      	add	r2, r3
 800a706:	9206      	str	r2, [sp, #24]
 800a708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a70a:	4628      	mov	r0, r5
 800a70c:	441a      	add	r2, r3
 800a70e:	9209      	str	r2, [sp, #36]	; 0x24
 800a710:	f000 fb50 	bl	800adb4 <__i2b>
 800a714:	4606      	mov	r6, r0
 800a716:	2f00      	cmp	r7, #0
 800a718:	dd0c      	ble.n	800a734 <_dtoa_r+0x77c>
 800a71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	dd09      	ble.n	800a734 <_dtoa_r+0x77c>
 800a720:	42bb      	cmp	r3, r7
 800a722:	bfa8      	it	ge
 800a724:	463b      	movge	r3, r7
 800a726:	9a06      	ldr	r2, [sp, #24]
 800a728:	1aff      	subs	r7, r7, r3
 800a72a:	1ad2      	subs	r2, r2, r3
 800a72c:	9206      	str	r2, [sp, #24]
 800a72e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	9309      	str	r3, [sp, #36]	; 0x24
 800a734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a736:	b1f3      	cbz	r3, 800a776 <_dtoa_r+0x7be>
 800a738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 80a8 	beq.w	800a890 <_dtoa_r+0x8d8>
 800a740:	2c00      	cmp	r4, #0
 800a742:	dd10      	ble.n	800a766 <_dtoa_r+0x7ae>
 800a744:	4631      	mov	r1, r6
 800a746:	4622      	mov	r2, r4
 800a748:	4628      	mov	r0, r5
 800a74a:	f000 fbf1 	bl	800af30 <__pow5mult>
 800a74e:	465a      	mov	r2, fp
 800a750:	4601      	mov	r1, r0
 800a752:	4606      	mov	r6, r0
 800a754:	4628      	mov	r0, r5
 800a756:	f000 fb43 	bl	800ade0 <__multiply>
 800a75a:	4680      	mov	r8, r0
 800a75c:	4659      	mov	r1, fp
 800a75e:	4628      	mov	r0, r5
 800a760:	f000 fa72 	bl	800ac48 <_Bfree>
 800a764:	46c3      	mov	fp, r8
 800a766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a768:	1b1a      	subs	r2, r3, r4
 800a76a:	d004      	beq.n	800a776 <_dtoa_r+0x7be>
 800a76c:	4659      	mov	r1, fp
 800a76e:	4628      	mov	r0, r5
 800a770:	f000 fbde 	bl	800af30 <__pow5mult>
 800a774:	4683      	mov	fp, r0
 800a776:	2101      	movs	r1, #1
 800a778:	4628      	mov	r0, r5
 800a77a:	f000 fb1b 	bl	800adb4 <__i2b>
 800a77e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a780:	4604      	mov	r4, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	f340 8086 	ble.w	800a894 <_dtoa_r+0x8dc>
 800a788:	461a      	mov	r2, r3
 800a78a:	4601      	mov	r1, r0
 800a78c:	4628      	mov	r0, r5
 800a78e:	f000 fbcf 	bl	800af30 <__pow5mult>
 800a792:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a794:	4604      	mov	r4, r0
 800a796:	2b01      	cmp	r3, #1
 800a798:	dd7f      	ble.n	800a89a <_dtoa_r+0x8e2>
 800a79a:	f04f 0800 	mov.w	r8, #0
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7a4:	6918      	ldr	r0, [r3, #16]
 800a7a6:	f000 fab7 	bl	800ad18 <__hi0bits>
 800a7aa:	f1c0 0020 	rsb	r0, r0, #32
 800a7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b0:	4418      	add	r0, r3
 800a7b2:	f010 001f 	ands.w	r0, r0, #31
 800a7b6:	f000 8092 	beq.w	800a8de <_dtoa_r+0x926>
 800a7ba:	f1c0 0320 	rsb	r3, r0, #32
 800a7be:	2b04      	cmp	r3, #4
 800a7c0:	f340 808a 	ble.w	800a8d8 <_dtoa_r+0x920>
 800a7c4:	f1c0 001c 	rsb	r0, r0, #28
 800a7c8:	9b06      	ldr	r3, [sp, #24]
 800a7ca:	4407      	add	r7, r0
 800a7cc:	4403      	add	r3, r0
 800a7ce:	9306      	str	r3, [sp, #24]
 800a7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d2:	4403      	add	r3, r0
 800a7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7d6:	9b06      	ldr	r3, [sp, #24]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dd05      	ble.n	800a7e8 <_dtoa_r+0x830>
 800a7dc:	4659      	mov	r1, fp
 800a7de:	461a      	mov	r2, r3
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	f000 fbff 	bl	800afe4 <__lshift>
 800a7e6:	4683      	mov	fp, r0
 800a7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	dd05      	ble.n	800a7fa <_dtoa_r+0x842>
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	f000 fbf6 	bl	800afe4 <__lshift>
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d070      	beq.n	800a8e2 <_dtoa_r+0x92a>
 800a800:	4621      	mov	r1, r4
 800a802:	4658      	mov	r0, fp
 800a804:	f000 fc5e 	bl	800b0c4 <__mcmp>
 800a808:	2800      	cmp	r0, #0
 800a80a:	da6a      	bge.n	800a8e2 <_dtoa_r+0x92a>
 800a80c:	2300      	movs	r3, #0
 800a80e:	4659      	mov	r1, fp
 800a810:	220a      	movs	r2, #10
 800a812:	4628      	mov	r0, r5
 800a814:	f000 fa3a 	bl	800ac8c <__multadd>
 800a818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a81a:	4683      	mov	fp, r0
 800a81c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 8194 	beq.w	800ab4e <_dtoa_r+0xb96>
 800a826:	4631      	mov	r1, r6
 800a828:	2300      	movs	r3, #0
 800a82a:	220a      	movs	r2, #10
 800a82c:	4628      	mov	r0, r5
 800a82e:	f000 fa2d 	bl	800ac8c <__multadd>
 800a832:	f1b9 0f00 	cmp.w	r9, #0
 800a836:	4606      	mov	r6, r0
 800a838:	f300 8093 	bgt.w	800a962 <_dtoa_r+0x9aa>
 800a83c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a83e:	2b02      	cmp	r3, #2
 800a840:	dc57      	bgt.n	800a8f2 <_dtoa_r+0x93a>
 800a842:	e08e      	b.n	800a962 <_dtoa_r+0x9aa>
 800a844:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a84a:	e757      	b.n	800a6fc <_dtoa_r+0x744>
 800a84c:	9b08      	ldr	r3, [sp, #32]
 800a84e:	1e5c      	subs	r4, r3, #1
 800a850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a852:	42a3      	cmp	r3, r4
 800a854:	bfb7      	itett	lt
 800a856:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a858:	1b1c      	subge	r4, r3, r4
 800a85a:	1ae2      	sublt	r2, r4, r3
 800a85c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a85e:	bfbe      	ittt	lt
 800a860:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a862:	189b      	addlt	r3, r3, r2
 800a864:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a866:	9b08      	ldr	r3, [sp, #32]
 800a868:	bfb8      	it	lt
 800a86a:	2400      	movlt	r4, #0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	bfbb      	ittet	lt
 800a870:	9b06      	ldrlt	r3, [sp, #24]
 800a872:	9a08      	ldrlt	r2, [sp, #32]
 800a874:	9f06      	ldrge	r7, [sp, #24]
 800a876:	1a9f      	sublt	r7, r3, r2
 800a878:	bfac      	ite	ge
 800a87a:	9b08      	ldrge	r3, [sp, #32]
 800a87c:	2300      	movlt	r3, #0
 800a87e:	e73f      	b.n	800a700 <_dtoa_r+0x748>
 800a880:	3fe00000 	.word	0x3fe00000
 800a884:	40240000 	.word	0x40240000
 800a888:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a88a:	9f06      	ldr	r7, [sp, #24]
 800a88c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a88e:	e742      	b.n	800a716 <_dtoa_r+0x75e>
 800a890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a892:	e76b      	b.n	800a76c <_dtoa_r+0x7b4>
 800a894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a896:	2b01      	cmp	r3, #1
 800a898:	dc19      	bgt.n	800a8ce <_dtoa_r+0x916>
 800a89a:	9b04      	ldr	r3, [sp, #16]
 800a89c:	b9bb      	cbnz	r3, 800a8ce <_dtoa_r+0x916>
 800a89e:	9b05      	ldr	r3, [sp, #20]
 800a8a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8a4:	b99b      	cbnz	r3, 800a8ce <_dtoa_r+0x916>
 800a8a6:	9b05      	ldr	r3, [sp, #20]
 800a8a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8ac:	0d1b      	lsrs	r3, r3, #20
 800a8ae:	051b      	lsls	r3, r3, #20
 800a8b0:	b183      	cbz	r3, 800a8d4 <_dtoa_r+0x91c>
 800a8b2:	f04f 0801 	mov.w	r8, #1
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	9306      	str	r3, [sp, #24]
 800a8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8be:	3301      	adds	r3, #1
 800a8c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f47f af6a 	bne.w	800a79e <_dtoa_r+0x7e6>
 800a8ca:	2001      	movs	r0, #1
 800a8cc:	e76f      	b.n	800a7ae <_dtoa_r+0x7f6>
 800a8ce:	f04f 0800 	mov.w	r8, #0
 800a8d2:	e7f6      	b.n	800a8c2 <_dtoa_r+0x90a>
 800a8d4:	4698      	mov	r8, r3
 800a8d6:	e7f4      	b.n	800a8c2 <_dtoa_r+0x90a>
 800a8d8:	f43f af7d 	beq.w	800a7d6 <_dtoa_r+0x81e>
 800a8dc:	4618      	mov	r0, r3
 800a8de:	301c      	adds	r0, #28
 800a8e0:	e772      	b.n	800a7c8 <_dtoa_r+0x810>
 800a8e2:	9b08      	ldr	r3, [sp, #32]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	dc36      	bgt.n	800a956 <_dtoa_r+0x99e>
 800a8e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	dd33      	ble.n	800a956 <_dtoa_r+0x99e>
 800a8ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8f2:	f1b9 0f00 	cmp.w	r9, #0
 800a8f6:	d10d      	bne.n	800a914 <_dtoa_r+0x95c>
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	464b      	mov	r3, r9
 800a8fc:	2205      	movs	r2, #5
 800a8fe:	4628      	mov	r0, r5
 800a900:	f000 f9c4 	bl	800ac8c <__multadd>
 800a904:	4601      	mov	r1, r0
 800a906:	4604      	mov	r4, r0
 800a908:	4658      	mov	r0, fp
 800a90a:	f000 fbdb 	bl	800b0c4 <__mcmp>
 800a90e:	2800      	cmp	r0, #0
 800a910:	f73f adb8 	bgt.w	800a484 <_dtoa_r+0x4cc>
 800a914:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a916:	9f03      	ldr	r7, [sp, #12]
 800a918:	ea6f 0a03 	mvn.w	sl, r3
 800a91c:	f04f 0800 	mov.w	r8, #0
 800a920:	4621      	mov	r1, r4
 800a922:	4628      	mov	r0, r5
 800a924:	f000 f990 	bl	800ac48 <_Bfree>
 800a928:	2e00      	cmp	r6, #0
 800a92a:	f43f aea7 	beq.w	800a67c <_dtoa_r+0x6c4>
 800a92e:	f1b8 0f00 	cmp.w	r8, #0
 800a932:	d005      	beq.n	800a940 <_dtoa_r+0x988>
 800a934:	45b0      	cmp	r8, r6
 800a936:	d003      	beq.n	800a940 <_dtoa_r+0x988>
 800a938:	4641      	mov	r1, r8
 800a93a:	4628      	mov	r0, r5
 800a93c:	f000 f984 	bl	800ac48 <_Bfree>
 800a940:	4631      	mov	r1, r6
 800a942:	4628      	mov	r0, r5
 800a944:	f000 f980 	bl	800ac48 <_Bfree>
 800a948:	e698      	b.n	800a67c <_dtoa_r+0x6c4>
 800a94a:	2400      	movs	r4, #0
 800a94c:	4626      	mov	r6, r4
 800a94e:	e7e1      	b.n	800a914 <_dtoa_r+0x95c>
 800a950:	46c2      	mov	sl, r8
 800a952:	4626      	mov	r6, r4
 800a954:	e596      	b.n	800a484 <_dtoa_r+0x4cc>
 800a956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 80fd 	beq.w	800ab5c <_dtoa_r+0xba4>
 800a962:	2f00      	cmp	r7, #0
 800a964:	dd05      	ble.n	800a972 <_dtoa_r+0x9ba>
 800a966:	4631      	mov	r1, r6
 800a968:	463a      	mov	r2, r7
 800a96a:	4628      	mov	r0, r5
 800a96c:	f000 fb3a 	bl	800afe4 <__lshift>
 800a970:	4606      	mov	r6, r0
 800a972:	f1b8 0f00 	cmp.w	r8, #0
 800a976:	d05c      	beq.n	800aa32 <_dtoa_r+0xa7a>
 800a978:	4628      	mov	r0, r5
 800a97a:	6871      	ldr	r1, [r6, #4]
 800a97c:	f000 f924 	bl	800abc8 <_Balloc>
 800a980:	4607      	mov	r7, r0
 800a982:	b928      	cbnz	r0, 800a990 <_dtoa_r+0x9d8>
 800a984:	4602      	mov	r2, r0
 800a986:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a98a:	4b7f      	ldr	r3, [pc, #508]	; (800ab88 <_dtoa_r+0xbd0>)
 800a98c:	f7ff bb28 	b.w	8009fe0 <_dtoa_r+0x28>
 800a990:	6932      	ldr	r2, [r6, #16]
 800a992:	f106 010c 	add.w	r1, r6, #12
 800a996:	3202      	adds	r2, #2
 800a998:	0092      	lsls	r2, r2, #2
 800a99a:	300c      	adds	r0, #12
 800a99c:	f7fe fde8 	bl	8009570 <memcpy>
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f000 fb1d 	bl	800afe4 <__lshift>
 800a9aa:	46b0      	mov	r8, r6
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	9308      	str	r3, [sp, #32]
 800a9b4:	9b03      	ldr	r3, [sp, #12]
 800a9b6:	444b      	add	r3, r9
 800a9b8:	930a      	str	r3, [sp, #40]	; 0x28
 800a9ba:	9b04      	ldr	r3, [sp, #16]
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c2:	9b08      	ldr	r3, [sp, #32]
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	4658      	mov	r0, fp
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	f7ff fa66 	bl	8009e9c <quorem>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	4641      	mov	r1, r8
 800a9d4:	3330      	adds	r3, #48	; 0x30
 800a9d6:	9006      	str	r0, [sp, #24]
 800a9d8:	4658      	mov	r0, fp
 800a9da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9dc:	f000 fb72 	bl	800b0c4 <__mcmp>
 800a9e0:	4632      	mov	r2, r6
 800a9e2:	4681      	mov	r9, r0
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f000 fb88 	bl	800b0fc <__mdiff>
 800a9ec:	68c2      	ldr	r2, [r0, #12]
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9f2:	bb02      	cbnz	r2, 800aa36 <_dtoa_r+0xa7e>
 800a9f4:	4601      	mov	r1, r0
 800a9f6:	4658      	mov	r0, fp
 800a9f8:	f000 fb64 	bl	800b0c4 <__mcmp>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa00:	4639      	mov	r1, r7
 800aa02:	4628      	mov	r0, r5
 800aa04:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800aa08:	f000 f91e 	bl	800ac48 <_Bfree>
 800aa0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa10:	9f08      	ldr	r7, [sp, #32]
 800aa12:	ea43 0102 	orr.w	r1, r3, r2
 800aa16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa18:	430b      	orrs	r3, r1
 800aa1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa1c:	d10d      	bne.n	800aa3a <_dtoa_r+0xa82>
 800aa1e:	2b39      	cmp	r3, #57	; 0x39
 800aa20:	d029      	beq.n	800aa76 <_dtoa_r+0xabe>
 800aa22:	f1b9 0f00 	cmp.w	r9, #0
 800aa26:	dd01      	ble.n	800aa2c <_dtoa_r+0xa74>
 800aa28:	9b06      	ldr	r3, [sp, #24]
 800aa2a:	3331      	adds	r3, #49	; 0x31
 800aa2c:	9a04      	ldr	r2, [sp, #16]
 800aa2e:	7013      	strb	r3, [r2, #0]
 800aa30:	e776      	b.n	800a920 <_dtoa_r+0x968>
 800aa32:	4630      	mov	r0, r6
 800aa34:	e7b9      	b.n	800a9aa <_dtoa_r+0x9f2>
 800aa36:	2201      	movs	r2, #1
 800aa38:	e7e2      	b.n	800aa00 <_dtoa_r+0xa48>
 800aa3a:	f1b9 0f00 	cmp.w	r9, #0
 800aa3e:	db06      	blt.n	800aa4e <_dtoa_r+0xa96>
 800aa40:	9922      	ldr	r1, [sp, #136]	; 0x88
 800aa42:	ea41 0909 	orr.w	r9, r1, r9
 800aa46:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa48:	ea59 0101 	orrs.w	r1, r9, r1
 800aa4c:	d120      	bne.n	800aa90 <_dtoa_r+0xad8>
 800aa4e:	2a00      	cmp	r2, #0
 800aa50:	ddec      	ble.n	800aa2c <_dtoa_r+0xa74>
 800aa52:	4659      	mov	r1, fp
 800aa54:	2201      	movs	r2, #1
 800aa56:	4628      	mov	r0, r5
 800aa58:	9308      	str	r3, [sp, #32]
 800aa5a:	f000 fac3 	bl	800afe4 <__lshift>
 800aa5e:	4621      	mov	r1, r4
 800aa60:	4683      	mov	fp, r0
 800aa62:	f000 fb2f 	bl	800b0c4 <__mcmp>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	9b08      	ldr	r3, [sp, #32]
 800aa6a:	dc02      	bgt.n	800aa72 <_dtoa_r+0xaba>
 800aa6c:	d1de      	bne.n	800aa2c <_dtoa_r+0xa74>
 800aa6e:	07da      	lsls	r2, r3, #31
 800aa70:	d5dc      	bpl.n	800aa2c <_dtoa_r+0xa74>
 800aa72:	2b39      	cmp	r3, #57	; 0x39
 800aa74:	d1d8      	bne.n	800aa28 <_dtoa_r+0xa70>
 800aa76:	2339      	movs	r3, #57	; 0x39
 800aa78:	9a04      	ldr	r2, [sp, #16]
 800aa7a:	7013      	strb	r3, [r2, #0]
 800aa7c:	463b      	mov	r3, r7
 800aa7e:	461f      	mov	r7, r3
 800aa80:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	2a39      	cmp	r2, #57	; 0x39
 800aa88:	d050      	beq.n	800ab2c <_dtoa_r+0xb74>
 800aa8a:	3201      	adds	r2, #1
 800aa8c:	701a      	strb	r2, [r3, #0]
 800aa8e:	e747      	b.n	800a920 <_dtoa_r+0x968>
 800aa90:	2a00      	cmp	r2, #0
 800aa92:	dd03      	ble.n	800aa9c <_dtoa_r+0xae4>
 800aa94:	2b39      	cmp	r3, #57	; 0x39
 800aa96:	d0ee      	beq.n	800aa76 <_dtoa_r+0xabe>
 800aa98:	3301      	adds	r3, #1
 800aa9a:	e7c7      	b.n	800aa2c <_dtoa_r+0xa74>
 800aa9c:	9a08      	ldr	r2, [sp, #32]
 800aa9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aaa0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aaa4:	428a      	cmp	r2, r1
 800aaa6:	d02a      	beq.n	800aafe <_dtoa_r+0xb46>
 800aaa8:	4659      	mov	r1, fp
 800aaaa:	2300      	movs	r3, #0
 800aaac:	220a      	movs	r2, #10
 800aaae:	4628      	mov	r0, r5
 800aab0:	f000 f8ec 	bl	800ac8c <__multadd>
 800aab4:	45b0      	cmp	r8, r6
 800aab6:	4683      	mov	fp, r0
 800aab8:	f04f 0300 	mov.w	r3, #0
 800aabc:	f04f 020a 	mov.w	r2, #10
 800aac0:	4641      	mov	r1, r8
 800aac2:	4628      	mov	r0, r5
 800aac4:	d107      	bne.n	800aad6 <_dtoa_r+0xb1e>
 800aac6:	f000 f8e1 	bl	800ac8c <__multadd>
 800aaca:	4680      	mov	r8, r0
 800aacc:	4606      	mov	r6, r0
 800aace:	9b08      	ldr	r3, [sp, #32]
 800aad0:	3301      	adds	r3, #1
 800aad2:	9308      	str	r3, [sp, #32]
 800aad4:	e775      	b.n	800a9c2 <_dtoa_r+0xa0a>
 800aad6:	f000 f8d9 	bl	800ac8c <__multadd>
 800aada:	4631      	mov	r1, r6
 800aadc:	4680      	mov	r8, r0
 800aade:	2300      	movs	r3, #0
 800aae0:	220a      	movs	r2, #10
 800aae2:	4628      	mov	r0, r5
 800aae4:	f000 f8d2 	bl	800ac8c <__multadd>
 800aae8:	4606      	mov	r6, r0
 800aaea:	e7f0      	b.n	800aace <_dtoa_r+0xb16>
 800aaec:	f1b9 0f00 	cmp.w	r9, #0
 800aaf0:	bfcc      	ite	gt
 800aaf2:	464f      	movgt	r7, r9
 800aaf4:	2701      	movle	r7, #1
 800aaf6:	f04f 0800 	mov.w	r8, #0
 800aafa:	9a03      	ldr	r2, [sp, #12]
 800aafc:	4417      	add	r7, r2
 800aafe:	4659      	mov	r1, fp
 800ab00:	2201      	movs	r2, #1
 800ab02:	4628      	mov	r0, r5
 800ab04:	9308      	str	r3, [sp, #32]
 800ab06:	f000 fa6d 	bl	800afe4 <__lshift>
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	4683      	mov	fp, r0
 800ab0e:	f000 fad9 	bl	800b0c4 <__mcmp>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	dcb2      	bgt.n	800aa7c <_dtoa_r+0xac4>
 800ab16:	d102      	bne.n	800ab1e <_dtoa_r+0xb66>
 800ab18:	9b08      	ldr	r3, [sp, #32]
 800ab1a:	07db      	lsls	r3, r3, #31
 800ab1c:	d4ae      	bmi.n	800aa7c <_dtoa_r+0xac4>
 800ab1e:	463b      	mov	r3, r7
 800ab20:	461f      	mov	r7, r3
 800ab22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab26:	2a30      	cmp	r2, #48	; 0x30
 800ab28:	d0fa      	beq.n	800ab20 <_dtoa_r+0xb68>
 800ab2a:	e6f9      	b.n	800a920 <_dtoa_r+0x968>
 800ab2c:	9a03      	ldr	r2, [sp, #12]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d1a5      	bne.n	800aa7e <_dtoa_r+0xac6>
 800ab32:	2331      	movs	r3, #49	; 0x31
 800ab34:	f10a 0a01 	add.w	sl, sl, #1
 800ab38:	e779      	b.n	800aa2e <_dtoa_r+0xa76>
 800ab3a:	4b14      	ldr	r3, [pc, #80]	; (800ab8c <_dtoa_r+0xbd4>)
 800ab3c:	f7ff baa8 	b.w	800a090 <_dtoa_r+0xd8>
 800ab40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f47f aa81 	bne.w	800a04a <_dtoa_r+0x92>
 800ab48:	4b11      	ldr	r3, [pc, #68]	; (800ab90 <_dtoa_r+0xbd8>)
 800ab4a:	f7ff baa1 	b.w	800a090 <_dtoa_r+0xd8>
 800ab4e:	f1b9 0f00 	cmp.w	r9, #0
 800ab52:	dc03      	bgt.n	800ab5c <_dtoa_r+0xba4>
 800ab54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	f73f aecb 	bgt.w	800a8f2 <_dtoa_r+0x93a>
 800ab5c:	9f03      	ldr	r7, [sp, #12]
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4658      	mov	r0, fp
 800ab62:	f7ff f99b 	bl	8009e9c <quorem>
 800ab66:	9a03      	ldr	r2, [sp, #12]
 800ab68:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab6c:	f807 3b01 	strb.w	r3, [r7], #1
 800ab70:	1aba      	subs	r2, r7, r2
 800ab72:	4591      	cmp	r9, r2
 800ab74:	ddba      	ble.n	800aaec <_dtoa_r+0xb34>
 800ab76:	4659      	mov	r1, fp
 800ab78:	2300      	movs	r3, #0
 800ab7a:	220a      	movs	r2, #10
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	f000 f885 	bl	800ac8c <__multadd>
 800ab82:	4683      	mov	fp, r0
 800ab84:	e7eb      	b.n	800ab5e <_dtoa_r+0xba6>
 800ab86:	bf00      	nop
 800ab88:	0800cbdb 	.word	0x0800cbdb
 800ab8c:	0800cb38 	.word	0x0800cb38
 800ab90:	0800cb5c 	.word	0x0800cb5c

0800ab94 <_localeconv_r>:
 800ab94:	4800      	ldr	r0, [pc, #0]	; (800ab98 <_localeconv_r+0x4>)
 800ab96:	4770      	bx	lr
 800ab98:	2000019c 	.word	0x2000019c

0800ab9c <malloc>:
 800ab9c:	4b02      	ldr	r3, [pc, #8]	; (800aba8 <malloc+0xc>)
 800ab9e:	4601      	mov	r1, r0
 800aba0:	6818      	ldr	r0, [r3, #0]
 800aba2:	f000 bc0f 	b.w	800b3c4 <_malloc_r>
 800aba6:	bf00      	nop
 800aba8:	20000048 	.word	0x20000048

0800abac <memchr>:
 800abac:	4603      	mov	r3, r0
 800abae:	b510      	push	{r4, lr}
 800abb0:	b2c9      	uxtb	r1, r1
 800abb2:	4402      	add	r2, r0
 800abb4:	4293      	cmp	r3, r2
 800abb6:	4618      	mov	r0, r3
 800abb8:	d101      	bne.n	800abbe <memchr+0x12>
 800abba:	2000      	movs	r0, #0
 800abbc:	e003      	b.n	800abc6 <memchr+0x1a>
 800abbe:	7804      	ldrb	r4, [r0, #0]
 800abc0:	3301      	adds	r3, #1
 800abc2:	428c      	cmp	r4, r1
 800abc4:	d1f6      	bne.n	800abb4 <memchr+0x8>
 800abc6:	bd10      	pop	{r4, pc}

0800abc8 <_Balloc>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abcc:	4604      	mov	r4, r0
 800abce:	460d      	mov	r5, r1
 800abd0:	b976      	cbnz	r6, 800abf0 <_Balloc+0x28>
 800abd2:	2010      	movs	r0, #16
 800abd4:	f7ff ffe2 	bl	800ab9c <malloc>
 800abd8:	4602      	mov	r2, r0
 800abda:	6260      	str	r0, [r4, #36]	; 0x24
 800abdc:	b920      	cbnz	r0, 800abe8 <_Balloc+0x20>
 800abde:	2166      	movs	r1, #102	; 0x66
 800abe0:	4b17      	ldr	r3, [pc, #92]	; (800ac40 <_Balloc+0x78>)
 800abe2:	4818      	ldr	r0, [pc, #96]	; (800ac44 <_Balloc+0x7c>)
 800abe4:	f000 fdce 	bl	800b784 <__assert_func>
 800abe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abec:	6006      	str	r6, [r0, #0]
 800abee:	60c6      	str	r6, [r0, #12]
 800abf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800abf2:	68f3      	ldr	r3, [r6, #12]
 800abf4:	b183      	cbz	r3, 800ac18 <_Balloc+0x50>
 800abf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abfe:	b9b8      	cbnz	r0, 800ac30 <_Balloc+0x68>
 800ac00:	2101      	movs	r1, #1
 800ac02:	fa01 f605 	lsl.w	r6, r1, r5
 800ac06:	1d72      	adds	r2, r6, #5
 800ac08:	4620      	mov	r0, r4
 800ac0a:	0092      	lsls	r2, r2, #2
 800ac0c:	f000 fb5e 	bl	800b2cc <_calloc_r>
 800ac10:	b160      	cbz	r0, 800ac2c <_Balloc+0x64>
 800ac12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac16:	e00e      	b.n	800ac36 <_Balloc+0x6e>
 800ac18:	2221      	movs	r2, #33	; 0x21
 800ac1a:	2104      	movs	r1, #4
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fb55 	bl	800b2cc <_calloc_r>
 800ac22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac24:	60f0      	str	r0, [r6, #12]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1e4      	bne.n	800abf6 <_Balloc+0x2e>
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}
 800ac30:	6802      	ldr	r2, [r0, #0]
 800ac32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac36:	2300      	movs	r3, #0
 800ac38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac3c:	e7f7      	b.n	800ac2e <_Balloc+0x66>
 800ac3e:	bf00      	nop
 800ac40:	0800cb69 	.word	0x0800cb69
 800ac44:	0800cbec 	.word	0x0800cbec

0800ac48 <_Bfree>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	460c      	mov	r4, r1
 800ac50:	b976      	cbnz	r6, 800ac70 <_Bfree+0x28>
 800ac52:	2010      	movs	r0, #16
 800ac54:	f7ff ffa2 	bl	800ab9c <malloc>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	6268      	str	r0, [r5, #36]	; 0x24
 800ac5c:	b920      	cbnz	r0, 800ac68 <_Bfree+0x20>
 800ac5e:	218a      	movs	r1, #138	; 0x8a
 800ac60:	4b08      	ldr	r3, [pc, #32]	; (800ac84 <_Bfree+0x3c>)
 800ac62:	4809      	ldr	r0, [pc, #36]	; (800ac88 <_Bfree+0x40>)
 800ac64:	f000 fd8e 	bl	800b784 <__assert_func>
 800ac68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac6c:	6006      	str	r6, [r0, #0]
 800ac6e:	60c6      	str	r6, [r0, #12]
 800ac70:	b13c      	cbz	r4, 800ac82 <_Bfree+0x3a>
 800ac72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac74:	6862      	ldr	r2, [r4, #4]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac7c:	6021      	str	r1, [r4, #0]
 800ac7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac82:	bd70      	pop	{r4, r5, r6, pc}
 800ac84:	0800cb69 	.word	0x0800cb69
 800ac88:	0800cbec 	.word	0x0800cbec

0800ac8c <__multadd>:
 800ac8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac90:	4607      	mov	r7, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	461e      	mov	r6, r3
 800ac96:	2000      	movs	r0, #0
 800ac98:	690d      	ldr	r5, [r1, #16]
 800ac9a:	f101 0c14 	add.w	ip, r1, #20
 800ac9e:	f8dc 3000 	ldr.w	r3, [ip]
 800aca2:	3001      	adds	r0, #1
 800aca4:	b299      	uxth	r1, r3
 800aca6:	fb02 6101 	mla	r1, r2, r1, r6
 800acaa:	0c1e      	lsrs	r6, r3, #16
 800acac:	0c0b      	lsrs	r3, r1, #16
 800acae:	fb02 3306 	mla	r3, r2, r6, r3
 800acb2:	b289      	uxth	r1, r1
 800acb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800acb8:	4285      	cmp	r5, r0
 800acba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acbe:	f84c 1b04 	str.w	r1, [ip], #4
 800acc2:	dcec      	bgt.n	800ac9e <__multadd+0x12>
 800acc4:	b30e      	cbz	r6, 800ad0a <__multadd+0x7e>
 800acc6:	68a3      	ldr	r3, [r4, #8]
 800acc8:	42ab      	cmp	r3, r5
 800acca:	dc19      	bgt.n	800ad00 <__multadd+0x74>
 800accc:	6861      	ldr	r1, [r4, #4]
 800acce:	4638      	mov	r0, r7
 800acd0:	3101      	adds	r1, #1
 800acd2:	f7ff ff79 	bl	800abc8 <_Balloc>
 800acd6:	4680      	mov	r8, r0
 800acd8:	b928      	cbnz	r0, 800ace6 <__multadd+0x5a>
 800acda:	4602      	mov	r2, r0
 800acdc:	21b5      	movs	r1, #181	; 0xb5
 800acde:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <__multadd+0x84>)
 800ace0:	480c      	ldr	r0, [pc, #48]	; (800ad14 <__multadd+0x88>)
 800ace2:	f000 fd4f 	bl	800b784 <__assert_func>
 800ace6:	6922      	ldr	r2, [r4, #16]
 800ace8:	f104 010c 	add.w	r1, r4, #12
 800acec:	3202      	adds	r2, #2
 800acee:	0092      	lsls	r2, r2, #2
 800acf0:	300c      	adds	r0, #12
 800acf2:	f7fe fc3d 	bl	8009570 <memcpy>
 800acf6:	4621      	mov	r1, r4
 800acf8:	4638      	mov	r0, r7
 800acfa:	f7ff ffa5 	bl	800ac48 <_Bfree>
 800acfe:	4644      	mov	r4, r8
 800ad00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad04:	3501      	adds	r5, #1
 800ad06:	615e      	str	r6, [r3, #20]
 800ad08:	6125      	str	r5, [r4, #16]
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad10:	0800cbdb 	.word	0x0800cbdb
 800ad14:	0800cbec 	.word	0x0800cbec

0800ad18 <__hi0bits>:
 800ad18:	0c02      	lsrs	r2, r0, #16
 800ad1a:	0412      	lsls	r2, r2, #16
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	b9ca      	cbnz	r2, 800ad54 <__hi0bits+0x3c>
 800ad20:	0403      	lsls	r3, r0, #16
 800ad22:	2010      	movs	r0, #16
 800ad24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad28:	bf04      	itt	eq
 800ad2a:	021b      	lsleq	r3, r3, #8
 800ad2c:	3008      	addeq	r0, #8
 800ad2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad32:	bf04      	itt	eq
 800ad34:	011b      	lsleq	r3, r3, #4
 800ad36:	3004      	addeq	r0, #4
 800ad38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad3c:	bf04      	itt	eq
 800ad3e:	009b      	lsleq	r3, r3, #2
 800ad40:	3002      	addeq	r0, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	db05      	blt.n	800ad52 <__hi0bits+0x3a>
 800ad46:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ad4a:	f100 0001 	add.w	r0, r0, #1
 800ad4e:	bf08      	it	eq
 800ad50:	2020      	moveq	r0, #32
 800ad52:	4770      	bx	lr
 800ad54:	2000      	movs	r0, #0
 800ad56:	e7e5      	b.n	800ad24 <__hi0bits+0xc>

0800ad58 <__lo0bits>:
 800ad58:	6803      	ldr	r3, [r0, #0]
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	f013 0007 	ands.w	r0, r3, #7
 800ad60:	d00b      	beq.n	800ad7a <__lo0bits+0x22>
 800ad62:	07d9      	lsls	r1, r3, #31
 800ad64:	d421      	bmi.n	800adaa <__lo0bits+0x52>
 800ad66:	0798      	lsls	r0, r3, #30
 800ad68:	bf49      	itett	mi
 800ad6a:	085b      	lsrmi	r3, r3, #1
 800ad6c:	089b      	lsrpl	r3, r3, #2
 800ad6e:	2001      	movmi	r0, #1
 800ad70:	6013      	strmi	r3, [r2, #0]
 800ad72:	bf5c      	itt	pl
 800ad74:	2002      	movpl	r0, #2
 800ad76:	6013      	strpl	r3, [r2, #0]
 800ad78:	4770      	bx	lr
 800ad7a:	b299      	uxth	r1, r3
 800ad7c:	b909      	cbnz	r1, 800ad82 <__lo0bits+0x2a>
 800ad7e:	2010      	movs	r0, #16
 800ad80:	0c1b      	lsrs	r3, r3, #16
 800ad82:	b2d9      	uxtb	r1, r3
 800ad84:	b909      	cbnz	r1, 800ad8a <__lo0bits+0x32>
 800ad86:	3008      	adds	r0, #8
 800ad88:	0a1b      	lsrs	r3, r3, #8
 800ad8a:	0719      	lsls	r1, r3, #28
 800ad8c:	bf04      	itt	eq
 800ad8e:	091b      	lsreq	r3, r3, #4
 800ad90:	3004      	addeq	r0, #4
 800ad92:	0799      	lsls	r1, r3, #30
 800ad94:	bf04      	itt	eq
 800ad96:	089b      	lsreq	r3, r3, #2
 800ad98:	3002      	addeq	r0, #2
 800ad9a:	07d9      	lsls	r1, r3, #31
 800ad9c:	d403      	bmi.n	800ada6 <__lo0bits+0x4e>
 800ad9e:	085b      	lsrs	r3, r3, #1
 800ada0:	f100 0001 	add.w	r0, r0, #1
 800ada4:	d003      	beq.n	800adae <__lo0bits+0x56>
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	4770      	bx	lr
 800adaa:	2000      	movs	r0, #0
 800adac:	4770      	bx	lr
 800adae:	2020      	movs	r0, #32
 800adb0:	4770      	bx	lr
	...

0800adb4 <__i2b>:
 800adb4:	b510      	push	{r4, lr}
 800adb6:	460c      	mov	r4, r1
 800adb8:	2101      	movs	r1, #1
 800adba:	f7ff ff05 	bl	800abc8 <_Balloc>
 800adbe:	4602      	mov	r2, r0
 800adc0:	b928      	cbnz	r0, 800adce <__i2b+0x1a>
 800adc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adc6:	4b04      	ldr	r3, [pc, #16]	; (800add8 <__i2b+0x24>)
 800adc8:	4804      	ldr	r0, [pc, #16]	; (800addc <__i2b+0x28>)
 800adca:	f000 fcdb 	bl	800b784 <__assert_func>
 800adce:	2301      	movs	r3, #1
 800add0:	6144      	str	r4, [r0, #20]
 800add2:	6103      	str	r3, [r0, #16]
 800add4:	bd10      	pop	{r4, pc}
 800add6:	bf00      	nop
 800add8:	0800cbdb 	.word	0x0800cbdb
 800addc:	0800cbec 	.word	0x0800cbec

0800ade0 <__multiply>:
 800ade0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade4:	4691      	mov	r9, r2
 800ade6:	690a      	ldr	r2, [r1, #16]
 800ade8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adec:	460c      	mov	r4, r1
 800adee:	429a      	cmp	r2, r3
 800adf0:	bfbe      	ittt	lt
 800adf2:	460b      	movlt	r3, r1
 800adf4:	464c      	movlt	r4, r9
 800adf6:	4699      	movlt	r9, r3
 800adf8:	6927      	ldr	r7, [r4, #16]
 800adfa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800adfe:	68a3      	ldr	r3, [r4, #8]
 800ae00:	6861      	ldr	r1, [r4, #4]
 800ae02:	eb07 060a 	add.w	r6, r7, sl
 800ae06:	42b3      	cmp	r3, r6
 800ae08:	b085      	sub	sp, #20
 800ae0a:	bfb8      	it	lt
 800ae0c:	3101      	addlt	r1, #1
 800ae0e:	f7ff fedb 	bl	800abc8 <_Balloc>
 800ae12:	b930      	cbnz	r0, 800ae22 <__multiply+0x42>
 800ae14:	4602      	mov	r2, r0
 800ae16:	f240 115d 	movw	r1, #349	; 0x15d
 800ae1a:	4b43      	ldr	r3, [pc, #268]	; (800af28 <__multiply+0x148>)
 800ae1c:	4843      	ldr	r0, [pc, #268]	; (800af2c <__multiply+0x14c>)
 800ae1e:	f000 fcb1 	bl	800b784 <__assert_func>
 800ae22:	f100 0514 	add.w	r5, r0, #20
 800ae26:	462b      	mov	r3, r5
 800ae28:	2200      	movs	r2, #0
 800ae2a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae2e:	4543      	cmp	r3, r8
 800ae30:	d321      	bcc.n	800ae76 <__multiply+0x96>
 800ae32:	f104 0314 	add.w	r3, r4, #20
 800ae36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae3a:	f109 0314 	add.w	r3, r9, #20
 800ae3e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae42:	9202      	str	r2, [sp, #8]
 800ae44:	1b3a      	subs	r2, r7, r4
 800ae46:	3a15      	subs	r2, #21
 800ae48:	f022 0203 	bic.w	r2, r2, #3
 800ae4c:	3204      	adds	r2, #4
 800ae4e:	f104 0115 	add.w	r1, r4, #21
 800ae52:	428f      	cmp	r7, r1
 800ae54:	bf38      	it	cc
 800ae56:	2204      	movcc	r2, #4
 800ae58:	9201      	str	r2, [sp, #4]
 800ae5a:	9a02      	ldr	r2, [sp, #8]
 800ae5c:	9303      	str	r3, [sp, #12]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d80c      	bhi.n	800ae7c <__multiply+0x9c>
 800ae62:	2e00      	cmp	r6, #0
 800ae64:	dd03      	ble.n	800ae6e <__multiply+0x8e>
 800ae66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d059      	beq.n	800af22 <__multiply+0x142>
 800ae6e:	6106      	str	r6, [r0, #16]
 800ae70:	b005      	add	sp, #20
 800ae72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae76:	f843 2b04 	str.w	r2, [r3], #4
 800ae7a:	e7d8      	b.n	800ae2e <__multiply+0x4e>
 800ae7c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae80:	f1ba 0f00 	cmp.w	sl, #0
 800ae84:	d023      	beq.n	800aece <__multiply+0xee>
 800ae86:	46a9      	mov	r9, r5
 800ae88:	f04f 0c00 	mov.w	ip, #0
 800ae8c:	f104 0e14 	add.w	lr, r4, #20
 800ae90:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae94:	f8d9 1000 	ldr.w	r1, [r9]
 800ae98:	fa1f fb82 	uxth.w	fp, r2
 800ae9c:	b289      	uxth	r1, r1
 800ae9e:	fb0a 110b 	mla	r1, sl, fp, r1
 800aea2:	4461      	add	r1, ip
 800aea4:	f8d9 c000 	ldr.w	ip, [r9]
 800aea8:	0c12      	lsrs	r2, r2, #16
 800aeaa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800aeae:	fb0a c202 	mla	r2, sl, r2, ip
 800aeb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aeb6:	b289      	uxth	r1, r1
 800aeb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aebc:	4577      	cmp	r7, lr
 800aebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aec2:	f849 1b04 	str.w	r1, [r9], #4
 800aec6:	d8e3      	bhi.n	800ae90 <__multiply+0xb0>
 800aec8:	9a01      	ldr	r2, [sp, #4]
 800aeca:	f845 c002 	str.w	ip, [r5, r2]
 800aece:	9a03      	ldr	r2, [sp, #12]
 800aed0:	3304      	adds	r3, #4
 800aed2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aed6:	f1b9 0f00 	cmp.w	r9, #0
 800aeda:	d020      	beq.n	800af1e <__multiply+0x13e>
 800aedc:	46ae      	mov	lr, r5
 800aede:	f04f 0a00 	mov.w	sl, #0
 800aee2:	6829      	ldr	r1, [r5, #0]
 800aee4:	f104 0c14 	add.w	ip, r4, #20
 800aee8:	f8bc b000 	ldrh.w	fp, [ip]
 800aeec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aef0:	b289      	uxth	r1, r1
 800aef2:	fb09 220b 	mla	r2, r9, fp, r2
 800aef6:	4492      	add	sl, r2
 800aef8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aefc:	f84e 1b04 	str.w	r1, [lr], #4
 800af00:	f85c 2b04 	ldr.w	r2, [ip], #4
 800af04:	f8be 1000 	ldrh.w	r1, [lr]
 800af08:	0c12      	lsrs	r2, r2, #16
 800af0a:	fb09 1102 	mla	r1, r9, r2, r1
 800af0e:	4567      	cmp	r7, ip
 800af10:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800af14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af18:	d8e6      	bhi.n	800aee8 <__multiply+0x108>
 800af1a:	9a01      	ldr	r2, [sp, #4]
 800af1c:	50a9      	str	r1, [r5, r2]
 800af1e:	3504      	adds	r5, #4
 800af20:	e79b      	b.n	800ae5a <__multiply+0x7a>
 800af22:	3e01      	subs	r6, #1
 800af24:	e79d      	b.n	800ae62 <__multiply+0x82>
 800af26:	bf00      	nop
 800af28:	0800cbdb 	.word	0x0800cbdb
 800af2c:	0800cbec 	.word	0x0800cbec

0800af30 <__pow5mult>:
 800af30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af34:	4615      	mov	r5, r2
 800af36:	f012 0203 	ands.w	r2, r2, #3
 800af3a:	4606      	mov	r6, r0
 800af3c:	460f      	mov	r7, r1
 800af3e:	d007      	beq.n	800af50 <__pow5mult+0x20>
 800af40:	4c25      	ldr	r4, [pc, #148]	; (800afd8 <__pow5mult+0xa8>)
 800af42:	3a01      	subs	r2, #1
 800af44:	2300      	movs	r3, #0
 800af46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af4a:	f7ff fe9f 	bl	800ac8c <__multadd>
 800af4e:	4607      	mov	r7, r0
 800af50:	10ad      	asrs	r5, r5, #2
 800af52:	d03d      	beq.n	800afd0 <__pow5mult+0xa0>
 800af54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af56:	b97c      	cbnz	r4, 800af78 <__pow5mult+0x48>
 800af58:	2010      	movs	r0, #16
 800af5a:	f7ff fe1f 	bl	800ab9c <malloc>
 800af5e:	4602      	mov	r2, r0
 800af60:	6270      	str	r0, [r6, #36]	; 0x24
 800af62:	b928      	cbnz	r0, 800af70 <__pow5mult+0x40>
 800af64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af68:	4b1c      	ldr	r3, [pc, #112]	; (800afdc <__pow5mult+0xac>)
 800af6a:	481d      	ldr	r0, [pc, #116]	; (800afe0 <__pow5mult+0xb0>)
 800af6c:	f000 fc0a 	bl	800b784 <__assert_func>
 800af70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af74:	6004      	str	r4, [r0, #0]
 800af76:	60c4      	str	r4, [r0, #12]
 800af78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af80:	b94c      	cbnz	r4, 800af96 <__pow5mult+0x66>
 800af82:	f240 2171 	movw	r1, #625	; 0x271
 800af86:	4630      	mov	r0, r6
 800af88:	f7ff ff14 	bl	800adb4 <__i2b>
 800af8c:	2300      	movs	r3, #0
 800af8e:	4604      	mov	r4, r0
 800af90:	f8c8 0008 	str.w	r0, [r8, #8]
 800af94:	6003      	str	r3, [r0, #0]
 800af96:	f04f 0900 	mov.w	r9, #0
 800af9a:	07eb      	lsls	r3, r5, #31
 800af9c:	d50a      	bpl.n	800afb4 <__pow5mult+0x84>
 800af9e:	4639      	mov	r1, r7
 800afa0:	4622      	mov	r2, r4
 800afa2:	4630      	mov	r0, r6
 800afa4:	f7ff ff1c 	bl	800ade0 <__multiply>
 800afa8:	4680      	mov	r8, r0
 800afaa:	4639      	mov	r1, r7
 800afac:	4630      	mov	r0, r6
 800afae:	f7ff fe4b 	bl	800ac48 <_Bfree>
 800afb2:	4647      	mov	r7, r8
 800afb4:	106d      	asrs	r5, r5, #1
 800afb6:	d00b      	beq.n	800afd0 <__pow5mult+0xa0>
 800afb8:	6820      	ldr	r0, [r4, #0]
 800afba:	b938      	cbnz	r0, 800afcc <__pow5mult+0x9c>
 800afbc:	4622      	mov	r2, r4
 800afbe:	4621      	mov	r1, r4
 800afc0:	4630      	mov	r0, r6
 800afc2:	f7ff ff0d 	bl	800ade0 <__multiply>
 800afc6:	6020      	str	r0, [r4, #0]
 800afc8:	f8c0 9000 	str.w	r9, [r0]
 800afcc:	4604      	mov	r4, r0
 800afce:	e7e4      	b.n	800af9a <__pow5mult+0x6a>
 800afd0:	4638      	mov	r0, r7
 800afd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd6:	bf00      	nop
 800afd8:	0800cd38 	.word	0x0800cd38
 800afdc:	0800cb69 	.word	0x0800cb69
 800afe0:	0800cbec 	.word	0x0800cbec

0800afe4 <__lshift>:
 800afe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe8:	460c      	mov	r4, r1
 800afea:	4607      	mov	r7, r0
 800afec:	4691      	mov	r9, r2
 800afee:	6923      	ldr	r3, [r4, #16]
 800aff0:	6849      	ldr	r1, [r1, #4]
 800aff2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aff6:	68a3      	ldr	r3, [r4, #8]
 800aff8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800affc:	f108 0601 	add.w	r6, r8, #1
 800b000:	42b3      	cmp	r3, r6
 800b002:	db0b      	blt.n	800b01c <__lshift+0x38>
 800b004:	4638      	mov	r0, r7
 800b006:	f7ff fddf 	bl	800abc8 <_Balloc>
 800b00a:	4605      	mov	r5, r0
 800b00c:	b948      	cbnz	r0, 800b022 <__lshift+0x3e>
 800b00e:	4602      	mov	r2, r0
 800b010:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b014:	4b29      	ldr	r3, [pc, #164]	; (800b0bc <__lshift+0xd8>)
 800b016:	482a      	ldr	r0, [pc, #168]	; (800b0c0 <__lshift+0xdc>)
 800b018:	f000 fbb4 	bl	800b784 <__assert_func>
 800b01c:	3101      	adds	r1, #1
 800b01e:	005b      	lsls	r3, r3, #1
 800b020:	e7ee      	b.n	800b000 <__lshift+0x1c>
 800b022:	2300      	movs	r3, #0
 800b024:	f100 0114 	add.w	r1, r0, #20
 800b028:	f100 0210 	add.w	r2, r0, #16
 800b02c:	4618      	mov	r0, r3
 800b02e:	4553      	cmp	r3, sl
 800b030:	db37      	blt.n	800b0a2 <__lshift+0xbe>
 800b032:	6920      	ldr	r0, [r4, #16]
 800b034:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b038:	f104 0314 	add.w	r3, r4, #20
 800b03c:	f019 091f 	ands.w	r9, r9, #31
 800b040:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b044:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b048:	d02f      	beq.n	800b0aa <__lshift+0xc6>
 800b04a:	468a      	mov	sl, r1
 800b04c:	f04f 0c00 	mov.w	ip, #0
 800b050:	f1c9 0e20 	rsb	lr, r9, #32
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	fa02 f209 	lsl.w	r2, r2, r9
 800b05a:	ea42 020c 	orr.w	r2, r2, ip
 800b05e:	f84a 2b04 	str.w	r2, [sl], #4
 800b062:	f853 2b04 	ldr.w	r2, [r3], #4
 800b066:	4298      	cmp	r0, r3
 800b068:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b06c:	d8f2      	bhi.n	800b054 <__lshift+0x70>
 800b06e:	1b03      	subs	r3, r0, r4
 800b070:	3b15      	subs	r3, #21
 800b072:	f023 0303 	bic.w	r3, r3, #3
 800b076:	3304      	adds	r3, #4
 800b078:	f104 0215 	add.w	r2, r4, #21
 800b07c:	4290      	cmp	r0, r2
 800b07e:	bf38      	it	cc
 800b080:	2304      	movcc	r3, #4
 800b082:	f841 c003 	str.w	ip, [r1, r3]
 800b086:	f1bc 0f00 	cmp.w	ip, #0
 800b08a:	d001      	beq.n	800b090 <__lshift+0xac>
 800b08c:	f108 0602 	add.w	r6, r8, #2
 800b090:	3e01      	subs	r6, #1
 800b092:	4638      	mov	r0, r7
 800b094:	4621      	mov	r1, r4
 800b096:	612e      	str	r6, [r5, #16]
 800b098:	f7ff fdd6 	bl	800ac48 <_Bfree>
 800b09c:	4628      	mov	r0, r5
 800b09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	e7c1      	b.n	800b02e <__lshift+0x4a>
 800b0aa:	3904      	subs	r1, #4
 800b0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0b0:	4298      	cmp	r0, r3
 800b0b2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0b6:	d8f9      	bhi.n	800b0ac <__lshift+0xc8>
 800b0b8:	e7ea      	b.n	800b090 <__lshift+0xac>
 800b0ba:	bf00      	nop
 800b0bc:	0800cbdb 	.word	0x0800cbdb
 800b0c0:	0800cbec 	.word	0x0800cbec

0800b0c4 <__mcmp>:
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	690a      	ldr	r2, [r1, #16]
 800b0c8:	6900      	ldr	r0, [r0, #16]
 800b0ca:	b530      	push	{r4, r5, lr}
 800b0cc:	1a80      	subs	r0, r0, r2
 800b0ce:	d10d      	bne.n	800b0ec <__mcmp+0x28>
 800b0d0:	3314      	adds	r3, #20
 800b0d2:	3114      	adds	r1, #20
 800b0d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b0d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b0dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0e4:	4295      	cmp	r5, r2
 800b0e6:	d002      	beq.n	800b0ee <__mcmp+0x2a>
 800b0e8:	d304      	bcc.n	800b0f4 <__mcmp+0x30>
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	bd30      	pop	{r4, r5, pc}
 800b0ee:	42a3      	cmp	r3, r4
 800b0f0:	d3f4      	bcc.n	800b0dc <__mcmp+0x18>
 800b0f2:	e7fb      	b.n	800b0ec <__mcmp+0x28>
 800b0f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0f8:	e7f8      	b.n	800b0ec <__mcmp+0x28>
	...

0800b0fc <__mdiff>:
 800b0fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b100:	460d      	mov	r5, r1
 800b102:	4607      	mov	r7, r0
 800b104:	4611      	mov	r1, r2
 800b106:	4628      	mov	r0, r5
 800b108:	4614      	mov	r4, r2
 800b10a:	f7ff ffdb 	bl	800b0c4 <__mcmp>
 800b10e:	1e06      	subs	r6, r0, #0
 800b110:	d111      	bne.n	800b136 <__mdiff+0x3a>
 800b112:	4631      	mov	r1, r6
 800b114:	4638      	mov	r0, r7
 800b116:	f7ff fd57 	bl	800abc8 <_Balloc>
 800b11a:	4602      	mov	r2, r0
 800b11c:	b928      	cbnz	r0, 800b12a <__mdiff+0x2e>
 800b11e:	f240 2132 	movw	r1, #562	; 0x232
 800b122:	4b3a      	ldr	r3, [pc, #232]	; (800b20c <__mdiff+0x110>)
 800b124:	483a      	ldr	r0, [pc, #232]	; (800b210 <__mdiff+0x114>)
 800b126:	f000 fb2d 	bl	800b784 <__assert_func>
 800b12a:	2301      	movs	r3, #1
 800b12c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b130:	4610      	mov	r0, r2
 800b132:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b136:	bfa4      	itt	ge
 800b138:	4623      	movge	r3, r4
 800b13a:	462c      	movge	r4, r5
 800b13c:	4638      	mov	r0, r7
 800b13e:	6861      	ldr	r1, [r4, #4]
 800b140:	bfa6      	itte	ge
 800b142:	461d      	movge	r5, r3
 800b144:	2600      	movge	r6, #0
 800b146:	2601      	movlt	r6, #1
 800b148:	f7ff fd3e 	bl	800abc8 <_Balloc>
 800b14c:	4602      	mov	r2, r0
 800b14e:	b918      	cbnz	r0, 800b158 <__mdiff+0x5c>
 800b150:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b154:	4b2d      	ldr	r3, [pc, #180]	; (800b20c <__mdiff+0x110>)
 800b156:	e7e5      	b.n	800b124 <__mdiff+0x28>
 800b158:	f102 0814 	add.w	r8, r2, #20
 800b15c:	46c2      	mov	sl, r8
 800b15e:	f04f 0c00 	mov.w	ip, #0
 800b162:	6927      	ldr	r7, [r4, #16]
 800b164:	60c6      	str	r6, [r0, #12]
 800b166:	692e      	ldr	r6, [r5, #16]
 800b168:	f104 0014 	add.w	r0, r4, #20
 800b16c:	f105 0914 	add.w	r9, r5, #20
 800b170:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b174:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b178:	3410      	adds	r4, #16
 800b17a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b17e:	f859 3b04 	ldr.w	r3, [r9], #4
 800b182:	fa1f f18b 	uxth.w	r1, fp
 800b186:	448c      	add	ip, r1
 800b188:	b299      	uxth	r1, r3
 800b18a:	0c1b      	lsrs	r3, r3, #16
 800b18c:	ebac 0101 	sub.w	r1, ip, r1
 800b190:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b194:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b198:	b289      	uxth	r1, r1
 800b19a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b19e:	454e      	cmp	r6, r9
 800b1a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b1a4:	f84a 3b04 	str.w	r3, [sl], #4
 800b1a8:	d8e7      	bhi.n	800b17a <__mdiff+0x7e>
 800b1aa:	1b73      	subs	r3, r6, r5
 800b1ac:	3b15      	subs	r3, #21
 800b1ae:	f023 0303 	bic.w	r3, r3, #3
 800b1b2:	3515      	adds	r5, #21
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	42ae      	cmp	r6, r5
 800b1b8:	bf38      	it	cc
 800b1ba:	2304      	movcc	r3, #4
 800b1bc:	4418      	add	r0, r3
 800b1be:	4443      	add	r3, r8
 800b1c0:	461e      	mov	r6, r3
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	4575      	cmp	r5, lr
 800b1c6:	d30e      	bcc.n	800b1e6 <__mdiff+0xea>
 800b1c8:	f10e 0103 	add.w	r1, lr, #3
 800b1cc:	1a09      	subs	r1, r1, r0
 800b1ce:	f021 0103 	bic.w	r1, r1, #3
 800b1d2:	3803      	subs	r0, #3
 800b1d4:	4586      	cmp	lr, r0
 800b1d6:	bf38      	it	cc
 800b1d8:	2100      	movcc	r1, #0
 800b1da:	4419      	add	r1, r3
 800b1dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b1e0:	b18b      	cbz	r3, 800b206 <__mdiff+0x10a>
 800b1e2:	6117      	str	r7, [r2, #16]
 800b1e4:	e7a4      	b.n	800b130 <__mdiff+0x34>
 800b1e6:	f855 8b04 	ldr.w	r8, [r5], #4
 800b1ea:	fa1f f188 	uxth.w	r1, r8
 800b1ee:	4461      	add	r1, ip
 800b1f0:	140c      	asrs	r4, r1, #16
 800b1f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1f6:	b289      	uxth	r1, r1
 800b1f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b1fc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b200:	f846 1b04 	str.w	r1, [r6], #4
 800b204:	e7de      	b.n	800b1c4 <__mdiff+0xc8>
 800b206:	3f01      	subs	r7, #1
 800b208:	e7e8      	b.n	800b1dc <__mdiff+0xe0>
 800b20a:	bf00      	nop
 800b20c:	0800cbdb 	.word	0x0800cbdb
 800b210:	0800cbec 	.word	0x0800cbec

0800b214 <__d2b>:
 800b214:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b218:	2101      	movs	r1, #1
 800b21a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b21e:	4690      	mov	r8, r2
 800b220:	461d      	mov	r5, r3
 800b222:	f7ff fcd1 	bl	800abc8 <_Balloc>
 800b226:	4604      	mov	r4, r0
 800b228:	b930      	cbnz	r0, 800b238 <__d2b+0x24>
 800b22a:	4602      	mov	r2, r0
 800b22c:	f240 310a 	movw	r1, #778	; 0x30a
 800b230:	4b24      	ldr	r3, [pc, #144]	; (800b2c4 <__d2b+0xb0>)
 800b232:	4825      	ldr	r0, [pc, #148]	; (800b2c8 <__d2b+0xb4>)
 800b234:	f000 faa6 	bl	800b784 <__assert_func>
 800b238:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b23c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b240:	bb2d      	cbnz	r5, 800b28e <__d2b+0x7a>
 800b242:	9301      	str	r3, [sp, #4]
 800b244:	f1b8 0300 	subs.w	r3, r8, #0
 800b248:	d026      	beq.n	800b298 <__d2b+0x84>
 800b24a:	4668      	mov	r0, sp
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	f7ff fd83 	bl	800ad58 <__lo0bits>
 800b252:	9900      	ldr	r1, [sp, #0]
 800b254:	b1f0      	cbz	r0, 800b294 <__d2b+0x80>
 800b256:	9a01      	ldr	r2, [sp, #4]
 800b258:	f1c0 0320 	rsb	r3, r0, #32
 800b25c:	fa02 f303 	lsl.w	r3, r2, r3
 800b260:	430b      	orrs	r3, r1
 800b262:	40c2      	lsrs	r2, r0
 800b264:	6163      	str	r3, [r4, #20]
 800b266:	9201      	str	r2, [sp, #4]
 800b268:	9b01      	ldr	r3, [sp, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	bf14      	ite	ne
 800b26e:	2102      	movne	r1, #2
 800b270:	2101      	moveq	r1, #1
 800b272:	61a3      	str	r3, [r4, #24]
 800b274:	6121      	str	r1, [r4, #16]
 800b276:	b1c5      	cbz	r5, 800b2aa <__d2b+0x96>
 800b278:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b27c:	4405      	add	r5, r0
 800b27e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b282:	603d      	str	r5, [r7, #0]
 800b284:	6030      	str	r0, [r6, #0]
 800b286:	4620      	mov	r0, r4
 800b288:	b002      	add	sp, #8
 800b28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b28e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b292:	e7d6      	b.n	800b242 <__d2b+0x2e>
 800b294:	6161      	str	r1, [r4, #20]
 800b296:	e7e7      	b.n	800b268 <__d2b+0x54>
 800b298:	a801      	add	r0, sp, #4
 800b29a:	f7ff fd5d 	bl	800ad58 <__lo0bits>
 800b29e:	2101      	movs	r1, #1
 800b2a0:	9b01      	ldr	r3, [sp, #4]
 800b2a2:	6121      	str	r1, [r4, #16]
 800b2a4:	6163      	str	r3, [r4, #20]
 800b2a6:	3020      	adds	r0, #32
 800b2a8:	e7e5      	b.n	800b276 <__d2b+0x62>
 800b2aa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b2ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2b2:	6038      	str	r0, [r7, #0]
 800b2b4:	6918      	ldr	r0, [r3, #16]
 800b2b6:	f7ff fd2f 	bl	800ad18 <__hi0bits>
 800b2ba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b2be:	6031      	str	r1, [r6, #0]
 800b2c0:	e7e1      	b.n	800b286 <__d2b+0x72>
 800b2c2:	bf00      	nop
 800b2c4:	0800cbdb 	.word	0x0800cbdb
 800b2c8:	0800cbec 	.word	0x0800cbec

0800b2cc <_calloc_r>:
 800b2cc:	b570      	push	{r4, r5, r6, lr}
 800b2ce:	fba1 5402 	umull	r5, r4, r1, r2
 800b2d2:	b934      	cbnz	r4, 800b2e2 <_calloc_r+0x16>
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	f000 f875 	bl	800b3c4 <_malloc_r>
 800b2da:	4606      	mov	r6, r0
 800b2dc:	b928      	cbnz	r0, 800b2ea <_calloc_r+0x1e>
 800b2de:	4630      	mov	r0, r6
 800b2e0:	bd70      	pop	{r4, r5, r6, pc}
 800b2e2:	220c      	movs	r2, #12
 800b2e4:	2600      	movs	r6, #0
 800b2e6:	6002      	str	r2, [r0, #0]
 800b2e8:	e7f9      	b.n	800b2de <_calloc_r+0x12>
 800b2ea:	462a      	mov	r2, r5
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	f7fe f94d 	bl	800958c <memset>
 800b2f2:	e7f4      	b.n	800b2de <_calloc_r+0x12>

0800b2f4 <_free_r>:
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	2900      	cmp	r1, #0
 800b2fa:	d040      	beq.n	800b37e <_free_r+0x8a>
 800b2fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b300:	1f0c      	subs	r4, r1, #4
 800b302:	2b00      	cmp	r3, #0
 800b304:	bfb8      	it	lt
 800b306:	18e4      	addlt	r4, r4, r3
 800b308:	f000 fa98 	bl	800b83c <__malloc_lock>
 800b30c:	4a1c      	ldr	r2, [pc, #112]	; (800b380 <_free_r+0x8c>)
 800b30e:	6813      	ldr	r3, [r2, #0]
 800b310:	b933      	cbnz	r3, 800b320 <_free_r+0x2c>
 800b312:	6063      	str	r3, [r4, #4]
 800b314:	6014      	str	r4, [r2, #0]
 800b316:	4628      	mov	r0, r5
 800b318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b31c:	f000 ba94 	b.w	800b848 <__malloc_unlock>
 800b320:	42a3      	cmp	r3, r4
 800b322:	d908      	bls.n	800b336 <_free_r+0x42>
 800b324:	6820      	ldr	r0, [r4, #0]
 800b326:	1821      	adds	r1, r4, r0
 800b328:	428b      	cmp	r3, r1
 800b32a:	bf01      	itttt	eq
 800b32c:	6819      	ldreq	r1, [r3, #0]
 800b32e:	685b      	ldreq	r3, [r3, #4]
 800b330:	1809      	addeq	r1, r1, r0
 800b332:	6021      	streq	r1, [r4, #0]
 800b334:	e7ed      	b.n	800b312 <_free_r+0x1e>
 800b336:	461a      	mov	r2, r3
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	b10b      	cbz	r3, 800b340 <_free_r+0x4c>
 800b33c:	42a3      	cmp	r3, r4
 800b33e:	d9fa      	bls.n	800b336 <_free_r+0x42>
 800b340:	6811      	ldr	r1, [r2, #0]
 800b342:	1850      	adds	r0, r2, r1
 800b344:	42a0      	cmp	r0, r4
 800b346:	d10b      	bne.n	800b360 <_free_r+0x6c>
 800b348:	6820      	ldr	r0, [r4, #0]
 800b34a:	4401      	add	r1, r0
 800b34c:	1850      	adds	r0, r2, r1
 800b34e:	4283      	cmp	r3, r0
 800b350:	6011      	str	r1, [r2, #0]
 800b352:	d1e0      	bne.n	800b316 <_free_r+0x22>
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	4401      	add	r1, r0
 800b35a:	6011      	str	r1, [r2, #0]
 800b35c:	6053      	str	r3, [r2, #4]
 800b35e:	e7da      	b.n	800b316 <_free_r+0x22>
 800b360:	d902      	bls.n	800b368 <_free_r+0x74>
 800b362:	230c      	movs	r3, #12
 800b364:	602b      	str	r3, [r5, #0]
 800b366:	e7d6      	b.n	800b316 <_free_r+0x22>
 800b368:	6820      	ldr	r0, [r4, #0]
 800b36a:	1821      	adds	r1, r4, r0
 800b36c:	428b      	cmp	r3, r1
 800b36e:	bf01      	itttt	eq
 800b370:	6819      	ldreq	r1, [r3, #0]
 800b372:	685b      	ldreq	r3, [r3, #4]
 800b374:	1809      	addeq	r1, r1, r0
 800b376:	6021      	streq	r1, [r4, #0]
 800b378:	6063      	str	r3, [r4, #4]
 800b37a:	6054      	str	r4, [r2, #4]
 800b37c:	e7cb      	b.n	800b316 <_free_r+0x22>
 800b37e:	bd38      	pop	{r3, r4, r5, pc}
 800b380:	20000260 	.word	0x20000260

0800b384 <sbrk_aligned>:
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	4e0e      	ldr	r6, [pc, #56]	; (800b3c0 <sbrk_aligned+0x3c>)
 800b388:	460c      	mov	r4, r1
 800b38a:	6831      	ldr	r1, [r6, #0]
 800b38c:	4605      	mov	r5, r0
 800b38e:	b911      	cbnz	r1, 800b396 <sbrk_aligned+0x12>
 800b390:	f000 f9e8 	bl	800b764 <_sbrk_r>
 800b394:	6030      	str	r0, [r6, #0]
 800b396:	4621      	mov	r1, r4
 800b398:	4628      	mov	r0, r5
 800b39a:	f000 f9e3 	bl	800b764 <_sbrk_r>
 800b39e:	1c43      	adds	r3, r0, #1
 800b3a0:	d00a      	beq.n	800b3b8 <sbrk_aligned+0x34>
 800b3a2:	1cc4      	adds	r4, r0, #3
 800b3a4:	f024 0403 	bic.w	r4, r4, #3
 800b3a8:	42a0      	cmp	r0, r4
 800b3aa:	d007      	beq.n	800b3bc <sbrk_aligned+0x38>
 800b3ac:	1a21      	subs	r1, r4, r0
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	f000 f9d8 	bl	800b764 <_sbrk_r>
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	d101      	bne.n	800b3bc <sbrk_aligned+0x38>
 800b3b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b3bc:	4620      	mov	r0, r4
 800b3be:	bd70      	pop	{r4, r5, r6, pc}
 800b3c0:	20000264 	.word	0x20000264

0800b3c4 <_malloc_r>:
 800b3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c8:	1ccd      	adds	r5, r1, #3
 800b3ca:	f025 0503 	bic.w	r5, r5, #3
 800b3ce:	3508      	adds	r5, #8
 800b3d0:	2d0c      	cmp	r5, #12
 800b3d2:	bf38      	it	cc
 800b3d4:	250c      	movcc	r5, #12
 800b3d6:	2d00      	cmp	r5, #0
 800b3d8:	4607      	mov	r7, r0
 800b3da:	db01      	blt.n	800b3e0 <_malloc_r+0x1c>
 800b3dc:	42a9      	cmp	r1, r5
 800b3de:	d905      	bls.n	800b3ec <_malloc_r+0x28>
 800b3e0:	230c      	movs	r3, #12
 800b3e2:	2600      	movs	r6, #0
 800b3e4:	603b      	str	r3, [r7, #0]
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ec:	4e2e      	ldr	r6, [pc, #184]	; (800b4a8 <_malloc_r+0xe4>)
 800b3ee:	f000 fa25 	bl	800b83c <__malloc_lock>
 800b3f2:	6833      	ldr	r3, [r6, #0]
 800b3f4:	461c      	mov	r4, r3
 800b3f6:	bb34      	cbnz	r4, 800b446 <_malloc_r+0x82>
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	f7ff ffc2 	bl	800b384 <sbrk_aligned>
 800b400:	1c43      	adds	r3, r0, #1
 800b402:	4604      	mov	r4, r0
 800b404:	d14d      	bne.n	800b4a2 <_malloc_r+0xde>
 800b406:	6834      	ldr	r4, [r6, #0]
 800b408:	4626      	mov	r6, r4
 800b40a:	2e00      	cmp	r6, #0
 800b40c:	d140      	bne.n	800b490 <_malloc_r+0xcc>
 800b40e:	6823      	ldr	r3, [r4, #0]
 800b410:	4631      	mov	r1, r6
 800b412:	4638      	mov	r0, r7
 800b414:	eb04 0803 	add.w	r8, r4, r3
 800b418:	f000 f9a4 	bl	800b764 <_sbrk_r>
 800b41c:	4580      	cmp	r8, r0
 800b41e:	d13a      	bne.n	800b496 <_malloc_r+0xd2>
 800b420:	6821      	ldr	r1, [r4, #0]
 800b422:	3503      	adds	r5, #3
 800b424:	1a6d      	subs	r5, r5, r1
 800b426:	f025 0503 	bic.w	r5, r5, #3
 800b42a:	3508      	adds	r5, #8
 800b42c:	2d0c      	cmp	r5, #12
 800b42e:	bf38      	it	cc
 800b430:	250c      	movcc	r5, #12
 800b432:	4638      	mov	r0, r7
 800b434:	4629      	mov	r1, r5
 800b436:	f7ff ffa5 	bl	800b384 <sbrk_aligned>
 800b43a:	3001      	adds	r0, #1
 800b43c:	d02b      	beq.n	800b496 <_malloc_r+0xd2>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	442b      	add	r3, r5
 800b442:	6023      	str	r3, [r4, #0]
 800b444:	e00e      	b.n	800b464 <_malloc_r+0xa0>
 800b446:	6822      	ldr	r2, [r4, #0]
 800b448:	1b52      	subs	r2, r2, r5
 800b44a:	d41e      	bmi.n	800b48a <_malloc_r+0xc6>
 800b44c:	2a0b      	cmp	r2, #11
 800b44e:	d916      	bls.n	800b47e <_malloc_r+0xba>
 800b450:	1961      	adds	r1, r4, r5
 800b452:	42a3      	cmp	r3, r4
 800b454:	6025      	str	r5, [r4, #0]
 800b456:	bf18      	it	ne
 800b458:	6059      	strne	r1, [r3, #4]
 800b45a:	6863      	ldr	r3, [r4, #4]
 800b45c:	bf08      	it	eq
 800b45e:	6031      	streq	r1, [r6, #0]
 800b460:	5162      	str	r2, [r4, r5]
 800b462:	604b      	str	r3, [r1, #4]
 800b464:	4638      	mov	r0, r7
 800b466:	f104 060b 	add.w	r6, r4, #11
 800b46a:	f000 f9ed 	bl	800b848 <__malloc_unlock>
 800b46e:	f026 0607 	bic.w	r6, r6, #7
 800b472:	1d23      	adds	r3, r4, #4
 800b474:	1af2      	subs	r2, r6, r3
 800b476:	d0b6      	beq.n	800b3e6 <_malloc_r+0x22>
 800b478:	1b9b      	subs	r3, r3, r6
 800b47a:	50a3      	str	r3, [r4, r2]
 800b47c:	e7b3      	b.n	800b3e6 <_malloc_r+0x22>
 800b47e:	6862      	ldr	r2, [r4, #4]
 800b480:	42a3      	cmp	r3, r4
 800b482:	bf0c      	ite	eq
 800b484:	6032      	streq	r2, [r6, #0]
 800b486:	605a      	strne	r2, [r3, #4]
 800b488:	e7ec      	b.n	800b464 <_malloc_r+0xa0>
 800b48a:	4623      	mov	r3, r4
 800b48c:	6864      	ldr	r4, [r4, #4]
 800b48e:	e7b2      	b.n	800b3f6 <_malloc_r+0x32>
 800b490:	4634      	mov	r4, r6
 800b492:	6876      	ldr	r6, [r6, #4]
 800b494:	e7b9      	b.n	800b40a <_malloc_r+0x46>
 800b496:	230c      	movs	r3, #12
 800b498:	4638      	mov	r0, r7
 800b49a:	603b      	str	r3, [r7, #0]
 800b49c:	f000 f9d4 	bl	800b848 <__malloc_unlock>
 800b4a0:	e7a1      	b.n	800b3e6 <_malloc_r+0x22>
 800b4a2:	6025      	str	r5, [r4, #0]
 800b4a4:	e7de      	b.n	800b464 <_malloc_r+0xa0>
 800b4a6:	bf00      	nop
 800b4a8:	20000260 	.word	0x20000260

0800b4ac <__ssputs_r>:
 800b4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b0:	688e      	ldr	r6, [r1, #8]
 800b4b2:	4682      	mov	sl, r0
 800b4b4:	429e      	cmp	r6, r3
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	4690      	mov	r8, r2
 800b4ba:	461f      	mov	r7, r3
 800b4bc:	d838      	bhi.n	800b530 <__ssputs_r+0x84>
 800b4be:	898a      	ldrh	r2, [r1, #12]
 800b4c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4c4:	d032      	beq.n	800b52c <__ssputs_r+0x80>
 800b4c6:	6825      	ldr	r5, [r4, #0]
 800b4c8:	6909      	ldr	r1, [r1, #16]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	eba5 0901 	sub.w	r9, r5, r1
 800b4d0:	6965      	ldr	r5, [r4, #20]
 800b4d2:	444b      	add	r3, r9
 800b4d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4dc:	106d      	asrs	r5, r5, #1
 800b4de:	429d      	cmp	r5, r3
 800b4e0:	bf38      	it	cc
 800b4e2:	461d      	movcc	r5, r3
 800b4e4:	0553      	lsls	r3, r2, #21
 800b4e6:	d531      	bpl.n	800b54c <__ssputs_r+0xa0>
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	f7ff ff6b 	bl	800b3c4 <_malloc_r>
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	b950      	cbnz	r0, 800b508 <__ssputs_r+0x5c>
 800b4f2:	230c      	movs	r3, #12
 800b4f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4f8:	f8ca 3000 	str.w	r3, [sl]
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b502:	81a3      	strh	r3, [r4, #12]
 800b504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b508:	464a      	mov	r2, r9
 800b50a:	6921      	ldr	r1, [r4, #16]
 800b50c:	f7fe f830 	bl	8009570 <memcpy>
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b51a:	81a3      	strh	r3, [r4, #12]
 800b51c:	6126      	str	r6, [r4, #16]
 800b51e:	444e      	add	r6, r9
 800b520:	6026      	str	r6, [r4, #0]
 800b522:	463e      	mov	r6, r7
 800b524:	6165      	str	r5, [r4, #20]
 800b526:	eba5 0509 	sub.w	r5, r5, r9
 800b52a:	60a5      	str	r5, [r4, #8]
 800b52c:	42be      	cmp	r6, r7
 800b52e:	d900      	bls.n	800b532 <__ssputs_r+0x86>
 800b530:	463e      	mov	r6, r7
 800b532:	4632      	mov	r2, r6
 800b534:	4641      	mov	r1, r8
 800b536:	6820      	ldr	r0, [r4, #0]
 800b538:	f000 f966 	bl	800b808 <memmove>
 800b53c:	68a3      	ldr	r3, [r4, #8]
 800b53e:	2000      	movs	r0, #0
 800b540:	1b9b      	subs	r3, r3, r6
 800b542:	60a3      	str	r3, [r4, #8]
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	4433      	add	r3, r6
 800b548:	6023      	str	r3, [r4, #0]
 800b54a:	e7db      	b.n	800b504 <__ssputs_r+0x58>
 800b54c:	462a      	mov	r2, r5
 800b54e:	f000 f981 	bl	800b854 <_realloc_r>
 800b552:	4606      	mov	r6, r0
 800b554:	2800      	cmp	r0, #0
 800b556:	d1e1      	bne.n	800b51c <__ssputs_r+0x70>
 800b558:	4650      	mov	r0, sl
 800b55a:	6921      	ldr	r1, [r4, #16]
 800b55c:	f7ff feca 	bl	800b2f4 <_free_r>
 800b560:	e7c7      	b.n	800b4f2 <__ssputs_r+0x46>
	...

0800b564 <_svfiprintf_r>:
 800b564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b568:	4698      	mov	r8, r3
 800b56a:	898b      	ldrh	r3, [r1, #12]
 800b56c:	4607      	mov	r7, r0
 800b56e:	061b      	lsls	r3, r3, #24
 800b570:	460d      	mov	r5, r1
 800b572:	4614      	mov	r4, r2
 800b574:	b09d      	sub	sp, #116	; 0x74
 800b576:	d50e      	bpl.n	800b596 <_svfiprintf_r+0x32>
 800b578:	690b      	ldr	r3, [r1, #16]
 800b57a:	b963      	cbnz	r3, 800b596 <_svfiprintf_r+0x32>
 800b57c:	2140      	movs	r1, #64	; 0x40
 800b57e:	f7ff ff21 	bl	800b3c4 <_malloc_r>
 800b582:	6028      	str	r0, [r5, #0]
 800b584:	6128      	str	r0, [r5, #16]
 800b586:	b920      	cbnz	r0, 800b592 <_svfiprintf_r+0x2e>
 800b588:	230c      	movs	r3, #12
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b590:	e0d1      	b.n	800b736 <_svfiprintf_r+0x1d2>
 800b592:	2340      	movs	r3, #64	; 0x40
 800b594:	616b      	str	r3, [r5, #20]
 800b596:	2300      	movs	r3, #0
 800b598:	9309      	str	r3, [sp, #36]	; 0x24
 800b59a:	2320      	movs	r3, #32
 800b59c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5a0:	2330      	movs	r3, #48	; 0x30
 800b5a2:	f04f 0901 	mov.w	r9, #1
 800b5a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b750 <_svfiprintf_r+0x1ec>
 800b5ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5b2:	4623      	mov	r3, r4
 800b5b4:	469a      	mov	sl, r3
 800b5b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ba:	b10a      	cbz	r2, 800b5c0 <_svfiprintf_r+0x5c>
 800b5bc:	2a25      	cmp	r2, #37	; 0x25
 800b5be:	d1f9      	bne.n	800b5b4 <_svfiprintf_r+0x50>
 800b5c0:	ebba 0b04 	subs.w	fp, sl, r4
 800b5c4:	d00b      	beq.n	800b5de <_svfiprintf_r+0x7a>
 800b5c6:	465b      	mov	r3, fp
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	4629      	mov	r1, r5
 800b5cc:	4638      	mov	r0, r7
 800b5ce:	f7ff ff6d 	bl	800b4ac <__ssputs_r>
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	f000 80aa 	beq.w	800b72c <_svfiprintf_r+0x1c8>
 800b5d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5da:	445a      	add	r2, fp
 800b5dc:	9209      	str	r2, [sp, #36]	; 0x24
 800b5de:	f89a 3000 	ldrb.w	r3, [sl]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f000 80a2 	beq.w	800b72c <_svfiprintf_r+0x1c8>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5f2:	f10a 0a01 	add.w	sl, sl, #1
 800b5f6:	9304      	str	r3, [sp, #16]
 800b5f8:	9307      	str	r3, [sp, #28]
 800b5fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5fe:	931a      	str	r3, [sp, #104]	; 0x68
 800b600:	4654      	mov	r4, sl
 800b602:	2205      	movs	r2, #5
 800b604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b608:	4851      	ldr	r0, [pc, #324]	; (800b750 <_svfiprintf_r+0x1ec>)
 800b60a:	f7ff facf 	bl	800abac <memchr>
 800b60e:	9a04      	ldr	r2, [sp, #16]
 800b610:	b9d8      	cbnz	r0, 800b64a <_svfiprintf_r+0xe6>
 800b612:	06d0      	lsls	r0, r2, #27
 800b614:	bf44      	itt	mi
 800b616:	2320      	movmi	r3, #32
 800b618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b61c:	0711      	lsls	r1, r2, #28
 800b61e:	bf44      	itt	mi
 800b620:	232b      	movmi	r3, #43	; 0x2b
 800b622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b626:	f89a 3000 	ldrb.w	r3, [sl]
 800b62a:	2b2a      	cmp	r3, #42	; 0x2a
 800b62c:	d015      	beq.n	800b65a <_svfiprintf_r+0xf6>
 800b62e:	4654      	mov	r4, sl
 800b630:	2000      	movs	r0, #0
 800b632:	f04f 0c0a 	mov.w	ip, #10
 800b636:	9a07      	ldr	r2, [sp, #28]
 800b638:	4621      	mov	r1, r4
 800b63a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b63e:	3b30      	subs	r3, #48	; 0x30
 800b640:	2b09      	cmp	r3, #9
 800b642:	d94e      	bls.n	800b6e2 <_svfiprintf_r+0x17e>
 800b644:	b1b0      	cbz	r0, 800b674 <_svfiprintf_r+0x110>
 800b646:	9207      	str	r2, [sp, #28]
 800b648:	e014      	b.n	800b674 <_svfiprintf_r+0x110>
 800b64a:	eba0 0308 	sub.w	r3, r0, r8
 800b64e:	fa09 f303 	lsl.w	r3, r9, r3
 800b652:	4313      	orrs	r3, r2
 800b654:	46a2      	mov	sl, r4
 800b656:	9304      	str	r3, [sp, #16]
 800b658:	e7d2      	b.n	800b600 <_svfiprintf_r+0x9c>
 800b65a:	9b03      	ldr	r3, [sp, #12]
 800b65c:	1d19      	adds	r1, r3, #4
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	9103      	str	r1, [sp, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	bfbb      	ittet	lt
 800b666:	425b      	neglt	r3, r3
 800b668:	f042 0202 	orrlt.w	r2, r2, #2
 800b66c:	9307      	strge	r3, [sp, #28]
 800b66e:	9307      	strlt	r3, [sp, #28]
 800b670:	bfb8      	it	lt
 800b672:	9204      	strlt	r2, [sp, #16]
 800b674:	7823      	ldrb	r3, [r4, #0]
 800b676:	2b2e      	cmp	r3, #46	; 0x2e
 800b678:	d10c      	bne.n	800b694 <_svfiprintf_r+0x130>
 800b67a:	7863      	ldrb	r3, [r4, #1]
 800b67c:	2b2a      	cmp	r3, #42	; 0x2a
 800b67e:	d135      	bne.n	800b6ec <_svfiprintf_r+0x188>
 800b680:	9b03      	ldr	r3, [sp, #12]
 800b682:	3402      	adds	r4, #2
 800b684:	1d1a      	adds	r2, r3, #4
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	9203      	str	r2, [sp, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	bfb8      	it	lt
 800b68e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b692:	9305      	str	r3, [sp, #20]
 800b694:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b754 <_svfiprintf_r+0x1f0>
 800b698:	2203      	movs	r2, #3
 800b69a:	4650      	mov	r0, sl
 800b69c:	7821      	ldrb	r1, [r4, #0]
 800b69e:	f7ff fa85 	bl	800abac <memchr>
 800b6a2:	b140      	cbz	r0, 800b6b6 <_svfiprintf_r+0x152>
 800b6a4:	2340      	movs	r3, #64	; 0x40
 800b6a6:	eba0 000a 	sub.w	r0, r0, sl
 800b6aa:	fa03 f000 	lsl.w	r0, r3, r0
 800b6ae:	9b04      	ldr	r3, [sp, #16]
 800b6b0:	3401      	adds	r4, #1
 800b6b2:	4303      	orrs	r3, r0
 800b6b4:	9304      	str	r3, [sp, #16]
 800b6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ba:	2206      	movs	r2, #6
 800b6bc:	4826      	ldr	r0, [pc, #152]	; (800b758 <_svfiprintf_r+0x1f4>)
 800b6be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6c2:	f7ff fa73 	bl	800abac <memchr>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d038      	beq.n	800b73c <_svfiprintf_r+0x1d8>
 800b6ca:	4b24      	ldr	r3, [pc, #144]	; (800b75c <_svfiprintf_r+0x1f8>)
 800b6cc:	bb1b      	cbnz	r3, 800b716 <_svfiprintf_r+0x1b2>
 800b6ce:	9b03      	ldr	r3, [sp, #12]
 800b6d0:	3307      	adds	r3, #7
 800b6d2:	f023 0307 	bic.w	r3, r3, #7
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	9303      	str	r3, [sp, #12]
 800b6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6dc:	4433      	add	r3, r6
 800b6de:	9309      	str	r3, [sp, #36]	; 0x24
 800b6e0:	e767      	b.n	800b5b2 <_svfiprintf_r+0x4e>
 800b6e2:	460c      	mov	r4, r1
 800b6e4:	2001      	movs	r0, #1
 800b6e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6ea:	e7a5      	b.n	800b638 <_svfiprintf_r+0xd4>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f04f 0c0a 	mov.w	ip, #10
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	3401      	adds	r4, #1
 800b6f6:	9305      	str	r3, [sp, #20]
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6fe:	3a30      	subs	r2, #48	; 0x30
 800b700:	2a09      	cmp	r2, #9
 800b702:	d903      	bls.n	800b70c <_svfiprintf_r+0x1a8>
 800b704:	2b00      	cmp	r3, #0
 800b706:	d0c5      	beq.n	800b694 <_svfiprintf_r+0x130>
 800b708:	9105      	str	r1, [sp, #20]
 800b70a:	e7c3      	b.n	800b694 <_svfiprintf_r+0x130>
 800b70c:	4604      	mov	r4, r0
 800b70e:	2301      	movs	r3, #1
 800b710:	fb0c 2101 	mla	r1, ip, r1, r2
 800b714:	e7f0      	b.n	800b6f8 <_svfiprintf_r+0x194>
 800b716:	ab03      	add	r3, sp, #12
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	462a      	mov	r2, r5
 800b71c:	4638      	mov	r0, r7
 800b71e:	4b10      	ldr	r3, [pc, #64]	; (800b760 <_svfiprintf_r+0x1fc>)
 800b720:	a904      	add	r1, sp, #16
 800b722:	f7fd ffd9 	bl	80096d8 <_printf_float>
 800b726:	1c42      	adds	r2, r0, #1
 800b728:	4606      	mov	r6, r0
 800b72a:	d1d6      	bne.n	800b6da <_svfiprintf_r+0x176>
 800b72c:	89ab      	ldrh	r3, [r5, #12]
 800b72e:	065b      	lsls	r3, r3, #25
 800b730:	f53f af2c 	bmi.w	800b58c <_svfiprintf_r+0x28>
 800b734:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b736:	b01d      	add	sp, #116	; 0x74
 800b738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73c:	ab03      	add	r3, sp, #12
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	462a      	mov	r2, r5
 800b742:	4638      	mov	r0, r7
 800b744:	4b06      	ldr	r3, [pc, #24]	; (800b760 <_svfiprintf_r+0x1fc>)
 800b746:	a904      	add	r1, sp, #16
 800b748:	f7fe fa62 	bl	8009c10 <_printf_i>
 800b74c:	e7eb      	b.n	800b726 <_svfiprintf_r+0x1c2>
 800b74e:	bf00      	nop
 800b750:	0800cd44 	.word	0x0800cd44
 800b754:	0800cd4a 	.word	0x0800cd4a
 800b758:	0800cd4e 	.word	0x0800cd4e
 800b75c:	080096d9 	.word	0x080096d9
 800b760:	0800b4ad 	.word	0x0800b4ad

0800b764 <_sbrk_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	2300      	movs	r3, #0
 800b768:	4d05      	ldr	r5, [pc, #20]	; (800b780 <_sbrk_r+0x1c>)
 800b76a:	4604      	mov	r4, r0
 800b76c:	4608      	mov	r0, r1
 800b76e:	602b      	str	r3, [r5, #0]
 800b770:	f7f7 fe6e 	bl	8003450 <_sbrk>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d102      	bne.n	800b77e <_sbrk_r+0x1a>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	b103      	cbz	r3, 800b77e <_sbrk_r+0x1a>
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	20000268 	.word	0x20000268

0800b784 <__assert_func>:
 800b784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b786:	4614      	mov	r4, r2
 800b788:	461a      	mov	r2, r3
 800b78a:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <__assert_func+0x2c>)
 800b78c:	4605      	mov	r5, r0
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68d8      	ldr	r0, [r3, #12]
 800b792:	b14c      	cbz	r4, 800b7a8 <__assert_func+0x24>
 800b794:	4b07      	ldr	r3, [pc, #28]	; (800b7b4 <__assert_func+0x30>)
 800b796:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b79a:	9100      	str	r1, [sp, #0]
 800b79c:	462b      	mov	r3, r5
 800b79e:	4906      	ldr	r1, [pc, #24]	; (800b7b8 <__assert_func+0x34>)
 800b7a0:	f000 f80e 	bl	800b7c0 <fiprintf>
 800b7a4:	f000 faaa 	bl	800bcfc <abort>
 800b7a8:	4b04      	ldr	r3, [pc, #16]	; (800b7bc <__assert_func+0x38>)
 800b7aa:	461c      	mov	r4, r3
 800b7ac:	e7f3      	b.n	800b796 <__assert_func+0x12>
 800b7ae:	bf00      	nop
 800b7b0:	20000048 	.word	0x20000048
 800b7b4:	0800cd55 	.word	0x0800cd55
 800b7b8:	0800cd62 	.word	0x0800cd62
 800b7bc:	0800cd90 	.word	0x0800cd90

0800b7c0 <fiprintf>:
 800b7c0:	b40e      	push	{r1, r2, r3}
 800b7c2:	b503      	push	{r0, r1, lr}
 800b7c4:	4601      	mov	r1, r0
 800b7c6:	ab03      	add	r3, sp, #12
 800b7c8:	4805      	ldr	r0, [pc, #20]	; (800b7e0 <fiprintf+0x20>)
 800b7ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ce:	6800      	ldr	r0, [r0, #0]
 800b7d0:	9301      	str	r3, [sp, #4]
 800b7d2:	f000 f895 	bl	800b900 <_vfiprintf_r>
 800b7d6:	b002      	add	sp, #8
 800b7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7dc:	b003      	add	sp, #12
 800b7de:	4770      	bx	lr
 800b7e0:	20000048 	.word	0x20000048

0800b7e4 <__ascii_mbtowc>:
 800b7e4:	b082      	sub	sp, #8
 800b7e6:	b901      	cbnz	r1, 800b7ea <__ascii_mbtowc+0x6>
 800b7e8:	a901      	add	r1, sp, #4
 800b7ea:	b142      	cbz	r2, 800b7fe <__ascii_mbtowc+0x1a>
 800b7ec:	b14b      	cbz	r3, 800b802 <__ascii_mbtowc+0x1e>
 800b7ee:	7813      	ldrb	r3, [r2, #0]
 800b7f0:	600b      	str	r3, [r1, #0]
 800b7f2:	7812      	ldrb	r2, [r2, #0]
 800b7f4:	1e10      	subs	r0, r2, #0
 800b7f6:	bf18      	it	ne
 800b7f8:	2001      	movne	r0, #1
 800b7fa:	b002      	add	sp, #8
 800b7fc:	4770      	bx	lr
 800b7fe:	4610      	mov	r0, r2
 800b800:	e7fb      	b.n	800b7fa <__ascii_mbtowc+0x16>
 800b802:	f06f 0001 	mvn.w	r0, #1
 800b806:	e7f8      	b.n	800b7fa <__ascii_mbtowc+0x16>

0800b808 <memmove>:
 800b808:	4288      	cmp	r0, r1
 800b80a:	b510      	push	{r4, lr}
 800b80c:	eb01 0402 	add.w	r4, r1, r2
 800b810:	d902      	bls.n	800b818 <memmove+0x10>
 800b812:	4284      	cmp	r4, r0
 800b814:	4623      	mov	r3, r4
 800b816:	d807      	bhi.n	800b828 <memmove+0x20>
 800b818:	1e43      	subs	r3, r0, #1
 800b81a:	42a1      	cmp	r1, r4
 800b81c:	d008      	beq.n	800b830 <memmove+0x28>
 800b81e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b822:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b826:	e7f8      	b.n	800b81a <memmove+0x12>
 800b828:	4601      	mov	r1, r0
 800b82a:	4402      	add	r2, r0
 800b82c:	428a      	cmp	r2, r1
 800b82e:	d100      	bne.n	800b832 <memmove+0x2a>
 800b830:	bd10      	pop	{r4, pc}
 800b832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b83a:	e7f7      	b.n	800b82c <memmove+0x24>

0800b83c <__malloc_lock>:
 800b83c:	4801      	ldr	r0, [pc, #4]	; (800b844 <__malloc_lock+0x8>)
 800b83e:	f000 bc19 	b.w	800c074 <__retarget_lock_acquire_recursive>
 800b842:	bf00      	nop
 800b844:	2000026c 	.word	0x2000026c

0800b848 <__malloc_unlock>:
 800b848:	4801      	ldr	r0, [pc, #4]	; (800b850 <__malloc_unlock+0x8>)
 800b84a:	f000 bc14 	b.w	800c076 <__retarget_lock_release_recursive>
 800b84e:	bf00      	nop
 800b850:	2000026c 	.word	0x2000026c

0800b854 <_realloc_r>:
 800b854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b858:	4680      	mov	r8, r0
 800b85a:	4614      	mov	r4, r2
 800b85c:	460e      	mov	r6, r1
 800b85e:	b921      	cbnz	r1, 800b86a <_realloc_r+0x16>
 800b860:	4611      	mov	r1, r2
 800b862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b866:	f7ff bdad 	b.w	800b3c4 <_malloc_r>
 800b86a:	b92a      	cbnz	r2, 800b878 <_realloc_r+0x24>
 800b86c:	f7ff fd42 	bl	800b2f4 <_free_r>
 800b870:	4625      	mov	r5, r4
 800b872:	4628      	mov	r0, r5
 800b874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b878:	f000 fc64 	bl	800c144 <_malloc_usable_size_r>
 800b87c:	4284      	cmp	r4, r0
 800b87e:	4607      	mov	r7, r0
 800b880:	d802      	bhi.n	800b888 <_realloc_r+0x34>
 800b882:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b886:	d812      	bhi.n	800b8ae <_realloc_r+0x5a>
 800b888:	4621      	mov	r1, r4
 800b88a:	4640      	mov	r0, r8
 800b88c:	f7ff fd9a 	bl	800b3c4 <_malloc_r>
 800b890:	4605      	mov	r5, r0
 800b892:	2800      	cmp	r0, #0
 800b894:	d0ed      	beq.n	800b872 <_realloc_r+0x1e>
 800b896:	42bc      	cmp	r4, r7
 800b898:	4622      	mov	r2, r4
 800b89a:	4631      	mov	r1, r6
 800b89c:	bf28      	it	cs
 800b89e:	463a      	movcs	r2, r7
 800b8a0:	f7fd fe66 	bl	8009570 <memcpy>
 800b8a4:	4631      	mov	r1, r6
 800b8a6:	4640      	mov	r0, r8
 800b8a8:	f7ff fd24 	bl	800b2f4 <_free_r>
 800b8ac:	e7e1      	b.n	800b872 <_realloc_r+0x1e>
 800b8ae:	4635      	mov	r5, r6
 800b8b0:	e7df      	b.n	800b872 <_realloc_r+0x1e>

0800b8b2 <__sfputc_r>:
 800b8b2:	6893      	ldr	r3, [r2, #8]
 800b8b4:	b410      	push	{r4}
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	6093      	str	r3, [r2, #8]
 800b8bc:	da07      	bge.n	800b8ce <__sfputc_r+0x1c>
 800b8be:	6994      	ldr	r4, [r2, #24]
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	db01      	blt.n	800b8c8 <__sfputc_r+0x16>
 800b8c4:	290a      	cmp	r1, #10
 800b8c6:	d102      	bne.n	800b8ce <__sfputc_r+0x1c>
 800b8c8:	bc10      	pop	{r4}
 800b8ca:	f000 b949 	b.w	800bb60 <__swbuf_r>
 800b8ce:	6813      	ldr	r3, [r2, #0]
 800b8d0:	1c58      	adds	r0, r3, #1
 800b8d2:	6010      	str	r0, [r2, #0]
 800b8d4:	7019      	strb	r1, [r3, #0]
 800b8d6:	4608      	mov	r0, r1
 800b8d8:	bc10      	pop	{r4}
 800b8da:	4770      	bx	lr

0800b8dc <__sfputs_r>:
 800b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8de:	4606      	mov	r6, r0
 800b8e0:	460f      	mov	r7, r1
 800b8e2:	4614      	mov	r4, r2
 800b8e4:	18d5      	adds	r5, r2, r3
 800b8e6:	42ac      	cmp	r4, r5
 800b8e8:	d101      	bne.n	800b8ee <__sfputs_r+0x12>
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	e007      	b.n	800b8fe <__sfputs_r+0x22>
 800b8ee:	463a      	mov	r2, r7
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f6:	f7ff ffdc 	bl	800b8b2 <__sfputc_r>
 800b8fa:	1c43      	adds	r3, r0, #1
 800b8fc:	d1f3      	bne.n	800b8e6 <__sfputs_r+0xa>
 800b8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b900 <_vfiprintf_r>:
 800b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	460d      	mov	r5, r1
 800b906:	4614      	mov	r4, r2
 800b908:	4698      	mov	r8, r3
 800b90a:	4606      	mov	r6, r0
 800b90c:	b09d      	sub	sp, #116	; 0x74
 800b90e:	b118      	cbz	r0, 800b918 <_vfiprintf_r+0x18>
 800b910:	6983      	ldr	r3, [r0, #24]
 800b912:	b90b      	cbnz	r3, 800b918 <_vfiprintf_r+0x18>
 800b914:	f000 fb10 	bl	800bf38 <__sinit>
 800b918:	4b89      	ldr	r3, [pc, #548]	; (800bb40 <_vfiprintf_r+0x240>)
 800b91a:	429d      	cmp	r5, r3
 800b91c:	d11b      	bne.n	800b956 <_vfiprintf_r+0x56>
 800b91e:	6875      	ldr	r5, [r6, #4]
 800b920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b922:	07d9      	lsls	r1, r3, #31
 800b924:	d405      	bmi.n	800b932 <_vfiprintf_r+0x32>
 800b926:	89ab      	ldrh	r3, [r5, #12]
 800b928:	059a      	lsls	r2, r3, #22
 800b92a:	d402      	bmi.n	800b932 <_vfiprintf_r+0x32>
 800b92c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b92e:	f000 fba1 	bl	800c074 <__retarget_lock_acquire_recursive>
 800b932:	89ab      	ldrh	r3, [r5, #12]
 800b934:	071b      	lsls	r3, r3, #28
 800b936:	d501      	bpl.n	800b93c <_vfiprintf_r+0x3c>
 800b938:	692b      	ldr	r3, [r5, #16]
 800b93a:	b9eb      	cbnz	r3, 800b978 <_vfiprintf_r+0x78>
 800b93c:	4629      	mov	r1, r5
 800b93e:	4630      	mov	r0, r6
 800b940:	f000 f96e 	bl	800bc20 <__swsetup_r>
 800b944:	b1c0      	cbz	r0, 800b978 <_vfiprintf_r+0x78>
 800b946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b948:	07dc      	lsls	r4, r3, #31
 800b94a:	d50e      	bpl.n	800b96a <_vfiprintf_r+0x6a>
 800b94c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b950:	b01d      	add	sp, #116	; 0x74
 800b952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b956:	4b7b      	ldr	r3, [pc, #492]	; (800bb44 <_vfiprintf_r+0x244>)
 800b958:	429d      	cmp	r5, r3
 800b95a:	d101      	bne.n	800b960 <_vfiprintf_r+0x60>
 800b95c:	68b5      	ldr	r5, [r6, #8]
 800b95e:	e7df      	b.n	800b920 <_vfiprintf_r+0x20>
 800b960:	4b79      	ldr	r3, [pc, #484]	; (800bb48 <_vfiprintf_r+0x248>)
 800b962:	429d      	cmp	r5, r3
 800b964:	bf08      	it	eq
 800b966:	68f5      	ldreq	r5, [r6, #12]
 800b968:	e7da      	b.n	800b920 <_vfiprintf_r+0x20>
 800b96a:	89ab      	ldrh	r3, [r5, #12]
 800b96c:	0598      	lsls	r0, r3, #22
 800b96e:	d4ed      	bmi.n	800b94c <_vfiprintf_r+0x4c>
 800b970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b972:	f000 fb80 	bl	800c076 <__retarget_lock_release_recursive>
 800b976:	e7e9      	b.n	800b94c <_vfiprintf_r+0x4c>
 800b978:	2300      	movs	r3, #0
 800b97a:	9309      	str	r3, [sp, #36]	; 0x24
 800b97c:	2320      	movs	r3, #32
 800b97e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b982:	2330      	movs	r3, #48	; 0x30
 800b984:	f04f 0901 	mov.w	r9, #1
 800b988:	f8cd 800c 	str.w	r8, [sp, #12]
 800b98c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bb4c <_vfiprintf_r+0x24c>
 800b990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b994:	4623      	mov	r3, r4
 800b996:	469a      	mov	sl, r3
 800b998:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b99c:	b10a      	cbz	r2, 800b9a2 <_vfiprintf_r+0xa2>
 800b99e:	2a25      	cmp	r2, #37	; 0x25
 800b9a0:	d1f9      	bne.n	800b996 <_vfiprintf_r+0x96>
 800b9a2:	ebba 0b04 	subs.w	fp, sl, r4
 800b9a6:	d00b      	beq.n	800b9c0 <_vfiprintf_r+0xc0>
 800b9a8:	465b      	mov	r3, fp
 800b9aa:	4622      	mov	r2, r4
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	f7ff ff94 	bl	800b8dc <__sfputs_r>
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	f000 80aa 	beq.w	800bb0e <_vfiprintf_r+0x20e>
 800b9ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9bc:	445a      	add	r2, fp
 800b9be:	9209      	str	r2, [sp, #36]	; 0x24
 800b9c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 80a2 	beq.w	800bb0e <_vfiprintf_r+0x20e>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9d4:	f10a 0a01 	add.w	sl, sl, #1
 800b9d8:	9304      	str	r3, [sp, #16]
 800b9da:	9307      	str	r3, [sp, #28]
 800b9dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9e0:	931a      	str	r3, [sp, #104]	; 0x68
 800b9e2:	4654      	mov	r4, sl
 800b9e4:	2205      	movs	r2, #5
 800b9e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ea:	4858      	ldr	r0, [pc, #352]	; (800bb4c <_vfiprintf_r+0x24c>)
 800b9ec:	f7ff f8de 	bl	800abac <memchr>
 800b9f0:	9a04      	ldr	r2, [sp, #16]
 800b9f2:	b9d8      	cbnz	r0, 800ba2c <_vfiprintf_r+0x12c>
 800b9f4:	06d1      	lsls	r1, r2, #27
 800b9f6:	bf44      	itt	mi
 800b9f8:	2320      	movmi	r3, #32
 800b9fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9fe:	0713      	lsls	r3, r2, #28
 800ba00:	bf44      	itt	mi
 800ba02:	232b      	movmi	r3, #43	; 0x2b
 800ba04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba08:	f89a 3000 	ldrb.w	r3, [sl]
 800ba0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba0e:	d015      	beq.n	800ba3c <_vfiprintf_r+0x13c>
 800ba10:	4654      	mov	r4, sl
 800ba12:	2000      	movs	r0, #0
 800ba14:	f04f 0c0a 	mov.w	ip, #10
 800ba18:	9a07      	ldr	r2, [sp, #28]
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba20:	3b30      	subs	r3, #48	; 0x30
 800ba22:	2b09      	cmp	r3, #9
 800ba24:	d94e      	bls.n	800bac4 <_vfiprintf_r+0x1c4>
 800ba26:	b1b0      	cbz	r0, 800ba56 <_vfiprintf_r+0x156>
 800ba28:	9207      	str	r2, [sp, #28]
 800ba2a:	e014      	b.n	800ba56 <_vfiprintf_r+0x156>
 800ba2c:	eba0 0308 	sub.w	r3, r0, r8
 800ba30:	fa09 f303 	lsl.w	r3, r9, r3
 800ba34:	4313      	orrs	r3, r2
 800ba36:	46a2      	mov	sl, r4
 800ba38:	9304      	str	r3, [sp, #16]
 800ba3a:	e7d2      	b.n	800b9e2 <_vfiprintf_r+0xe2>
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	1d19      	adds	r1, r3, #4
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	9103      	str	r1, [sp, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	bfbb      	ittet	lt
 800ba48:	425b      	neglt	r3, r3
 800ba4a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba4e:	9307      	strge	r3, [sp, #28]
 800ba50:	9307      	strlt	r3, [sp, #28]
 800ba52:	bfb8      	it	lt
 800ba54:	9204      	strlt	r2, [sp, #16]
 800ba56:	7823      	ldrb	r3, [r4, #0]
 800ba58:	2b2e      	cmp	r3, #46	; 0x2e
 800ba5a:	d10c      	bne.n	800ba76 <_vfiprintf_r+0x176>
 800ba5c:	7863      	ldrb	r3, [r4, #1]
 800ba5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba60:	d135      	bne.n	800bace <_vfiprintf_r+0x1ce>
 800ba62:	9b03      	ldr	r3, [sp, #12]
 800ba64:	3402      	adds	r4, #2
 800ba66:	1d1a      	adds	r2, r3, #4
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	9203      	str	r2, [sp, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	bfb8      	it	lt
 800ba70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ba74:	9305      	str	r3, [sp, #20]
 800ba76:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bb50 <_vfiprintf_r+0x250>
 800ba7a:	2203      	movs	r2, #3
 800ba7c:	4650      	mov	r0, sl
 800ba7e:	7821      	ldrb	r1, [r4, #0]
 800ba80:	f7ff f894 	bl	800abac <memchr>
 800ba84:	b140      	cbz	r0, 800ba98 <_vfiprintf_r+0x198>
 800ba86:	2340      	movs	r3, #64	; 0x40
 800ba88:	eba0 000a 	sub.w	r0, r0, sl
 800ba8c:	fa03 f000 	lsl.w	r0, r3, r0
 800ba90:	9b04      	ldr	r3, [sp, #16]
 800ba92:	3401      	adds	r4, #1
 800ba94:	4303      	orrs	r3, r0
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba9c:	2206      	movs	r2, #6
 800ba9e:	482d      	ldr	r0, [pc, #180]	; (800bb54 <_vfiprintf_r+0x254>)
 800baa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baa4:	f7ff f882 	bl	800abac <memchr>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d03f      	beq.n	800bb2c <_vfiprintf_r+0x22c>
 800baac:	4b2a      	ldr	r3, [pc, #168]	; (800bb58 <_vfiprintf_r+0x258>)
 800baae:	bb1b      	cbnz	r3, 800baf8 <_vfiprintf_r+0x1f8>
 800bab0:	9b03      	ldr	r3, [sp, #12]
 800bab2:	3307      	adds	r3, #7
 800bab4:	f023 0307 	bic.w	r3, r3, #7
 800bab8:	3308      	adds	r3, #8
 800baba:	9303      	str	r3, [sp, #12]
 800babc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800babe:	443b      	add	r3, r7
 800bac0:	9309      	str	r3, [sp, #36]	; 0x24
 800bac2:	e767      	b.n	800b994 <_vfiprintf_r+0x94>
 800bac4:	460c      	mov	r4, r1
 800bac6:	2001      	movs	r0, #1
 800bac8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bacc:	e7a5      	b.n	800ba1a <_vfiprintf_r+0x11a>
 800bace:	2300      	movs	r3, #0
 800bad0:	f04f 0c0a 	mov.w	ip, #10
 800bad4:	4619      	mov	r1, r3
 800bad6:	3401      	adds	r4, #1
 800bad8:	9305      	str	r3, [sp, #20]
 800bada:	4620      	mov	r0, r4
 800badc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bae0:	3a30      	subs	r2, #48	; 0x30
 800bae2:	2a09      	cmp	r2, #9
 800bae4:	d903      	bls.n	800baee <_vfiprintf_r+0x1ee>
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0c5      	beq.n	800ba76 <_vfiprintf_r+0x176>
 800baea:	9105      	str	r1, [sp, #20]
 800baec:	e7c3      	b.n	800ba76 <_vfiprintf_r+0x176>
 800baee:	4604      	mov	r4, r0
 800baf0:	2301      	movs	r3, #1
 800baf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800baf6:	e7f0      	b.n	800bada <_vfiprintf_r+0x1da>
 800baf8:	ab03      	add	r3, sp, #12
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	462a      	mov	r2, r5
 800bafe:	4630      	mov	r0, r6
 800bb00:	4b16      	ldr	r3, [pc, #88]	; (800bb5c <_vfiprintf_r+0x25c>)
 800bb02:	a904      	add	r1, sp, #16
 800bb04:	f7fd fde8 	bl	80096d8 <_printf_float>
 800bb08:	4607      	mov	r7, r0
 800bb0a:	1c78      	adds	r0, r7, #1
 800bb0c:	d1d6      	bne.n	800babc <_vfiprintf_r+0x1bc>
 800bb0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb10:	07d9      	lsls	r1, r3, #31
 800bb12:	d405      	bmi.n	800bb20 <_vfiprintf_r+0x220>
 800bb14:	89ab      	ldrh	r3, [r5, #12]
 800bb16:	059a      	lsls	r2, r3, #22
 800bb18:	d402      	bmi.n	800bb20 <_vfiprintf_r+0x220>
 800bb1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb1c:	f000 faab 	bl	800c076 <__retarget_lock_release_recursive>
 800bb20:	89ab      	ldrh	r3, [r5, #12]
 800bb22:	065b      	lsls	r3, r3, #25
 800bb24:	f53f af12 	bmi.w	800b94c <_vfiprintf_r+0x4c>
 800bb28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb2a:	e711      	b.n	800b950 <_vfiprintf_r+0x50>
 800bb2c:	ab03      	add	r3, sp, #12
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	462a      	mov	r2, r5
 800bb32:	4630      	mov	r0, r6
 800bb34:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <_vfiprintf_r+0x25c>)
 800bb36:	a904      	add	r1, sp, #16
 800bb38:	f7fe f86a 	bl	8009c10 <_printf_i>
 800bb3c:	e7e4      	b.n	800bb08 <_vfiprintf_r+0x208>
 800bb3e:	bf00      	nop
 800bb40:	0800cebc 	.word	0x0800cebc
 800bb44:	0800cedc 	.word	0x0800cedc
 800bb48:	0800ce9c 	.word	0x0800ce9c
 800bb4c:	0800cd44 	.word	0x0800cd44
 800bb50:	0800cd4a 	.word	0x0800cd4a
 800bb54:	0800cd4e 	.word	0x0800cd4e
 800bb58:	080096d9 	.word	0x080096d9
 800bb5c:	0800b8dd 	.word	0x0800b8dd

0800bb60 <__swbuf_r>:
 800bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb62:	460e      	mov	r6, r1
 800bb64:	4614      	mov	r4, r2
 800bb66:	4605      	mov	r5, r0
 800bb68:	b118      	cbz	r0, 800bb72 <__swbuf_r+0x12>
 800bb6a:	6983      	ldr	r3, [r0, #24]
 800bb6c:	b90b      	cbnz	r3, 800bb72 <__swbuf_r+0x12>
 800bb6e:	f000 f9e3 	bl	800bf38 <__sinit>
 800bb72:	4b21      	ldr	r3, [pc, #132]	; (800bbf8 <__swbuf_r+0x98>)
 800bb74:	429c      	cmp	r4, r3
 800bb76:	d12b      	bne.n	800bbd0 <__swbuf_r+0x70>
 800bb78:	686c      	ldr	r4, [r5, #4]
 800bb7a:	69a3      	ldr	r3, [r4, #24]
 800bb7c:	60a3      	str	r3, [r4, #8]
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	071a      	lsls	r2, r3, #28
 800bb82:	d52f      	bpl.n	800bbe4 <__swbuf_r+0x84>
 800bb84:	6923      	ldr	r3, [r4, #16]
 800bb86:	b36b      	cbz	r3, 800bbe4 <__swbuf_r+0x84>
 800bb88:	6923      	ldr	r3, [r4, #16]
 800bb8a:	6820      	ldr	r0, [r4, #0]
 800bb8c:	b2f6      	uxtb	r6, r6
 800bb8e:	1ac0      	subs	r0, r0, r3
 800bb90:	6963      	ldr	r3, [r4, #20]
 800bb92:	4637      	mov	r7, r6
 800bb94:	4283      	cmp	r3, r0
 800bb96:	dc04      	bgt.n	800bba2 <__swbuf_r+0x42>
 800bb98:	4621      	mov	r1, r4
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	f000 f938 	bl	800be10 <_fflush_r>
 800bba0:	bb30      	cbnz	r0, 800bbf0 <__swbuf_r+0x90>
 800bba2:	68a3      	ldr	r3, [r4, #8]
 800bba4:	3001      	adds	r0, #1
 800bba6:	3b01      	subs	r3, #1
 800bba8:	60a3      	str	r3, [r4, #8]
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	1c5a      	adds	r2, r3, #1
 800bbae:	6022      	str	r2, [r4, #0]
 800bbb0:	701e      	strb	r6, [r3, #0]
 800bbb2:	6963      	ldr	r3, [r4, #20]
 800bbb4:	4283      	cmp	r3, r0
 800bbb6:	d004      	beq.n	800bbc2 <__swbuf_r+0x62>
 800bbb8:	89a3      	ldrh	r3, [r4, #12]
 800bbba:	07db      	lsls	r3, r3, #31
 800bbbc:	d506      	bpl.n	800bbcc <__swbuf_r+0x6c>
 800bbbe:	2e0a      	cmp	r6, #10
 800bbc0:	d104      	bne.n	800bbcc <__swbuf_r+0x6c>
 800bbc2:	4621      	mov	r1, r4
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	f000 f923 	bl	800be10 <_fflush_r>
 800bbca:	b988      	cbnz	r0, 800bbf0 <__swbuf_r+0x90>
 800bbcc:	4638      	mov	r0, r7
 800bbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbd0:	4b0a      	ldr	r3, [pc, #40]	; (800bbfc <__swbuf_r+0x9c>)
 800bbd2:	429c      	cmp	r4, r3
 800bbd4:	d101      	bne.n	800bbda <__swbuf_r+0x7a>
 800bbd6:	68ac      	ldr	r4, [r5, #8]
 800bbd8:	e7cf      	b.n	800bb7a <__swbuf_r+0x1a>
 800bbda:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <__swbuf_r+0xa0>)
 800bbdc:	429c      	cmp	r4, r3
 800bbde:	bf08      	it	eq
 800bbe0:	68ec      	ldreq	r4, [r5, #12]
 800bbe2:	e7ca      	b.n	800bb7a <__swbuf_r+0x1a>
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	f000 f81a 	bl	800bc20 <__swsetup_r>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	d0cb      	beq.n	800bb88 <__swbuf_r+0x28>
 800bbf0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bbf4:	e7ea      	b.n	800bbcc <__swbuf_r+0x6c>
 800bbf6:	bf00      	nop
 800bbf8:	0800cebc 	.word	0x0800cebc
 800bbfc:	0800cedc 	.word	0x0800cedc
 800bc00:	0800ce9c 	.word	0x0800ce9c

0800bc04 <__ascii_wctomb>:
 800bc04:	4603      	mov	r3, r0
 800bc06:	4608      	mov	r0, r1
 800bc08:	b141      	cbz	r1, 800bc1c <__ascii_wctomb+0x18>
 800bc0a:	2aff      	cmp	r2, #255	; 0xff
 800bc0c:	d904      	bls.n	800bc18 <__ascii_wctomb+0x14>
 800bc0e:	228a      	movs	r2, #138	; 0x8a
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc14:	601a      	str	r2, [r3, #0]
 800bc16:	4770      	bx	lr
 800bc18:	2001      	movs	r0, #1
 800bc1a:	700a      	strb	r2, [r1, #0]
 800bc1c:	4770      	bx	lr
	...

0800bc20 <__swsetup_r>:
 800bc20:	4b32      	ldr	r3, [pc, #200]	; (800bcec <__swsetup_r+0xcc>)
 800bc22:	b570      	push	{r4, r5, r6, lr}
 800bc24:	681d      	ldr	r5, [r3, #0]
 800bc26:	4606      	mov	r6, r0
 800bc28:	460c      	mov	r4, r1
 800bc2a:	b125      	cbz	r5, 800bc36 <__swsetup_r+0x16>
 800bc2c:	69ab      	ldr	r3, [r5, #24]
 800bc2e:	b913      	cbnz	r3, 800bc36 <__swsetup_r+0x16>
 800bc30:	4628      	mov	r0, r5
 800bc32:	f000 f981 	bl	800bf38 <__sinit>
 800bc36:	4b2e      	ldr	r3, [pc, #184]	; (800bcf0 <__swsetup_r+0xd0>)
 800bc38:	429c      	cmp	r4, r3
 800bc3a:	d10f      	bne.n	800bc5c <__swsetup_r+0x3c>
 800bc3c:	686c      	ldr	r4, [r5, #4]
 800bc3e:	89a3      	ldrh	r3, [r4, #12]
 800bc40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc44:	0719      	lsls	r1, r3, #28
 800bc46:	d42c      	bmi.n	800bca2 <__swsetup_r+0x82>
 800bc48:	06dd      	lsls	r5, r3, #27
 800bc4a:	d411      	bmi.n	800bc70 <__swsetup_r+0x50>
 800bc4c:	2309      	movs	r3, #9
 800bc4e:	6033      	str	r3, [r6, #0]
 800bc50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc58:	81a3      	strh	r3, [r4, #12]
 800bc5a:	e03e      	b.n	800bcda <__swsetup_r+0xba>
 800bc5c:	4b25      	ldr	r3, [pc, #148]	; (800bcf4 <__swsetup_r+0xd4>)
 800bc5e:	429c      	cmp	r4, r3
 800bc60:	d101      	bne.n	800bc66 <__swsetup_r+0x46>
 800bc62:	68ac      	ldr	r4, [r5, #8]
 800bc64:	e7eb      	b.n	800bc3e <__swsetup_r+0x1e>
 800bc66:	4b24      	ldr	r3, [pc, #144]	; (800bcf8 <__swsetup_r+0xd8>)
 800bc68:	429c      	cmp	r4, r3
 800bc6a:	bf08      	it	eq
 800bc6c:	68ec      	ldreq	r4, [r5, #12]
 800bc6e:	e7e6      	b.n	800bc3e <__swsetup_r+0x1e>
 800bc70:	0758      	lsls	r0, r3, #29
 800bc72:	d512      	bpl.n	800bc9a <__swsetup_r+0x7a>
 800bc74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc76:	b141      	cbz	r1, 800bc8a <__swsetup_r+0x6a>
 800bc78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc7c:	4299      	cmp	r1, r3
 800bc7e:	d002      	beq.n	800bc86 <__swsetup_r+0x66>
 800bc80:	4630      	mov	r0, r6
 800bc82:	f7ff fb37 	bl	800b2f4 <_free_r>
 800bc86:	2300      	movs	r3, #0
 800bc88:	6363      	str	r3, [r4, #52]	; 0x34
 800bc8a:	89a3      	ldrh	r3, [r4, #12]
 800bc8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc90:	81a3      	strh	r3, [r4, #12]
 800bc92:	2300      	movs	r3, #0
 800bc94:	6063      	str	r3, [r4, #4]
 800bc96:	6923      	ldr	r3, [r4, #16]
 800bc98:	6023      	str	r3, [r4, #0]
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	f043 0308 	orr.w	r3, r3, #8
 800bca0:	81a3      	strh	r3, [r4, #12]
 800bca2:	6923      	ldr	r3, [r4, #16]
 800bca4:	b94b      	cbnz	r3, 800bcba <__swsetup_r+0x9a>
 800bca6:	89a3      	ldrh	r3, [r4, #12]
 800bca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bcac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcb0:	d003      	beq.n	800bcba <__swsetup_r+0x9a>
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f000 fa05 	bl	800c0c4 <__smakebuf_r>
 800bcba:	89a0      	ldrh	r0, [r4, #12]
 800bcbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcc0:	f010 0301 	ands.w	r3, r0, #1
 800bcc4:	d00a      	beq.n	800bcdc <__swsetup_r+0xbc>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	60a3      	str	r3, [r4, #8]
 800bcca:	6963      	ldr	r3, [r4, #20]
 800bccc:	425b      	negs	r3, r3
 800bcce:	61a3      	str	r3, [r4, #24]
 800bcd0:	6923      	ldr	r3, [r4, #16]
 800bcd2:	b943      	cbnz	r3, 800bce6 <__swsetup_r+0xc6>
 800bcd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcd8:	d1ba      	bne.n	800bc50 <__swsetup_r+0x30>
 800bcda:	bd70      	pop	{r4, r5, r6, pc}
 800bcdc:	0781      	lsls	r1, r0, #30
 800bcde:	bf58      	it	pl
 800bce0:	6963      	ldrpl	r3, [r4, #20]
 800bce2:	60a3      	str	r3, [r4, #8]
 800bce4:	e7f4      	b.n	800bcd0 <__swsetup_r+0xb0>
 800bce6:	2000      	movs	r0, #0
 800bce8:	e7f7      	b.n	800bcda <__swsetup_r+0xba>
 800bcea:	bf00      	nop
 800bcec:	20000048 	.word	0x20000048
 800bcf0:	0800cebc 	.word	0x0800cebc
 800bcf4:	0800cedc 	.word	0x0800cedc
 800bcf8:	0800ce9c 	.word	0x0800ce9c

0800bcfc <abort>:
 800bcfc:	2006      	movs	r0, #6
 800bcfe:	b508      	push	{r3, lr}
 800bd00:	f000 fa50 	bl	800c1a4 <raise>
 800bd04:	2001      	movs	r0, #1
 800bd06:	f7f7 fb30 	bl	800336a <_exit>
	...

0800bd0c <__sflush_r>:
 800bd0c:	898a      	ldrh	r2, [r1, #12]
 800bd0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd10:	4605      	mov	r5, r0
 800bd12:	0710      	lsls	r0, r2, #28
 800bd14:	460c      	mov	r4, r1
 800bd16:	d457      	bmi.n	800bdc8 <__sflush_r+0xbc>
 800bd18:	684b      	ldr	r3, [r1, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	dc04      	bgt.n	800bd28 <__sflush_r+0x1c>
 800bd1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	dc01      	bgt.n	800bd28 <__sflush_r+0x1c>
 800bd24:	2000      	movs	r0, #0
 800bd26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd2a:	2e00      	cmp	r6, #0
 800bd2c:	d0fa      	beq.n	800bd24 <__sflush_r+0x18>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd34:	682f      	ldr	r7, [r5, #0]
 800bd36:	602b      	str	r3, [r5, #0]
 800bd38:	d032      	beq.n	800bda0 <__sflush_r+0x94>
 800bd3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd3c:	89a3      	ldrh	r3, [r4, #12]
 800bd3e:	075a      	lsls	r2, r3, #29
 800bd40:	d505      	bpl.n	800bd4e <__sflush_r+0x42>
 800bd42:	6863      	ldr	r3, [r4, #4]
 800bd44:	1ac0      	subs	r0, r0, r3
 800bd46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd48:	b10b      	cbz	r3, 800bd4e <__sflush_r+0x42>
 800bd4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd4c:	1ac0      	subs	r0, r0, r3
 800bd4e:	2300      	movs	r3, #0
 800bd50:	4602      	mov	r2, r0
 800bd52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd54:	4628      	mov	r0, r5
 800bd56:	6a21      	ldr	r1, [r4, #32]
 800bd58:	47b0      	blx	r6
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	d106      	bne.n	800bd6e <__sflush_r+0x62>
 800bd60:	6829      	ldr	r1, [r5, #0]
 800bd62:	291d      	cmp	r1, #29
 800bd64:	d82c      	bhi.n	800bdc0 <__sflush_r+0xb4>
 800bd66:	4a29      	ldr	r2, [pc, #164]	; (800be0c <__sflush_r+0x100>)
 800bd68:	40ca      	lsrs	r2, r1
 800bd6a:	07d6      	lsls	r6, r2, #31
 800bd6c:	d528      	bpl.n	800bdc0 <__sflush_r+0xb4>
 800bd6e:	2200      	movs	r2, #0
 800bd70:	6062      	str	r2, [r4, #4]
 800bd72:	6922      	ldr	r2, [r4, #16]
 800bd74:	04d9      	lsls	r1, r3, #19
 800bd76:	6022      	str	r2, [r4, #0]
 800bd78:	d504      	bpl.n	800bd84 <__sflush_r+0x78>
 800bd7a:	1c42      	adds	r2, r0, #1
 800bd7c:	d101      	bne.n	800bd82 <__sflush_r+0x76>
 800bd7e:	682b      	ldr	r3, [r5, #0]
 800bd80:	b903      	cbnz	r3, 800bd84 <__sflush_r+0x78>
 800bd82:	6560      	str	r0, [r4, #84]	; 0x54
 800bd84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd86:	602f      	str	r7, [r5, #0]
 800bd88:	2900      	cmp	r1, #0
 800bd8a:	d0cb      	beq.n	800bd24 <__sflush_r+0x18>
 800bd8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd90:	4299      	cmp	r1, r3
 800bd92:	d002      	beq.n	800bd9a <__sflush_r+0x8e>
 800bd94:	4628      	mov	r0, r5
 800bd96:	f7ff faad 	bl	800b2f4 <_free_r>
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	6360      	str	r0, [r4, #52]	; 0x34
 800bd9e:	e7c2      	b.n	800bd26 <__sflush_r+0x1a>
 800bda0:	6a21      	ldr	r1, [r4, #32]
 800bda2:	2301      	movs	r3, #1
 800bda4:	4628      	mov	r0, r5
 800bda6:	47b0      	blx	r6
 800bda8:	1c41      	adds	r1, r0, #1
 800bdaa:	d1c7      	bne.n	800bd3c <__sflush_r+0x30>
 800bdac:	682b      	ldr	r3, [r5, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0c4      	beq.n	800bd3c <__sflush_r+0x30>
 800bdb2:	2b1d      	cmp	r3, #29
 800bdb4:	d001      	beq.n	800bdba <__sflush_r+0xae>
 800bdb6:	2b16      	cmp	r3, #22
 800bdb8:	d101      	bne.n	800bdbe <__sflush_r+0xb2>
 800bdba:	602f      	str	r7, [r5, #0]
 800bdbc:	e7b2      	b.n	800bd24 <__sflush_r+0x18>
 800bdbe:	89a3      	ldrh	r3, [r4, #12]
 800bdc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdc4:	81a3      	strh	r3, [r4, #12]
 800bdc6:	e7ae      	b.n	800bd26 <__sflush_r+0x1a>
 800bdc8:	690f      	ldr	r7, [r1, #16]
 800bdca:	2f00      	cmp	r7, #0
 800bdcc:	d0aa      	beq.n	800bd24 <__sflush_r+0x18>
 800bdce:	0793      	lsls	r3, r2, #30
 800bdd0:	bf18      	it	ne
 800bdd2:	2300      	movne	r3, #0
 800bdd4:	680e      	ldr	r6, [r1, #0]
 800bdd6:	bf08      	it	eq
 800bdd8:	694b      	ldreq	r3, [r1, #20]
 800bdda:	1bf6      	subs	r6, r6, r7
 800bddc:	600f      	str	r7, [r1, #0]
 800bdde:	608b      	str	r3, [r1, #8]
 800bde0:	2e00      	cmp	r6, #0
 800bde2:	dd9f      	ble.n	800bd24 <__sflush_r+0x18>
 800bde4:	4633      	mov	r3, r6
 800bde6:	463a      	mov	r2, r7
 800bde8:	4628      	mov	r0, r5
 800bdea:	6a21      	ldr	r1, [r4, #32]
 800bdec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bdf0:	47e0      	blx	ip
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	dc06      	bgt.n	800be04 <__sflush_r+0xf8>
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be00:	81a3      	strh	r3, [r4, #12]
 800be02:	e790      	b.n	800bd26 <__sflush_r+0x1a>
 800be04:	4407      	add	r7, r0
 800be06:	1a36      	subs	r6, r6, r0
 800be08:	e7ea      	b.n	800bde0 <__sflush_r+0xd4>
 800be0a:	bf00      	nop
 800be0c:	20400001 	.word	0x20400001

0800be10 <_fflush_r>:
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	690b      	ldr	r3, [r1, #16]
 800be14:	4605      	mov	r5, r0
 800be16:	460c      	mov	r4, r1
 800be18:	b913      	cbnz	r3, 800be20 <_fflush_r+0x10>
 800be1a:	2500      	movs	r5, #0
 800be1c:	4628      	mov	r0, r5
 800be1e:	bd38      	pop	{r3, r4, r5, pc}
 800be20:	b118      	cbz	r0, 800be2a <_fflush_r+0x1a>
 800be22:	6983      	ldr	r3, [r0, #24]
 800be24:	b90b      	cbnz	r3, 800be2a <_fflush_r+0x1a>
 800be26:	f000 f887 	bl	800bf38 <__sinit>
 800be2a:	4b14      	ldr	r3, [pc, #80]	; (800be7c <_fflush_r+0x6c>)
 800be2c:	429c      	cmp	r4, r3
 800be2e:	d11b      	bne.n	800be68 <_fflush_r+0x58>
 800be30:	686c      	ldr	r4, [r5, #4]
 800be32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d0ef      	beq.n	800be1a <_fflush_r+0xa>
 800be3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be3c:	07d0      	lsls	r0, r2, #31
 800be3e:	d404      	bmi.n	800be4a <_fflush_r+0x3a>
 800be40:	0599      	lsls	r1, r3, #22
 800be42:	d402      	bmi.n	800be4a <_fflush_r+0x3a>
 800be44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be46:	f000 f915 	bl	800c074 <__retarget_lock_acquire_recursive>
 800be4a:	4628      	mov	r0, r5
 800be4c:	4621      	mov	r1, r4
 800be4e:	f7ff ff5d 	bl	800bd0c <__sflush_r>
 800be52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be54:	4605      	mov	r5, r0
 800be56:	07da      	lsls	r2, r3, #31
 800be58:	d4e0      	bmi.n	800be1c <_fflush_r+0xc>
 800be5a:	89a3      	ldrh	r3, [r4, #12]
 800be5c:	059b      	lsls	r3, r3, #22
 800be5e:	d4dd      	bmi.n	800be1c <_fflush_r+0xc>
 800be60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be62:	f000 f908 	bl	800c076 <__retarget_lock_release_recursive>
 800be66:	e7d9      	b.n	800be1c <_fflush_r+0xc>
 800be68:	4b05      	ldr	r3, [pc, #20]	; (800be80 <_fflush_r+0x70>)
 800be6a:	429c      	cmp	r4, r3
 800be6c:	d101      	bne.n	800be72 <_fflush_r+0x62>
 800be6e:	68ac      	ldr	r4, [r5, #8]
 800be70:	e7df      	b.n	800be32 <_fflush_r+0x22>
 800be72:	4b04      	ldr	r3, [pc, #16]	; (800be84 <_fflush_r+0x74>)
 800be74:	429c      	cmp	r4, r3
 800be76:	bf08      	it	eq
 800be78:	68ec      	ldreq	r4, [r5, #12]
 800be7a:	e7da      	b.n	800be32 <_fflush_r+0x22>
 800be7c:	0800cebc 	.word	0x0800cebc
 800be80:	0800cedc 	.word	0x0800cedc
 800be84:	0800ce9c 	.word	0x0800ce9c

0800be88 <std>:
 800be88:	2300      	movs	r3, #0
 800be8a:	b510      	push	{r4, lr}
 800be8c:	4604      	mov	r4, r0
 800be8e:	e9c0 3300 	strd	r3, r3, [r0]
 800be92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be96:	6083      	str	r3, [r0, #8]
 800be98:	8181      	strh	r1, [r0, #12]
 800be9a:	6643      	str	r3, [r0, #100]	; 0x64
 800be9c:	81c2      	strh	r2, [r0, #14]
 800be9e:	6183      	str	r3, [r0, #24]
 800bea0:	4619      	mov	r1, r3
 800bea2:	2208      	movs	r2, #8
 800bea4:	305c      	adds	r0, #92	; 0x5c
 800bea6:	f7fd fb71 	bl	800958c <memset>
 800beaa:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <std+0x38>)
 800beac:	6224      	str	r4, [r4, #32]
 800beae:	6263      	str	r3, [r4, #36]	; 0x24
 800beb0:	4b04      	ldr	r3, [pc, #16]	; (800bec4 <std+0x3c>)
 800beb2:	62a3      	str	r3, [r4, #40]	; 0x28
 800beb4:	4b04      	ldr	r3, [pc, #16]	; (800bec8 <std+0x40>)
 800beb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800beb8:	4b04      	ldr	r3, [pc, #16]	; (800becc <std+0x44>)
 800beba:	6323      	str	r3, [r4, #48]	; 0x30
 800bebc:	bd10      	pop	{r4, pc}
 800bebe:	bf00      	nop
 800bec0:	0800c1dd 	.word	0x0800c1dd
 800bec4:	0800c1ff 	.word	0x0800c1ff
 800bec8:	0800c237 	.word	0x0800c237
 800becc:	0800c25b 	.word	0x0800c25b

0800bed0 <_cleanup_r>:
 800bed0:	4901      	ldr	r1, [pc, #4]	; (800bed8 <_cleanup_r+0x8>)
 800bed2:	f000 b8af 	b.w	800c034 <_fwalk_reent>
 800bed6:	bf00      	nop
 800bed8:	0800be11 	.word	0x0800be11

0800bedc <__sfmoreglue>:
 800bedc:	2268      	movs	r2, #104	; 0x68
 800bede:	b570      	push	{r4, r5, r6, lr}
 800bee0:	1e4d      	subs	r5, r1, #1
 800bee2:	4355      	muls	r5, r2
 800bee4:	460e      	mov	r6, r1
 800bee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800beea:	f7ff fa6b 	bl	800b3c4 <_malloc_r>
 800beee:	4604      	mov	r4, r0
 800bef0:	b140      	cbz	r0, 800bf04 <__sfmoreglue+0x28>
 800bef2:	2100      	movs	r1, #0
 800bef4:	e9c0 1600 	strd	r1, r6, [r0]
 800bef8:	300c      	adds	r0, #12
 800befa:	60a0      	str	r0, [r4, #8]
 800befc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf00:	f7fd fb44 	bl	800958c <memset>
 800bf04:	4620      	mov	r0, r4
 800bf06:	bd70      	pop	{r4, r5, r6, pc}

0800bf08 <__sfp_lock_acquire>:
 800bf08:	4801      	ldr	r0, [pc, #4]	; (800bf10 <__sfp_lock_acquire+0x8>)
 800bf0a:	f000 b8b3 	b.w	800c074 <__retarget_lock_acquire_recursive>
 800bf0e:	bf00      	nop
 800bf10:	2000026d 	.word	0x2000026d

0800bf14 <__sfp_lock_release>:
 800bf14:	4801      	ldr	r0, [pc, #4]	; (800bf1c <__sfp_lock_release+0x8>)
 800bf16:	f000 b8ae 	b.w	800c076 <__retarget_lock_release_recursive>
 800bf1a:	bf00      	nop
 800bf1c:	2000026d 	.word	0x2000026d

0800bf20 <__sinit_lock_acquire>:
 800bf20:	4801      	ldr	r0, [pc, #4]	; (800bf28 <__sinit_lock_acquire+0x8>)
 800bf22:	f000 b8a7 	b.w	800c074 <__retarget_lock_acquire_recursive>
 800bf26:	bf00      	nop
 800bf28:	2000026e 	.word	0x2000026e

0800bf2c <__sinit_lock_release>:
 800bf2c:	4801      	ldr	r0, [pc, #4]	; (800bf34 <__sinit_lock_release+0x8>)
 800bf2e:	f000 b8a2 	b.w	800c076 <__retarget_lock_release_recursive>
 800bf32:	bf00      	nop
 800bf34:	2000026e 	.word	0x2000026e

0800bf38 <__sinit>:
 800bf38:	b510      	push	{r4, lr}
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	f7ff fff0 	bl	800bf20 <__sinit_lock_acquire>
 800bf40:	69a3      	ldr	r3, [r4, #24]
 800bf42:	b11b      	cbz	r3, 800bf4c <__sinit+0x14>
 800bf44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf48:	f7ff bff0 	b.w	800bf2c <__sinit_lock_release>
 800bf4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf50:	6523      	str	r3, [r4, #80]	; 0x50
 800bf52:	4b13      	ldr	r3, [pc, #76]	; (800bfa0 <__sinit+0x68>)
 800bf54:	4a13      	ldr	r2, [pc, #76]	; (800bfa4 <__sinit+0x6c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf5a:	42a3      	cmp	r3, r4
 800bf5c:	bf08      	it	eq
 800bf5e:	2301      	moveq	r3, #1
 800bf60:	4620      	mov	r0, r4
 800bf62:	bf08      	it	eq
 800bf64:	61a3      	streq	r3, [r4, #24]
 800bf66:	f000 f81f 	bl	800bfa8 <__sfp>
 800bf6a:	6060      	str	r0, [r4, #4]
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 f81b 	bl	800bfa8 <__sfp>
 800bf72:	60a0      	str	r0, [r4, #8]
 800bf74:	4620      	mov	r0, r4
 800bf76:	f000 f817 	bl	800bfa8 <__sfp>
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	2104      	movs	r1, #4
 800bf7e:	60e0      	str	r0, [r4, #12]
 800bf80:	6860      	ldr	r0, [r4, #4]
 800bf82:	f7ff ff81 	bl	800be88 <std>
 800bf86:	2201      	movs	r2, #1
 800bf88:	2109      	movs	r1, #9
 800bf8a:	68a0      	ldr	r0, [r4, #8]
 800bf8c:	f7ff ff7c 	bl	800be88 <std>
 800bf90:	2202      	movs	r2, #2
 800bf92:	2112      	movs	r1, #18
 800bf94:	68e0      	ldr	r0, [r4, #12]
 800bf96:	f7ff ff77 	bl	800be88 <std>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	61a3      	str	r3, [r4, #24]
 800bf9e:	e7d1      	b.n	800bf44 <__sinit+0xc>
 800bfa0:	0800cb24 	.word	0x0800cb24
 800bfa4:	0800bed1 	.word	0x0800bed1

0800bfa8 <__sfp>:
 800bfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfaa:	4607      	mov	r7, r0
 800bfac:	f7ff ffac 	bl	800bf08 <__sfp_lock_acquire>
 800bfb0:	4b1e      	ldr	r3, [pc, #120]	; (800c02c <__sfp+0x84>)
 800bfb2:	681e      	ldr	r6, [r3, #0]
 800bfb4:	69b3      	ldr	r3, [r6, #24]
 800bfb6:	b913      	cbnz	r3, 800bfbe <__sfp+0x16>
 800bfb8:	4630      	mov	r0, r6
 800bfba:	f7ff ffbd 	bl	800bf38 <__sinit>
 800bfbe:	3648      	adds	r6, #72	; 0x48
 800bfc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	d503      	bpl.n	800bfd0 <__sfp+0x28>
 800bfc8:	6833      	ldr	r3, [r6, #0]
 800bfca:	b30b      	cbz	r3, 800c010 <__sfp+0x68>
 800bfcc:	6836      	ldr	r6, [r6, #0]
 800bfce:	e7f7      	b.n	800bfc0 <__sfp+0x18>
 800bfd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bfd4:	b9d5      	cbnz	r5, 800c00c <__sfp+0x64>
 800bfd6:	4b16      	ldr	r3, [pc, #88]	; (800c030 <__sfp+0x88>)
 800bfd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfdc:	60e3      	str	r3, [r4, #12]
 800bfde:	6665      	str	r5, [r4, #100]	; 0x64
 800bfe0:	f000 f847 	bl	800c072 <__retarget_lock_init_recursive>
 800bfe4:	f7ff ff96 	bl	800bf14 <__sfp_lock_release>
 800bfe8:	2208      	movs	r2, #8
 800bfea:	4629      	mov	r1, r5
 800bfec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bff0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bff4:	6025      	str	r5, [r4, #0]
 800bff6:	61a5      	str	r5, [r4, #24]
 800bff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bffc:	f7fd fac6 	bl	800958c <memset>
 800c000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c008:	4620      	mov	r0, r4
 800c00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c00c:	3468      	adds	r4, #104	; 0x68
 800c00e:	e7d9      	b.n	800bfc4 <__sfp+0x1c>
 800c010:	2104      	movs	r1, #4
 800c012:	4638      	mov	r0, r7
 800c014:	f7ff ff62 	bl	800bedc <__sfmoreglue>
 800c018:	4604      	mov	r4, r0
 800c01a:	6030      	str	r0, [r6, #0]
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d1d5      	bne.n	800bfcc <__sfp+0x24>
 800c020:	f7ff ff78 	bl	800bf14 <__sfp_lock_release>
 800c024:	230c      	movs	r3, #12
 800c026:	603b      	str	r3, [r7, #0]
 800c028:	e7ee      	b.n	800c008 <__sfp+0x60>
 800c02a:	bf00      	nop
 800c02c:	0800cb24 	.word	0x0800cb24
 800c030:	ffff0001 	.word	0xffff0001

0800c034 <_fwalk_reent>:
 800c034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c038:	4606      	mov	r6, r0
 800c03a:	4688      	mov	r8, r1
 800c03c:	2700      	movs	r7, #0
 800c03e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c046:	f1b9 0901 	subs.w	r9, r9, #1
 800c04a:	d505      	bpl.n	800c058 <_fwalk_reent+0x24>
 800c04c:	6824      	ldr	r4, [r4, #0]
 800c04e:	2c00      	cmp	r4, #0
 800c050:	d1f7      	bne.n	800c042 <_fwalk_reent+0xe>
 800c052:	4638      	mov	r0, r7
 800c054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c058:	89ab      	ldrh	r3, [r5, #12]
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d907      	bls.n	800c06e <_fwalk_reent+0x3a>
 800c05e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c062:	3301      	adds	r3, #1
 800c064:	d003      	beq.n	800c06e <_fwalk_reent+0x3a>
 800c066:	4629      	mov	r1, r5
 800c068:	4630      	mov	r0, r6
 800c06a:	47c0      	blx	r8
 800c06c:	4307      	orrs	r7, r0
 800c06e:	3568      	adds	r5, #104	; 0x68
 800c070:	e7e9      	b.n	800c046 <_fwalk_reent+0x12>

0800c072 <__retarget_lock_init_recursive>:
 800c072:	4770      	bx	lr

0800c074 <__retarget_lock_acquire_recursive>:
 800c074:	4770      	bx	lr

0800c076 <__retarget_lock_release_recursive>:
 800c076:	4770      	bx	lr

0800c078 <__swhatbuf_r>:
 800c078:	b570      	push	{r4, r5, r6, lr}
 800c07a:	460e      	mov	r6, r1
 800c07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c080:	4614      	mov	r4, r2
 800c082:	2900      	cmp	r1, #0
 800c084:	461d      	mov	r5, r3
 800c086:	b096      	sub	sp, #88	; 0x58
 800c088:	da08      	bge.n	800c09c <__swhatbuf_r+0x24>
 800c08a:	2200      	movs	r2, #0
 800c08c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c090:	602a      	str	r2, [r5, #0]
 800c092:	061a      	lsls	r2, r3, #24
 800c094:	d410      	bmi.n	800c0b8 <__swhatbuf_r+0x40>
 800c096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c09a:	e00e      	b.n	800c0ba <__swhatbuf_r+0x42>
 800c09c:	466a      	mov	r2, sp
 800c09e:	f000 f903 	bl	800c2a8 <_fstat_r>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	dbf1      	blt.n	800c08a <__swhatbuf_r+0x12>
 800c0a6:	9a01      	ldr	r2, [sp, #4]
 800c0a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0b0:	425a      	negs	r2, r3
 800c0b2:	415a      	adcs	r2, r3
 800c0b4:	602a      	str	r2, [r5, #0]
 800c0b6:	e7ee      	b.n	800c096 <__swhatbuf_r+0x1e>
 800c0b8:	2340      	movs	r3, #64	; 0x40
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	6023      	str	r3, [r4, #0]
 800c0be:	b016      	add	sp, #88	; 0x58
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0c4 <__smakebuf_r>:
 800c0c4:	898b      	ldrh	r3, [r1, #12]
 800c0c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0c8:	079d      	lsls	r5, r3, #30
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	460c      	mov	r4, r1
 800c0ce:	d507      	bpl.n	800c0e0 <__smakebuf_r+0x1c>
 800c0d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0d4:	6023      	str	r3, [r4, #0]
 800c0d6:	6123      	str	r3, [r4, #16]
 800c0d8:	2301      	movs	r3, #1
 800c0da:	6163      	str	r3, [r4, #20]
 800c0dc:	b002      	add	sp, #8
 800c0de:	bd70      	pop	{r4, r5, r6, pc}
 800c0e0:	466a      	mov	r2, sp
 800c0e2:	ab01      	add	r3, sp, #4
 800c0e4:	f7ff ffc8 	bl	800c078 <__swhatbuf_r>
 800c0e8:	9900      	ldr	r1, [sp, #0]
 800c0ea:	4605      	mov	r5, r0
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	f7ff f969 	bl	800b3c4 <_malloc_r>
 800c0f2:	b948      	cbnz	r0, 800c108 <__smakebuf_r+0x44>
 800c0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0f8:	059a      	lsls	r2, r3, #22
 800c0fa:	d4ef      	bmi.n	800c0dc <__smakebuf_r+0x18>
 800c0fc:	f023 0303 	bic.w	r3, r3, #3
 800c100:	f043 0302 	orr.w	r3, r3, #2
 800c104:	81a3      	strh	r3, [r4, #12]
 800c106:	e7e3      	b.n	800c0d0 <__smakebuf_r+0xc>
 800c108:	4b0d      	ldr	r3, [pc, #52]	; (800c140 <__smakebuf_r+0x7c>)
 800c10a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c10c:	89a3      	ldrh	r3, [r4, #12]
 800c10e:	6020      	str	r0, [r4, #0]
 800c110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c114:	81a3      	strh	r3, [r4, #12]
 800c116:	9b00      	ldr	r3, [sp, #0]
 800c118:	6120      	str	r0, [r4, #16]
 800c11a:	6163      	str	r3, [r4, #20]
 800c11c:	9b01      	ldr	r3, [sp, #4]
 800c11e:	b15b      	cbz	r3, 800c138 <__smakebuf_r+0x74>
 800c120:	4630      	mov	r0, r6
 800c122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c126:	f000 f8d1 	bl	800c2cc <_isatty_r>
 800c12a:	b128      	cbz	r0, 800c138 <__smakebuf_r+0x74>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	f023 0303 	bic.w	r3, r3, #3
 800c132:	f043 0301 	orr.w	r3, r3, #1
 800c136:	81a3      	strh	r3, [r4, #12]
 800c138:	89a0      	ldrh	r0, [r4, #12]
 800c13a:	4305      	orrs	r5, r0
 800c13c:	81a5      	strh	r5, [r4, #12]
 800c13e:	e7cd      	b.n	800c0dc <__smakebuf_r+0x18>
 800c140:	0800bed1 	.word	0x0800bed1

0800c144 <_malloc_usable_size_r>:
 800c144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c148:	1f18      	subs	r0, r3, #4
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	bfbc      	itt	lt
 800c14e:	580b      	ldrlt	r3, [r1, r0]
 800c150:	18c0      	addlt	r0, r0, r3
 800c152:	4770      	bx	lr

0800c154 <_raise_r>:
 800c154:	291f      	cmp	r1, #31
 800c156:	b538      	push	{r3, r4, r5, lr}
 800c158:	4604      	mov	r4, r0
 800c15a:	460d      	mov	r5, r1
 800c15c:	d904      	bls.n	800c168 <_raise_r+0x14>
 800c15e:	2316      	movs	r3, #22
 800c160:	6003      	str	r3, [r0, #0]
 800c162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c166:	bd38      	pop	{r3, r4, r5, pc}
 800c168:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c16a:	b112      	cbz	r2, 800c172 <_raise_r+0x1e>
 800c16c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c170:	b94b      	cbnz	r3, 800c186 <_raise_r+0x32>
 800c172:	4620      	mov	r0, r4
 800c174:	f000 f830 	bl	800c1d8 <_getpid_r>
 800c178:	462a      	mov	r2, r5
 800c17a:	4601      	mov	r1, r0
 800c17c:	4620      	mov	r0, r4
 800c17e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c182:	f000 b817 	b.w	800c1b4 <_kill_r>
 800c186:	2b01      	cmp	r3, #1
 800c188:	d00a      	beq.n	800c1a0 <_raise_r+0x4c>
 800c18a:	1c59      	adds	r1, r3, #1
 800c18c:	d103      	bne.n	800c196 <_raise_r+0x42>
 800c18e:	2316      	movs	r3, #22
 800c190:	6003      	str	r3, [r0, #0]
 800c192:	2001      	movs	r0, #1
 800c194:	e7e7      	b.n	800c166 <_raise_r+0x12>
 800c196:	2400      	movs	r4, #0
 800c198:	4628      	mov	r0, r5
 800c19a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c19e:	4798      	blx	r3
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	e7e0      	b.n	800c166 <_raise_r+0x12>

0800c1a4 <raise>:
 800c1a4:	4b02      	ldr	r3, [pc, #8]	; (800c1b0 <raise+0xc>)
 800c1a6:	4601      	mov	r1, r0
 800c1a8:	6818      	ldr	r0, [r3, #0]
 800c1aa:	f7ff bfd3 	b.w	800c154 <_raise_r>
 800c1ae:	bf00      	nop
 800c1b0:	20000048 	.word	0x20000048

0800c1b4 <_kill_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	4d06      	ldr	r5, [pc, #24]	; (800c1d4 <_kill_r+0x20>)
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	4611      	mov	r1, r2
 800c1c0:	602b      	str	r3, [r5, #0]
 800c1c2:	f7f7 f8c2 	bl	800334a <_kill>
 800c1c6:	1c43      	adds	r3, r0, #1
 800c1c8:	d102      	bne.n	800c1d0 <_kill_r+0x1c>
 800c1ca:	682b      	ldr	r3, [r5, #0]
 800c1cc:	b103      	cbz	r3, 800c1d0 <_kill_r+0x1c>
 800c1ce:	6023      	str	r3, [r4, #0]
 800c1d0:	bd38      	pop	{r3, r4, r5, pc}
 800c1d2:	bf00      	nop
 800c1d4:	20000268 	.word	0x20000268

0800c1d8 <_getpid_r>:
 800c1d8:	f7f7 b8b0 	b.w	800333c <_getpid>

0800c1dc <__sread>:
 800c1dc:	b510      	push	{r4, lr}
 800c1de:	460c      	mov	r4, r1
 800c1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e4:	f000 f894 	bl	800c310 <_read_r>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	bfab      	itete	ge
 800c1ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c1f0:	181b      	addge	r3, r3, r0
 800c1f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1f6:	bfac      	ite	ge
 800c1f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1fa:	81a3      	strhlt	r3, [r4, #12]
 800c1fc:	bd10      	pop	{r4, pc}

0800c1fe <__swrite>:
 800c1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c202:	461f      	mov	r7, r3
 800c204:	898b      	ldrh	r3, [r1, #12]
 800c206:	4605      	mov	r5, r0
 800c208:	05db      	lsls	r3, r3, #23
 800c20a:	460c      	mov	r4, r1
 800c20c:	4616      	mov	r6, r2
 800c20e:	d505      	bpl.n	800c21c <__swrite+0x1e>
 800c210:	2302      	movs	r3, #2
 800c212:	2200      	movs	r2, #0
 800c214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c218:	f000 f868 	bl	800c2ec <_lseek_r>
 800c21c:	89a3      	ldrh	r3, [r4, #12]
 800c21e:	4632      	mov	r2, r6
 800c220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c224:	81a3      	strh	r3, [r4, #12]
 800c226:	4628      	mov	r0, r5
 800c228:	463b      	mov	r3, r7
 800c22a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c232:	f000 b817 	b.w	800c264 <_write_r>

0800c236 <__sseek>:
 800c236:	b510      	push	{r4, lr}
 800c238:	460c      	mov	r4, r1
 800c23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c23e:	f000 f855 	bl	800c2ec <_lseek_r>
 800c242:	1c43      	adds	r3, r0, #1
 800c244:	89a3      	ldrh	r3, [r4, #12]
 800c246:	bf15      	itete	ne
 800c248:	6560      	strne	r0, [r4, #84]	; 0x54
 800c24a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c24e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c252:	81a3      	strheq	r3, [r4, #12]
 800c254:	bf18      	it	ne
 800c256:	81a3      	strhne	r3, [r4, #12]
 800c258:	bd10      	pop	{r4, pc}

0800c25a <__sclose>:
 800c25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c25e:	f000 b813 	b.w	800c288 <_close_r>
	...

0800c264 <_write_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4604      	mov	r4, r0
 800c268:	4608      	mov	r0, r1
 800c26a:	4611      	mov	r1, r2
 800c26c:	2200      	movs	r2, #0
 800c26e:	4d05      	ldr	r5, [pc, #20]	; (800c284 <_write_r+0x20>)
 800c270:	602a      	str	r2, [r5, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	f7f7 f8a0 	bl	80033b8 <_write>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_write_r+0x1e>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_write_r+0x1e>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	20000268 	.word	0x20000268

0800c288 <_close_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	2300      	movs	r3, #0
 800c28c:	4d05      	ldr	r5, [pc, #20]	; (800c2a4 <_close_r+0x1c>)
 800c28e:	4604      	mov	r4, r0
 800c290:	4608      	mov	r0, r1
 800c292:	602b      	str	r3, [r5, #0]
 800c294:	f7f7 f8ac 	bl	80033f0 <_close>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_close_r+0x1a>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_close_r+0x1a>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	20000268 	.word	0x20000268

0800c2a8 <_fstat_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	4d06      	ldr	r5, [pc, #24]	; (800c2c8 <_fstat_r+0x20>)
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	602b      	str	r3, [r5, #0]
 800c2b6:	f7f7 f8a6 	bl	8003406 <_fstat>
 800c2ba:	1c43      	adds	r3, r0, #1
 800c2bc:	d102      	bne.n	800c2c4 <_fstat_r+0x1c>
 800c2be:	682b      	ldr	r3, [r5, #0]
 800c2c0:	b103      	cbz	r3, 800c2c4 <_fstat_r+0x1c>
 800c2c2:	6023      	str	r3, [r4, #0]
 800c2c4:	bd38      	pop	{r3, r4, r5, pc}
 800c2c6:	bf00      	nop
 800c2c8:	20000268 	.word	0x20000268

0800c2cc <_isatty_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	4d05      	ldr	r5, [pc, #20]	; (800c2e8 <_isatty_r+0x1c>)
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	4608      	mov	r0, r1
 800c2d6:	602b      	str	r3, [r5, #0]
 800c2d8:	f7f7 f8a4 	bl	8003424 <_isatty>
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	d102      	bne.n	800c2e6 <_isatty_r+0x1a>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	b103      	cbz	r3, 800c2e6 <_isatty_r+0x1a>
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	20000268 	.word	0x20000268

0800c2ec <_lseek_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	4d05      	ldr	r5, [pc, #20]	; (800c30c <_lseek_r+0x20>)
 800c2f8:	602a      	str	r2, [r5, #0]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	f7f7 f89c 	bl	8003438 <_lseek>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_lseek_r+0x1e>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_lseek_r+0x1e>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	20000268 	.word	0x20000268

0800c310 <_read_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4604      	mov	r4, r0
 800c314:	4608      	mov	r0, r1
 800c316:	4611      	mov	r1, r2
 800c318:	2200      	movs	r2, #0
 800c31a:	4d05      	ldr	r5, [pc, #20]	; (800c330 <_read_r+0x20>)
 800c31c:	602a      	str	r2, [r5, #0]
 800c31e:	461a      	mov	r2, r3
 800c320:	f7f7 f82d 	bl	800337e <_read>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d102      	bne.n	800c32e <_read_r+0x1e>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	b103      	cbz	r3, 800c32e <_read_r+0x1e>
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	20000268 	.word	0x20000268

0800c334 <_init>:
 800c334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c336:	bf00      	nop
 800c338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c33a:	bc08      	pop	{r3}
 800c33c:	469e      	mov	lr, r3
 800c33e:	4770      	bx	lr

0800c340 <_fini>:
 800c340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c342:	bf00      	nop
 800c344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c346:	bc08      	pop	{r3}
 800c348:	469e      	mov	lr, r3
 800c34a:	4770      	bx	lr
