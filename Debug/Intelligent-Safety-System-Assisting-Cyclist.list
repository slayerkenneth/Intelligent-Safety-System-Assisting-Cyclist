
Intelligent-Safety-System-Assisting-Cyclist.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011484  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  08011670  08011670  00021670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121ec  080121ec  00030240  2**0
                  CONTENTS
  4 .ARM          00000000  080121ec  080121ec  00030240  2**0
                  CONTENTS
  5 .preinit_array 00000000  080121ec  080121ec  00030240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121ec  080121ec  000221ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080121f0  080121f0  000221f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  080121f4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000758  20000240  08012434  00030240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000998  08012434  00030998  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ad6f  00000000  00000000  00030269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d51  00000000  00000000  0005afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001980  00000000  00000000  0005ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  000606b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d70  00000000  00000000  00061e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff98  00000000  00000000  00083c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be9f1  00000000  00000000  000a3b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162589  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ff0  00000000  00000000  001625dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000240 	.word	0x20000240
 8000204:	00000000 	.word	0x00000000
 8000208:	08011654 	.word	0x08011654

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000244 	.word	0x20000244
 8000224:	08011654 	.word	0x08011654

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <CountRPM>:
static uint16_t firstDetected;
static uint16_t newDetected;
static float time_diff;

void CountRPM(uint16_t counter)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
	static uint8_t flip = 0;

	if (flip != HAL_GPIO_ReadPin(A3144_Port, A3144_PIN))
 80011f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f6:	4821      	ldr	r0, [pc, #132]	; (800127c <CountRPM+0x94>)
 80011f8:	f003 fe72 	bl	8004ee0 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <CountRPM+0x98>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d034      	beq.n	8001272 <CountRPM+0x8a>
	{
		flip = HAL_GPIO_ReadPin(A3144_Port, A3144_PIN);
 8001208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120c:	481b      	ldr	r0, [pc, #108]	; (800127c <CountRPM+0x94>)
 800120e:	f003 fe67 	bl	8004ee0 <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <CountRPM+0x98>)
 8001218:	701a      	strb	r2, [r3, #0]
		rotCount++;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <CountRPM+0x9c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a18      	ldr	r2, [pc, #96]	; (8001284 <CountRPM+0x9c>)
 8001222:	6013      	str	r3, [r2, #0]

		if (rotCount == 1){
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <CountRPM+0x9c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d103      	bne.n	8001234 <CountRPM+0x4c>
			firstDetected = counter;
 800122c:	4a16      	ldr	r2, [pc, #88]	; (8001288 <CountRPM+0xa0>)
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	8013      	strh	r3, [r2, #0]
			rotSpeed = time_diff / 1000 ;

			rotCount = 0; //reset
		}
	}
}
 8001232:	e01e      	b.n	8001272 <CountRPM+0x8a>
			newDetected = counter;
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <CountRPM+0xa4>)
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	8013      	strh	r3, [r2, #0]
			time_diff = abs(newDetected - firstDetected);
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <CountRPM+0xa4>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <CountRPM+0xa0>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	bfb8      	it	lt
 800124a:	425b      	neglt	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fdb1 	bl	8000db4 <__aeabi_i2f>
 8001252:	4603      	mov	r3, r0
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <CountRPM+0xa8>)
 8001256:	6013      	str	r3, [r2, #0]
			rotSpeed = time_diff / 1000 ;
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <CountRPM+0xa8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	490d      	ldr	r1, [pc, #52]	; (8001294 <CountRPM+0xac>)
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff feb0 	bl	8000fc4 <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <CountRPM+0xb0>)
 800126a:	601a      	str	r2, [r3, #0]
			rotCount = 0; //reset
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <CountRPM+0x9c>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40010c00 	.word	0x40010c00
 8001280:	2000026c 	.word	0x2000026c
 8001284:	20000260 	.word	0x20000260
 8001288:	20000264 	.word	0x20000264
 800128c:	20000266 	.word	0x20000266
 8001290:	20000268 	.word	0x20000268
 8001294:	447a0000 	.word	0x447a0000
 8001298:	2000025c 	.word	0x2000025c
 800129c:	00000000 	.word	0x00000000

080012a0 <GetRotationSpeed>:

float GetRotationSpeed(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
//	static float beforeSpeed = 0;
	static int clear = 0;
	clear++;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <GetRotationSpeed+0x60>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <GetRotationSpeed+0x60>)
 80012ac:	6013      	str	r3, [r2, #0]
//
	if (clear == Time_Out_Period) //Time-out: stopped rotation => reset
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <GetRotationSpeed+0x60>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d115      	bne.n	80012e2 <GetRotationSpeed+0x42>
	{
		clear = 0;
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <GetRotationSpeed+0x60>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
		rotSpeed *= 1.45;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <GetRotationSpeed+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f91d 	bl	8000500 <__aeabi_f2d>
 80012c6:	a30c      	add	r3, pc, #48	; (adr r3, 80012f8 <GetRotationSpeed+0x58>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff f970 	bl	80005b0 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fc62 	bl	8000ba0 <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <GetRotationSpeed+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]
//
//		beforeSpeed = rotSpeed;
//		rotSpeed = 0;
//	}

	return 60 / rotSpeed;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <GetRotationSpeed+0x64>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <GetRotationSpeed+0x68>)
 80012ea:	f7ff fe6b 	bl	8000fc4 <__aeabi_fdiv>
 80012ee:	4603      	mov	r3, r0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	f3af 8000 	nop.w
 80012f8:	33333333 	.word	0x33333333
 80012fc:	3ff73333 	.word	0x3ff73333
 8001300:	20000270 	.word	0x20000270
 8001304:	2000025c 	.word	0x2000025c
 8001308:	42700000 	.word	0x42700000

0800130c <a3144_Init>:

void a3144_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <a3144_Init+0x10>)
 8001312:	f006 f893 	bl	800743c <HAL_TIM_Base_Start_IT>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200002ac 	.word	0x200002ac

08001320 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)   // Interrupt Call
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	static uint16_t counter_for_1s = 0;


	if (htim == &htim3)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d10a      	bne.n	8001346 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		CountRPM(counter_for_1s);
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff57 	bl	80011e8 <CountRPM>
		counter_for_1s++;
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001344:	801a      	strh	r2, [r3, #0]
	}
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002ac 	.word	0x200002ac
 8001354:	20000274 	.word	0x20000274

08001358 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	e002      	b.n	8001368 <Delay+0x10>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3b01      	subs	r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f9      	bne.n	8001362 <Delay+0xa>
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <LCD_INIT>:

void LCD_INIT ( void )
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001380:	2001      	movs	r0, #1
 8001382:	f000 f829 	bl	80013d8 <LCD_BackLed_Control>
	LCD_Rst();
 8001386:	f000 f80f 	bl	80013a8 <LCD_Rst>
	LCD_REG_Config();
 800138a:	f000 f85f 	bl	800144c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800138e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001398:	22f0      	movs	r2, #240	; 0xf0
 800139a:	2100      	movs	r1, #0
 800139c:	2000      	movs	r0, #0
 800139e:	f000 f9e6 	bl	800176e <LCD_Clear>
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <LCD_Rst>:


void LCD_Rst ( void )
{			
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2102      	movs	r1, #2
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <LCD_Rst+0x28>)
 80013b2:	f003 fdac 	bl	8004f0e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <LCD_Rst+0x2c>)
 80013b8:	f7ff ffce 	bl	8001358 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2102      	movs	r1, #2
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <LCD_Rst+0x28>)
 80013c2:	f003 fda4 	bl	8004f0e <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <LCD_Rst+0x2c>)
 80013c8:	f7ff ffc6 	bl	8001358 <Delay>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40011800 	.word	0x40011800
 80013d4:	0002bffc 	.word	0x0002bffc

080013d8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <LCD_BackLed_Control+0x34>)
 80013f0:	f003 fd8d 	bl	8004f0e <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80013f4:	e005      	b.n	8001402 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <LCD_BackLed_Control+0x34>)
 80013fe:	f003 fd86 	bl	8004f0e <HAL_GPIO_WritePin>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40011400 	.word	0x40011400

08001410 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800141a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	8013      	strh	r3, [r2, #0]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <LCD_Write_Data+0x1c>)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	8013      	strh	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	60020000 	.word	0x60020000

0800144c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001450:	20cf      	movs	r0, #207	; 0xcf
 8001452:	f7ff ffdd 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff ffe8 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800145c:	2081      	movs	r0, #129	; 0x81
 800145e:	f7ff ffe5 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001462:	2030      	movs	r0, #48	; 0x30
 8001464:	f7ff ffe2 	bl	800142c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001468:	20ed      	movs	r0, #237	; 0xed
 800146a:	f7ff ffd1 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800146e:	2064      	movs	r0, #100	; 0x64
 8001470:	f7ff ffdc 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001474:	2003      	movs	r0, #3
 8001476:	f7ff ffd9 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800147a:	2012      	movs	r0, #18
 800147c:	f7ff ffd6 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001480:	2081      	movs	r0, #129	; 0x81
 8001482:	f7ff ffd3 	bl	800142c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001486:	20e8      	movs	r0, #232	; 0xe8
 8001488:	f7ff ffc2 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800148c:	2085      	movs	r0, #133	; 0x85
 800148e:	f7ff ffcd 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001492:	2010      	movs	r0, #16
 8001494:	f7ff ffca 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001498:	2078      	movs	r0, #120	; 0x78
 800149a:	f7ff ffc7 	bl	800142c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800149e:	20cb      	movs	r0, #203	; 0xcb
 80014a0:	f7ff ffb6 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80014a4:	2039      	movs	r0, #57	; 0x39
 80014a6:	f7ff ffc1 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80014aa:	202c      	movs	r0, #44	; 0x2c
 80014ac:	f7ff ffbe 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff ffbb 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80014b6:	2034      	movs	r0, #52	; 0x34
 80014b8:	f7ff ffb8 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80014bc:	2002      	movs	r0, #2
 80014be:	f7ff ffb5 	bl	800142c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80014c2:	20f7      	movs	r0, #247	; 0xf7
 80014c4:	f7ff ffa4 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80014c8:	2020      	movs	r0, #32
 80014ca:	f7ff ffaf 	bl	800142c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80014ce:	20ea      	movs	r0, #234	; 0xea
 80014d0:	f7ff ff9e 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff ffa9 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff ffa6 	bl	800142c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80014e0:	20b1      	movs	r0, #177	; 0xb1
 80014e2:	f7ff ff95 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff ffa0 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80014ec:	201b      	movs	r0, #27
 80014ee:	f7ff ff9d 	bl	800142c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80014f2:	20b6      	movs	r0, #182	; 0xb6
 80014f4:	f7ff ff8c 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80014f8:	200a      	movs	r0, #10
 80014fa:	f7ff ff97 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80014fe:	20a2      	movs	r0, #162	; 0xa2
 8001500:	f7ff ff94 	bl	800142c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001504:	20c0      	movs	r0, #192	; 0xc0
 8001506:	f7ff ff83 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800150a:	2035      	movs	r0, #53	; 0x35
 800150c:	f7ff ff8e 	bl	800142c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001510:	20c1      	movs	r0, #193	; 0xc1
 8001512:	f7ff ff7d 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001516:	2011      	movs	r0, #17
 8001518:	f7ff ff88 	bl	800142c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800151c:	20c5      	movs	r0, #197	; 0xc5
 800151e:	f7ff ff77 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001522:	2045      	movs	r0, #69	; 0x45
 8001524:	f7ff ff82 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001528:	2045      	movs	r0, #69	; 0x45
 800152a:	f7ff ff7f 	bl	800142c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800152e:	20c7      	movs	r0, #199	; 0xc7
 8001530:	f7ff ff6e 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001534:	20a2      	movs	r0, #162	; 0xa2
 8001536:	f7ff ff79 	bl	800142c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800153a:	20f2      	movs	r0, #242	; 0xf2
 800153c:	f7ff ff68 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff ff73 	bl	800142c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001546:	2026      	movs	r0, #38	; 0x26
 8001548:	f7ff ff62 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff ff6d 	bl	800142c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001552:	20e0      	movs	r0, #224	; 0xe0
 8001554:	f7ff ff5c 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001558:	200f      	movs	r0, #15
 800155a:	f7ff ff67 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800155e:	2026      	movs	r0, #38	; 0x26
 8001560:	f7ff ff64 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001564:	2024      	movs	r0, #36	; 0x24
 8001566:	f7ff ff61 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800156a:	200b      	movs	r0, #11
 800156c:	f7ff ff5e 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001570:	200e      	movs	r0, #14
 8001572:	f7ff ff5b 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001576:	2009      	movs	r0, #9
 8001578:	f7ff ff58 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800157c:	2054      	movs	r0, #84	; 0x54
 800157e:	f7ff ff55 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001582:	20a8      	movs	r0, #168	; 0xa8
 8001584:	f7ff ff52 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001588:	2046      	movs	r0, #70	; 0x46
 800158a:	f7ff ff4f 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800158e:	200c      	movs	r0, #12
 8001590:	f7ff ff4c 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001594:	2017      	movs	r0, #23
 8001596:	f7ff ff49 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800159a:	2009      	movs	r0, #9
 800159c:	f7ff ff46 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80015a0:	200f      	movs	r0, #15
 80015a2:	f7ff ff43 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80015a6:	2007      	movs	r0, #7
 80015a8:	f7ff ff40 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff ff3d 	bl	800142c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80015b2:	20e1      	movs	r0, #225	; 0xe1
 80015b4:	f7ff ff2c 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff ff37 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80015be:	2019      	movs	r0, #25
 80015c0:	f7ff ff34 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80015c4:	201b      	movs	r0, #27
 80015c6:	f7ff ff31 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80015ca:	2004      	movs	r0, #4
 80015cc:	f7ff ff2e 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80015d0:	2010      	movs	r0, #16
 80015d2:	f7ff ff2b 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80015d6:	2007      	movs	r0, #7
 80015d8:	f7ff ff28 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80015dc:	202a      	movs	r0, #42	; 0x2a
 80015de:	f7ff ff25 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80015e2:	2047      	movs	r0, #71	; 0x47
 80015e4:	f7ff ff22 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80015e8:	2039      	movs	r0, #57	; 0x39
 80015ea:	f7ff ff1f 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80015ee:	2003      	movs	r0, #3
 80015f0:	f7ff ff1c 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80015f4:	2006      	movs	r0, #6
 80015f6:	f7ff ff19 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80015fa:	2006      	movs	r0, #6
 80015fc:	f7ff ff16 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001600:	2030      	movs	r0, #48	; 0x30
 8001602:	f7ff ff13 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001606:	2038      	movs	r0, #56	; 0x38
 8001608:	f7ff ff10 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800160c:	200f      	movs	r0, #15
 800160e:	f7ff ff0d 	bl	800142c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001612:	2036      	movs	r0, #54	; 0x36
 8001614:	f7ff fefc 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001618:	20c8      	movs	r0, #200	; 0xc8
 800161a:	f7ff ff07 	bl	800142c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800161e:	202a      	movs	r0, #42	; 0x2a
 8001620:	f7ff fef6 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff ff01 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fefe 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fefb 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001636:	20ef      	movs	r0, #239	; 0xef
 8001638:	f7ff fef8 	bl	800142c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800163c:	202b      	movs	r0, #43	; 0x2b
 800163e:	f7ff fee7 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff fef2 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff feef 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff feec 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001654:	203f      	movs	r0, #63	; 0x3f
 8001656:	f7ff fee9 	bl	800142c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800165a:	203a      	movs	r0, #58	; 0x3a
 800165c:	f7ff fed8 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001660:	2055      	movs	r0, #85	; 0x55
 8001662:	f7ff fee3 	bl	800142c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001666:	2011      	movs	r0, #17
 8001668:	f7ff fed2 	bl	8001410 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <LCD_REG_Config+0x230>)
 800166e:	f7ff fe73 	bl	8001358 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001672:	2029      	movs	r0, #41	; 0x29
 8001674:	f7ff fecc 	bl	8001410 <LCD_Write_Cmd>
	
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	0002bffc 	.word	0x0002bffc

08001680 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4604      	mov	r4, r0
 8001688:	4608      	mov	r0, r1
 800168a:	4611      	mov	r1, r2
 800168c:	461a      	mov	r2, r3
 800168e:	4623      	mov	r3, r4
 8001690:	80fb      	strh	r3, [r7, #6]
 8001692:	4603      	mov	r3, r0
 8001694:	80bb      	strh	r3, [r7, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	807b      	strh	r3, [r7, #2]
 800169a:	4613      	mov	r3, r2
 800169c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800169e:	202a      	movs	r0, #42	; 0x2a
 80016a0:	f7ff feb6 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff febe 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff feb8 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80016bc:	88fa      	ldrh	r2, [r7, #6]
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	4413      	add	r3, r2
 80016c2:	3b01      	subs	r3, #1
 80016c4:	121b      	asrs	r3, r3, #8
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff feaf 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80016ce:	88fa      	ldrh	r2, [r7, #6]
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	4413      	add	r3, r2
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fea4 	bl	800142c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80016e4:	202b      	movs	r0, #43	; 0x2b
 80016e6:	f7ff fe93 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80016ea:	88bb      	ldrh	r3, [r7, #4]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fe9b 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80016f6:	88bb      	ldrh	r3, [r7, #4]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fe95 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001702:	88ba      	ldrh	r2, [r7, #4]
 8001704:	883b      	ldrh	r3, [r7, #0]
 8001706:	4413      	add	r3, r2
 8001708:	3b01      	subs	r3, #1
 800170a:	121b      	asrs	r3, r3, #8
 800170c:	b29b      	uxth	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fe8c 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001714:	88ba      	ldrh	r2, [r7, #4]
 8001716:	883b      	ldrh	r3, [r7, #0]
 8001718:	4413      	add	r3, r2
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	b29b      	uxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fe81 	bl	800142c <LCD_Write_Data>
	
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}

08001732 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001742:	202c      	movs	r0, #44	; 0x2c
 8001744:	f7ff fe64 	bl	8001410 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	e006      	b.n	800175c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fe6b 	bl	800142c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3301      	adds	r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	d3f4      	bcc.n	800174e <LCD_FillColor+0x1c>
		
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800176e:	b590      	push	{r4, r7, lr}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	4604      	mov	r4, r0
 8001776:	4608      	mov	r0, r1
 8001778:	4611      	mov	r1, r2
 800177a:	461a      	mov	r2, r3
 800177c:	4623      	mov	r3, r4
 800177e:	80fb      	strh	r3, [r7, #6]
 8001780:	4603      	mov	r3, r0
 8001782:	80bb      	strh	r3, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800178c:	883b      	ldrh	r3, [r7, #0]
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	88b9      	ldrh	r1, [r7, #4]
 8001792:	88f8      	ldrh	r0, [r7, #6]
 8001794:	f7ff ff74 	bl	8001680 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	883a      	ldrh	r2, [r7, #0]
 800179c:	fb02 f303 	mul.w	r3, r2, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	8b3b      	ldrh	r3, [r7, #24]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f7ff ffc3 	bl	8001732 <LCD_FillColor>
	
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}

080017b4 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
 80017be:	460b      	mov	r3, r1
 80017c0:	80bb      	strh	r3, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	3b20      	subs	r3, #32
 80017ca:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80017cc:	88b9      	ldrh	r1, [r7, #4]
 80017ce:	88f8      	ldrh	r0, [r7, #6]
 80017d0:	2310      	movs	r3, #16
 80017d2:	2208      	movs	r2, #8
 80017d4:	f7ff ff54 	bl	8001680 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80017d8:	202c      	movs	r0, #44	; 0x2c
 80017da:	f7ff fe19 	bl	8001410 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80017de:	2300      	movs	r3, #0
 80017e0:	73bb      	strb	r3, [r7, #14]
 80017e2:	e023      	b.n	800182c <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80017e4:	7b3a      	ldrb	r2, [r7, #12]
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	4914      	ldr	r1, [pc, #80]	; (800183c <LCD_DrawChar+0x88>)
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	440a      	add	r2, r1
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80017f4:	2300      	movs	r3, #0
 80017f6:	737b      	strb	r3, [r7, #13]
 80017f8:	e012      	b.n	8001820 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001804:	201f      	movs	r0, #31
 8001806:	f7ff fe11 	bl	800142c <LCD_Write_Data>
 800180a:	e003      	b.n	8001814 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 800180c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001810:	f7ff fe0c 	bl	800142c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800181a:	7b7b      	ldrb	r3, [r7, #13]
 800181c:	3301      	adds	r3, #1
 800181e:	737b      	strb	r3, [r7, #13]
 8001820:	7b7b      	ldrb	r3, [r7, #13]
 8001822:	2b07      	cmp	r3, #7
 8001824:	d9e9      	bls.n	80017fa <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	3301      	adds	r3, #1
 800182a:	73bb      	strb	r3, [r7, #14]
 800182c:	7bbb      	ldrb	r3, [r7, #14]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	d9d8      	bls.n	80017e4 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	0801180c 	.word	0x0801180c

08001840 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	603a      	str	r2, [r7, #0]
 800184a:	80fb      	strh	r3, [r7, #6]
 800184c:	460b      	mov	r3, r1
 800184e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001850:	e01c      	b.n	800188c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2be8      	cmp	r3, #232	; 0xe8
 8001856:	d904      	bls.n	8001862 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001858:	2300      	movs	r3, #0
 800185a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	3310      	adds	r3, #16
 8001860:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001862:	88bb      	ldrh	r3, [r7, #4]
 8001864:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001868:	d903      	bls.n	8001872 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800186a:	2300      	movs	r3, #0
 800186c:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800186e:	2300      	movs	r3, #0
 8001870:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	88b9      	ldrh	r1, [r7, #4]
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff9a 	bl	80017b4 <LCD_DrawChar>
		
		pStr ++;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	3308      	adds	r3, #8
 800188a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1de      	bne.n	8001852 <LCD_DrawString+0x12>
		
	}
	
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <LCD_DrawDot>:




void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	80fb      	strh	r3, [r7, #6]
 80018a8:	460b      	mov	r3, r1
 80018aa:	80bb      	strh	r3, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	807b      	strh	r3, [r7, #2]
	if (( usCOLUMN < LCD_DispWindow_COLUMN ) && ( usPAGE < LCD_DispWindow_PAGE ))
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	2bef      	cmp	r3, #239	; 0xef
 80018b4:	d809      	bhi.n	80018ca <LCD_DrawDot+0x2c>
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80018bc:	d205      	bcs.n	80018ca <LCD_DrawDot+0x2c>
	LCD_OpenWindow ( usCOLUMN, usPAGE, 1, 1 );
 80018be:	88b9      	ldrh	r1, [r7, #4]
 80018c0:	88f8      	ldrh	r0, [r7, #6]
 80018c2:	2301      	movs	r3, #1
 80018c4:	2201      	movs	r2, #1
 80018c6:	f7ff fedb 	bl	8001680 <LCD_OpenWindow>
	LCD_FillColor (1, usColor);
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	4619      	mov	r1, r3
 80018ce:	2001      	movs	r0, #1
 80018d0:	f7ff ff2f 	bl	8001732 <LCD_FillColor>

}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <LCD_DrawChar_Color>:
{	

}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4604      	mov	r4, r0
 80018e4:	4608      	mov	r0, r1
 80018e6:	4611      	mov	r1, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	4623      	mov	r3, r4
 80018ec:	80fb      	strh	r3, [r7, #6]
 80018ee:	4603      	mov	r3, r0
 80018f0:	80bb      	strh	r3, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	70fb      	strb	r3, [r7, #3]
 80018f6:	4613      	mov	r3, r2
 80018f8:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	3b20      	subs	r3, #32
 80018fe:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001900:	88b9      	ldrh	r1, [r7, #4]
 8001902:	88f8      	ldrh	r0, [r7, #6]
 8001904:	2310      	movs	r3, #16
 8001906:	2208      	movs	r2, #8
 8001908:	f7ff feba 	bl	8001680 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 800190c:	202c      	movs	r0, #44	; 0x2c
 800190e:	f7ff fd7f 	bl	8001410 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001912:	2300      	movs	r3, #0
 8001914:	73bb      	strb	r3, [r7, #14]
 8001916:	e024      	b.n	8001962 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001918:	7b3a      	ldrb	r2, [r7, #12]
 800191a:	7bbb      	ldrb	r3, [r7, #14]
 800191c:	4915      	ldr	r1, [pc, #84]	; (8001974 <LCD_DrawChar_Color+0x98>)
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	440a      	add	r2, r1
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001928:	2300      	movs	r3, #0
 800192a:	737b      	strb	r3, [r7, #13]
 800192c:	e013      	b.n	8001956 <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 8001938:	8c3b      	ldrh	r3, [r7, #32]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fd76 	bl	800142c <LCD_Write_Data>
 8001940:	e003      	b.n	800194a <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 8001942:	883b      	ldrh	r3, [r7, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fd71 	bl	800142c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	085b      	lsrs	r3, r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001950:	7b7b      	ldrb	r3, [r7, #13]
 8001952:	3301      	adds	r3, #1
 8001954:	737b      	strb	r3, [r7, #13]
 8001956:	7b7b      	ldrb	r3, [r7, #13]
 8001958:	2b07      	cmp	r3, #7
 800195a:	d9e8      	bls.n	800192e <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	3301      	adds	r3, #1
 8001960:	73bb      	strb	r3, [r7, #14]
 8001962:	7bbb      	ldrb	r3, [r7, #14]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d9d7      	bls.n	8001918 <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bd90      	pop	{r4, r7, pc}
 8001972:	bf00      	nop
 8001974:	0801180c 	.word	0x0801180c

08001978 <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af02      	add	r7, sp, #8
 800197e:	4603      	mov	r3, r0
 8001980:	460a      	mov	r2, r1
 8001982:	80fb      	strh	r3, [r7, #6]
 8001984:	4613      	mov	r3, r2
 8001986:	80bb      	strh	r3, [r7, #4]
  LCD_Clear ( usX - 10, usY, 20, 1, RED);
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	3b0a      	subs	r3, #10
 800198c:	b298      	uxth	r0, r3
 800198e:	88b9      	ldrh	r1, [r7, #4]
 8001990:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	2214      	movs	r2, #20
 800199a:	f7ff fee8 	bl	800176e <LCD_Clear>
  LCD_Clear ( usX, usY - 10, 1, 20, RED);
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	3b0a      	subs	r3, #10
 80019a2:	b299      	uxth	r1, r3
 80019a4:	88f8      	ldrh	r0, [r7, #6]
 80019a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2314      	movs	r3, #20
 80019ae:	2201      	movs	r2, #1
 80019b0:	f7ff fedd 	bl	800176e <LCD_Clear>
	
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b087      	sub	sp, #28
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60ba      	str	r2, [r7, #8]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4603      	mov	r3, r0
 80019c8:	81fb      	strh	r3, [r7, #14]
 80019ca:	460b      	mov	r3, r1
 80019cc:	81bb      	strh	r3, [r7, #12]
 80019ce:	4613      	mov	r3, r2
 80019d0:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80019d2:	e01f      	b.n	8001a14 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80019d4:	89fb      	ldrh	r3, [r7, #14]
 80019d6:	2be8      	cmp	r3, #232	; 0xe8
 80019d8:	d904      	bls.n	80019e4 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80019da:	2300      	movs	r3, #0
 80019dc:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 80019de:	89bb      	ldrh	r3, [r7, #12]
 80019e0:	3310      	adds	r3, #16
 80019e2:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80019e4:	89bb      	ldrh	r3, [r7, #12]
 80019e6:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80019ea:	d903      	bls.n	80019f4 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80019ec:	2300      	movs	r3, #0
 80019ee:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	88fc      	ldrh	r4, [r7, #6]
 80019fa:	89b9      	ldrh	r1, [r7, #12]
 80019fc:	89f8      	ldrh	r0, [r7, #14]
 80019fe:	8c3b      	ldrh	r3, [r7, #32]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4623      	mov	r3, r4
 8001a04:	f7ff ff6a 	bl	80018dc <LCD_DrawChar_Color>
		
		pStr ++;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	3308      	adds	r3, #8
 8001a12:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1db      	bne.n	80019d4 <LCD_DrawString_Color+0x18>
		
	}
	
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd90      	pop	{r4, r7, pc}
	...

08001a28 <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	f200 80a0 	bhi.w	8001b7c <LCD_GramScan+0x154>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <LCD_GramScan+0x1c>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a55 	.word	0x08001a55
 8001a48:	08001a9f 	.word	0x08001a9f
 8001a4c:	08001ae9 	.word	0x08001ae9
 8001a50:	08001b33 	.word	0x08001b33

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001a54:	2036      	movs	r0, #54	; 0x36
 8001a56:	f7ff fcdb 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 8001a5a:	20c8      	movs	r0, #200	; 0xc8
 8001a5c:	f7ff fce6 	bl	800142c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001a60:	202a      	movs	r0, #42	; 0x2a
 8001a62:	f7ff fcd5 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff fce0 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff fcdd 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fcda 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 8001a78:	20ef      	movs	r0, #239	; 0xef
 8001a7a:	f7ff fcd7 	bl	800142c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001a7e:	202b      	movs	r0, #43	; 0x2b
 8001a80:	f7ff fcc6 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff fcd1 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fcce 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff fccb 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 8001a96:	203f      	movs	r0, #63	; 0x3f
 8001a98:	f7ff fcc8 	bl	800142c <LCD_Write_Data>
					
		  break;
 8001a9c:	e06e      	b.n	8001b7c <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001a9e:	2036      	movs	r0, #54	; 0x36
 8001aa0:	f7ff fcb6 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 8001aa4:	2068      	movs	r0, #104	; 0x68
 8001aa6:	f7ff fcc1 	bl	800142c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001aaa:	202a      	movs	r0, #42	; 0x2a
 8001aac:	f7ff fcb0 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff fcbb 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff fcb8 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001abc:	2001      	movs	r0, #1
 8001abe:	f7ff fcb5 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001ac2:	203f      	movs	r0, #63	; 0x3f
 8001ac4:	f7ff fcb2 	bl	800142c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001ac8:	202b      	movs	r0, #43	; 0x2b
 8001aca:	f7ff fca1 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff fcac 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff fca9 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7ff fca6 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8001ae0:	20ef      	movs	r0, #239	; 0xef
 8001ae2:	f7ff fca3 	bl	800142c <LCD_Write_Data>
		
		  break;
 8001ae6:	e049      	b.n	8001b7c <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8001ae8:	2036      	movs	r0, #54	; 0x36
 8001aea:	f7ff fc91 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 8001aee:	2028      	movs	r0, #40	; 0x28
 8001af0:	f7ff fc9c 	bl	800142c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001af4:	202a      	movs	r0, #42	; 0x2a
 8001af6:	f7ff fc8b 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fc96 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff fc93 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7ff fc90 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001b0c:	203f      	movs	r0, #63	; 0x3f
 8001b0e:	f7ff fc8d 	bl	800142c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001b12:	202b      	movs	r0, #43	; 0x2b
 8001b14:	f7ff fc7c 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff fc87 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fc84 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff fc81 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 8001b2a:	20ef      	movs	r0, #239	; 0xef
 8001b2c:	f7ff fc7e 	bl	800142c <LCD_Write_Data>
		  
		  break;
 8001b30:	e024      	b.n	8001b7c <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001b32:	2036      	movs	r0, #54	; 0x36
 8001b34:	f7ff fc6c 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 8001b38:	2048      	movs	r0, #72	; 0x48
 8001b3a:	f7ff fc77 	bl	800142c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001b3e:	202a      	movs	r0, #42	; 0x2a
 8001b40:	f7ff fc66 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff fc71 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fc6e 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b50:	2000      	movs	r0, #0
 8001b52:	f7ff fc6b 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 8001b56:	20ef      	movs	r0, #239	; 0xef
 8001b58:	f7ff fc68 	bl	800142c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001b5c:	202b      	movs	r0, #43	; 0x2b
 8001b5e:	f7ff fc57 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff fc62 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff fc5f 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f7ff fc5c 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8001b74:	203f      	movs	r0, #63	; 0x3f
 8001b76:	f7ff fc59 	bl	800142c <LCD_Write_Data>
		
	    break;
 8001b7a:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8001b7c:	202c      	movs	r0, #44	; 0x2c
 8001b7e:	f7ff fc47 	bl	8001410 <LCD_Write_Cmd>
	
	
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop

08001b8c <LCD_DrawEllipse>:

void LCD_DrawEllipse ( uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4604      	mov	r4, r0
 8001b94:	4608      	mov	r0, r1
 8001b96:	4611      	mov	r1, r2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	80fb      	strh	r3, [r7, #6]
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80bb      	strh	r3, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	807b      	strh	r3, [r7, #2]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	803b      	strh	r3, [r7, #0]
	/*
	 *  Task 3 : Implement LCD_DrawEllipse by using LCD_DrawDot
	 */

	for(int y=-LR; y<=LR; y++) {
 8001baa:	883b      	ldrh	r3, [r7, #0]
 8001bac:	425b      	negs	r3, r3
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	e03a      	b.n	8001c28 <LCD_DrawEllipse+0x9c>
			for(int x=-SR; x<=SR; x++) {
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	425b      	negs	r3, r3
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	e02f      	b.n	8001c1a <LCD_DrawEllipse+0x8e>
					if(x*x*LR*LR+y*y*SR*SR <= LR*LR*SR*SR)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	fb03 f303 	mul.w	r3, r3, r3
 8001bc0:	883a      	ldrh	r2, [r7, #0]
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	883a      	ldrh	r2, [r7, #0]
 8001bc8:	fb03 f202 	mul.w	r2, r3, r2
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	fb03 f303 	mul.w	r3, r3, r3
 8001bd2:	8879      	ldrh	r1, [r7, #2]
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	8879      	ldrh	r1, [r7, #2]
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	441a      	add	r2, r3
 8001be0:	883b      	ldrh	r3, [r7, #0]
 8001be2:	8839      	ldrh	r1, [r7, #0]
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	8879      	ldrh	r1, [r7, #2]
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	8879      	ldrh	r1, [r7, #2]
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dc0d      	bgt.n	8001c14 <LCD_DrawEllipse+0x88>
						LCD_DrawDot(usC + x, usP + y, usColor);
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b298      	uxth	r0, r3
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	88bb      	ldrh	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7ff fe45 	bl	800189e <LCD_DrawDot>
			for(int x=-SR; x<=SR; x++) {
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	3301      	adds	r3, #1
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	ddcb      	ble.n	8001bba <LCD_DrawEllipse+0x2e>
	for(int y=-LR; y<=LR; y++) {
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	883b      	ldrh	r3, [r7, #0]
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	ddc0      	ble.n	8001bb2 <LCD_DrawEllipse+0x26>
			}
	}

	int whiteLR = LR - 1;
 8001c30:	883b      	ldrh	r3, [r7, #0]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
	int whiteSR = SR - 1;
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]

	for(int y=-whiteLR; y<=whiteLR; y++) {
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	425b      	negs	r3, r3
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e03a      	b.n	8001cba <LCD_DrawEllipse+0x12e>
			for(int x=-whiteSR; x<=whiteSR; x++) {
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	425b      	negs	r3, r3
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	e02f      	b.n	8001cac <LCD_DrawEllipse+0x120>
					if(x*x*whiteLR*whiteLR+y*y*whiteSR*whiteSR <= whiteLR*whiteLR*whiteSR*whiteSR)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	fb03 f303 	mul.w	r3, r3, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	fb03 f202 	mul.w	r2, r3, r2
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	fb03 f303 	mul.w	r3, r3, r3
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	441a      	add	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	fb03 f303 	mul.w	r3, r3, r3
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	429a      	cmp	r2, r3
 8001c86:	dc0e      	bgt.n	8001ca6 <LCD_DrawEllipse+0x11a>
						LCD_DrawDot(usC + x, usP + y, WHITE);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	4413      	add	r3, r2
 8001c90:	b298      	uxth	r0, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	88bb      	ldrh	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7ff fdfc 	bl	800189e <LCD_DrawDot>
			for(int x=-whiteSR; x<=whiteSR; x++) {
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	ddcb      	ble.n	8001c4c <LCD_DrawEllipse+0xc0>
	for(int y=-whiteLR; y<=whiteLR; y++) {
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	ddc0      	ble.n	8001c44 <LCD_DrawEllipse+0xb8>
			}
	}


}
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	3724      	adds	r7, #36	; 0x24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd90      	pop	{r4, r7, pc}

08001ccc <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4];  // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_4);
 8001cd4:	210c      	movs	r1, #12
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001cd8:	f005 fe1a 	bl	8007910 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000084c 	.word	0x2000084c
 8001cf0:	20000278 	.word	0x20000278

08001cf4 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	b2d9      	uxtb	r1, r3
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <Set_LED+0x54>)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	b2d9      	uxtb	r1, r3
 8001d12:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <Set_LED+0x54>)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	460a      	mov	r2, r1
 8001d1c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	b2d9      	uxtb	r1, r3
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <Set_LED+0x54>)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	460a      	mov	r2, r1
 8001d2c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2d9      	uxtb	r1, r3
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <Set_LED+0x54>)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	460a      	mov	r2, r1
 8001d3c:	70da      	strb	r2, [r3, #3]
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	2000035c 	.word	0x2000035c

08001d4c <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
	...

08001d60 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	e036      	b.n	8001dde <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8001d70:	4a2e      	ldr	r2, [pc, #184]	; (8001e2c <WS2812_Send+0xcc>)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	785b      	ldrb	r3, [r3, #1]
 8001d7a:	041a      	lsls	r2, r3, #16
 8001d7c:	492b      	ldr	r1, [pc, #172]	; (8001e2c <WS2812_Send+0xcc>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	789b      	ldrb	r3, [r3, #2]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	4928      	ldr	r1, [pc, #160]	; (8001e2c <WS2812_Send+0xcc>)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	78db      	ldrb	r3, [r3, #3]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 8001d98:	2317      	movs	r3, #23
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e019      	b.n	8001dd2 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8001d9e:	2201      	movs	r2, #1
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8001db0:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <WS2812_Send+0xd0>)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	213c      	movs	r1, #60	; 0x3c
 8001db6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001dba:	e004      	b.n	8001dc6 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <WS2812_Send+0xd0>)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	211e      	movs	r1, #30
 8001dc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	dae2      	bge.n	8001d9e <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b0d      	cmp	r3, #13
 8001de2:	ddc5      	ble.n	8001d70 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	e00a      	b.n	8001e00 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8001dea:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <WS2812_Send+0xd0>)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2100      	movs	r1, #0
 8001df0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b31      	cmp	r3, #49	; 0x31
 8001e04:	ddf1      	ble.n	8001dea <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, (uint32_t *)pwmData, indx);
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <WS2812_Send+0xd0>)
 8001e0c:	210c      	movs	r1, #12
 8001e0e:	4809      	ldr	r0, [pc, #36]	; (8001e34 <WS2812_Send+0xd4>)
 8001e10:	f005 fbcc 	bl	80075ac <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8001e14:	bf00      	nop
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <WS2812_Send+0xd8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0fb      	beq.n	8001e16 <WS2812_Send+0xb6>
	datasentflag = 0;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <WS2812_Send+0xd8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
}
 8001e24:	bf00      	nop
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	2000035c 	.word	0x2000035c
 8001e30:	20000500 	.word	0x20000500
 8001e34:	2000084c 	.word	0x2000084c
 8001e38:	20000278 	.word	0x20000278

08001e3c <Reset_LED>:

void Reset_LED (void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_LED; i++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	e01a      	b.n	8001e7e <Reset_LED+0x42>
	{
		LED_Data[i][0] = i;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	b2d9      	uxtb	r1, r3
 8001e4c:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <Reset_LED+0x54>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = 0;
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <Reset_LED+0x54>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 8001e60:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <Reset_LED+0x54>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	2200      	movs	r2, #0
 8001e6a:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 8001e6c:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <Reset_LED+0x54>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	2200      	movs	r2, #0
 8001e76:	70da      	strb	r2, [r3, #3]
	for (int i=0; i<MAX_LED; i++)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0d      	cmp	r3, #13
 8001e82:	dde1      	ble.n	8001e48 <Reset_LED+0xc>
	}
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	2000035c 	.word	0x2000035c

08001e94 <setTailligght>:

uint16_t effStep = 0;

void setTailligght (int light, int R, int G, int B, int bright){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
	  // Tail light
	  Set_LED(light, R, G, B);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f7ff ff23 	bl	8001cf4 <Set_LED>
	  Set_Brightness(bright);
 8001eae:	69b8      	ldr	r0, [r7, #24]
 8001eb0:	f7ff ff4c 	bl	8001d4c <Set_Brightness>
	  WS2812_Send();
 8001eb4:	f7ff ff54 	bl	8001d60 <WS2812_Send>
	  HAL_Delay(30);
 8001eb8:	201e      	movs	r0, #30
 8001eba:	f002 f903 	bl	80040c4 <HAL_Delay>
	  // Tail light
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec8:	b5b0      	push	{r4, r5, r7, lr}
 8001eca:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8001ece:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// VL53L1X new Attempt with 07Ver
	uint8_t buff[50];
	VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_Dev_t  vl53l1_c; // center module
	VL53L1_DEV    Dev = &vl53l1_c;
 8001ed0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ed4:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed8:	f002 f892 	bl	8004000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001edc:	f000 fbe6 	bl	80026ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee0:	f000 fe0e 	bl	8002b00 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001ee4:	f000 feb8 	bl	8002c58 <MX_FSMC_Init>
  MX_DMA_Init();
 8001ee8:	f000 fde4 	bl	8002ab4 <MX_DMA_Init>
  MX_I2C2_Init();
 8001eec:	f000 fc52 	bl	8002794 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001ef0:	f000 fc7e 	bl	80027f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001ef4:	f000 fd90 	bl	8002a18 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001ef8:	f000 fc1e 	bl	8002738 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001efc:	f000 fd18 	bl	8002930 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001f00:	f7ff fa3b 	bl	800137a <LCD_INIT>

  // Init VL53L1X
  Dev->I2cHandle = &hi2c2;
 8001f04:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8001f08:	4ad5      	ldr	r2, [pc, #852]	; (8002260 <main+0x398>)
 8001f0a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  Dev->I2cDevAddr = 0x52;
 8001f0e:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8001f12:	2252      	movs	r2, #82	; 0x52
 8001f14:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2120      	movs	r1, #32
 8001f1c:	48d1      	ldr	r0, [pc, #836]	; (8002264 <main+0x39c>)
 8001f1e:	f002 fff6 	bl	8004f0e <HAL_GPIO_WritePin>
  HAL_Delay(2); // 2ms reset time
 8001f22:	2002      	movs	r0, #2
 8001f24:	f002 f8ce 	bl	80040c4 <HAL_Delay>
  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2120      	movs	r1, #32
 8001f2c:	48cd      	ldr	r0, [pc, #820]	; (8002264 <main+0x39c>)
 8001f2e:	f002 ffee 	bl	8004f0e <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8001f32:	2002      	movs	r0, #2
 8001f34:	f002 f8c6 	bl	80040c4 <HAL_Delay>

  //  /*-[ I2C Bus Scanning ]-*/
      uint8_t i=0, ret;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
      char text[100];
      for(i=1; i<128; i++)
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
 8001f44:	e048      	b.n	8001fd8 <main+0x110>
      {
          ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8001f46:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	b299      	uxth	r1, r3
 8001f50:	2305      	movs	r3, #5
 8001f52:	2203      	movs	r2, #3
 8001f54:	48c2      	ldr	r0, [pc, #776]	; (8002260 <main+0x398>)
 8001f56:	f003 fff7 	bl	8005f48 <HAL_I2C_IsDeviceReady>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
          if (ret != HAL_OK) /* No ACK Received At That Address */
 8001f60:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d009      	beq.n	8001f7c <main+0xb4>
          {
        	  LCD_DrawString(105, 125, "Loading........");
 8001f68:	4abf      	ldr	r2, [pc, #764]	; (8002268 <main+0x3a0>)
 8001f6a:	217d      	movs	r1, #125	; 0x7d
 8001f6c:	2069      	movs	r0, #105	; 0x69
 8001f6e:	f7ff fc67 	bl	8001840 <LCD_DrawString>
        	  Delay(10000);
 8001f72:	f242 7010 	movw	r0, #10000	; 0x2710
 8001f76:	f7ff f9ef 	bl	8001358 <Delay>
 8001f7a:	e028      	b.n	8001fce <main+0x106>
        	  //println(&huart1,text);
          }
          else if(ret == HAL_OK)
 8001f7c:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d124      	bne.n	8001fce <main+0x106>
          {
        	  sprintf(text, "Address: %x", i << 1);
 8001f84:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 8001f88:	005a      	lsls	r2, r3, #1
 8001f8a:	f107 031c 	add.w	r3, r7, #28
 8001f8e:	49b7      	ldr	r1, [pc, #732]	; (800226c <main+0x3a4>)
 8001f90:	4618      	mov	r0, r3
 8001f92:	f00d f8df 	bl	800f154 <siprintf>
        	  if (i == 0x40){
 8001f96:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d104      	bne.n	8001fa8 <main+0xe0>
        		  LCD_DrawString(105, 125, "VL53L1X ToF port");
 8001f9e:	4ab4      	ldr	r2, [pc, #720]	; (8002270 <main+0x3a8>)
 8001fa0:	217d      	movs	r1, #125	; 0x7d
 8001fa2:	2069      	movs	r0, #105	; 0x69
 8001fa4:	f7ff fc4c 	bl	8001840 <LCD_DrawString>
        	  }
        	  if (i == 103){
 8001fa8:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 8001fac:	2b67      	cmp	r3, #103	; 0x67
 8001fae:	d104      	bne.n	8001fba <main+0xf2>
        		  LCD_DrawString(105, 125, "MPU6050     port");
 8001fb0:	4ab0      	ldr	r2, [pc, #704]	; (8002274 <main+0x3ac>)
 8001fb2:	217d      	movs	r1, #125	; 0x7d
 8001fb4:	2069      	movs	r0, #105	; 0x69
 8001fb6:	f7ff fc43 	bl	8001840 <LCD_DrawString>
        	  }
        	  LCD_DrawString(85, 125, text);
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	217d      	movs	r1, #125	; 0x7d
 8001fc2:	2055      	movs	r0, #85	; 0x55
 8001fc4:	f7ff fc3c 	bl	8001840 <LCD_DrawString>
        	  Delay(10000000);
 8001fc8:	48ab      	ldr	r0, [pc, #684]	; (8002278 <main+0x3b0>)
 8001fca:	f7ff f9c5 	bl	8001358 <Delay>
      for(i=1; i<128; i++)
 8001fce:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
 8001fd8:	f997 34af 	ldrsb.w	r3, [r7, #1199]	; 0x4af
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	dab2      	bge.n	8001f46 <main+0x7e>
          }
      }

      Delay(10000);
 8001fe0:	f242 7010 	movw	r0, #10000	; 0x2710
 8001fe4:	f7ff f9b8 	bl	8001358 <Delay>
//  HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, buff, 1, 0xFFFF );
//  buff[1] = buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
//  buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
//  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 2, 0xFFFF );

  HAL_Delay( 2 );
 8001fe8:	2002      	movs	r0, #2
 8001fea:	f002 f86b 	bl	80040c4 <HAL_Delay>
//
  VL53L1_WaitDeviceBooted( Dev );
 8001fee:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 8001ff2:	f006 fdbd 	bl	8008b70 <VL53L1_WaitDeviceBooted>
  VL53L1_DataInit( Dev );
 8001ff6:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 8001ffa:	f006 fd61 	bl	8008ac0 <VL53L1_DataInit>
  VL53L1_StaticInit( Dev );
 8001ffe:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 8002002:	f006 fd96 	bl	8008b32 <VL53L1_StaticInit>
  VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 8002006:	2103      	movs	r1, #3
 8002008:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 800200c:	f006 fede 	bl	8008dcc <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 8002010:	f24c 3150 	movw	r1, #50000	; 0xc350
 8002014:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 8002018:	f006 ff4e 	bl	8008eb8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
  VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 800201c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002020:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 8002024:	f007 f8d4 	bl	80091d0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
  VL53L1_StartMeasurement( Dev );
 8002028:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 800202c:	f007 fa0e 	bl	800944c <VL53L1_StartMeasurement>

  // End VL53L1X init

  MPU6050_Initialize(&hi2c2);
 8002030:	488b      	ldr	r0, [pc, #556]	; (8002260 <main+0x398>)
 8002032:	f00c f865 	bl	800e100 <MPU6050_Initialize>
  MPU6050_SetScaleAccelRange(&hi2c2, MPU6050_ACCEL_RANGE_8_G);
 8002036:	2110      	movs	r1, #16
 8002038:	4889      	ldr	r0, [pc, #548]	; (8002260 <main+0x398>)
 800203a:	f00c f8bf 	bl	800e1bc <MPU6050_SetScaleAccelRange>
  MPU6050_SetScaleGyroRange(&hi2c2, MPU6050_GYRO_RANGE_2000_DEG);
 800203e:	2118      	movs	r1, #24
 8002040:	4887      	ldr	r0, [pc, #540]	; (8002260 <main+0x398>)
 8002042:	f00c f8d7 	bl	800e1f4 <MPU6050_SetScaleGyroRange>

  macXPT2046_CS_DISABLE();
 8002046:	2200      	movs	r2, #0
 8002048:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800204c:	488b      	ldr	r0, [pc, #556]	; (800227c <main+0x3b4>)
 800204e:	f002 ff5e 	bl	8004f0e <HAL_GPIO_WritePin>
//  __HAL_RCC_I2C2_CLK_DISABLE();
//  __HAL_RCC_FSMC_CLK_ENABLE();

//  LCD_INIT();

   Delay(100000);
 8002052:	488b      	ldr	r0, [pc, #556]	; (8002280 <main+0x3b8>)
 8002054:	f7ff f980 	bl	8001358 <Delay>

  LCD_Clear (50, 80, 140, 70, RED);
 8002058:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2346      	movs	r3, #70	; 0x46
 8002060:	228c      	movs	r2, #140	; 0x8c
 8002062:	2150      	movs	r1, #80	; 0x50
 8002064:	2032      	movs	r0, #50	; 0x32
 8002066:	f7ff fb82 	bl	800176e <LCD_Clear>
  LCD_DrawString(65, 105, "SmartBike DEMO");
 800206a:	4a86      	ldr	r2, [pc, #536]	; (8002284 <main+0x3bc>)
 800206c:	2169      	movs	r1, #105	; 0x69
 800206e:	2041      	movs	r0, #65	; 0x41
 8002070:	f7ff fbe6 	bl	8001840 <LCD_DrawString>
  HAL_Delay(1000);
 8002074:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002078:	f002 f824 	bl	80040c4 <HAL_Delay>

  while( ! XPT2046_Touch_Calibrate () );
 800207c:	bf00      	nop
 800207e:	f001 fcd1 	bl	8003a24 <XPT2046_Touch_Calibrate>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0fa      	beq.n	800207e <main+0x1b6>

  LCD_GramScan ( 1 );
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff fccd 	bl	8001a28 <LCD_GramScan>
  LCD_Clear ( 0, 0, 240, 320, WHITE );
 800208e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002098:	22f0      	movs	r2, #240	; 0xf0
 800209a:	2100      	movs	r1, #0
 800209c:	2000      	movs	r0, #0
 800209e:	f7ff fb66 	bl	800176e <LCD_Clear>
  LCD_Clear ( 90,  282,  60, 60, BLUE	);
 80020a2:	231f      	movs	r3, #31
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	233c      	movs	r3, #60	; 0x3c
 80020a8:	223c      	movs	r2, #60	; 0x3c
 80020aa:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80020ae:	205a      	movs	r0, #90	; 0x5a
 80020b0:	f7ff fb5d 	bl	800176e <LCD_Clear>
  LCD_Clear ( 0,  282,  95, 38,  YELLOW);
 80020b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2326      	movs	r3, #38	; 0x26
 80020bc:	225f      	movs	r2, #95	; 0x5f
 80020be:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7ff fb53 	bl	800176e <LCD_Clear>
  LCD_Clear ( 150,  282,  95, 38, YELLOW);
 80020c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2326      	movs	r3, #38	; 0x26
 80020d0:	225f      	movs	r2, #95	; 0x5f
 80020d2:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80020d6:	2096      	movs	r0, #150	; 0x96
 80020d8:	f7ff fb49 	bl	800176e <LCD_Clear>
 // LCD_DrawString(20, 280, "Turn Left");
  LCD_DrawString_Color (35, 285, "<---", YELLOW, BLACK );
 80020dc:	2300      	movs	r3, #0
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020e4:	4a68      	ldr	r2, [pc, #416]	; (8002288 <main+0x3c0>)
 80020e6:	f240 111d 	movw	r1, #285	; 0x11d
 80020ea:	2023      	movs	r0, #35	; 0x23
 80020ec:	f7ff fc66 	bl	80019bc <LCD_DrawString_Color>
  LCD_DrawString_Color (170, 285, "--->", YELLOW, BLACK );
 80020f0:	2300      	movs	r3, #0
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020f8:	4a64      	ldr	r2, [pc, #400]	; (800228c <main+0x3c4>)
 80020fa:	f240 111d 	movw	r1, #285	; 0x11d
 80020fe:	20aa      	movs	r0, #170	; 0xaa
 8002100:	f7ff fc5c 	bl	80019bc <LCD_DrawString_Color>

  LCD_DrawEllipse ( 120, 100, 40, 20, RED);
 8002104:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2314      	movs	r3, #20
 800210c:	2228      	movs	r2, #40	; 0x28
 800210e:	2164      	movs	r1, #100	; 0x64
 8002110:	2078      	movs	r0, #120	; 0x78
 8002112:	f7ff fd3b 	bl	8001b8c <LCD_DrawEllipse>
  char buf[9];
//  char text[10];
  float Ax, Ay, Az, Gx, Gy, Gz;

  strType_XPT2046_Coordinate touchCoordinate[4];
  int touchFlag = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
  int SafetyStatus = 0;	// 0: Save, 1: Caution, 2: Response needed, 3: Danger
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490


  /*
   * Init of RPM Counter with timer and A3144 Hall effect sensor
   * */
  a3144_Init();
 8002122:	f7ff f8f3 	bl	800130c <a3144_Init>
  float rotSpeed = 0;
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
  float rpm = 0;
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
  float tempSpeed = 0;
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
  int Rangecount = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c

  // Reset Previus Tail lights
  Reset_LED();
 8002144:	f7ff fe7a 	bl	8001e3c <Reset_LED>
  WS2812_Send();
 8002148:	f7ff fe0a 	bl	8001d60 <WS2812_Send>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Gyro(&hi2c2);
 800214c:	4844      	ldr	r0, [pc, #272]	; (8002260 <main+0x398>)
 800214e:	f00c f9e3 	bl	800e518 <MPU6050_Read_Gyro>
	  MPU6050_Read_Accel(&hi2c2);
 8002152:	4843      	ldr	r0, [pc, #268]	; (8002260 <main+0x398>)
 8002154:	f00c f86a 	bl	800e22c <MPU6050_Read_Accel>


	  Ax = MPU6050_Ax;
 8002158:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <main+0x3c8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	  Ay = MPU6050_Ay;
 8002160:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <main+0x3cc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
	  Az = MPU6050_Az;
 8002168:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <main+0x3d0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480

	  Gx = MPU6050_Gx;
 8002170:	4b4a      	ldr	r3, [pc, #296]	; (800229c <main+0x3d4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
	  Gy = MPU6050_Gy;
 8002178:	4b49      	ldr	r3, [pc, #292]	; (80022a0 <main+0x3d8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	  Gz = MPU6050_Gz;
 8002180:	4b48      	ldr	r3, [pc, #288]	; (80022a4 <main+0x3dc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

	  if (Ay < -0.4){
 8002188:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800218c:	f7fe f9b8 	bl	8000500 <__aeabi_f2d>
 8002190:	a32f      	add	r3, pc, #188	; (adr r3, 8002250 <main+0x388>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe fc7d 	bl	8000a94 <__aeabi_dcmplt>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <main+0x2e4>
	 		  LCD_DrawString(80, 140, "Pitch Down");
 80021a0:	4a41      	ldr	r2, [pc, #260]	; (80022a8 <main+0x3e0>)
 80021a2:	218c      	movs	r1, #140	; 0x8c
 80021a4:	2050      	movs	r0, #80	; 0x50
 80021a6:	f7ff fb4b 	bl	8001840 <LCD_DrawString>
 80021aa:	e016      	b.n	80021da <main+0x312>
	 	  } else if (Ay > 0.4){
 80021ac:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 80021b0:	f7fe f9a6 	bl	8000500 <__aeabi_f2d>
 80021b4:	a328      	add	r3, pc, #160	; (adr r3, 8002258 <main+0x390>)
 80021b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ba:	f7fe fc89 	bl	8000ad0 <__aeabi_dcmpgt>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <main+0x308>
	 		  LCD_DrawString(80, 140, " Pitch up ");
 80021c4:	4a39      	ldr	r2, [pc, #228]	; (80022ac <main+0x3e4>)
 80021c6:	218c      	movs	r1, #140	; 0x8c
 80021c8:	2050      	movs	r0, #80	; 0x50
 80021ca:	f7ff fb39 	bl	8001840 <LCD_DrawString>
 80021ce:	e004      	b.n	80021da <main+0x312>
	 	  } else{
	 		  LCD_DrawString(80, 140, "No Pitch  ");
 80021d0:	4a37      	ldr	r2, [pc, #220]	; (80022b0 <main+0x3e8>)
 80021d2:	218c      	movs	r1, #140	; 0x8c
 80021d4:	2050      	movs	r0, #80	; 0x50
 80021d6:	f7ff fb33 	bl	8001840 <LCD_DrawString>
	 	  }

	 	  if (Ax < -0.5){
 80021da:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80021de:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 80021e2:	f7fe ffd9 	bl	8001198 <__aeabi_fcmplt>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <main+0x330>
	 		  LCD_DrawString(90, 160, " Right ");
 80021ec:	4a31      	ldr	r2, [pc, #196]	; (80022b4 <main+0x3ec>)
 80021ee:	21a0      	movs	r1, #160	; 0xa0
 80021f0:	205a      	movs	r0, #90	; 0x5a
 80021f2:	f7ff fb25 	bl	8001840 <LCD_DrawString>
 80021f6:	e013      	b.n	8002220 <main+0x358>
	 	  } else if (Ax > 0.5){
 80021f8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80021fc:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 8002200:	f7fe ffe8 	bl	80011d4 <__aeabi_fcmpgt>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <main+0x34e>
	 		  LCD_DrawString(90, 160, " Left ");
 800220a:	4a2b      	ldr	r2, [pc, #172]	; (80022b8 <main+0x3f0>)
 800220c:	21a0      	movs	r1, #160	; 0xa0
 800220e:	205a      	movs	r0, #90	; 0x5a
 8002210:	f7ff fb16 	bl	8001840 <LCD_DrawString>
 8002214:	e004      	b.n	8002220 <main+0x358>
	 	  }	else{
	 		  LCD_DrawString(90, 160, " Still ");
 8002216:	4a29      	ldr	r2, [pc, #164]	; (80022bc <main+0x3f4>)
 8002218:	21a0      	movs	r1, #160	; 0xa0
 800221a:	205a      	movs	r0, #90	; 0x5a
 800221c:	f7ff fb10 	bl	8001840 <LCD_DrawString>
	 	  }

	 	  if (Az < 0) {
 8002220:	f04f 0100 	mov.w	r1, #0
 8002224:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 8002228:	f7fe ffb6 	bl	8001198 <__aeabi_fcmplt>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d05d      	beq.n	80022ee <main+0x426>
	 		  LCD_DrawString_Color(90, 180, " Crash?? ", RED, BLACK);
 8002232:	2300      	movs	r3, #0
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800223a:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <main+0x3f8>)
 800223c:	21b4      	movs	r1, #180	; 0xb4
 800223e:	205a      	movs	r0, #90	; 0x5a
 8002240:	f7ff fbbc 	bl	80019bc <LCD_DrawString_Color>
	 		  for (int i =0; i < 14; i++){
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 800224a:	e049      	b.n	80022e0 <main+0x418>
 800224c:	f3af 8000 	nop.w
 8002250:	9999999a 	.word	0x9999999a
 8002254:	bfd99999 	.word	0xbfd99999
 8002258:	9999999a 	.word	0x9999999a
 800225c:	3fd99999 	.word	0x3fd99999
 8002260:	200003e8 	.word	0x200003e8
 8002264:	40010c00 	.word	0x40010c00
 8002268:	08011670 	.word	0x08011670
 800226c:	08011680 	.word	0x08011680
 8002270:	0801168c 	.word	0x0801168c
 8002274:	080116a0 	.word	0x080116a0
 8002278:	00989680 	.word	0x00989680
 800227c:	40011400 	.word	0x40011400
 8002280:	000186a0 	.word	0x000186a0
 8002284:	080116b4 	.word	0x080116b4
 8002288:	080116c4 	.word	0x080116c4
 800228c:	080116cc 	.word	0x080116cc
 8002290:	2000030c 	.word	0x2000030c
 8002294:	200002f4 	.word	0x200002f4
 8002298:	20000298 	.word	0x20000298
 800229c:	200002a0 	.word	0x200002a0
 80022a0:	200002f8 	.word	0x200002f8
 80022a4:	20000310 	.word	0x20000310
 80022a8:	080116d4 	.word	0x080116d4
 80022ac:	080116e0 	.word	0x080116e0
 80022b0:	080116ec 	.word	0x080116ec
 80022b4:	080116f8 	.word	0x080116f8
 80022b8:	08011700 	.word	0x08011700
 80022bc:	08011708 	.word	0x08011708
 80022c0:	08011710 	.word	0x08011710
	 			 setTailligght(i, 255, 0, 0, 10);
 80022c4:	230a      	movs	r3, #10
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2300      	movs	r3, #0
 80022ca:	2200      	movs	r2, #0
 80022cc:	21ff      	movs	r1, #255	; 0xff
 80022ce:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 80022d2:	f7ff fddf 	bl	8001e94 <setTailligght>
	 		  for (int i =0; i < 14; i++){
 80022d6:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80022da:	3301      	adds	r3, #1
 80022dc:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 80022e0:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80022e4:	2b0d      	cmp	r3, #13
 80022e6:	dded      	ble.n	80022c4 <main+0x3fc>
	 		  }
	 		  SafetyStatus = 2;
 80022e8:	2302      	movs	r3, #2
 80022ea:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
	 	  }


	 	  HAL_Delay(200);
 80022ee:	20c8      	movs	r0, #200	; 0xc8
 80022f0:	f001 fee8 	bl	80040c4 <HAL_Delay>

	 	  if ( touchFlag == 0 )
 80022f4:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 809b 	bne.w	8002434 <main+0x56c>
	 	  {
	 		  if ( XPT2046_Get_TouchedPoint ( & touchCoordinate, & strXPT2046_TouchPara ) )
 80022fe:	463b      	mov	r3, r7
 8002300:	49db      	ldr	r1, [pc, #876]	; (8002670 <main+0x7a8>)
 8002302:	4618      	mov	r0, r3
 8002304:	f001 fdce 	bl	8003ea4 <XPT2046_Get_TouchedPoint>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 808e 	beq.w	800242c <main+0x564>
	 		  {
	 			  if ( ( touchCoordinate->y > 282 ) && ( touchCoordinate->y < 400) )
 8002310:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002314:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8002318:	885b      	ldrh	r3, [r3, #2]
 800231a:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 800231e:	f240 8085 	bls.w	800242c <main+0x564>
 8002322:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002326:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800232a:	885b      	ldrh	r3, [r3, #2]
 800232c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002330:	d27c      	bcs.n	800242c <main+0x564>
	 			  {
	 				  if ( ( touchCoordinate->x > 95 ) && ( touchCoordinate->x < 145 ) )
 8002332:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002336:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	2b5f      	cmp	r3, #95	; 0x5f
 800233e:	d927      	bls.n	8002390 <main+0x4c8>
 8002340:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002344:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	2b90      	cmp	r3, #144	; 0x90
 800234c:	d820      	bhi.n	8002390 <main+0x4c8>
	 				  {
	 					  LCD_DrawString(71, 200, "     Reset    ");
 800234e:	4ac9      	ldr	r2, [pc, #804]	; (8002674 <main+0x7ac>)
 8002350:	21c8      	movs	r1, #200	; 0xc8
 8002352:	2047      	movs	r0, #71	; 0x47
 8002354:	f7ff fa74 	bl	8001840 <LCD_DrawString>
	 					  SafetyStatus = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
	 					  LCD_Clear(90, 180, 90, 20, WHITE);
 800235e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2314      	movs	r3, #20
 8002366:	225a      	movs	r2, #90	; 0x5a
 8002368:	21b4      	movs	r1, #180	; 0xb4
 800236a:	205a      	movs	r0, #90	; 0x5a
 800236c:	f7ff f9ff 	bl	800176e <LCD_Clear>
	 					  LCD_Clear(70, 200, 90, 20, WHITE);
 8002370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2314      	movs	r3, #20
 8002378:	225a      	movs	r2, #90	; 0x5a
 800237a:	21c8      	movs	r1, #200	; 0xc8
 800237c:	2046      	movs	r0, #70	; 0x46
 800237e:	f7ff f9f6 	bl	800176e <LCD_Clear>
	 					  Reset_LED();
 8002382:	f7ff fd5b 	bl	8001e3c <Reset_LED>
	 					  WS2812_Send();
 8002386:	f7ff fceb 	bl	8001d60 <WS2812_Send>
	 					 Rangecount = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
	 				  }

	 				  if (touchCoordinate->x < 90)
 8002390:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002394:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	2b59      	cmp	r3, #89	; 0x59
 800239c:	d81f      	bhi.n	80023de <main+0x516>
	 				  {
	 					  SafetyStatus = 1;
 800239e:	2301      	movs	r3, #1
 80023a0:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
	 					  LCD_DrawString(71, 200, "Turning Left! ");
 80023a4:	4ab4      	ldr	r2, [pc, #720]	; (8002678 <main+0x7b0>)
 80023a6:	21c8      	movs	r1, #200	; 0xc8
 80023a8:	2047      	movs	r0, #71	; 0x47
 80023aa:	f7ff fa49 	bl	8001840 <LCD_DrawString>
	 					  setTailligght(0, 255, 255, 0, 10);
 80023ae:	230a      	movs	r3, #10
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2300      	movs	r3, #0
 80023b4:	22ff      	movs	r2, #255	; 0xff
 80023b6:	21ff      	movs	r1, #255	; 0xff
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7ff fd6b 	bl	8001e94 <setTailligght>
	 					  setTailligght(1, 255, 255, 0, 10);
 80023be:	230a      	movs	r3, #10
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2300      	movs	r3, #0
 80023c4:	22ff      	movs	r2, #255	; 0xff
 80023c6:	21ff      	movs	r1, #255	; 0xff
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7ff fd63 	bl	8001e94 <setTailligght>
	 					  setTailligght(2, 255, 255, 0, 10);
 80023ce:	230a      	movs	r3, #10
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2300      	movs	r3, #0
 80023d4:	22ff      	movs	r2, #255	; 0xff
 80023d6:	21ff      	movs	r1, #255	; 0xff
 80023d8:	2002      	movs	r0, #2
 80023da:	f7ff fd5b 	bl	8001e94 <setTailligght>
	 				  }

	 				  if (touchCoordinate->x > 150)
 80023de:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80023e2:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	2b96      	cmp	r3, #150	; 0x96
 80023ea:	d91f      	bls.n	800242c <main+0x564>
	 				  {
	 					  SafetyStatus = 1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
	 					  LCD_DrawString(71, 200, "Turning Right!");
 80023f2:	4aa2      	ldr	r2, [pc, #648]	; (800267c <main+0x7b4>)
 80023f4:	21c8      	movs	r1, #200	; 0xc8
 80023f6:	2047      	movs	r0, #71	; 0x47
 80023f8:	f7ff fa22 	bl	8001840 <LCD_DrawString>
	 					  setTailligght(11, 255, 255, 0, 10);
 80023fc:	230a      	movs	r3, #10
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2300      	movs	r3, #0
 8002402:	22ff      	movs	r2, #255	; 0xff
 8002404:	21ff      	movs	r1, #255	; 0xff
 8002406:	200b      	movs	r0, #11
 8002408:	f7ff fd44 	bl	8001e94 <setTailligght>
	 					  setTailligght(12, 255, 255, 0, 10);
 800240c:	230a      	movs	r3, #10
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	22ff      	movs	r2, #255	; 0xff
 8002414:	21ff      	movs	r1, #255	; 0xff
 8002416:	200c      	movs	r0, #12
 8002418:	f7ff fd3c 	bl	8001e94 <setTailligght>
	 					  setTailligght(13, 255, 255, 0, 10);
 800241c:	230a      	movs	r3, #10
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2300      	movs	r3, #0
 8002422:	22ff      	movs	r2, #255	; 0xff
 8002424:	21ff      	movs	r1, #255	; 0xff
 8002426:	200d      	movs	r0, #13
 8002428:	f7ff fd34 	bl	8001e94 <setTailligght>
	 				  }
	 			  }

	 		  }
	 		  touchFlag = 1;
 800242c:	2301      	movs	r3, #1
 800242e:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8002432:	e002      	b.n	800243a <main+0x572>
	 	  }
	 	  else {
	 //		  LCD_DrawString(70, 200, "..............");
	 		  touchFlag = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
	 	  }
	 	  HAL_Delay(50);
 800243a:	2032      	movs	r0, #50	; 0x32
 800243c:	f001 fe42 	bl	80040c4 <HAL_Delay>



		  rpm = GetRotationSpeed(); // RPM not speed
 8002440:	f7fe ff2e 	bl	80012a0 <GetRotationSpeed>
 8002444:	f8c7 04a4 	str.w	r0, [r7, #1188]	; 0x4a4
		  if (rpm < 1){
 8002448:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800244c:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 8002450:	f7fe fea2 	bl	8001198 <__aeabi_fcmplt>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <main+0x59a>
			  rpm = 0;
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
		  }
		  sprintf(buf, "%0.2f RPM", rpm);
 8002462:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 8002466:	f7fe f84b 	bl	8000500 <__aeabi_f2d>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	f107 0010 	add.w	r0, r7, #16
 8002472:	4983      	ldr	r1, [pc, #524]	; (8002680 <main+0x7b8>)
 8002474:	f00c fe6e 	bl	800f154 <siprintf>
		  LCD_DrawString(90, 90, buf);
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	461a      	mov	r2, r3
 800247e:	215a      	movs	r1, #90	; 0x5a
 8002480:	205a      	movs	r0, #90	; 0x5a
 8002482:	f7ff f9dd 	bl	8001840 <LCD_DrawString>

		  rotSpeed = rpm * 0.7 * 3.14 / 60;
 8002486:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 800248a:	f7fe f839 	bl	8000500 <__aeabi_f2d>
 800248e:	a372      	add	r3, pc, #456	; (adr r3, 8002658 <main+0x790>)
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	f7fe f88c 	bl	80005b0 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	a36f      	add	r3, pc, #444	; (adr r3, 8002660 <main+0x798>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fe f883 	bl	80005b0 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	4b73      	ldr	r3, [pc, #460]	; (8002684 <main+0x7bc>)
 80024b8:	f7fe f9a4 	bl	8000804 <__aeabi_ddiv>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe fb6c 	bl	8000ba0 <__aeabi_d2f>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
		  sprintf(buf, "%0.2f m/s", rotSpeed);
 80024ce:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80024d2:	f7fe f815 	bl	8000500 <__aeabi_f2d>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	f107 0010 	add.w	r0, r7, #16
 80024de:	496a      	ldr	r1, [pc, #424]	; (8002688 <main+0x7c0>)
 80024e0:	f00c fe38 	bl	800f154 <siprintf>
		  LCD_DrawString(90, 120, buf);
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	461a      	mov	r2, r3
 80024ea:	2178      	movs	r1, #120	; 0x78
 80024ec:	205a      	movs	r0, #90	; 0x5a
 80024ee:	f7ff f9a7 	bl	8001840 <LCD_DrawString>

		  if (tempSpeed > rotSpeed * 0.6){
 80024f2:	f8d7 04a0 	ldr.w	r0, [r7, #1184]	; 0x4a0
 80024f6:	f7fe f803 	bl	8000500 <__aeabi_f2d>
 80024fa:	4604      	mov	r4, r0
 80024fc:	460d      	mov	r5, r1
 80024fe:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8002502:	f7fd fffd 	bl	8000500 <__aeabi_f2d>
 8002506:	a358      	add	r3, pc, #352	; (adr r3, 8002668 <main+0x7a0>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	f7fe f850 	bl	80005b0 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4620      	mov	r0, r4
 8002516:	4629      	mov	r1, r5
 8002518:	f7fe fada 	bl	8000ad0 <__aeabi_dcmpgt>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d038      	beq.n	8002594 <main+0x6cc>
			  setTailligght(4, 255, 0, 0, 10);
 8002522:	230a      	movs	r3, #10
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2300      	movs	r3, #0
 8002528:	2200      	movs	r2, #0
 800252a:	21ff      	movs	r1, #255	; 0xff
 800252c:	2004      	movs	r0, #4
 800252e:	f7ff fcb1 	bl	8001e94 <setTailligght>
			  setTailligght(5, 255, 0, 0, 10);
 8002532:	230a      	movs	r3, #10
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2300      	movs	r3, #0
 8002538:	2200      	movs	r2, #0
 800253a:	21ff      	movs	r1, #255	; 0xff
 800253c:	2005      	movs	r0, #5
 800253e:	f7ff fca9 	bl	8001e94 <setTailligght>
			  setTailligght(6, 255, 0, 0, 10);
 8002542:	230a      	movs	r3, #10
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2300      	movs	r3, #0
 8002548:	2200      	movs	r2, #0
 800254a:	21ff      	movs	r1, #255	; 0xff
 800254c:	2006      	movs	r0, #6
 800254e:	f7ff fca1 	bl	8001e94 <setTailligght>
			  setTailligght(7, 255, 0, 0, 10);
 8002552:	230a      	movs	r3, #10
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2300      	movs	r3, #0
 8002558:	2200      	movs	r2, #0
 800255a:	21ff      	movs	r1, #255	; 0xff
 800255c:	2007      	movs	r0, #7
 800255e:	f7ff fc99 	bl	8001e94 <setTailligght>
			  setTailligght(8, 255, 0, 0, 10);
 8002562:	230a      	movs	r3, #10
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2300      	movs	r3, #0
 8002568:	2200      	movs	r2, #0
 800256a:	21ff      	movs	r1, #255	; 0xff
 800256c:	2008      	movs	r0, #8
 800256e:	f7ff fc91 	bl	8001e94 <setTailligght>
			  setTailligght(9, 255, 0, 0, 10);
 8002572:	230a      	movs	r3, #10
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2300      	movs	r3, #0
 8002578:	2200      	movs	r2, #0
 800257a:	21ff      	movs	r1, #255	; 0xff
 800257c:	2009      	movs	r0, #9
 800257e:	f7ff fc89 	bl	8001e94 <setTailligght>
			  setTailligght(10, 255, 0, 0, 10);
 8002582:	230a      	movs	r3, #10
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2300      	movs	r3, #0
 8002588:	2200      	movs	r2, #0
 800258a:	21ff      	movs	r1, #255	; 0xff
 800258c:	200a      	movs	r0, #10
 800258e:	f7ff fc81 	bl	8001e94 <setTailligght>
 8002592:	e037      	b.n	8002604 <main+0x73c>
		  }
		  else {
			  setTailligght(4, 0, 0, 0, 1);
 8002594:	2301      	movs	r3, #1
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2300      	movs	r3, #0
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2004      	movs	r0, #4
 80025a0:	f7ff fc78 	bl	8001e94 <setTailligght>
			  setTailligght(5, 0, 0, 0, 1);
 80025a4:	2301      	movs	r3, #1
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2300      	movs	r3, #0
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2005      	movs	r0, #5
 80025b0:	f7ff fc70 	bl	8001e94 <setTailligght>
			  setTailligght(6, 0, 0, 0, 1);
 80025b4:	2301      	movs	r3, #1
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2300      	movs	r3, #0
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2006      	movs	r0, #6
 80025c0:	f7ff fc68 	bl	8001e94 <setTailligght>
			  setTailligght(7, 0, 0, 0, 1);
 80025c4:	2301      	movs	r3, #1
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2300      	movs	r3, #0
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	2007      	movs	r0, #7
 80025d0:	f7ff fc60 	bl	8001e94 <setTailligght>
			  setTailligght(8, 0, 0, 0, 1);
 80025d4:	2301      	movs	r3, #1
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2300      	movs	r3, #0
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2008      	movs	r0, #8
 80025e0:	f7ff fc58 	bl	8001e94 <setTailligght>
			  setTailligght(9, 0, 0, 0, 1);
 80025e4:	2301      	movs	r3, #1
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2300      	movs	r3, #0
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	2009      	movs	r0, #9
 80025f0:	f7ff fc50 	bl	8001e94 <setTailligght>
			  setTailligght(10, 0, 0, 0, 1);
 80025f4:	2301      	movs	r3, #1
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2300      	movs	r3, #0
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	200a      	movs	r0, #10
 8002600:	f7ff fc48 	bl	8001e94 <setTailligght>
		  }

		  tempSpeed = rotSpeed;
 8002604:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8002608:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0

		  // Get Distance Sensor Data
		  VL53L1_WaitMeasurementDataReady( Dev );
 800260c:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 8002610:	f006 ff9e 	bl	8009550 <VL53L1_WaitMeasurementDataReady>

		  VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 8002614:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8002618:	4619      	mov	r1, r3
 800261a:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 800261e:	f007 f951 	bl	80098c4 <VL53L1_GetRangingMeasurementData>


		  if(RangingData.RangeMilliMeter < 2000){
 8002622:	f9b7 343c 	ldrsh.w	r3, [r7, #1084]	; 0x43c
 8002626:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800262a:	da31      	bge.n	8002690 <main+0x7c8>
			  Rangecount++;
 800262c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8002630:	3301      	adds	r3, #1
 8002632:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
			  if(Rangecount == 3){
 8002636:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800263a:	2b03      	cmp	r3, #3
 800263c:	d130      	bne.n	80026a0 <main+0x7d8>
				  LCD_DrawString_Color (80, 200, "REAR ALERT!!", RED, BLACK );
 800263e:	2300      	movs	r3, #0
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002646:	4a11      	ldr	r2, [pc, #68]	; (800268c <main+0x7c4>)
 8002648:	21c8      	movs	r1, #200	; 0xc8
 800264a:	2050      	movs	r0, #80	; 0x50
 800264c:	f7ff f9b6 	bl	80019bc <LCD_DrawString_Color>
				  Rangecount = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8002656:	e023      	b.n	80026a0 <main+0x7d8>
 8002658:	66666666 	.word	0x66666666
 800265c:	3fe66666 	.word	0x3fe66666
 8002660:	51eb851f 	.word	0x51eb851f
 8002664:	40091eb8 	.word	0x40091eb8
 8002668:	33333333 	.word	0x33333333
 800266c:	3fe33333 	.word	0x3fe33333
 8002670:	20000008 	.word	0x20000008
 8002674:	0801171c 	.word	0x0801171c
 8002678:	0801172c 	.word	0x0801172c
 800267c:	0801173c 	.word	0x0801173c
 8002680:	0801174c 	.word	0x0801174c
 8002684:	404e0000 	.word	0x404e0000
 8002688:	08011758 	.word	0x08011758
 800268c:	08011764 	.word	0x08011764
			  }
		  }
		  else if(RangingData.RangeMilliMeter > 2000){
 8002690:	f9b7 343c 	ldrsh.w	r3, [r7, #1084]	; 0x43c
 8002694:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002698:	dd02      	ble.n	80026a0 <main+0x7d8>
			  Rangecount = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
		  }


		  VL53L1_ClearInterruptAndStartMeasurement( Dev );
 80026a0:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 80026a4:	f006 ff3e 	bl	8009524 <VL53L1_ClearInterruptAndStartMeasurement>
	  MPU6050_Read_Gyro(&hi2c2);
 80026a8:	e550      	b.n	800214c <main+0x284>
 80026aa:	bf00      	nop

080026ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b090      	sub	sp, #64	; 0x40
 80026b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b2:	f107 0318 	add.w	r3, r7, #24
 80026b6:	2228      	movs	r2, #40	; 0x28
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f00c f8e2 	bl	800e884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
 80026cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026dc:	2301      	movs	r3, #1
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026e0:	2302      	movs	r3, #2
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026f0:	f107 0318 	add.w	r3, r7, #24
 80026f4:	4618      	mov	r0, r3
 80026f6:	f004 f9ff 	bl	8006af8 <HAL_RCC_OscConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002700:	f000 fb28 	bl	8002d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002704:	230f      	movs	r3, #15
 8002706:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002708:	2302      	movs	r3, #2
 800270a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800271a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2102      	movs	r1, #2
 8002720:	4618      	mov	r0, r3
 8002722:	f004 fc6b 	bl	8006ffc <HAL_RCC_ClockConfig>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800272c:	f000 fb12 	bl	8002d54 <Error_Handler>
  }
}
 8002730:	bf00      	nop
 8002732:	3740      	adds	r7, #64	; 0x40
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <MX_I2C1_Init+0x50>)
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <MX_I2C1_Init+0x54>)
 8002740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_I2C1_Init+0x50>)
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <MX_I2C1_Init+0x58>)
 8002746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <MX_I2C1_Init+0x50>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_I2C1_Init+0x50>)
 8002750:	2200      	movs	r2, #0
 8002752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <MX_I2C1_Init+0x50>)
 8002756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800275a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <MX_I2C1_Init+0x50>)
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <MX_I2C1_Init+0x50>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <MX_I2C1_Init+0x50>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <MX_I2C1_Init+0x50>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002774:	4804      	ldr	r0, [pc, #16]	; (8002788 <MX_I2C1_Init+0x50>)
 8002776:	f002 fbe3 	bl	8004f40 <HAL_I2C_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002780:	f000 fae8 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000394 	.word	0x20000394
 800278c:	40005400 	.word	0x40005400
 8002790:	000186a0 	.word	0x000186a0

08002794 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <MX_I2C2_Init+0x50>)
 800279a:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <MX_I2C2_Init+0x54>)
 800279c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <MX_I2C2_Init+0x50>)
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <MX_I2C2_Init+0x58>)
 80027a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <MX_I2C2_Init+0x50>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <MX_I2C2_Init+0x50>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <MX_I2C2_Init+0x50>)
 80027b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <MX_I2C2_Init+0x50>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <MX_I2C2_Init+0x50>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <MX_I2C2_Init+0x50>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <MX_I2C2_Init+0x50>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027d0:	4804      	ldr	r0, [pc, #16]	; (80027e4 <MX_I2C2_Init+0x50>)
 80027d2:	f002 fbb5 	bl	8004f40 <HAL_I2C_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80027dc:	f000 faba 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	200003e8 	.word	0x200003e8
 80027e8:	40005800 	.word	0x40005800
 80027ec:	000186a0 	.word	0x000186a0

080027f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b096      	sub	sp, #88	; 0x58
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002804:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800280e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	611a      	str	r2, [r3, #16]
 800281e:	615a      	str	r2, [r3, #20]
 8002820:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	2220      	movs	r2, #32
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f00c f82b 	bl	800e884 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800282e:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <MX_TIM1_Init+0x138>)
 8002830:	4a3e      	ldr	r2, [pc, #248]	; (800292c <MX_TIM1_Init+0x13c>)
 8002832:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002834:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <MX_TIM1_Init+0x138>)
 8002836:	2200      	movs	r2, #0
 8002838:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283a:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <MX_TIM1_Init+0x138>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72-1;
 8002840:	4b39      	ldr	r3, [pc, #228]	; (8002928 <MX_TIM1_Init+0x138>)
 8002842:	2247      	movs	r2, #71	; 0x47
 8002844:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002846:	4b38      	ldr	r3, [pc, #224]	; (8002928 <MX_TIM1_Init+0x138>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800284c:	4b36      	ldr	r3, [pc, #216]	; (8002928 <MX_TIM1_Init+0x138>)
 800284e:	2200      	movs	r2, #0
 8002850:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002852:	4b35      	ldr	r3, [pc, #212]	; (8002928 <MX_TIM1_Init+0x138>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002858:	4833      	ldr	r0, [pc, #204]	; (8002928 <MX_TIM1_Init+0x138>)
 800285a:	f004 fda0 	bl	800739e <HAL_TIM_Base_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002864:	f000 fa76 	bl	8002d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800286e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002872:	4619      	mov	r1, r3
 8002874:	482c      	ldr	r0, [pc, #176]	; (8002928 <MX_TIM1_Init+0x138>)
 8002876:	f005 fadb 	bl	8007e30 <HAL_TIM_ConfigClockSource>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002880:	f000 fa68 	bl	8002d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002884:	4828      	ldr	r0, [pc, #160]	; (8002928 <MX_TIM1_Init+0x138>)
 8002886:	f004 fe39 	bl	80074fc <HAL_TIM_PWM_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002890:	f000 fa60 	bl	8002d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800289c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028a0:	4619      	mov	r1, r3
 80028a2:	4821      	ldr	r0, [pc, #132]	; (8002928 <MX_TIM1_Init+0x138>)
 80028a4:	f005 ff66 	bl	8008774 <HAL_TIMEx_MasterConfigSynchronization>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80028ae:	f000 fa51 	bl	8002d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b2:	2360      	movs	r3, #96	; 0x60
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ba:	2300      	movs	r3, #0
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028be:	2300      	movs	r3, #0
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d2:	2200      	movs	r2, #0
 80028d4:	4619      	mov	r1, r3
 80028d6:	4814      	ldr	r0, [pc, #80]	; (8002928 <MX_TIM1_Init+0x138>)
 80028d8:	f005 f9ec 	bl	8007cb4 <HAL_TIM_PWM_ConfigChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80028e2:	f000 fa37 	bl	8002d54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	4619      	mov	r1, r3
 8002908:	4807      	ldr	r0, [pc, #28]	; (8002928 <MX_TIM1_Init+0x138>)
 800290a:	f005 ff9f 	bl	800884c <HAL_TIMEx_ConfigBreakDeadTime>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002914:	f000 fa1e 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <MX_TIM1_Init+0x138>)
 800291a:	f000 fb69 	bl	8002ff0 <HAL_TIM_MspPostInit>

}
 800291e:	bf00      	nop
 8002920:	3758      	adds	r7, #88	; 0x58
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000804 	.word	0x20000804
 800292c:	40012c00 	.word	0x40012c00

08002930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08e      	sub	sp, #56	; 0x38
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002944:	f107 0320 	add.w	r3, r7, #32
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
 800295c:	615a      	str	r2, [r3, #20]
 800295e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002960:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <MX_TIM2_Init+0xe4>)
 8002962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002966:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002968:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <MX_TIM2_Init+0xe4>)
 800296a:	2200      	movs	r2, #0
 800296c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296e:	4b29      	ldr	r3, [pc, #164]	; (8002a14 <MX_TIM2_Init+0xe4>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <MX_TIM2_Init+0xe4>)
 8002976:	2259      	movs	r2, #89	; 0x59
 8002978:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <MX_TIM2_Init+0xe4>)
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <MX_TIM2_Init+0xe4>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002986:	4823      	ldr	r0, [pc, #140]	; (8002a14 <MX_TIM2_Init+0xe4>)
 8002988:	f004 fd09 	bl	800739e <HAL_TIM_Base_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002992:	f000 f9df 	bl	8002d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800299c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029a0:	4619      	mov	r1, r3
 80029a2:	481c      	ldr	r0, [pc, #112]	; (8002a14 <MX_TIM2_Init+0xe4>)
 80029a4:	f005 fa44 	bl	8007e30 <HAL_TIM_ConfigClockSource>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80029ae:	f000 f9d1 	bl	8002d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029b2:	4818      	ldr	r0, [pc, #96]	; (8002a14 <MX_TIM2_Init+0xe4>)
 80029b4:	f004 fda2 	bl	80074fc <HAL_TIM_PWM_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80029be:	f000 f9c9 	bl	8002d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029ca:	f107 0320 	add.w	r3, r7, #32
 80029ce:	4619      	mov	r1, r3
 80029d0:	4810      	ldr	r0, [pc, #64]	; (8002a14 <MX_TIM2_Init+0xe4>)
 80029d2:	f005 fecf 	bl	8008774 <HAL_TIMEx_MasterConfigSynchronization>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80029dc:	f000 f9ba 	bl	8002d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029e0:	2360      	movs	r3, #96	; 0x60
 80029e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80029ec:	2304      	movs	r3, #4
 80029ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	220c      	movs	r2, #12
 80029f4:	4619      	mov	r1, r3
 80029f6:	4807      	ldr	r0, [pc, #28]	; (8002a14 <MX_TIM2_Init+0xe4>)
 80029f8:	f005 f95c 	bl	8007cb4 <HAL_TIM_PWM_ConfigChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002a02:	f000 f9a7 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a06:	4803      	ldr	r0, [pc, #12]	; (8002a14 <MX_TIM2_Init+0xe4>)
 8002a08:	f000 faf2 	bl	8002ff0 <HAL_TIM_MspPostInit>

}
 8002a0c:	bf00      	nop
 8002a0e:	3738      	adds	r7, #56	; 0x38
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	2000084c 	.word	0x2000084c

08002a18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a2c:	463b      	mov	r3, r7
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <MX_TIM3_Init+0x94>)
 8002a36:	4a1e      	ldr	r2, [pc, #120]	; (8002ab0 <MX_TIM3_Init+0x98>)
 8002a38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <MX_TIM3_Init+0x94>)
 8002a3c:	2247      	movs	r2, #71	; 0x47
 8002a3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <MX_TIM3_Init+0x94>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <MX_TIM3_Init+0x94>)
 8002a48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <MX_TIM3_Init+0x94>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <MX_TIM3_Init+0x94>)
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a5a:	4814      	ldr	r0, [pc, #80]	; (8002aac <MX_TIM3_Init+0x94>)
 8002a5c:	f004 fc9f 	bl	800739e <HAL_TIM_Base_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002a66:	f000 f975 	bl	8002d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a70:	f107 0308 	add.w	r3, r7, #8
 8002a74:	4619      	mov	r1, r3
 8002a76:	480d      	ldr	r0, [pc, #52]	; (8002aac <MX_TIM3_Init+0x94>)
 8002a78:	f005 f9da 	bl	8007e30 <HAL_TIM_ConfigClockSource>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002a82:	f000 f967 	bl	8002d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a86:	2300      	movs	r3, #0
 8002a88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a8e:	463b      	mov	r3, r7
 8002a90:	4619      	mov	r1, r3
 8002a92:	4806      	ldr	r0, [pc, #24]	; (8002aac <MX_TIM3_Init+0x94>)
 8002a94:	f005 fe6e 	bl	8008774 <HAL_TIMEx_MasterConfigSynchronization>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002a9e:	f000 f959 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200002ac 	.word	0x200002ac
 8002ab0:	40000400 	.word	0x40000400

08002ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <MX_DMA_Init+0x48>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	4a0f      	ldr	r2, [pc, #60]	; (8002afc <MX_DMA_Init+0x48>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6153      	str	r3, [r2, #20]
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <MX_DMA_Init+0x48>)
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	200c      	movs	r0, #12
 8002ad8:	f001 fbef 	bl	80042ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002adc:	200c      	movs	r0, #12
 8002ade:	f001 fc08 	bl	80042f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2011      	movs	r0, #17
 8002ae8:	f001 fbe7 	bl	80042ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002aec:	2011      	movs	r0, #17
 8002aee:	f001 fc00 	bl	80042f2 <HAL_NVIC_EnableIRQ>

}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000

08002b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b06:	f107 0318 	add.w	r3, r7, #24
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b14:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	4a4b      	ldr	r2, [pc, #300]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b1e:	6193      	str	r3, [r2, #24]
 8002b20:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2c:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	4a45      	ldr	r2, [pc, #276]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b32:	f043 0310 	orr.w	r3, r3, #16
 8002b36:	6193      	str	r3, [r2, #24]
 8002b38:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b44:	4b40      	ldr	r3, [pc, #256]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	4a3f      	ldr	r2, [pc, #252]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6193      	str	r3, [r2, #24]
 8002b50:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5c:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	4a39      	ldr	r2, [pc, #228]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b62:	f043 0308 	orr.w	r3, r3, #8
 8002b66:	6193      	str	r3, [r2, #24]
 8002b68:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b74:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	4a33      	ldr	r2, [pc, #204]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b7a:	f043 0320 	orr.w	r3, r3, #32
 8002b7e:	6193      	str	r3, [r2, #24]
 8002b80:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <MX_GPIO_Init+0x148>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XPT2046_SPI_MOSI_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2106      	movs	r1, #6
 8002b90:	482e      	ldr	r0, [pc, #184]	; (8002c4c <MX_GPIO_Init+0x14c>)
 8002b92:	f002 f9bc 	bl	8004f0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin|XPT2046_SPI_CS_Pin, GPIO_PIN_RESET);
 8002b96:	2200      	movs	r2, #0
 8002b98:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002b9c:	482c      	ldr	r0, [pc, #176]	; (8002c50 <MX_GPIO_Init+0x150>)
 8002b9e:	f002 f9b6 	bl	8004f0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_RESET);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2120      	movs	r1, #32
 8002ba6:	482b      	ldr	r0, [pc, #172]	; (8002c54 <MX_GPIO_Init+0x154>)
 8002ba8:	f002 f9b1 	bl	8004f0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XPT2046_SPI_CLK_GPIO_Port, XPT2046_SPI_CLK_Pin, GPIO_PIN_SET);
 8002bac:	2201      	movs	r2, #1
 8002bae:	2101      	movs	r1, #1
 8002bb0:	4826      	ldr	r0, [pc, #152]	; (8002c4c <MX_GPIO_Init+0x14c>)
 8002bb2:	f002 f9ac 	bl	8004f0e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : XPT2046_SPI_MOSI_Pin XPT2046_SPI_CLK_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = XPT2046_SPI_MOSI_Pin|XPT2046_SPI_CLK_Pin|LCD_RST_Pin;
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bc6:	f107 0318 	add.w	r3, r7, #24
 8002bca:	4619      	mov	r1, r3
 8002bcc:	481f      	ldr	r0, [pc, #124]	; (8002c4c <MX_GPIO_Init+0x14c>)
 8002bce:	f001 fff3 	bl	8004bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : XPT2046_SPI_MISO_Pin */
  GPIO_InitStruct.Pin = XPT2046_SPI_MISO_Pin;
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(XPT2046_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8002bde:	f107 0318 	add.w	r3, r7, #24
 8002be2:	4619      	mov	r1, r3
 8002be4:	4819      	ldr	r0, [pc, #100]	; (8002c4c <MX_GPIO_Init+0x14c>)
 8002be6:	f001 ffe7 	bl	8004bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3144_Pin */
  GPIO_InitStruct.Pin = A3144_Pin;
 8002bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A3144_GPIO_Port, &GPIO_InitStruct);
 8002bf8:	f107 0318 	add.w	r3, r7, #24
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4815      	ldr	r0, [pc, #84]	; (8002c54 <MX_GPIO_Init+0x154>)
 8002c00:	f001 ffda 	bl	8004bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin XPT2046_SPI_CS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|XPT2046_SPI_CS_Pin;
 8002c04:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c16:	f107 0318 	add.w	r3, r7, #24
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	480c      	ldr	r0, [pc, #48]	; (8002c50 <MX_GPIO_Init+0x150>)
 8002c1e:	f001 ffcb 	bl	8004bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : XSHUT_Pin */
  GPIO_InitStruct.Pin = XSHUT_Pin;
 8002c22:	2320      	movs	r3, #32
 8002c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c26:	2301      	movs	r3, #1
 8002c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XSHUT_GPIO_Port, &GPIO_InitStruct);
 8002c32:	f107 0318 	add.w	r3, r7, #24
 8002c36:	4619      	mov	r1, r3
 8002c38:	4806      	ldr	r0, [pc, #24]	; (8002c54 <MX_GPIO_Init+0x154>)
 8002c3a:	f001 ffbd 	bl	8004bb8 <HAL_GPIO_Init>

}
 8002c3e:	bf00      	nop
 8002c40:	3728      	adds	r7, #40	; 0x28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40011800 	.word	0x40011800
 8002c50:	40011400 	.word	0x40011400
 8002c54:	40010c00 	.word	0x40010c00

08002c58 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08e      	sub	sp, #56	; 0x38
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002c5e:	f107 031c 	add.w	r3, r7, #28
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	611a      	str	r2, [r3, #16]
 8002c6e:	615a      	str	r2, [r3, #20]
 8002c70:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8002c72:	463b      	mov	r3, r7
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
 8002c80:	615a      	str	r2, [r3, #20]
 8002c82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002c84:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002c86:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002c8a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002c8e:	4a2f      	ldr	r2, [pc, #188]	; (8002d4c <MX_FSMC_Init+0xf4>)
 8002c90:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002c98:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002ca4:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002caa:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002cb0:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002cbc:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002cc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002cca:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002cde:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8002ce8:	230f      	movs	r3, #15
 8002cea:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 26;
 8002cec:	231a      	movs	r3, #26
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8002cf8:	2311      	movs	r3, #17
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8002d04:	230f      	movs	r3, #15
 8002d06:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8002d10:	2310      	movs	r3, #16
 8002d12:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8002d14:	2311      	movs	r3, #17
 8002d16:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8002d1c:	463a      	mov	r2, r7
 8002d1e:	f107 031c 	add.w	r3, r7, #28
 8002d22:	4619      	mov	r1, r3
 8002d24:	4808      	ldr	r0, [pc, #32]	; (8002d48 <MX_FSMC_Init+0xf0>)
 8002d26:	f004 faed 	bl	8007304 <HAL_SRAM_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8002d30:	f000 f810 	bl	8002d54 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <MX_FSMC_Init+0xf8>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <MX_FSMC_Init+0xf8>)
 8002d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002d40:	bf00      	nop
 8002d42:	3738      	adds	r7, #56	; 0x38
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	200004b8 	.word	0x200004b8
 8002d4c:	a0000104 	.word	0xa0000104
 8002d50:	40010000 	.word	0x40010000

08002d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d58:	b672      	cpsid	i
}
 8002d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <Error_Handler+0x8>
	...

08002d60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <HAL_MspInit+0x5c>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <HAL_MspInit+0x5c>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6193      	str	r3, [r2, #24]
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_MspInit+0x5c>)
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <HAL_MspInit+0x5c>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <HAL_MspInit+0x5c>)
 8002d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d88:	61d3      	str	r3, [r2, #28]
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_MspInit+0x5c>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	607b      	str	r3, [r7, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_MspInit+0x60>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <HAL_MspInit+0x60>)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40010000 	.word	0x40010000

08002dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 0318 	add.w	r3, r7, #24
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2b      	ldr	r2, [pc, #172]	; (8002e8c <HAL_I2C_MspInit+0xc8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d124      	bne.n	8002e2e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de4:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <HAL_I2C_MspInit+0xcc>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <HAL_I2C_MspInit+0xcc>)
 8002dea:	f043 0308 	orr.w	r3, r3, #8
 8002dee:	6193      	str	r3, [r2, #24]
 8002df0:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <HAL_I2C_MspInit+0xcc>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dfc:	23c0      	movs	r3, #192	; 0xc0
 8002dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e00:	2312      	movs	r3, #18
 8002e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e08:	f107 0318 	add.w	r3, r7, #24
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4821      	ldr	r0, [pc, #132]	; (8002e94 <HAL_I2C_MspInit+0xd0>)
 8002e10:	f001 fed2 	bl	8004bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e14:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_I2C_MspInit+0xcc>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <HAL_I2C_MspInit+0xcc>)
 8002e1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e1e:	61d3      	str	r3, [r2, #28]
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_I2C_MspInit+0xcc>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e2c:	e029      	b.n	8002e82 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <HAL_I2C_MspInit+0xd4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d124      	bne.n	8002e82 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e38:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <HAL_I2C_MspInit+0xcc>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_I2C_MspInit+0xcc>)
 8002e3e:	f043 0308 	orr.w	r3, r3, #8
 8002e42:	6193      	str	r3, [r2, #24]
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_I2C_MspInit+0xcc>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 8002e50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e56:	2312      	movs	r3, #18
 8002e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5e:	f107 0318 	add.w	r3, r7, #24
 8002e62:	4619      	mov	r1, r3
 8002e64:	480b      	ldr	r0, [pc, #44]	; (8002e94 <HAL_I2C_MspInit+0xd0>)
 8002e66:	f001 fea7 	bl	8004bb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_I2C_MspInit+0xcc>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <HAL_I2C_MspInit+0xcc>)
 8002e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e74:	61d3      	str	r3, [r2, #28]
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_I2C_MspInit+0xcc>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
}
 8002e82:	bf00      	nop
 8002e84:	3728      	adds	r7, #40	; 0x28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40005400 	.word	0x40005400
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40010c00 	.word	0x40010c00
 8002e98:	40005800 	.word	0x40005800

08002e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a4a      	ldr	r2, [pc, #296]	; (8002fd4 <HAL_TIM_Base_MspInit+0x138>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d134      	bne.n	8002f18 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eae:	4b4a      	ldr	r3, [pc, #296]	; (8002fd8 <HAL_TIM_Base_MspInit+0x13c>)
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	4a49      	ldr	r2, [pc, #292]	; (8002fd8 <HAL_TIM_Base_MspInit+0x13c>)
 8002eb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002eb8:	6193      	str	r3, [r2, #24]
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <HAL_TIM_Base_MspInit+0x13c>)
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8002ec6:	4b45      	ldr	r3, [pc, #276]	; (8002fdc <HAL_TIM_Base_MspInit+0x140>)
 8002ec8:	4a45      	ldr	r2, [pc, #276]	; (8002fe0 <HAL_TIM_Base_MspInit+0x144>)
 8002eca:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ecc:	4b43      	ldr	r3, [pc, #268]	; (8002fdc <HAL_TIM_Base_MspInit+0x140>)
 8002ece:	2210      	movs	r2, #16
 8002ed0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed2:	4b42      	ldr	r3, [pc, #264]	; (8002fdc <HAL_TIM_Base_MspInit+0x140>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ed8:	4b40      	ldr	r3, [pc, #256]	; (8002fdc <HAL_TIM_Base_MspInit+0x140>)
 8002eda:	2280      	movs	r2, #128	; 0x80
 8002edc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ede:	4b3f      	ldr	r3, [pc, #252]	; (8002fdc <HAL_TIM_Base_MspInit+0x140>)
 8002ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <HAL_TIM_Base_MspInit+0x140>)
 8002ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eec:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002eee:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <HAL_TIM_Base_MspInit+0x140>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002ef4:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <HAL_TIM_Base_MspInit+0x140>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002efa:	4838      	ldr	r0, [pc, #224]	; (8002fdc <HAL_TIM_Base_MspInit+0x140>)
 8002efc:	f001 fa14 	bl	8004328 <HAL_DMA_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8002f06:	f7ff ff25 	bl	8002d54 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a33      	ldr	r2, [pc, #204]	; (8002fdc <HAL_TIM_Base_MspInit+0x140>)
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24
 8002f10:	4a32      	ldr	r2, [pc, #200]	; (8002fdc <HAL_TIM_Base_MspInit+0x140>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f16:	e058      	b.n	8002fca <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d13a      	bne.n	8002f98 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f22:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4a2c      	ldr	r2, [pc, #176]	; (8002fd8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	61d3      	str	r3, [r2, #28]
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <HAL_TIM_Base_MspInit+0x13c>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f3c:	4a2a      	ldr	r2, [pc, #168]	; (8002fe8 <HAL_TIM_Base_MspInit+0x14c>)
 8002f3e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f40:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f42:	2210      	movs	r2, #16
 8002f44:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f46:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f58:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f60:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8002f62:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002f68:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002f6e:	481d      	ldr	r0, [pc, #116]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f70:	f001 f9da 	bl	8004328 <HAL_DMA_Init>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_TIM_Base_MspInit+0xe2>
      Error_Handler();
 8002f7a:	f7ff feeb 	bl	8002d54 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
 8002f84:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f90:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <HAL_TIM_Base_MspInit+0x148>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002f96:	e018      	b.n	8002fca <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM3)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a13      	ldr	r2, [pc, #76]	; (8002fec <HAL_TIM_Base_MspInit+0x150>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d113      	bne.n	8002fca <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <HAL_TIM_Base_MspInit+0x13c>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4a0c      	ldr	r2, [pc, #48]	; (8002fd8 <HAL_TIM_Base_MspInit+0x13c>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	61d3      	str	r3, [r2, #28]
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <HAL_TIM_Base_MspInit+0x13c>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	201d      	movs	r0, #29
 8002fc0:	f001 f97b 	bl	80042ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fc4:	201d      	movs	r0, #29
 8002fc6:	f001 f994 	bl	80042f2 <HAL_NVIC_EnableIRQ>
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40012c00 	.word	0x40012c00
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	20000318 	.word	0x20000318
 8002fe0:	4002001c 	.word	0x4002001c
 8002fe4:	20000474 	.word	0x20000474
 8002fe8:	40020080 	.word	0x40020080
 8002fec:	40000400 	.word	0x40000400

08002ff0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	f107 0310 	add.w	r3, r7, #16
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <HAL_TIM_MspPostInit+0x98>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d119      	bne.n	8003044 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003010:	4b1e      	ldr	r3, [pc, #120]	; (800308c <HAL_TIM_MspPostInit+0x9c>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <HAL_TIM_MspPostInit+0x9c>)
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	6193      	str	r3, [r2, #24]
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <HAL_TIM_MspPostInit+0x9c>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800302c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2302      	movs	r3, #2
 8003034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003036:	f107 0310 	add.w	r3, r7, #16
 800303a:	4619      	mov	r1, r3
 800303c:	4814      	ldr	r0, [pc, #80]	; (8003090 <HAL_TIM_MspPostInit+0xa0>)
 800303e:	f001 fdbb 	bl	8004bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003042:	e01c      	b.n	800307e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304c:	d117      	bne.n	800307e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304e:	4b0f      	ldr	r3, [pc, #60]	; (800308c <HAL_TIM_MspPostInit+0x9c>)
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	4a0e      	ldr	r2, [pc, #56]	; (800308c <HAL_TIM_MspPostInit+0x9c>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6193      	str	r3, [r2, #24]
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <HAL_TIM_MspPostInit+0x9c>)
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003066:	2308      	movs	r3, #8
 8003068:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800306e:	2303      	movs	r3, #3
 8003070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003072:	f107 0310 	add.w	r3, r7, #16
 8003076:	4619      	mov	r1, r3
 8003078:	4805      	ldr	r0, [pc, #20]	; (8003090 <HAL_TIM_MspPostInit+0xa0>)
 800307a:	f001 fd9d 	bl	8004bb8 <HAL_GPIO_Init>
}
 800307e:	bf00      	nop
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40012c00 	.word	0x40012c00
 800308c:	40021000 	.word	0x40021000
 8003090:	40010800 	.word	0x40010800

08003094 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800309a:	f107 0308 	add.w	r3, r7, #8
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80030a8:	4b18      	ldr	r3, [pc, #96]	; (800310c <HAL_FSMC_MspInit+0x78>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d129      	bne.n	8003104 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80030b0:	4b16      	ldr	r3, [pc, #88]	; (800310c <HAL_FSMC_MspInit+0x78>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80030b6:	4b16      	ldr	r3, [pc, #88]	; (8003110 <HAL_FSMC_MspInit+0x7c>)
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	4a15      	ldr	r2, [pc, #84]	; (8003110 <HAL_FSMC_MspInit+0x7c>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	6153      	str	r3, [r2, #20]
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <HAL_FSMC_MspInit+0x7c>)
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80030ce:	f64f 7380 	movw	r3, #65408	; 0xff80
 80030d2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d4:	2302      	movs	r3, #2
 80030d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d8:	2303      	movs	r3, #3
 80030da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030dc:	f107 0308 	add.w	r3, r7, #8
 80030e0:	4619      	mov	r1, r3
 80030e2:	480c      	ldr	r0, [pc, #48]	; (8003114 <HAL_FSMC_MspInit+0x80>)
 80030e4:	f001 fd68 	bl	8004bb8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80030e8:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80030ec:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030f2:	2303      	movs	r3, #3
 80030f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f6:	f107 0308 	add.w	r3, r7, #8
 80030fa:	4619      	mov	r1, r3
 80030fc:	4806      	ldr	r0, [pc, #24]	; (8003118 <HAL_FSMC_MspInit+0x84>)
 80030fe:	f001 fd5b 	bl	8004bb8 <HAL_GPIO_Init>
 8003102:	e000      	b.n	8003106 <HAL_FSMC_MspInit+0x72>
    return;
 8003104:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	2000027c 	.word	0x2000027c
 8003110:	40021000 	.word	0x40021000
 8003114:	40011800 	.word	0x40011800
 8003118:	40011400 	.word	0x40011400

0800311c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003124:	f7ff ffb6 	bl	8003094 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003140:	e7fe      	b.n	8003140 <HardFault_Handler+0x4>

08003142 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003146:	e7fe      	b.n	8003146 <MemManage_Handler+0x4>

08003148 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800314c:	e7fe      	b.n	800314c <BusFault_Handler+0x4>

0800314e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003152:	e7fe      	b.n	8003152 <UsageFault_Handler+0x4>

08003154 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800317c:	f000 ff86 	bl	800408c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}

08003184 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <DMA1_Channel2_IRQHandler+0x10>)
 800318a:	f001 faab 	bl	80046e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000318 	.word	0x20000318

08003198 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <DMA1_Channel7_IRQHandler+0x10>)
 800319e:	f001 faa1 	bl	80046e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000474 	.word	0x20000474

080031ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <TIM3_IRQHandler+0x10>)
 80031b2:	f004 fc77 	bl	8007aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	200002ac 	.word	0x200002ac

080031c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
	return 1;
 80031c4:	2301      	movs	r3, #1
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <_kill>:

int _kill(int pid, int sig)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80031d8:	f00b fb1c 	bl	800e814 <__errno>
 80031dc:	4603      	mov	r3, r0
 80031de:	2216      	movs	r2, #22
 80031e0:	601a      	str	r2, [r3, #0]
	return -1;
 80031e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <_exit>:

void _exit (int status)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80031f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffe7 	bl	80031ce <_kill>
	while (1) {}		/* Make sure we hang here */
 8003200:	e7fe      	b.n	8003200 <_exit+0x12>

08003202 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e00a      	b.n	800322a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003214:	f3af 8000 	nop.w
 8003218:	4601      	mov	r1, r0
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	60ba      	str	r2, [r7, #8]
 8003220:	b2ca      	uxtb	r2, r1
 8003222:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3301      	adds	r3, #1
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	dbf0      	blt.n	8003214 <_read+0x12>
	}

return len;
 8003232:	687b      	ldr	r3, [r7, #4]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	e009      	b.n	8003262 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	60ba      	str	r2, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3301      	adds	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	dbf1      	blt.n	800324e <_write+0x12>
	}
	return len;
 800326a:	687b      	ldr	r3, [r7, #4]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <_close>:

int _close(int file)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	return -1;
 800327c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800329a:	605a      	str	r2, [r3, #4]
	return 0;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <_isatty>:

int _isatty(int file)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	return 1;
 80032b0:	2301      	movs	r3, #1
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
	return 0;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032dc:	4a14      	ldr	r2, [pc, #80]	; (8003330 <_sbrk+0x5c>)
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <_sbrk+0x60>)
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032e8:	4b13      	ldr	r3, [pc, #76]	; (8003338 <_sbrk+0x64>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <_sbrk+0x64>)
 80032f2:	4a12      	ldr	r2, [pc, #72]	; (800333c <_sbrk+0x68>)
 80032f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032f6:	4b10      	ldr	r3, [pc, #64]	; (8003338 <_sbrk+0x64>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	429a      	cmp	r2, r3
 8003302:	d207      	bcs.n	8003314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003304:	f00b fa86 	bl	800e814 <__errno>
 8003308:	4603      	mov	r3, r0
 800330a:	220c      	movs	r2, #12
 800330c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800330e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003312:	e009      	b.n	8003328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <_sbrk+0x64>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <_sbrk+0x64>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	4a05      	ldr	r2, [pc, #20]	; (8003338 <_sbrk+0x64>)
 8003324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20010000 	.word	0x20010000
 8003334:	00000400 	.word	0x00000400
 8003338:	20000280 	.word	0x20000280
 800333c:	20000998 	.word	0x20000998

08003340 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e00a      	b.n	8003370 <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 800335a:	230c      	movs	r3, #12
 800335c:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 800335e:	bf00      	nop
 8003360:	7afb      	ldrb	r3, [r7, #11]
 8003362:	1e5a      	subs	r2, r3, #1
 8003364:	72fa      	strb	r2, [r7, #11]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1fa      	bne.n	8003360 <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3301      	adds	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	429a      	cmp	r2, r3
 8003376:	d3f0      	bcc.n	800335a <XPT2046_DelayUS+0xe>

	}
	
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 800338e:	2200      	movs	r2, #0
 8003390:	2104      	movs	r1, #4
 8003392:	481d      	ldr	r0, [pc, #116]	; (8003408 <XPT2046_WriteCMD+0x84>)
 8003394:	f001 fdbb 	bl	8004f0e <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 8003398:	2200      	movs	r2, #0
 800339a:	2101      	movs	r1, #1
 800339c:	481a      	ldr	r0, [pc, #104]	; (8003408 <XPT2046_WriteCMD+0x84>)
 800339e:	f001 fdb6 	bl	8004f0e <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	e027      	b.n	80033f8 <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 80033a8:	79fa      	ldrb	r2, [r7, #7]
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	f1c3 0307 	rsb	r3, r3, #7
 80033b0:	fa42 f303 	asr.w	r3, r2, r3
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <XPT2046_WriteCMD+0x44>
 80033bc:	2201      	movs	r2, #1
 80033be:	2104      	movs	r1, #4
 80033c0:	4811      	ldr	r0, [pc, #68]	; (8003408 <XPT2046_WriteCMD+0x84>)
 80033c2:	f001 fda4 	bl	8004f0e <HAL_GPIO_WritePin>
 80033c6:	e004      	b.n	80033d2 <XPT2046_WriteCMD+0x4e>
 80033c8:	2200      	movs	r2, #0
 80033ca:	2104      	movs	r1, #4
 80033cc:	480e      	ldr	r0, [pc, #56]	; (8003408 <XPT2046_WriteCMD+0x84>)
 80033ce:	f001 fd9e 	bl	8004f0e <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 80033d2:	2005      	movs	r0, #5
 80033d4:	f7ff ffba 	bl	800334c <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 80033d8:	2201      	movs	r2, #1
 80033da:	2101      	movs	r1, #1
 80033dc:	480a      	ldr	r0, [pc, #40]	; (8003408 <XPT2046_WriteCMD+0x84>)
 80033de:	f001 fd96 	bl	8004f0e <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 80033e2:	2005      	movs	r0, #5
 80033e4:	f7ff ffb2 	bl	800334c <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 80033e8:	2200      	movs	r2, #0
 80033ea:	2101      	movs	r1, #1
 80033ec:	4806      	ldr	r0, [pc, #24]	; (8003408 <XPT2046_WriteCMD+0x84>)
 80033ee:	f001 fd8e 	bl	8004f0e <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	3301      	adds	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b07      	cmp	r3, #7
 80033fc:	d9d4      	bls.n	80033a8 <XPT2046_WriteCMD+0x24>
	}
	
}
 80033fe:	bf00      	nop
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40011800 	.word	0x40011800

0800340c <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 8003412:	2300      	movs	r3, #0
 8003414:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 8003416:	2200      	movs	r2, #0
 8003418:	2104      	movs	r1, #4
 800341a:	4819      	ldr	r0, [pc, #100]	; (8003480 <XPT2046_ReadCMD+0x74>)
 800341c:	f001 fd77 	bl	8004f0e <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8003420:	2201      	movs	r2, #1
 8003422:	2101      	movs	r1, #1
 8003424:	4816      	ldr	r0, [pc, #88]	; (8003480 <XPT2046_ReadCMD+0x74>)
 8003426:	f001 fd72 	bl	8004f0e <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 800342a:	2300      	movs	r3, #0
 800342c:	71fb      	strb	r3, [r7, #7]
 800342e:	e01e      	b.n	800346e <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 8003430:	2200      	movs	r2, #0
 8003432:	2101      	movs	r1, #1
 8003434:	4812      	ldr	r0, [pc, #72]	; (8003480 <XPT2046_ReadCMD+0x74>)
 8003436:	f001 fd6a 	bl	8004f0e <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 800343a:	2108      	movs	r1, #8
 800343c:	4810      	ldr	r0, [pc, #64]	; (8003480 <XPT2046_ReadCMD+0x74>)
 800343e:	f001 fd4f 	bl	8004ee0 <HAL_GPIO_ReadPin>
 8003442:	4603      	mov	r3, r0
 8003444:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	f1c3 030b 	rsb	r3, r3, #11
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	b21a      	sxth	r2, r3
 8003454:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003458:	4313      	orrs	r3, r2
 800345a:	b21b      	sxth	r3, r3
 800345c:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 800345e:	2201      	movs	r2, #1
 8003460:	2101      	movs	r1, #1
 8003462:	4807      	ldr	r0, [pc, #28]	; (8003480 <XPT2046_ReadCMD+0x74>)
 8003464:	f001 fd53 	bl	8004f0e <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	3301      	adds	r3, #1
 800346c:	71fb      	strb	r3, [r7, #7]
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	2b0b      	cmp	r3, #11
 8003472:	d9dd      	bls.n	8003430 <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 8003474:	88bb      	ldrh	r3, [r7, #4]

}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40011800 	.word	0x40011800

08003484 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff77 	bl	8003384 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 8003496:	f7ff ffb9 	bl	800340c <XPT2046_ReadCMD>
 800349a:	4603      	mov	r3, r0
	
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 80034ae:	2090      	movs	r0, #144	; 0x90
 80034b0:	f7ff ffe8 	bl	8003484 <XPT2046_ReadAdc>
 80034b4:	4603      	mov	r3, r0
 80034b6:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 80034b8:	2001      	movs	r0, #1
 80034ba:	f7ff ff47 	bl	800334c <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 80034be:	20d0      	movs	r0, #208	; 0xd0
 80034c0:	f7ff ffe0 	bl	8003484 <XPT2046_ReadAdc>
 80034c4:	4603      	mov	r3, r0
 80034c6:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	89fa      	ldrh	r2, [r7, #14]
 80034cc:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	89ba      	ldrh	r2, [r7, #12]
 80034d2:	801a      	strh	r2, [r3, #0]
	
	
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b092      	sub	sp, #72	; 0x48
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 80034ea:	f107 0308 	add.w	r3, r7, #8
 80034ee:	2228      	movs	r2, #40	; 0x28
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f00b f9c6 	bl	800e884 <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 80034f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80034fc:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff ffce 	bl	80034a4 <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 8003508:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800350c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	3348      	adds	r3, #72	; 0x48
 8003514:	443b      	add	r3, r7
 8003516:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 800351a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800351e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8003522:	330a      	adds	r3, #10
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	3348      	adds	r3, #72	; 0x48
 8003528:	443b      	add	r3, r7
 800352a:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 800352e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003532:	3301      	adds	r3, #1
 8003534:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 8003538:	2110      	movs	r1, #16
 800353a:	4871      	ldr	r0, [pc, #452]	; (8003700 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 800353c:	f001 fcd0 	bl	8004ee0 <HAL_GPIO_ReadPin>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <XPT2046_ReadAdc_Smooth_XY+0x72>
 8003546:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800354a:	2b09      	cmp	r3, #9
 800354c:	d9d4      	bls.n	80034f8 <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 800354e:	2110      	movs	r1, #16
 8003550:	486b      	ldr	r0, [pc, #428]	; (8003700 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8003552:	f001 fcc5 	bl	8004ee0 <HAL_GPIO_ReadPin>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 800355c:	4b69      	ldr	r3, [pc, #420]	; (8003704 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 8003562:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003566:	2b0a      	cmp	r3, #10
 8003568:	f040 80c4 	bne.w	80036f4 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 800356c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003570:	643b      	str	r3, [r7, #64]	; 0x40
 8003572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 8003576:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800357a:	63bb      	str	r3, [r7, #56]	; 0x38
 800357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357e:	637b      	str	r3, [r7, #52]	; 0x34
		
		for ( i = 1; i < 10; i ++ )
 8003580:	2301      	movs	r3, #1
 8003582:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003586:	e02b      	b.n	80035e0 <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 8003588:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	3348      	adds	r3, #72	; 0x48
 8003590:	443b      	add	r3, r7
 8003592:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003596:	461a      	mov	r2, r3
 8003598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800359a:	4293      	cmp	r3, r2
 800359c:	dd08      	ble.n	80035b0 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 800359e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	3348      	adds	r3, #72	; 0x48
 80035a6:	443b      	add	r3, r7
 80035a8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80035ac:	643b      	str	r3, [r7, #64]	; 0x40
 80035ae:	e012      	b.n	80035d6 <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 80035b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	3348      	adds	r3, #72	; 0x48
 80035b8:	443b      	add	r3, r7
 80035ba:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80035be:	461a      	mov	r2, r3
 80035c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c2:	4293      	cmp	r3, r2
 80035c4:	da07      	bge.n	80035d6 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 80035c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	3348      	adds	r3, #72	; 0x48
 80035ce:	443b      	add	r3, r7
 80035d0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80035d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 80035d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80035da:	3301      	adds	r3, #1
 80035dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80035e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80035e4:	2b09      	cmp	r3, #9
 80035e6:	d9cf      	bls.n	8003588 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80035ee:	e02f      	b.n	8003650 <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 80035f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80035f4:	330a      	adds	r3, #10
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	3348      	adds	r3, #72	; 0x48
 80035fa:	443b      	add	r3, r7
 80035fc:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003600:	461a      	mov	r2, r3
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	4293      	cmp	r3, r2
 8003606:	dd09      	ble.n	800361c <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 8003608:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800360c:	330a      	adds	r3, #10
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	3348      	adds	r3, #72	; 0x48
 8003612:	443b      	add	r3, r7
 8003614:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003618:	63bb      	str	r3, [r7, #56]	; 0x38
 800361a:	e014      	b.n	8003646 <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 800361c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003620:	330a      	adds	r3, #10
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	3348      	adds	r3, #72	; 0x48
 8003626:	443b      	add	r3, r7
 8003628:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800362c:	461a      	mov	r2, r3
 800362e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003630:	4293      	cmp	r3, r2
 8003632:	da08      	bge.n	8003646 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 8003634:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003638:	330a      	adds	r3, #10
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	3348      	adds	r3, #72	; 0x48
 800363e:	443b      	add	r3, r7
 8003640:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003644:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 8003646:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800364a:	3301      	adds	r3, #1
 800364c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003650:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003654:	2b09      	cmp	r3, #9
 8003656:	d9cb      	bls.n	80035f0 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003658:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800365c:	461a      	mov	r2, r3
 800365e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003662:	4413      	add	r3, r2
 8003664:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800366e:	4413      	add	r3, r2
 8003670:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003674:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8003676:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 800367a:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 800367c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003680:	4413      	add	r3, r2
 8003682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003686:	4413      	add	r3, r2
 8003688:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800368c:	4413      	add	r3, r2
 800368e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003692:	441a      	add	r2, r3
 8003694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003696:	1ad2      	subs	r2, r2, r3
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 80036a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80036a8:	461a      	mov	r2, r3
 80036aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80036ae:	4413      	add	r3, r2
 80036b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80036b4:	4413      	add	r3, r2
 80036b6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80036ba:	4413      	add	r3, r2
 80036bc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80036c0:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 80036c2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 80036c6:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 80036c8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80036cc:	4413      	add	r3, r2
 80036ce:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80036d2:	4413      	add	r3, r2
 80036d4:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80036d8:	4413      	add	r3, r2
 80036da:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80036de:	441a      	add	r2, r3
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	1ad2      	subs	r2, r2, r3
 80036e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 80036f4:	2300      	movs	r3, #0
	
	
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3748      	adds	r7, #72	; 0x48
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40011800 	.word	0x40011800
 8003704:	20000284 	.word	0x20000284

08003708 <XPT2046_Calculate_CalibrationFactor>:
#endif



static uint8_t XPT2046_Calculate_CalibrationFactor ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_Coordinate * pScreenSample, strType_XPT2046_Calibration * pCalibrationFactor )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8003714:	2301      	movs	r3, #1
 8003716:	75fb      	strb	r3, [r7, #23]


	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	3308      	adds	r3, #8
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	3204      	adds	r2, #4
 800372a:	8852      	ldrh	r2, [r2, #2]
 800372c:	4611      	mov	r1, r2
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	3208      	adds	r2, #8
 8003732:	8852      	ldrh	r2, [r2, #2]
 8003734:	1a8a      	subs	r2, r1, r2
 8003736:	fb03 f202 	mul.w	r2, r3, r2
									                 ( ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3304      	adds	r3, #4
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	4619      	mov	r1, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3308      	adds	r3, #8
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	1acb      	subs	r3, r1, r3
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	8849      	ldrh	r1, [r1, #2]
 800374e:	4608      	mov	r0, r1
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	3108      	adds	r1, #8
 8003754:	8849      	ldrh	r1, [r1, #2]
 8003756:	1a41      	subs	r1, r0, r1
 8003758:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	4618      	mov	r0, r3
 8003760:	f7fc febc 	bl	80004dc <__aeabi_i2d>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	
	
	if (  pCalibrationFactor -> Divider == 0  )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	f7fd f980 	bl	8000a80 <__aeabi_dcmpeq>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]
 800378a:	e145      	b.n	8003a18 <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3308      	adds	r3, #8
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	3204      	adds	r2, #4
 800379e:	8852      	ldrh	r2, [r2, #2]
 80037a0:	4611      	mov	r1, r2
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	3208      	adds	r2, #8
 80037a6:	8852      	ldrh	r2, [r2, #2]
 80037a8:	1a8a      	subs	r2, r1, r2
 80037aa:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) );
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3304      	adds	r3, #4
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	4619      	mov	r1, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3308      	adds	r3, #8
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	1acb      	subs	r3, r1, r3
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	8849      	ldrh	r1, [r1, #2]
 80037c2:	4608      	mov	r0, r1
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	3108      	adds	r1, #8
 80037c8:	8849      	ldrh	r1, [r1, #2]
 80037ca:	1a41      	subs	r1, r0, r1
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fc fe82 	bl	80004dc <__aeabi_i2d>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	e9c1 2300 	strd	r2, r3, [r1]
		
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	3308      	adds	r3, #8
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	3204      	adds	r2, #4
 80037f4:	8812      	ldrh	r2, [r2, #0]
 80037f6:	4611      	mov	r1, r2
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	3208      	adds	r2, #8
 80037fc:	8812      	ldrh	r2, [r2, #0]
 80037fe:	1a8a      	subs	r2, r1, r2
 8003800:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) );
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	4619      	mov	r1, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3308      	adds	r3, #8
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	1acb      	subs	r3, r1, r3
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	3104      	adds	r1, #4
 8003816:	8809      	ldrh	r1, [r1, #0]
 8003818:	4608      	mov	r0, r1
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	3108      	adds	r1, #8
 800381e:	8809      	ldrh	r1, [r1, #0]
 8003820:	1a41      	subs	r1, r0, r1
 8003822:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	4618      	mov	r0, r3
 800382a:	f7fc fe57 	bl	80004dc <__aeabi_i2d>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	e9c1 2302 	strd	r2, r3, [r1, #8]
		
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	3308      	adds	r3, #8
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3304      	adds	r3, #4
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	fb03 f202 	mul.w	r2, r3, r2
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3304      	adds	r3, #4
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3308      	adds	r3, #8
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	8852      	ldrh	r2, [r2, #2]
 8003862:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	4619      	mov	r1, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3308      	adds	r3, #8
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	fb03 f101 	mul.w	r1, r3, r1
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	3308      	adds	r3, #8
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	fb00 f303 	mul.w	r3, r0, r3
 8003886:	1acb      	subs	r3, r1, r3
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	3104      	adds	r1, #4
 800388c:	8849      	ldrh	r1, [r1, #2]
 800388e:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8003892:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .x - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .x ) * pScreenSample [ 2 ] .y ;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	3304      	adds	r3, #4
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	4619      	mov	r1, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	fb03 f101 	mul.w	r1, r3, r1
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3304      	adds	r3, #4
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	fb00 f303 	mul.w	r3, r0, r3
 80038b4:	1acb      	subs	r3, r1, r3
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	3108      	adds	r1, #8
 80038ba:	8849      	ldrh	r1, [r1, #2]
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 80038c0:	4413      	add	r3, r2
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fc fe0a 	bl	80004dc <__aeabi_i2d>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	885b      	ldrh	r3, [r3, #2]
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3308      	adds	r3, #8
 80038dc:	885b      	ldrh	r3, [r3, #2]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	3204      	adds	r2, #4
 80038e4:	8852      	ldrh	r2, [r2, #2]
 80038e6:	4611      	mov	r1, r2
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	3208      	adds	r2, #8
 80038ec:	8852      	ldrh	r2, [r2, #2]
 80038ee:	1a8a      	subs	r2, r1, r2
 80038f0:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3304      	adds	r3, #4
 80038f8:	885b      	ldrh	r3, [r3, #2]
 80038fa:	4619      	mov	r1, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3308      	adds	r3, #8
 8003900:	885b      	ldrh	r3, [r3, #2]
 8003902:	1acb      	subs	r3, r1, r3
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	8849      	ldrh	r1, [r1, #2]
 8003908:	4608      	mov	r0, r1
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	3108      	adds	r1, #8
 800390e:	8849      	ldrh	r1, [r1, #2]
 8003910:	1a41      	subs	r1, r0, r1
 8003912:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	4618      	mov	r0, r3
 800391a:	f7fc fddf 	bl	80004dc <__aeabi_i2d>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	e9c1 2306 	strd	r2, r3, [r1, #24]
		
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3308      	adds	r3, #8
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	3204      	adds	r2, #4
 800393a:	8852      	ldrh	r2, [r2, #2]
 800393c:	4611      	mov	r1, r2
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	3208      	adds	r2, #8
 8003942:	8852      	ldrh	r2, [r2, #2]
 8003944:	1a8a      	subs	r2, r1, r2
 8003946:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) ) ;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	885b      	ldrh	r3, [r3, #2]
 800394e:	4619      	mov	r1, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3308      	adds	r3, #8
 8003954:	885b      	ldrh	r3, [r3, #2]
 8003956:	1acb      	subs	r3, r1, r3
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	3104      	adds	r1, #4
 800395c:	8809      	ldrh	r1, [r1, #0]
 800395e:	4608      	mov	r0, r1
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	3108      	adds	r1, #8
 8003964:	8809      	ldrh	r1, [r1, #0]
 8003966:	1a41      	subs	r1, r0, r1
 8003968:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	4618      	mov	r0, r3
 8003970:	f7fc fdb4 	bl	80004dc <__aeabi_i2d>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	e9c1 2308 	strd	r2, r3, [r1, #32]
		

		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3308      	adds	r3, #8
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3304      	adds	r3, #4
 800398a:	885b      	ldrh	r3, [r3, #2]
 800398c:	fb03 f202 	mul.w	r2, r3, r2
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	3304      	adds	r3, #4
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	4619      	mov	r1, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3308      	adds	r3, #8
 800399c:	885b      	ldrh	r3, [r3, #2]
 800399e:	fb01 f303 	mul.w	r3, r1, r3
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	8852      	ldrh	r2, [r2, #2]
 80039a8:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	4619      	mov	r1, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3308      	adds	r3, #8
 80039b6:	885b      	ldrh	r3, [r3, #2]
 80039b8:	fb03 f101 	mul.w	r1, r3, r1
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	3308      	adds	r3, #8
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	885b      	ldrh	r3, [r3, #2]
 80039c8:	fb00 f303 	mul.w	r3, r0, r3
 80039cc:	1acb      	subs	r3, r1, r3
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	3104      	adds	r1, #4
 80039d2:	8849      	ldrh	r1, [r1, #2]
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 80039d8:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .y - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .y ) * pScreenSample [ 2 ] .y;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3304      	adds	r3, #4
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	4619      	mov	r1, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	885b      	ldrh	r3, [r3, #2]
 80039e6:	fb03 f101 	mul.w	r1, r3, r1
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3304      	adds	r3, #4
 80039f4:	885b      	ldrh	r3, [r3, #2]
 80039f6:	fb00 f303 	mul.w	r3, r0, r3
 80039fa:	1acb      	subs	r3, r1, r3
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	3108      	adds	r1, #8
 8003a00:	8849      	ldrh	r1, [r1, #2]
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8003a06:	4413      	add	r3, r2
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fc fd67 	bl	80004dc <__aeabi_i2d>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			
	}
	
	
	return ucRet;
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
	
	
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <XPT2046_Touch_Calibrate>:



uint8_t XPT2046_Touch_Calibrate ( void )
{
 8003a24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a28:	b0a0      	sub	sp, #128	; 0x80
 8003a2a:	af02      	add	r7, sp, #8
		uint8_t i;
		
		char cStr [ 10 ];
		
    uint16_t usScreenWidth, usScreenHeigth;
		uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8003a32:	2300      	movs	r3, #0
 8003a34:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		
	  char * pStr = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	66bb      	str	r3, [r7, #104]	; 0x68
	  
	  strType_XPT2046_Calibration CalibrationFactor;
    		

		#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	    usScreenWidth = LCD_Default_Max_Width;
 8003a48:	23f0      	movs	r3, #240	; 0xf0
 8003a4a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	    usScreenHeigth = LCD_Default_Max_Heigth;
 8003a4e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003a52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	
	  #endif
		
		

		strCrossCoordinate [ 0 ] .x = usScreenWidth >> 2;
 8003a56:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003a5a:	089b      	lsrs	r3, r3, #2
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		strCrossCoordinate [ 0 ] .y = usScreenHeigth >> 2;
 8003a62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a66:	089b      	lsrs	r3, r3, #2
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		
		strCrossCoordinate [ 1 ] .x = strCrossCoordinate [ 0 ] .x;
 8003a6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a72:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		strCrossCoordinate [ 1 ] .y = ( usScreenHeigth * 3 ) >> 2;
 8003a76:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	109b      	asrs	r3, r3, #2
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		
		strCrossCoordinate [ 2 ] .x = ( usScreenWidth * 3 ) >> 2;
 8003a88:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	109b      	asrs	r3, r3, #2
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		strCrossCoordinate [ 2 ] .y = strCrossCoordinate [ 1 ] .y;
 8003a9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a9e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		
		strCrossCoordinate [ 3 ] .x = strCrossCoordinate [ 2 ] .x;
 8003aa2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003aa6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		strCrossCoordinate [ 3 ] .y = strCrossCoordinate [ 0 ] .y;		
 8003aaa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003aae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  	
			
		LCD_GramScan (1 );
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	f7fd ffb8 	bl	8001a28 <LCD_GramScan>
		
		
		for ( i = 0; i < 4; i ++ )
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003abe:	e066      	b.n	8003b8e <XPT2046_Touch_Calibrate+0x16a>
		{ 
			LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );       
 8003ac0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ac4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003ac8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003acc:	9100      	str	r1, [sp, #0]
 8003ace:	2100      	movs	r1, #0
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f7fd fe4c 	bl	800176e <LCD_Clear>
			
			pStr = "Touch Calibrate ......";			
 8003ad6:	4bc6      	ldr	r3, [pc, #792]	; (8003df0 <XPT2046_Touch_Calibrate+0x3cc>)
 8003ad8:	66bb      	str	r3, [r7, #104]	; 0x68
      LCD_DrawString_Color ( ( usScreenWidth - ( strlen ( pStr ) - 7 ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );			
 8003ada:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003ade:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003ae0:	f7fc fba2 	bl	8000228 <strlen>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	3b07      	subs	r3, #7
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	1ae3      	subs	r3, r4, r3
 8003aec:	085b      	lsrs	r3, r3, #1
 8003aee:	b298      	uxth	r0, r3
 8003af0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	b299      	uxth	r1, r3
 8003af8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b04:	f7fd ff5a 	bl	80019bc <LCD_DrawString_Color>
		
			sprintf ( cStr, "%d", i + 1 );
 8003b08:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b12:	49b8      	ldr	r1, [pc, #736]	; (8003df4 <XPT2046_Touch_Calibrate+0x3d0>)
 8003b14:	4618      	mov	r0, r3
 8003b16:	f00b fb1d 	bl	800f154 <siprintf>
			LCD_DrawString_Color ( usScreenWidth >> 1, ( usScreenHeigth >> 1 ) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED );
 8003b1a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	b298      	uxth	r0, r3
 8003b22:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b10      	subs	r3, #16
 8003b2c:	b299      	uxth	r1, r3
 8003b2e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003b32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b3c:	f7fd ff3e 	bl	80019bc <LCD_DrawString_Color>
		
			XPT2046_DelayUS ( 100000 );		                                                   
 8003b40:	48ad      	ldr	r0, [pc, #692]	; (8003df8 <XPT2046_Touch_Calibrate+0x3d4>)
 8003b42:	f7ff fc03 	bl	800334c <XPT2046_DelayUS>
			
			LCD_DrawCross ( strCrossCoordinate [ i ] .x, strCrossCoordinate [ i ] .y );  
 8003b46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	3378      	adds	r3, #120	; 0x78
 8003b4e:	443b      	add	r3, r7
 8003b50:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003b54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	3378      	adds	r3, #120	; 0x78
 8003b5c:	443b      	add	r3, r7
 8003b5e:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f7fd ff07 	bl	8001978 <LCD_DrawCross>

			while ( ! XPT2046_ReadAdc_Smooth_XY ( & strScreenSample [ i ] ) );         
 8003b6a:	bf00      	nop
 8003b6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003b70:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fcaf 	bl	80034dc <XPT2046_ReadAdc_Smooth_XY>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f3      	beq.n	8003b6c <XPT2046_Touch_Calibrate+0x148>
		for ( i = 0; i < 4; i ++ )
 8003b84:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003b88:	3301      	adds	r3, #1
 8003b8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003b8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d994      	bls.n	8003ac0 <XPT2046_Touch_Calibrate+0x9c>

		}
		
		
		XPT2046_Calculate_CalibrationFactor ( strCrossCoordinate, strScreenSample, & CalibrationFactor ) ;  	 
 8003b96:	463a      	mov	r2, r7
 8003b98:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003b9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fdb1 	bl	8003708 <XPT2046_Calculate_CalibrationFactor>
		
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8003ba6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	f7fc ff65 	bl	8000a80 <__aeabi_dcmpeq>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f040 8116 	bne.w	8003dea <XPT2046_Touch_Calibrate+0x3c6>
		
			
		usTest_x = ( ( CalibrationFactor .An * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .Bn * strScreenSample [ 3 ] .y ) + CalibrationFactor .Cn ) / CalibrationFactor .Divider;		
 8003bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fc fc88 	bl	80004dc <__aeabi_i2d>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	f7fc fcec 	bl	80005b0 <__aeabi_dmul>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4690      	mov	r8, r2
 8003bde:	4699      	mov	r9, r3
 8003be0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003be4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fc fc77 	bl	80004dc <__aeabi_i2d>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f7fc fcdb 	bl	80005b0 <__aeabi_dmul>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4640      	mov	r0, r8
 8003c00:	4649      	mov	r1, r9
 8003c02:	f7fc fb1f 	bl	8000244 <__adddf3>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c12:	f7fc fb17 	bl	8000244 <__adddf3>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c22:	f7fc fdef 	bl	8000804 <__aeabi_ddiv>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f7fc ff97 	bl	8000b60 <__aeabi_d2uiz>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		usTest_y = ( ( CalibrationFactor .Dn * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .En * strScreenSample [ 3 ] .y ) + CalibrationFactor .Fn ) / CalibrationFactor .Divider;   
 8003c38:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003c3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fc fc4b 	bl	80004dc <__aeabi_i2d>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	f7fc fcaf 	bl	80005b0 <__aeabi_dmul>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4690      	mov	r8, r2
 8003c58:	4699      	mov	r9, r3
 8003c5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fc fc3a 	bl	80004dc <__aeabi_i2d>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	4629      	mov	r1, r5
 8003c70:	f7fc fc9e 	bl	80005b0 <__aeabi_dmul>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4640      	mov	r0, r8
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	f7fc fae2 	bl	8000244 <__adddf3>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4610      	mov	r0, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c8c:	f7fc fada 	bl	8000244 <__adddf3>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c9c:	f7fc fdb2 	bl	8000804 <__aeabi_ddiv>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f7fc ff5a 	bl	8000b60 <__aeabi_d2uiz>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		
		usGap_x = ( usTest_x > strCrossCoordinate [ 3 ] .x ) ? ( usTest_x - strCrossCoordinate [ 3 ] .x ) : ( strCrossCoordinate [ 3 ] .x - usTest_x );  
 8003cb2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003cb6:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d906      	bls.n	8003ccc <XPT2046_Touch_Calibrate+0x2a8>
 8003cbe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003cc2:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	e005      	b.n	8003cd8 <XPT2046_Touch_Calibrate+0x2b4>
 8003ccc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003cd0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		usGap_y = ( usTest_y > strCrossCoordinate [ 3 ] .y ) ? ( usTest_y - strCrossCoordinate [ 3 ] .y ) : ( strCrossCoordinate [ 3 ] .y - usTest_y );  
 8003cdc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ce0:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d906      	bls.n	8003cf6 <XPT2046_Touch_Calibrate+0x2d2>
 8003ce8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003cec:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	e005      	b.n	8003d02 <XPT2046_Touch_Calibrate+0x2de>
 8003cf6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003cfa:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 8003d06:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8003d0a:	2b0a      	cmp	r3, #10
 8003d0c:	d87c      	bhi.n	8003e08 <XPT2046_Touch_Calibrate+0x3e4>
 8003d0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003d12:	2b0a      	cmp	r3, #10
 8003d14:	d878      	bhi.n	8003e08 <XPT2046_Touch_Calibrate+0x3e4>
		

		strXPT2046_TouchPara .dX_X = ( CalibrationFactor .An * 1.0 ) / CalibrationFactor .Divider;
 8003d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d1e:	f7fc fd71 	bl	8000804 <__aeabi_ddiv>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4935      	ldr	r1, [pc, #212]	; (8003dfc <XPT2046_Touch_Calibrate+0x3d8>)
 8003d28:	e9c1 2300 	strd	r2, r3, [r1]
		strXPT2046_TouchPara .dX_Y = ( CalibrationFactor .Bn * 1.0 ) / CalibrationFactor .Divider;
 8003d2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d34:	f7fc fd66 	bl	8000804 <__aeabi_ddiv>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	492f      	ldr	r1, [pc, #188]	; (8003dfc <XPT2046_Touch_Calibrate+0x3d8>)
 8003d3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		strXPT2046_TouchPara .dX   = ( CalibrationFactor .Cn * 1.0 ) / CalibrationFactor .Divider;
 8003d42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d4a:	f7fc fd5b 	bl	8000804 <__aeabi_ddiv>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	492a      	ldr	r1, [pc, #168]	; (8003dfc <XPT2046_Touch_Calibrate+0x3d8>)
 8003d54:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		strXPT2046_TouchPara .dY_X = ( CalibrationFactor .Dn * 1.0 ) / CalibrationFactor .Divider;
 8003d58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d60:	f7fc fd50 	bl	8000804 <__aeabi_ddiv>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4924      	ldr	r1, [pc, #144]	; (8003dfc <XPT2046_Touch_Calibrate+0x3d8>)
 8003d6a:	e9c1 2306 	strd	r2, r3, [r1, #24]
		strXPT2046_TouchPara .dY_Y = ( CalibrationFactor .En * 1.0 ) / CalibrationFactor .Divider;
 8003d6e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d76:	f7fc fd45 	bl	8000804 <__aeabi_ddiv>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	491f      	ldr	r1, [pc, #124]	; (8003dfc <XPT2046_Touch_Calibrate+0x3d8>)
 8003d80:	e9c1 2308 	strd	r2, r3, [r1, #32]
		strXPT2046_TouchPara .dY   = ( CalibrationFactor .Fn * 1.0 ) / CalibrationFactor .Divider;
 8003d84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d8c:	f7fc fd3a 	bl	8000804 <__aeabi_ddiv>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4919      	ldr	r1, [pc, #100]	; (8003dfc <XPT2046_Touch_Calibrate+0x3d8>)
 8003d96:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	

	#endif
	
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 8003d9a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d9e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003da2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003da6:	9100      	str	r1, [sp, #0]
 8003da8:	2100      	movs	r1, #0
 8003daa:	2000      	movs	r0, #0
 8003dac:	f7fd fcdf 	bl	800176e <LCD_Clear>
	
	pStr = "Calibrate Succed";			
 8003db0:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <XPT2046_Touch_Calibrate+0x3dc>)
 8003db2:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 8003db4:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003db8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003dba:	f7fc fa35 	bl	8000228 <strlen>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	1ae3      	subs	r3, r4, r3
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	b298      	uxth	r0, r3
 8003dc8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	b299      	uxth	r1, r3
 8003dd0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ddc:	f7fd fdee 	bl	80019bc <LCD_DrawString_Color>

  XPT2046_DelayUS ( 200000 );
 8003de0:	4808      	ldr	r0, [pc, #32]	; (8003e04 <XPT2046_Touch_Calibrate+0x3e0>)
 8003de2:	f7ff fab3 	bl	800334c <XPT2046_DelayUS>

	return 1;    
 8003de6:	2301      	movs	r3, #1
 8003de8:	e050      	b.n	8003e8c <XPT2046_Touch_Calibrate+0x468>
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8003dea:	bf00      	nop
 8003dec:	e00d      	b.n	8003e0a <XPT2046_Touch_Calibrate+0x3e6>
 8003dee:	bf00      	nop
 8003df0:	08011774 	.word	0x08011774
 8003df4:	0801178c 	.word	0x0801178c
 8003df8:	000186a0 	.word	0x000186a0
 8003dfc:	20000008 	.word	0x20000008
 8003e00:	08011790 	.word	0x08011790
 8003e04:	00030d40 	.word	0x00030d40
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 8003e08:	bf00      	nop
	

	Failure:
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND ); 
 8003e0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e0e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003e12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e16:	9100      	str	r1, [sp, #0]
 8003e18:	2100      	movs	r1, #0
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f7fd fca7 	bl	800176e <LCD_Clear>
	
	pStr = "Calibrate fail";			
 8003e20:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <XPT2046_Touch_Calibrate+0x474>)
 8003e22:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 8003e24:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003e28:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003e2a:	f7fc f9fd 	bl	8000228 <strlen>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	1ae3      	subs	r3, r4, r3
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	b298      	uxth	r0, r3
 8003e38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	b299      	uxth	r1, r3
 8003e40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e4c:	f7fd fdb6 	bl	80019bc <LCD_DrawString_Color>

	pStr = "try again";			
 8003e50:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <XPT2046_Touch_Calibrate+0x478>)
 8003e52:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, ( usScreenHeigth >> 1 ) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED );				
 8003e54:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003e58:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003e5a:	f7fc f9e5 	bl	8000228 <strlen>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	1ae3      	subs	r3, r4, r3
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	b298      	uxth	r0, r3
 8003e68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3310      	adds	r3, #16
 8003e72:	b299      	uxth	r1, r3
 8003e74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e80:	f7fd fd9c 	bl	80019bc <LCD_DrawString_Color>

	XPT2046_DelayUS ( 1000000 );		
 8003e84:	4806      	ldr	r0, [pc, #24]	; (8003ea0 <XPT2046_Touch_Calibrate+0x47c>)
 8003e86:	f7ff fa61 	bl	800334c <XPT2046_DelayUS>
	
	return 0; 
 8003e8a:	2300      	movs	r3, #0
		
		
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3778      	adds	r7, #120	; 0x78
 8003e90:	46bd      	mov	sp, r7
 8003e92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e96:	bf00      	nop
 8003e98:	080117a4 	.word	0x080117a4
 8003e9c:	080117b4 	.word	0x080117b4
 8003ea0:	000f4240 	.word	0x000f4240

08003ea4 <XPT2046_Get_TouchedPoint>:

   

uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 8003ea4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 8003eb4:	f107 0308 	add.w	r3, r7, #8
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fb0f 	bl	80034dc <XPT2046_ReadAdc_Smooth_XY>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d06e      	beq.n	8003fa2 <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003eca:	893b      	ldrh	r3, [r7, #8]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fc fb05 	bl	80004dc <__aeabi_i2d>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	4629      	mov	r1, r5
 8003eda:	f7fc fb69 	bl	80005b0 <__aeabi_dmul>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4690      	mov	r8, r2
 8003ee4:	4699      	mov	r9, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003eec:	897b      	ldrh	r3, [r7, #10]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc faf4 	bl	80004dc <__aeabi_i2d>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4620      	mov	r0, r4
 8003efa:	4629      	mov	r1, r5
 8003efc:	f7fc fb58 	bl	80005b0 <__aeabi_dmul>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4640      	mov	r0, r8
 8003f06:	4649      	mov	r1, r9
 8003f08:	f7fc f99c 	bl	8000244 <__adddf3>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4610      	mov	r0, r2
 8003f12:	4619      	mov	r1, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f1a:	f7fc f993 	bl	8000244 <__adddf3>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	f7fc fe1b 	bl	8000b60 <__aeabi_d2uiz>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003f38:	893b      	ldrh	r3, [r7, #8]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc face 	bl	80004dc <__aeabi_i2d>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4620      	mov	r0, r4
 8003f46:	4629      	mov	r1, r5
 8003f48:	f7fc fb32 	bl	80005b0 <__aeabi_dmul>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4690      	mov	r8, r2
 8003f52:	4699      	mov	r9, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003f5a:	897b      	ldrh	r3, [r7, #10]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc fabd 	bl	80004dc <__aeabi_i2d>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4620      	mov	r0, r4
 8003f68:	4629      	mov	r1, r5
 8003f6a:	f7fc fb21 	bl	80005b0 <__aeabi_dmul>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4640      	mov	r0, r8
 8003f74:	4649      	mov	r1, r9
 8003f76:	f7fc f965 	bl	8000244 <__adddf3>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003f88:	f7fc f95c 	bl	8000244 <__adddf3>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4610      	mov	r0, r2
 8003f92:	4619      	mov	r1, r3
 8003f94:	f7fc fde4 	bl	8000b60 <__aeabi_d2uiz>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	805a      	strh	r2, [r3, #2]
 8003fa0:	e001      	b.n	8003fa6 <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003fb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fb4:	480c      	ldr	r0, [pc, #48]	; (8003fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fb6:	490d      	ldr	r1, [pc, #52]	; (8003fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fb8:	4a0d      	ldr	r2, [pc, #52]	; (8003ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fbc:	e002      	b.n	8003fc4 <LoopCopyDataInit>

08003fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fc2:	3304      	adds	r3, #4

08003fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fc8:	d3f9      	bcc.n	8003fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fca:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fcc:	4c0a      	ldr	r4, [pc, #40]	; (8003ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fd0:	e001      	b.n	8003fd6 <LoopFillZerobss>

08003fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fd4:	3204      	adds	r2, #4

08003fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fd8:	d3fb      	bcc.n	8003fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fda:	f7ff f9b1 	bl	8003340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fde:	f00a fc1f 	bl	800e820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003fe2:	f7fd ff71 	bl	8001ec8 <main>
  bx lr
 8003fe6:	4770      	bx	lr
  ldr r0, =_sdata
 8003fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fec:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8003ff0:	080121f4 	.word	0x080121f4
  ldr r2, =_sbss
 8003ff4:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8003ff8:	20000998 	.word	0x20000998

08003ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ffc:	e7fe      	b.n	8003ffc <ADC1_2_IRQHandler>
	...

08004000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004004:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_Init+0x28>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a07      	ldr	r2, [pc, #28]	; (8004028 <HAL_Init+0x28>)
 800400a:	f043 0310 	orr.w	r3, r3, #16
 800400e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004010:	2003      	movs	r0, #3
 8004012:	f000 f947 	bl	80042a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004016:	200f      	movs	r0, #15
 8004018:	f000 f808 	bl	800402c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800401c:	f7fe fea0 	bl	8002d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40022000 	.word	0x40022000

0800402c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004034:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_InitTick+0x54>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <HAL_InitTick+0x58>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	4619      	mov	r1, r3
 800403e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004042:	fbb3 f3f1 	udiv	r3, r3, r1
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f95f 	bl	800430e <HAL_SYSTICK_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e00e      	b.n	8004078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b0f      	cmp	r3, #15
 800405e:	d80a      	bhi.n	8004076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004060:	2200      	movs	r2, #0
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004068:	f000 f927 	bl	80042ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800406c:	4a06      	ldr	r2, [pc, #24]	; (8004088 <HAL_InitTick+0x5c>)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e000      	b.n	8004078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20000000 	.word	0x20000000
 8004084:	2000003c 	.word	0x2000003c
 8004088:	20000038 	.word	0x20000038

0800408c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_IncTick+0x1c>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_IncTick+0x20>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4413      	add	r3, r2
 800409c:	4a03      	ldr	r2, [pc, #12]	; (80040ac <HAL_IncTick+0x20>)
 800409e:	6013      	str	r3, [r2, #0]
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr
 80040a8:	2000003c 	.word	0x2000003c
 80040ac:	20000894 	.word	0x20000894

080040b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return uwTick;
 80040b4:	4b02      	ldr	r3, [pc, #8]	; (80040c0 <HAL_GetTick+0x10>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	20000894 	.word	0x20000894

080040c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040cc:	f7ff fff0 	bl	80040b0 <HAL_GetTick>
 80040d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040dc:	d005      	beq.n	80040ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_Delay+0x44>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040ea:	bf00      	nop
 80040ec:	f7ff ffe0 	bl	80040b0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d8f7      	bhi.n	80040ec <HAL_Delay+0x28>
  {
  }
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	2000003c 	.word	0x2000003c

0800410c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800411c:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <__NVIC_SetPriorityGrouping+0x44>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004128:	4013      	ands	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800413c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800413e:	4a04      	ldr	r2, [pc, #16]	; (8004150 <__NVIC_SetPriorityGrouping+0x44>)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	60d3      	str	r3, [r2, #12]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004158:	4b04      	ldr	r3, [pc, #16]	; (800416c <__NVIC_GetPriorityGrouping+0x18>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	f003 0307 	and.w	r3, r3, #7
}
 8004162:	4618      	mov	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	e000ed00 	.word	0xe000ed00

08004170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417e:	2b00      	cmp	r3, #0
 8004180:	db0b      	blt.n	800419a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	f003 021f 	and.w	r2, r3, #31
 8004188:	4906      	ldr	r1, [pc, #24]	; (80041a4 <__NVIC_EnableIRQ+0x34>)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	2001      	movs	r0, #1
 8004192:	fa00 f202 	lsl.w	r2, r0, r2
 8004196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	e000e100 	.word	0xe000e100

080041a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	6039      	str	r1, [r7, #0]
 80041b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	db0a      	blt.n	80041d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	490c      	ldr	r1, [pc, #48]	; (80041f4 <__NVIC_SetPriority+0x4c>)
 80041c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c6:	0112      	lsls	r2, r2, #4
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	440b      	add	r3, r1
 80041cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041d0:	e00a      	b.n	80041e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	4908      	ldr	r1, [pc, #32]	; (80041f8 <__NVIC_SetPriority+0x50>)
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	3b04      	subs	r3, #4
 80041e0:	0112      	lsls	r2, r2, #4
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	440b      	add	r3, r1
 80041e6:	761a      	strb	r2, [r3, #24]
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	e000e100 	.word	0xe000e100
 80041f8:	e000ed00 	.word	0xe000ed00

080041fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b089      	sub	sp, #36	; 0x24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f1c3 0307 	rsb	r3, r3, #7
 8004216:	2b04      	cmp	r3, #4
 8004218:	bf28      	it	cs
 800421a:	2304      	movcs	r3, #4
 800421c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3304      	adds	r3, #4
 8004222:	2b06      	cmp	r3, #6
 8004224:	d902      	bls.n	800422c <NVIC_EncodePriority+0x30>
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	3b03      	subs	r3, #3
 800422a:	e000      	b.n	800422e <NVIC_EncodePriority+0x32>
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43da      	mvns	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	401a      	ands	r2, r3
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004244:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	fa01 f303 	lsl.w	r3, r1, r3
 800424e:	43d9      	mvns	r1, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004254:	4313      	orrs	r3, r2
         );
}
 8004256:	4618      	mov	r0, r3
 8004258:	3724      	adds	r7, #36	; 0x24
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr

08004260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3b01      	subs	r3, #1
 800426c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004270:	d301      	bcc.n	8004276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004272:	2301      	movs	r3, #1
 8004274:	e00f      	b.n	8004296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004276:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <SysTick_Config+0x40>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3b01      	subs	r3, #1
 800427c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800427e:	210f      	movs	r1, #15
 8004280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004284:	f7ff ff90 	bl	80041a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <SysTick_Config+0x40>)
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800428e:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <SysTick_Config+0x40>)
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	e000e010 	.word	0xe000e010

080042a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ff2d 	bl	800410c <__NVIC_SetPriorityGrouping>
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b086      	sub	sp, #24
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4603      	mov	r3, r0
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042cc:	f7ff ff42 	bl	8004154 <__NVIC_GetPriorityGrouping>
 80042d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f7ff ff90 	bl	80041fc <NVIC_EncodePriority>
 80042dc:	4602      	mov	r2, r0
 80042de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e2:	4611      	mov	r1, r2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff5f 	bl	80041a8 <__NVIC_SetPriority>
}
 80042ea:	bf00      	nop
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	4603      	mov	r3, r0
 80042fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ff35 	bl	8004170 <__NVIC_EnableIRQ>
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ffa2 	bl	8004260 <SysTick_Config>
 800431c:	4603      	mov	r3, r0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e059      	b.n	80043f2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	4b2d      	ldr	r3, [pc, #180]	; (80043fc <HAL_DMA_Init+0xd4>)
 8004346:	429a      	cmp	r2, r3
 8004348:	d80f      	bhi.n	800436a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <HAL_DMA_Init+0xd8>)
 8004352:	4413      	add	r3, r2
 8004354:	4a2b      	ldr	r2, [pc, #172]	; (8004404 <HAL_DMA_Init+0xdc>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	009a      	lsls	r2, r3, #2
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a28      	ldr	r2, [pc, #160]	; (8004408 <HAL_DMA_Init+0xe0>)
 8004366:	63da      	str	r2, [r3, #60]	; 0x3c
 8004368:	e00e      	b.n	8004388 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	4b26      	ldr	r3, [pc, #152]	; (800440c <HAL_DMA_Init+0xe4>)
 8004372:	4413      	add	r3, r2
 8004374:	4a23      	ldr	r2, [pc, #140]	; (8004404 <HAL_DMA_Init+0xdc>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	009a      	lsls	r2, r3, #2
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a22      	ldr	r2, [pc, #136]	; (8004410 <HAL_DMA_Init+0xe8>)
 8004386:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800439e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80043a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80043ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr
 80043fc:	40020407 	.word	0x40020407
 8004400:	bffdfff8 	.word	0xbffdfff8
 8004404:	cccccccd 	.word	0xcccccccd
 8004408:	40020000 	.word	0x40020000
 800440c:	bffdfbf8 	.word	0xbffdfbf8
 8004410:	40020400 	.word	0x40020400

08004414 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_DMA_Start_IT+0x20>
 8004430:	2302      	movs	r3, #2
 8004432:	e04a      	b.n	80044ca <HAL_DMA_Start_IT+0xb6>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004442:	2b01      	cmp	r3, #1
 8004444:	d13a      	bne.n	80044bc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0201 	bic.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fb76 	bl	8004b5c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 020e 	orr.w	r2, r2, #14
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e00f      	b.n	80044aa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0204 	bic.w	r2, r2, #4
 8004498:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 020a 	orr.w	r2, r2, #10
 80044a8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	e005      	b.n	80044c8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
 80044c6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d005      	beq.n	80044f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2204      	movs	r2, #4
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
 80044f4:	e0d6      	b.n	80046a4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 020e 	bic.w	r2, r2, #14
 8004504:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	4b64      	ldr	r3, [pc, #400]	; (80046b0 <HAL_DMA_Abort_IT+0x1dc>)
 800451e:	429a      	cmp	r2, r3
 8004520:	d958      	bls.n	80045d4 <HAL_DMA_Abort_IT+0x100>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a63      	ldr	r2, [pc, #396]	; (80046b4 <HAL_DMA_Abort_IT+0x1e0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d04f      	beq.n	80045cc <HAL_DMA_Abort_IT+0xf8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a61      	ldr	r2, [pc, #388]	; (80046b8 <HAL_DMA_Abort_IT+0x1e4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d048      	beq.n	80045c8 <HAL_DMA_Abort_IT+0xf4>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a60      	ldr	r2, [pc, #384]	; (80046bc <HAL_DMA_Abort_IT+0x1e8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d040      	beq.n	80045c2 <HAL_DMA_Abort_IT+0xee>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a5e      	ldr	r2, [pc, #376]	; (80046c0 <HAL_DMA_Abort_IT+0x1ec>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d038      	beq.n	80045bc <HAL_DMA_Abort_IT+0xe8>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a5d      	ldr	r2, [pc, #372]	; (80046c4 <HAL_DMA_Abort_IT+0x1f0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d030      	beq.n	80045b6 <HAL_DMA_Abort_IT+0xe2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5b      	ldr	r2, [pc, #364]	; (80046c8 <HAL_DMA_Abort_IT+0x1f4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d028      	beq.n	80045b0 <HAL_DMA_Abort_IT+0xdc>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a53      	ldr	r2, [pc, #332]	; (80046b0 <HAL_DMA_Abort_IT+0x1dc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d020      	beq.n	80045aa <HAL_DMA_Abort_IT+0xd6>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a57      	ldr	r2, [pc, #348]	; (80046cc <HAL_DMA_Abort_IT+0x1f8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d019      	beq.n	80045a6 <HAL_DMA_Abort_IT+0xd2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a56      	ldr	r2, [pc, #344]	; (80046d0 <HAL_DMA_Abort_IT+0x1fc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d012      	beq.n	80045a2 <HAL_DMA_Abort_IT+0xce>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a54      	ldr	r2, [pc, #336]	; (80046d4 <HAL_DMA_Abort_IT+0x200>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00a      	beq.n	800459c <HAL_DMA_Abort_IT+0xc8>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a53      	ldr	r2, [pc, #332]	; (80046d8 <HAL_DMA_Abort_IT+0x204>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d102      	bne.n	8004596 <HAL_DMA_Abort_IT+0xc2>
 8004590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004594:	e01b      	b.n	80045ce <HAL_DMA_Abort_IT+0xfa>
 8004596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800459a:	e018      	b.n	80045ce <HAL_DMA_Abort_IT+0xfa>
 800459c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045a0:	e015      	b.n	80045ce <HAL_DMA_Abort_IT+0xfa>
 80045a2:	2310      	movs	r3, #16
 80045a4:	e013      	b.n	80045ce <HAL_DMA_Abort_IT+0xfa>
 80045a6:	2301      	movs	r3, #1
 80045a8:	e011      	b.n	80045ce <HAL_DMA_Abort_IT+0xfa>
 80045aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045ae:	e00e      	b.n	80045ce <HAL_DMA_Abort_IT+0xfa>
 80045b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80045b4:	e00b      	b.n	80045ce <HAL_DMA_Abort_IT+0xfa>
 80045b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045ba:	e008      	b.n	80045ce <HAL_DMA_Abort_IT+0xfa>
 80045bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c0:	e005      	b.n	80045ce <HAL_DMA_Abort_IT+0xfa>
 80045c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045c6:	e002      	b.n	80045ce <HAL_DMA_Abort_IT+0xfa>
 80045c8:	2310      	movs	r3, #16
 80045ca:	e000      	b.n	80045ce <HAL_DMA_Abort_IT+0xfa>
 80045cc:	2301      	movs	r3, #1
 80045ce:	4a43      	ldr	r2, [pc, #268]	; (80046dc <HAL_DMA_Abort_IT+0x208>)
 80045d0:	6053      	str	r3, [r2, #4]
 80045d2:	e057      	b.n	8004684 <HAL_DMA_Abort_IT+0x1b0>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a36      	ldr	r2, [pc, #216]	; (80046b4 <HAL_DMA_Abort_IT+0x1e0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d04f      	beq.n	800467e <HAL_DMA_Abort_IT+0x1aa>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a35      	ldr	r2, [pc, #212]	; (80046b8 <HAL_DMA_Abort_IT+0x1e4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d048      	beq.n	800467a <HAL_DMA_Abort_IT+0x1a6>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a33      	ldr	r2, [pc, #204]	; (80046bc <HAL_DMA_Abort_IT+0x1e8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d040      	beq.n	8004674 <HAL_DMA_Abort_IT+0x1a0>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a32      	ldr	r2, [pc, #200]	; (80046c0 <HAL_DMA_Abort_IT+0x1ec>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d038      	beq.n	800466e <HAL_DMA_Abort_IT+0x19a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a30      	ldr	r2, [pc, #192]	; (80046c4 <HAL_DMA_Abort_IT+0x1f0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d030      	beq.n	8004668 <HAL_DMA_Abort_IT+0x194>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a2f      	ldr	r2, [pc, #188]	; (80046c8 <HAL_DMA_Abort_IT+0x1f4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d028      	beq.n	8004662 <HAL_DMA_Abort_IT+0x18e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a26      	ldr	r2, [pc, #152]	; (80046b0 <HAL_DMA_Abort_IT+0x1dc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d020      	beq.n	800465c <HAL_DMA_Abort_IT+0x188>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <HAL_DMA_Abort_IT+0x1f8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d019      	beq.n	8004658 <HAL_DMA_Abort_IT+0x184>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <HAL_DMA_Abort_IT+0x1fc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d012      	beq.n	8004654 <HAL_DMA_Abort_IT+0x180>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a28      	ldr	r2, [pc, #160]	; (80046d4 <HAL_DMA_Abort_IT+0x200>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00a      	beq.n	800464e <HAL_DMA_Abort_IT+0x17a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a26      	ldr	r2, [pc, #152]	; (80046d8 <HAL_DMA_Abort_IT+0x204>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d102      	bne.n	8004648 <HAL_DMA_Abort_IT+0x174>
 8004642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004646:	e01b      	b.n	8004680 <HAL_DMA_Abort_IT+0x1ac>
 8004648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800464c:	e018      	b.n	8004680 <HAL_DMA_Abort_IT+0x1ac>
 800464e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004652:	e015      	b.n	8004680 <HAL_DMA_Abort_IT+0x1ac>
 8004654:	2310      	movs	r3, #16
 8004656:	e013      	b.n	8004680 <HAL_DMA_Abort_IT+0x1ac>
 8004658:	2301      	movs	r3, #1
 800465a:	e011      	b.n	8004680 <HAL_DMA_Abort_IT+0x1ac>
 800465c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004660:	e00e      	b.n	8004680 <HAL_DMA_Abort_IT+0x1ac>
 8004662:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004666:	e00b      	b.n	8004680 <HAL_DMA_Abort_IT+0x1ac>
 8004668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800466c:	e008      	b.n	8004680 <HAL_DMA_Abort_IT+0x1ac>
 800466e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004672:	e005      	b.n	8004680 <HAL_DMA_Abort_IT+0x1ac>
 8004674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004678:	e002      	b.n	8004680 <HAL_DMA_Abort_IT+0x1ac>
 800467a:	2310      	movs	r3, #16
 800467c:	e000      	b.n	8004680 <HAL_DMA_Abort_IT+0x1ac>
 800467e:	2301      	movs	r3, #1
 8004680:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <HAL_DMA_Abort_IT+0x20c>)
 8004682:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	4798      	blx	r3
    } 
  }
  return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40020080 	.word	0x40020080
 80046b4:	40020008 	.word	0x40020008
 80046b8:	4002001c 	.word	0x4002001c
 80046bc:	40020030 	.word	0x40020030
 80046c0:	40020044 	.word	0x40020044
 80046c4:	40020058 	.word	0x40020058
 80046c8:	4002006c 	.word	0x4002006c
 80046cc:	40020408 	.word	0x40020408
 80046d0:	4002041c 	.word	0x4002041c
 80046d4:	40020430 	.word	0x40020430
 80046d8:	40020444 	.word	0x40020444
 80046dc:	40020400 	.word	0x40020400
 80046e0:	40020000 	.word	0x40020000

080046e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	2204      	movs	r2, #4
 8004702:	409a      	lsls	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80f1 	beq.w	80048f0 <HAL_DMA_IRQHandler+0x20c>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80eb 	beq.w	80048f0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d107      	bne.n	8004738 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0204 	bic.w	r2, r2, #4
 8004736:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	4b5f      	ldr	r3, [pc, #380]	; (80048bc <HAL_DMA_IRQHandler+0x1d8>)
 8004740:	429a      	cmp	r2, r3
 8004742:	d958      	bls.n	80047f6 <HAL_DMA_IRQHandler+0x112>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a5d      	ldr	r2, [pc, #372]	; (80048c0 <HAL_DMA_IRQHandler+0x1dc>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d04f      	beq.n	80047ee <HAL_DMA_IRQHandler+0x10a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a5c      	ldr	r2, [pc, #368]	; (80048c4 <HAL_DMA_IRQHandler+0x1e0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d048      	beq.n	80047ea <HAL_DMA_IRQHandler+0x106>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a5a      	ldr	r2, [pc, #360]	; (80048c8 <HAL_DMA_IRQHandler+0x1e4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d040      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x100>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a59      	ldr	r2, [pc, #356]	; (80048cc <HAL_DMA_IRQHandler+0x1e8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d038      	beq.n	80047de <HAL_DMA_IRQHandler+0xfa>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a57      	ldr	r2, [pc, #348]	; (80048d0 <HAL_DMA_IRQHandler+0x1ec>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d030      	beq.n	80047d8 <HAL_DMA_IRQHandler+0xf4>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a56      	ldr	r2, [pc, #344]	; (80048d4 <HAL_DMA_IRQHandler+0x1f0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d028      	beq.n	80047d2 <HAL_DMA_IRQHandler+0xee>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a4d      	ldr	r2, [pc, #308]	; (80048bc <HAL_DMA_IRQHandler+0x1d8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d020      	beq.n	80047cc <HAL_DMA_IRQHandler+0xe8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a52      	ldr	r2, [pc, #328]	; (80048d8 <HAL_DMA_IRQHandler+0x1f4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d019      	beq.n	80047c8 <HAL_DMA_IRQHandler+0xe4>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a50      	ldr	r2, [pc, #320]	; (80048dc <HAL_DMA_IRQHandler+0x1f8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d012      	beq.n	80047c4 <HAL_DMA_IRQHandler+0xe0>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a4f      	ldr	r2, [pc, #316]	; (80048e0 <HAL_DMA_IRQHandler+0x1fc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00a      	beq.n	80047be <HAL_DMA_IRQHandler+0xda>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a4d      	ldr	r2, [pc, #308]	; (80048e4 <HAL_DMA_IRQHandler+0x200>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d102      	bne.n	80047b8 <HAL_DMA_IRQHandler+0xd4>
 80047b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047b6:	e01b      	b.n	80047f0 <HAL_DMA_IRQHandler+0x10c>
 80047b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80047bc:	e018      	b.n	80047f0 <HAL_DMA_IRQHandler+0x10c>
 80047be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047c2:	e015      	b.n	80047f0 <HAL_DMA_IRQHandler+0x10c>
 80047c4:	2340      	movs	r3, #64	; 0x40
 80047c6:	e013      	b.n	80047f0 <HAL_DMA_IRQHandler+0x10c>
 80047c8:	2304      	movs	r3, #4
 80047ca:	e011      	b.n	80047f0 <HAL_DMA_IRQHandler+0x10c>
 80047cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80047d0:	e00e      	b.n	80047f0 <HAL_DMA_IRQHandler+0x10c>
 80047d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047d6:	e00b      	b.n	80047f0 <HAL_DMA_IRQHandler+0x10c>
 80047d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80047dc:	e008      	b.n	80047f0 <HAL_DMA_IRQHandler+0x10c>
 80047de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047e2:	e005      	b.n	80047f0 <HAL_DMA_IRQHandler+0x10c>
 80047e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e8:	e002      	b.n	80047f0 <HAL_DMA_IRQHandler+0x10c>
 80047ea:	2340      	movs	r3, #64	; 0x40
 80047ec:	e000      	b.n	80047f0 <HAL_DMA_IRQHandler+0x10c>
 80047ee:	2304      	movs	r3, #4
 80047f0:	4a3d      	ldr	r2, [pc, #244]	; (80048e8 <HAL_DMA_IRQHandler+0x204>)
 80047f2:	6053      	str	r3, [r2, #4]
 80047f4:	e057      	b.n	80048a6 <HAL_DMA_IRQHandler+0x1c2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a31      	ldr	r2, [pc, #196]	; (80048c0 <HAL_DMA_IRQHandler+0x1dc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d04f      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x1bc>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a2f      	ldr	r2, [pc, #188]	; (80048c4 <HAL_DMA_IRQHandler+0x1e0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d048      	beq.n	800489c <HAL_DMA_IRQHandler+0x1b8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a2e      	ldr	r2, [pc, #184]	; (80048c8 <HAL_DMA_IRQHandler+0x1e4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d040      	beq.n	8004896 <HAL_DMA_IRQHandler+0x1b2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a2c      	ldr	r2, [pc, #176]	; (80048cc <HAL_DMA_IRQHandler+0x1e8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d038      	beq.n	8004890 <HAL_DMA_IRQHandler+0x1ac>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a2b      	ldr	r2, [pc, #172]	; (80048d0 <HAL_DMA_IRQHandler+0x1ec>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d030      	beq.n	800488a <HAL_DMA_IRQHandler+0x1a6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a29      	ldr	r2, [pc, #164]	; (80048d4 <HAL_DMA_IRQHandler+0x1f0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d028      	beq.n	8004884 <HAL_DMA_IRQHandler+0x1a0>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a21      	ldr	r2, [pc, #132]	; (80048bc <HAL_DMA_IRQHandler+0x1d8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d020      	beq.n	800487e <HAL_DMA_IRQHandler+0x19a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a25      	ldr	r2, [pc, #148]	; (80048d8 <HAL_DMA_IRQHandler+0x1f4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d019      	beq.n	800487a <HAL_DMA_IRQHandler+0x196>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a24      	ldr	r2, [pc, #144]	; (80048dc <HAL_DMA_IRQHandler+0x1f8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d012      	beq.n	8004876 <HAL_DMA_IRQHandler+0x192>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <HAL_DMA_IRQHandler+0x1fc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00a      	beq.n	8004870 <HAL_DMA_IRQHandler+0x18c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <HAL_DMA_IRQHandler+0x200>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d102      	bne.n	800486a <HAL_DMA_IRQHandler+0x186>
 8004864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004868:	e01b      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1be>
 800486a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800486e:	e018      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1be>
 8004870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004874:	e015      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1be>
 8004876:	2340      	movs	r3, #64	; 0x40
 8004878:	e013      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1be>
 800487a:	2304      	movs	r3, #4
 800487c:	e011      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1be>
 800487e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004882:	e00e      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1be>
 8004884:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004888:	e00b      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1be>
 800488a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800488e:	e008      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1be>
 8004890:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004894:	e005      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1be>
 8004896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800489a:	e002      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1be>
 800489c:	2340      	movs	r3, #64	; 0x40
 800489e:	e000      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1be>
 80048a0:	2304      	movs	r3, #4
 80048a2:	4a12      	ldr	r2, [pc, #72]	; (80048ec <HAL_DMA_IRQHandler+0x208>)
 80048a4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8136 	beq.w	8004b1c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80048b8:	e130      	b.n	8004b1c <HAL_DMA_IRQHandler+0x438>
 80048ba:	bf00      	nop
 80048bc:	40020080 	.word	0x40020080
 80048c0:	40020008 	.word	0x40020008
 80048c4:	4002001c 	.word	0x4002001c
 80048c8:	40020030 	.word	0x40020030
 80048cc:	40020044 	.word	0x40020044
 80048d0:	40020058 	.word	0x40020058
 80048d4:	4002006c 	.word	0x4002006c
 80048d8:	40020408 	.word	0x40020408
 80048dc:	4002041c 	.word	0x4002041c
 80048e0:	40020430 	.word	0x40020430
 80048e4:	40020444 	.word	0x40020444
 80048e8:	40020400 	.word	0x40020400
 80048ec:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2202      	movs	r2, #2
 80048f6:	409a      	lsls	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80dd 	beq.w	8004abc <HAL_DMA_IRQHandler+0x3d8>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80d7 	beq.w	8004abc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 020a 	bic.w	r2, r2, #10
 800492a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	461a      	mov	r2, r3
 800493a:	4b7b      	ldr	r3, [pc, #492]	; (8004b28 <HAL_DMA_IRQHandler+0x444>)
 800493c:	429a      	cmp	r2, r3
 800493e:	d958      	bls.n	80049f2 <HAL_DMA_IRQHandler+0x30e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a79      	ldr	r2, [pc, #484]	; (8004b2c <HAL_DMA_IRQHandler+0x448>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d04f      	beq.n	80049ea <HAL_DMA_IRQHandler+0x306>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a78      	ldr	r2, [pc, #480]	; (8004b30 <HAL_DMA_IRQHandler+0x44c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d048      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x302>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a76      	ldr	r2, [pc, #472]	; (8004b34 <HAL_DMA_IRQHandler+0x450>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d040      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x2fc>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a75      	ldr	r2, [pc, #468]	; (8004b38 <HAL_DMA_IRQHandler+0x454>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d038      	beq.n	80049da <HAL_DMA_IRQHandler+0x2f6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a73      	ldr	r2, [pc, #460]	; (8004b3c <HAL_DMA_IRQHandler+0x458>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d030      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x2f0>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a72      	ldr	r2, [pc, #456]	; (8004b40 <HAL_DMA_IRQHandler+0x45c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d028      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2ea>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a69      	ldr	r2, [pc, #420]	; (8004b28 <HAL_DMA_IRQHandler+0x444>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d020      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x2e4>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6e      	ldr	r2, [pc, #440]	; (8004b44 <HAL_DMA_IRQHandler+0x460>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d019      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x2e0>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a6c      	ldr	r2, [pc, #432]	; (8004b48 <HAL_DMA_IRQHandler+0x464>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d012      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x2dc>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a6b      	ldr	r2, [pc, #428]	; (8004b4c <HAL_DMA_IRQHandler+0x468>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00a      	beq.n	80049ba <HAL_DMA_IRQHandler+0x2d6>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a69      	ldr	r2, [pc, #420]	; (8004b50 <HAL_DMA_IRQHandler+0x46c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d102      	bne.n	80049b4 <HAL_DMA_IRQHandler+0x2d0>
 80049ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049b2:	e01b      	b.n	80049ec <HAL_DMA_IRQHandler+0x308>
 80049b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049b8:	e018      	b.n	80049ec <HAL_DMA_IRQHandler+0x308>
 80049ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049be:	e015      	b.n	80049ec <HAL_DMA_IRQHandler+0x308>
 80049c0:	2320      	movs	r3, #32
 80049c2:	e013      	b.n	80049ec <HAL_DMA_IRQHandler+0x308>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e011      	b.n	80049ec <HAL_DMA_IRQHandler+0x308>
 80049c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049cc:	e00e      	b.n	80049ec <HAL_DMA_IRQHandler+0x308>
 80049ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049d2:	e00b      	b.n	80049ec <HAL_DMA_IRQHandler+0x308>
 80049d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049d8:	e008      	b.n	80049ec <HAL_DMA_IRQHandler+0x308>
 80049da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049de:	e005      	b.n	80049ec <HAL_DMA_IRQHandler+0x308>
 80049e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049e4:	e002      	b.n	80049ec <HAL_DMA_IRQHandler+0x308>
 80049e6:	2320      	movs	r3, #32
 80049e8:	e000      	b.n	80049ec <HAL_DMA_IRQHandler+0x308>
 80049ea:	2302      	movs	r3, #2
 80049ec:	4a59      	ldr	r2, [pc, #356]	; (8004b54 <HAL_DMA_IRQHandler+0x470>)
 80049ee:	6053      	str	r3, [r2, #4]
 80049f0:	e057      	b.n	8004aa2 <HAL_DMA_IRQHandler+0x3be>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a4d      	ldr	r2, [pc, #308]	; (8004b2c <HAL_DMA_IRQHandler+0x448>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d04f      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x3b8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a4b      	ldr	r2, [pc, #300]	; (8004b30 <HAL_DMA_IRQHandler+0x44c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d048      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x3b4>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a4a      	ldr	r2, [pc, #296]	; (8004b34 <HAL_DMA_IRQHandler+0x450>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d040      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x3ae>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a48      	ldr	r2, [pc, #288]	; (8004b38 <HAL_DMA_IRQHandler+0x454>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d038      	beq.n	8004a8c <HAL_DMA_IRQHandler+0x3a8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a47      	ldr	r2, [pc, #284]	; (8004b3c <HAL_DMA_IRQHandler+0x458>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d030      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x3a2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a45      	ldr	r2, [pc, #276]	; (8004b40 <HAL_DMA_IRQHandler+0x45c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d028      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x39c>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a3d      	ldr	r2, [pc, #244]	; (8004b28 <HAL_DMA_IRQHandler+0x444>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d020      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x396>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a41      	ldr	r2, [pc, #260]	; (8004b44 <HAL_DMA_IRQHandler+0x460>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d019      	beq.n	8004a76 <HAL_DMA_IRQHandler+0x392>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a40      	ldr	r2, [pc, #256]	; (8004b48 <HAL_DMA_IRQHandler+0x464>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d012      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x38e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a3e      	ldr	r2, [pc, #248]	; (8004b4c <HAL_DMA_IRQHandler+0x468>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00a      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x388>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a3d      	ldr	r2, [pc, #244]	; (8004b50 <HAL_DMA_IRQHandler+0x46c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d102      	bne.n	8004a66 <HAL_DMA_IRQHandler+0x382>
 8004a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a64:	e01b      	b.n	8004a9e <HAL_DMA_IRQHandler+0x3ba>
 8004a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a6a:	e018      	b.n	8004a9e <HAL_DMA_IRQHandler+0x3ba>
 8004a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a70:	e015      	b.n	8004a9e <HAL_DMA_IRQHandler+0x3ba>
 8004a72:	2320      	movs	r3, #32
 8004a74:	e013      	b.n	8004a9e <HAL_DMA_IRQHandler+0x3ba>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e011      	b.n	8004a9e <HAL_DMA_IRQHandler+0x3ba>
 8004a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a7e:	e00e      	b.n	8004a9e <HAL_DMA_IRQHandler+0x3ba>
 8004a80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a84:	e00b      	b.n	8004a9e <HAL_DMA_IRQHandler+0x3ba>
 8004a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a8a:	e008      	b.n	8004a9e <HAL_DMA_IRQHandler+0x3ba>
 8004a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a90:	e005      	b.n	8004a9e <HAL_DMA_IRQHandler+0x3ba>
 8004a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a96:	e002      	b.n	8004a9e <HAL_DMA_IRQHandler+0x3ba>
 8004a98:	2320      	movs	r3, #32
 8004a9a:	e000      	b.n	8004a9e <HAL_DMA_IRQHandler+0x3ba>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	4a2e      	ldr	r2, [pc, #184]	; (8004b58 <HAL_DMA_IRQHandler+0x474>)
 8004aa0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d034      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004aba:	e02f      	b.n	8004b1c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d028      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x43a>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d023      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 020e 	bic.w	r2, r2, #14
 8004ae4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aee:	2101      	movs	r1, #1
 8004af0:	fa01 f202 	lsl.w	r2, r1, r2
 8004af4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d004      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	4798      	blx	r3
    }
  }
  return;
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
}
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40020080 	.word	0x40020080
 8004b2c:	40020008 	.word	0x40020008
 8004b30:	4002001c 	.word	0x4002001c
 8004b34:	40020030 	.word	0x40020030
 8004b38:	40020044 	.word	0x40020044
 8004b3c:	40020058 	.word	0x40020058
 8004b40:	4002006c 	.word	0x4002006c
 8004b44:	40020408 	.word	0x40020408
 8004b48:	4002041c 	.word	0x4002041c
 8004b4c:	40020430 	.word	0x40020430
 8004b50:	40020444 	.word	0x40020444
 8004b54:	40020400 	.word	0x40020400
 8004b58:	40020000 	.word	0x40020000

08004b5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	2101      	movs	r1, #1
 8004b74:	fa01 f202 	lsl.w	r2, r1, r2
 8004b78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d108      	bne.n	8004b9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b9a:	e007      	b.n	8004bac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr
	...

08004bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b08b      	sub	sp, #44	; 0x2c
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bca:	e179      	b.n	8004ec0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004bcc:	2201      	movs	r2, #1
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	f040 8168 	bne.w	8004eba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4a96      	ldr	r2, [pc, #600]	; (8004e48 <HAL_GPIO_Init+0x290>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d05e      	beq.n	8004cb2 <HAL_GPIO_Init+0xfa>
 8004bf4:	4a94      	ldr	r2, [pc, #592]	; (8004e48 <HAL_GPIO_Init+0x290>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d875      	bhi.n	8004ce6 <HAL_GPIO_Init+0x12e>
 8004bfa:	4a94      	ldr	r2, [pc, #592]	; (8004e4c <HAL_GPIO_Init+0x294>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d058      	beq.n	8004cb2 <HAL_GPIO_Init+0xfa>
 8004c00:	4a92      	ldr	r2, [pc, #584]	; (8004e4c <HAL_GPIO_Init+0x294>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d86f      	bhi.n	8004ce6 <HAL_GPIO_Init+0x12e>
 8004c06:	4a92      	ldr	r2, [pc, #584]	; (8004e50 <HAL_GPIO_Init+0x298>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d052      	beq.n	8004cb2 <HAL_GPIO_Init+0xfa>
 8004c0c:	4a90      	ldr	r2, [pc, #576]	; (8004e50 <HAL_GPIO_Init+0x298>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d869      	bhi.n	8004ce6 <HAL_GPIO_Init+0x12e>
 8004c12:	4a90      	ldr	r2, [pc, #576]	; (8004e54 <HAL_GPIO_Init+0x29c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d04c      	beq.n	8004cb2 <HAL_GPIO_Init+0xfa>
 8004c18:	4a8e      	ldr	r2, [pc, #568]	; (8004e54 <HAL_GPIO_Init+0x29c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d863      	bhi.n	8004ce6 <HAL_GPIO_Init+0x12e>
 8004c1e:	4a8e      	ldr	r2, [pc, #568]	; (8004e58 <HAL_GPIO_Init+0x2a0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d046      	beq.n	8004cb2 <HAL_GPIO_Init+0xfa>
 8004c24:	4a8c      	ldr	r2, [pc, #560]	; (8004e58 <HAL_GPIO_Init+0x2a0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d85d      	bhi.n	8004ce6 <HAL_GPIO_Init+0x12e>
 8004c2a:	2b12      	cmp	r3, #18
 8004c2c:	d82a      	bhi.n	8004c84 <HAL_GPIO_Init+0xcc>
 8004c2e:	2b12      	cmp	r3, #18
 8004c30:	d859      	bhi.n	8004ce6 <HAL_GPIO_Init+0x12e>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <HAL_GPIO_Init+0x80>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004cb3 	.word	0x08004cb3
 8004c3c:	08004c8d 	.word	0x08004c8d
 8004c40:	08004c9f 	.word	0x08004c9f
 8004c44:	08004ce1 	.word	0x08004ce1
 8004c48:	08004ce7 	.word	0x08004ce7
 8004c4c:	08004ce7 	.word	0x08004ce7
 8004c50:	08004ce7 	.word	0x08004ce7
 8004c54:	08004ce7 	.word	0x08004ce7
 8004c58:	08004ce7 	.word	0x08004ce7
 8004c5c:	08004ce7 	.word	0x08004ce7
 8004c60:	08004ce7 	.word	0x08004ce7
 8004c64:	08004ce7 	.word	0x08004ce7
 8004c68:	08004ce7 	.word	0x08004ce7
 8004c6c:	08004ce7 	.word	0x08004ce7
 8004c70:	08004ce7 	.word	0x08004ce7
 8004c74:	08004ce7 	.word	0x08004ce7
 8004c78:	08004ce7 	.word	0x08004ce7
 8004c7c:	08004c95 	.word	0x08004c95
 8004c80:	08004ca9 	.word	0x08004ca9
 8004c84:	4a75      	ldr	r2, [pc, #468]	; (8004e5c <HAL_GPIO_Init+0x2a4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004c8a:	e02c      	b.n	8004ce6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	623b      	str	r3, [r7, #32]
          break;
 8004c92:	e029      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	623b      	str	r3, [r7, #32]
          break;
 8004c9c:	e024      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	623b      	str	r3, [r7, #32]
          break;
 8004ca6:	e01f      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	330c      	adds	r3, #12
 8004cae:	623b      	str	r3, [r7, #32]
          break;
 8004cb0:	e01a      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004cba:	2304      	movs	r3, #4
 8004cbc:	623b      	str	r3, [r7, #32]
          break;
 8004cbe:	e013      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d105      	bne.n	8004cd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004cc8:	2308      	movs	r3, #8
 8004cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	611a      	str	r2, [r3, #16]
          break;
 8004cd2:	e009      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	615a      	str	r2, [r3, #20]
          break;
 8004cde:	e003      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	623b      	str	r3, [r7, #32]
          break;
 8004ce4:	e000      	b.n	8004ce8 <HAL_GPIO_Init+0x130>
          break;
 8004ce6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2bff      	cmp	r3, #255	; 0xff
 8004cec:	d801      	bhi.n	8004cf2 <HAL_GPIO_Init+0x13a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	e001      	b.n	8004cf6 <HAL_GPIO_Init+0x13e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2bff      	cmp	r3, #255	; 0xff
 8004cfc:	d802      	bhi.n	8004d04 <HAL_GPIO_Init+0x14c>
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	e002      	b.n	8004d0a <HAL_GPIO_Init+0x152>
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	3b08      	subs	r3, #8
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	210f      	movs	r1, #15
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	6a39      	ldr	r1, [r7, #32]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	fa01 f303 	lsl.w	r3, r1, r3
 8004d24:	431a      	orrs	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80c1 	beq.w	8004eba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004d38:	4b49      	ldr	r3, [pc, #292]	; (8004e60 <HAL_GPIO_Init+0x2a8>)
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	4a48      	ldr	r2, [pc, #288]	; (8004e60 <HAL_GPIO_Init+0x2a8>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	6193      	str	r3, [r2, #24]
 8004d44:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <HAL_GPIO_Init+0x2a8>)
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004d50:	4a44      	ldr	r2, [pc, #272]	; (8004e64 <HAL_GPIO_Init+0x2ac>)
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	089b      	lsrs	r3, r3, #2
 8004d56:	3302      	adds	r3, #2
 8004d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	220f      	movs	r2, #15
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4013      	ands	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a3c      	ldr	r2, [pc, #240]	; (8004e68 <HAL_GPIO_Init+0x2b0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01f      	beq.n	8004dbc <HAL_GPIO_Init+0x204>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a3b      	ldr	r2, [pc, #236]	; (8004e6c <HAL_GPIO_Init+0x2b4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d019      	beq.n	8004db8 <HAL_GPIO_Init+0x200>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a3a      	ldr	r2, [pc, #232]	; (8004e70 <HAL_GPIO_Init+0x2b8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <HAL_GPIO_Init+0x1fc>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a39      	ldr	r2, [pc, #228]	; (8004e74 <HAL_GPIO_Init+0x2bc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00d      	beq.n	8004db0 <HAL_GPIO_Init+0x1f8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a38      	ldr	r2, [pc, #224]	; (8004e78 <HAL_GPIO_Init+0x2c0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d007      	beq.n	8004dac <HAL_GPIO_Init+0x1f4>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a37      	ldr	r2, [pc, #220]	; (8004e7c <HAL_GPIO_Init+0x2c4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d101      	bne.n	8004da8 <HAL_GPIO_Init+0x1f0>
 8004da4:	2305      	movs	r3, #5
 8004da6:	e00a      	b.n	8004dbe <HAL_GPIO_Init+0x206>
 8004da8:	2306      	movs	r3, #6
 8004daa:	e008      	b.n	8004dbe <HAL_GPIO_Init+0x206>
 8004dac:	2304      	movs	r3, #4
 8004dae:	e006      	b.n	8004dbe <HAL_GPIO_Init+0x206>
 8004db0:	2303      	movs	r3, #3
 8004db2:	e004      	b.n	8004dbe <HAL_GPIO_Init+0x206>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e002      	b.n	8004dbe <HAL_GPIO_Init+0x206>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <HAL_GPIO_Init+0x206>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc0:	f002 0203 	and.w	r2, r2, #3
 8004dc4:	0092      	lsls	r2, r2, #2
 8004dc6:	4093      	lsls	r3, r2
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004dce:	4925      	ldr	r1, [pc, #148]	; (8004e64 <HAL_GPIO_Init+0x2ac>)
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	089b      	lsrs	r3, r3, #2
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d006      	beq.n	8004df6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004de8:	4b25      	ldr	r3, [pc, #148]	; (8004e80 <HAL_GPIO_Init+0x2c8>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4924      	ldr	r1, [pc, #144]	; (8004e80 <HAL_GPIO_Init+0x2c8>)
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]
 8004df4:	e006      	b.n	8004e04 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004df6:	4b22      	ldr	r3, [pc, #136]	; (8004e80 <HAL_GPIO_Init+0x2c8>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	4920      	ldr	r1, [pc, #128]	; (8004e80 <HAL_GPIO_Init+0x2c8>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d006      	beq.n	8004e1e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <HAL_GPIO_Init+0x2c8>)
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	491a      	ldr	r1, [pc, #104]	; (8004e80 <HAL_GPIO_Init+0x2c8>)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	604b      	str	r3, [r1, #4]
 8004e1c:	e006      	b.n	8004e2c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <HAL_GPIO_Init+0x2c8>)
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	43db      	mvns	r3, r3
 8004e26:	4916      	ldr	r1, [pc, #88]	; (8004e80 <HAL_GPIO_Init+0x2c8>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d025      	beq.n	8004e84 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004e38:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <HAL_GPIO_Init+0x2c8>)
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	4910      	ldr	r1, [pc, #64]	; (8004e80 <HAL_GPIO_Init+0x2c8>)
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	608b      	str	r3, [r1, #8]
 8004e44:	e025      	b.n	8004e92 <HAL_GPIO_Init+0x2da>
 8004e46:	bf00      	nop
 8004e48:	10320000 	.word	0x10320000
 8004e4c:	10310000 	.word	0x10310000
 8004e50:	10220000 	.word	0x10220000
 8004e54:	10210000 	.word	0x10210000
 8004e58:	10120000 	.word	0x10120000
 8004e5c:	10110000 	.word	0x10110000
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40010800 	.word	0x40010800
 8004e6c:	40010c00 	.word	0x40010c00
 8004e70:	40011000 	.word	0x40011000
 8004e74:	40011400 	.word	0x40011400
 8004e78:	40011800 	.word	0x40011800
 8004e7c:	40011c00 	.word	0x40011c00
 8004e80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004e84:	4b15      	ldr	r3, [pc, #84]	; (8004edc <HAL_GPIO_Init+0x324>)
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	4913      	ldr	r1, [pc, #76]	; (8004edc <HAL_GPIO_Init+0x324>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d006      	beq.n	8004eac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004e9e:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <HAL_GPIO_Init+0x324>)
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	490e      	ldr	r1, [pc, #56]	; (8004edc <HAL_GPIO_Init+0x324>)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60cb      	str	r3, [r1, #12]
 8004eaa:	e006      	b.n	8004eba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <HAL_GPIO_Init+0x324>)
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	4909      	ldr	r1, [pc, #36]	; (8004edc <HAL_GPIO_Init+0x324>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f47f ae7e 	bne.w	8004bcc <HAL_GPIO_Init+0x14>
  }
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	372c      	adds	r7, #44	; 0x2c
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr
 8004edc:	40010400 	.word	0x40010400

08004ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	887b      	ldrh	r3, [r7, #2]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
 8004efc:	e001      	b.n	8004f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr

08004f0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	460b      	mov	r3, r1
 8004f18:	807b      	strh	r3, [r7, #2]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f1e:	787b      	ldrb	r3, [r7, #1]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f24:	887a      	ldrh	r2, [r7, #2]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004f2a:	e003      	b.n	8004f34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f2c:	887b      	ldrh	r3, [r7, #2]
 8004f2e:	041a      	lsls	r2, r3, #16
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	611a      	str	r2, [r3, #16]
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr
	...

08004f40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e12b      	b.n	80051aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fd ff2c 	bl	8002dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2224      	movs	r2, #36	; 0x24
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fa4:	f002 f97c 	bl	80072a0 <HAL_RCC_GetPCLK1Freq>
 8004fa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4a81      	ldr	r2, [pc, #516]	; (80051b4 <HAL_I2C_Init+0x274>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d807      	bhi.n	8004fc4 <HAL_I2C_Init+0x84>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4a80      	ldr	r2, [pc, #512]	; (80051b8 <HAL_I2C_Init+0x278>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	bf94      	ite	ls
 8004fbc:	2301      	movls	r3, #1
 8004fbe:	2300      	movhi	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	e006      	b.n	8004fd2 <HAL_I2C_Init+0x92>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4a7d      	ldr	r2, [pc, #500]	; (80051bc <HAL_I2C_Init+0x27c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	bf94      	ite	ls
 8004fcc:	2301      	movls	r3, #1
 8004fce:	2300      	movhi	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e0e7      	b.n	80051aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4a78      	ldr	r2, [pc, #480]	; (80051c0 <HAL_I2C_Init+0x280>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	0c9b      	lsrs	r3, r3, #18
 8004fe4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	4a6a      	ldr	r2, [pc, #424]	; (80051b4 <HAL_I2C_Init+0x274>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d802      	bhi.n	8005014 <HAL_I2C_Init+0xd4>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	3301      	adds	r3, #1
 8005012:	e009      	b.n	8005028 <HAL_I2C_Init+0xe8>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800501a:	fb02 f303 	mul.w	r3, r2, r3
 800501e:	4a69      	ldr	r2, [pc, #420]	; (80051c4 <HAL_I2C_Init+0x284>)
 8005020:	fba2 2303 	umull	r2, r3, r2, r3
 8005024:	099b      	lsrs	r3, r3, #6
 8005026:	3301      	adds	r3, #1
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	430b      	orrs	r3, r1
 800502e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800503a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	495c      	ldr	r1, [pc, #368]	; (80051b4 <HAL_I2C_Init+0x274>)
 8005044:	428b      	cmp	r3, r1
 8005046:	d819      	bhi.n	800507c <HAL_I2C_Init+0x13c>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	1e59      	subs	r1, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	fbb1 f3f3 	udiv	r3, r1, r3
 8005056:	1c59      	adds	r1, r3, #1
 8005058:	f640 73fc 	movw	r3, #4092	; 0xffc
 800505c:	400b      	ands	r3, r1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_I2C_Init+0x138>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1e59      	subs	r1, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005070:	3301      	adds	r3, #1
 8005072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005076:	e051      	b.n	800511c <HAL_I2C_Init+0x1dc>
 8005078:	2304      	movs	r3, #4
 800507a:	e04f      	b.n	800511c <HAL_I2C_Init+0x1dc>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d111      	bne.n	80050a8 <HAL_I2C_Init+0x168>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	1e58      	subs	r0, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6859      	ldr	r1, [r3, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	440b      	add	r3, r1
 8005092:	fbb0 f3f3 	udiv	r3, r0, r3
 8005096:	3301      	adds	r3, #1
 8005098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800509c:	2b00      	cmp	r3, #0
 800509e:	bf0c      	ite	eq
 80050a0:	2301      	moveq	r3, #1
 80050a2:	2300      	movne	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	e012      	b.n	80050ce <HAL_I2C_Init+0x18e>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	1e58      	subs	r0, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6859      	ldr	r1, [r3, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	0099      	lsls	r1, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80050be:	3301      	adds	r3, #1
 80050c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_I2C_Init+0x196>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e022      	b.n	800511c <HAL_I2C_Init+0x1dc>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10e      	bne.n	80050fc <HAL_I2C_Init+0x1bc>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1e58      	subs	r0, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6859      	ldr	r1, [r3, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	440b      	add	r3, r1
 80050ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80050f0:	3301      	adds	r3, #1
 80050f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fa:	e00f      	b.n	800511c <HAL_I2C_Init+0x1dc>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	1e58      	subs	r0, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6859      	ldr	r1, [r3, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	0099      	lsls	r1, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005112:	3301      	adds	r3, #1
 8005114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	6809      	ldr	r1, [r1, #0]
 8005120:	4313      	orrs	r3, r2
 8005122:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800514a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6911      	ldr	r1, [r2, #16]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	68d2      	ldr	r2, [r2, #12]
 8005156:	4311      	orrs	r1, r2
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	430b      	orrs	r3, r1
 800515e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695a      	ldr	r2, [r3, #20]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	000186a0 	.word	0x000186a0
 80051b8:	001e847f 	.word	0x001e847f
 80051bc:	003d08ff 	.word	0x003d08ff
 80051c0:	431bde83 	.word	0x431bde83
 80051c4:	10624dd3 	.word	0x10624dd3

080051c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	461a      	mov	r2, r3
 80051d4:	460b      	mov	r3, r1
 80051d6:	817b      	strh	r3, [r7, #10]
 80051d8:	4613      	mov	r3, r2
 80051da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051dc:	f7fe ff68 	bl	80040b0 <HAL_GetTick>
 80051e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	f040 80e0 	bne.w	80053b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2319      	movs	r3, #25
 80051f6:	2201      	movs	r2, #1
 80051f8:	4970      	ldr	r1, [pc, #448]	; (80053bc <HAL_I2C_Master_Transmit+0x1f4>)
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f001 faa0 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005206:	2302      	movs	r3, #2
 8005208:	e0d3      	b.n	80053b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_I2C_Master_Transmit+0x50>
 8005214:	2302      	movs	r3, #2
 8005216:	e0cc      	b.n	80053b2 <HAL_I2C_Master_Transmit+0x1ea>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b01      	cmp	r3, #1
 800522c:	d007      	beq.n	800523e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0201 	orr.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800524c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2221      	movs	r2, #33	; 0x21
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2210      	movs	r2, #16
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	893a      	ldrh	r2, [r7, #8]
 800526e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4a50      	ldr	r2, [pc, #320]	; (80053c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800527e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005280:	8979      	ldrh	r1, [r7, #10]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	6a3a      	ldr	r2, [r7, #32]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 ff8c 	bl	80061a4 <I2C_MasterRequestWrite>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e08d      	b.n	80053b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80052ac:	e066      	b.n	800537c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	6a39      	ldr	r1, [r7, #32]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f001 fb1a 	bl	80068ec <I2C_WaitOnTXEFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d107      	bne.n	80052d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e06b      	b.n	80053b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	781a      	ldrb	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b04      	cmp	r3, #4
 8005316:	d11b      	bne.n	8005350 <HAL_I2C_Master_Transmit+0x188>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531c:	2b00      	cmp	r3, #0
 800531e:	d017      	beq.n	8005350 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	781a      	ldrb	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	6a39      	ldr	r1, [r7, #32]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f001 fb0a 	bl	800696e <I2C_WaitOnBTFFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00d      	beq.n	800537c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	2b04      	cmp	r3, #4
 8005366:	d107      	bne.n	8005378 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005376:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e01a      	b.n	80053b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005380:	2b00      	cmp	r3, #0
 8005382:	d194      	bne.n	80052ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e000      	b.n	80053b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
  }
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	00100002 	.word	0x00100002
 80053c0:	ffff0000 	.word	0xffff0000

080053c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08c      	sub	sp, #48	; 0x30
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	461a      	mov	r2, r3
 80053d0:	460b      	mov	r3, r1
 80053d2:	817b      	strh	r3, [r7, #10]
 80053d4:	4613      	mov	r3, r2
 80053d6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053dc:	f7fe fe68 	bl	80040b0 <HAL_GetTick>
 80053e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	f040 823f 	bne.w	800586e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	2319      	movs	r3, #25
 80053f6:	2201      	movs	r2, #1
 80053f8:	497f      	ldr	r1, [pc, #508]	; (80055f8 <HAL_I2C_Master_Receive+0x234>)
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f001 f9a0 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005406:	2302      	movs	r3, #2
 8005408:	e232      	b.n	8005870 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_I2C_Master_Receive+0x54>
 8005414:	2302      	movs	r3, #2
 8005416:	e22b      	b.n	8005870 <HAL_I2C_Master_Receive+0x4ac>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b01      	cmp	r3, #1
 800542c:	d007      	beq.n	800543e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0201 	orr.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800544c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2222      	movs	r2, #34	; 0x22
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2210      	movs	r2, #16
 800545a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	893a      	ldrh	r2, [r7, #8]
 800546e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a5f      	ldr	r2, [pc, #380]	; (80055fc <HAL_I2C_Master_Receive+0x238>)
 800547e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005480:	8979      	ldrh	r1, [r7, #10]
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 ff0e 	bl	80062a8 <I2C_MasterRequestRead>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e1ec      	b.n	8005870 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	d113      	bne.n	80054c6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549e:	2300      	movs	r3, #0
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	61fb      	str	r3, [r7, #28]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e1c0      	b.n	8005848 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d11e      	bne.n	800550c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054de:	b672      	cpsid	i
}
 80054e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e2:	2300      	movs	r3, #0
 80054e4:	61bb      	str	r3, [r7, #24]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005506:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005508:	b662      	cpsie	i
}
 800550a:	e035      	b.n	8005578 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	2b02      	cmp	r3, #2
 8005512:	d11e      	bne.n	8005552 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005522:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005524:	b672      	cpsid	i
}
 8005526:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800554e:	b662      	cpsie	i
}
 8005550:	e012      	b.n	8005578 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005560:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005578:	e166      	b.n	8005848 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800557e:	2b03      	cmp	r3, #3
 8005580:	f200 811f 	bhi.w	80057c2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005588:	2b01      	cmp	r3, #1
 800558a:	d123      	bne.n	80055d4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800558c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f001 fa2d 	bl	80069f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e167      	b.n	8005870 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055d2:	e139      	b.n	8005848 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d152      	bne.n	8005682 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	2200      	movs	r2, #0
 80055e4:	4906      	ldr	r1, [pc, #24]	; (8005600 <HAL_I2C_Master_Receive+0x23c>)
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f001 f8aa 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d008      	beq.n	8005604 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e13c      	b.n	8005870 <HAL_I2C_Master_Receive+0x4ac>
 80055f6:	bf00      	nop
 80055f8:	00100002 	.word	0x00100002
 80055fc:	ffff0000 	.word	0xffff0000
 8005600:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005604:	b672      	cpsid	i
}
 8005606:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800564a:	b662      	cpsie	i
}
 800564c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005680:	e0e2      	b.n	8005848 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	2200      	movs	r2, #0
 800568a:	497b      	ldr	r1, [pc, #492]	; (8005878 <HAL_I2C_Master_Receive+0x4b4>)
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f001 f857 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0e9      	b.n	8005870 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056ac:	b672      	cpsid	i
}
 80056ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80056e2:	4b66      	ldr	r3, [pc, #408]	; (800587c <HAL_I2C_Master_Receive+0x4b8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	08db      	lsrs	r3, r3, #3
 80056e8:	4a65      	ldr	r2, [pc, #404]	; (8005880 <HAL_I2C_Master_Receive+0x4bc>)
 80056ea:	fba2 2303 	umull	r2, r3, r2, r3
 80056ee:	0a1a      	lsrs	r2, r3, #8
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	00da      	lsls	r2, r3, #3
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	3b01      	subs	r3, #1
 8005700:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d118      	bne.n	800573a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f043 0220 	orr.w	r2, r3, #32
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800572a:	b662      	cpsie	i
}
 800572c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e09a      	b.n	8005870 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b04      	cmp	r3, #4
 8005746:	d1d9      	bne.n	80056fc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800578a:	b662      	cpsie	i
}
 800578c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057c0:	e042      	b.n	8005848 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f001 f912 	bl	80069f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e04c      	b.n	8005870 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d118      	bne.n	8005848 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584c:	2b00      	cmp	r3, #0
 800584e:	f47f ae94 	bne.w	800557a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e000      	b.n	8005870 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800586e:	2302      	movs	r3, #2
  }
}
 8005870:	4618      	mov	r0, r3
 8005872:	3728      	adds	r7, #40	; 0x28
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	00010004 	.word	0x00010004
 800587c:	20000000 	.word	0x20000000
 8005880:	14f8b589 	.word	0x14f8b589

08005884 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	4608      	mov	r0, r1
 800588e:	4611      	mov	r1, r2
 8005890:	461a      	mov	r2, r3
 8005892:	4603      	mov	r3, r0
 8005894:	817b      	strh	r3, [r7, #10]
 8005896:	460b      	mov	r3, r1
 8005898:	813b      	strh	r3, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800589e:	f7fe fc07 	bl	80040b0 <HAL_GetTick>
 80058a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	f040 80d9 	bne.w	8005a64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	2319      	movs	r3, #25
 80058b8:	2201      	movs	r2, #1
 80058ba:	496d      	ldr	r1, [pc, #436]	; (8005a70 <HAL_I2C_Mem_Write+0x1ec>)
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 ff3f 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80058c8:	2302      	movs	r3, #2
 80058ca:	e0cc      	b.n	8005a66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_I2C_Mem_Write+0x56>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e0c5      	b.n	8005a66 <HAL_I2C_Mem_Write+0x1e2>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d007      	beq.n	8005900 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800590e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2221      	movs	r2, #33	; 0x21
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2240      	movs	r2, #64	; 0x40
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a3a      	ldr	r2, [r7, #32]
 800592a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005930:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4a4d      	ldr	r2, [pc, #308]	; (8005a74 <HAL_I2C_Mem_Write+0x1f0>)
 8005940:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005942:	88f8      	ldrh	r0, [r7, #6]
 8005944:	893a      	ldrh	r2, [r7, #8]
 8005946:	8979      	ldrh	r1, [r7, #10]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	4603      	mov	r3, r0
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 fd76 	bl	8006444 <I2C_RequestMemoryWrite>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d052      	beq.n	8005a04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e081      	b.n	8005a66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 ffc0 	bl	80068ec <I2C_WaitOnTXEFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00d      	beq.n	800598e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	2b04      	cmp	r3, #4
 8005978:	d107      	bne.n	800598a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005988:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e06b      	b.n	8005a66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	781a      	ldrb	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d11b      	bne.n	8005a04 <HAL_I2C_Mem_Write+0x180>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d017      	beq.n	8005a04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	781a      	ldrb	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1aa      	bne.n	8005962 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 ffac 	bl	800696e <I2C_WaitOnBTFFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d107      	bne.n	8005a34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e016      	b.n	8005a66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e000      	b.n	8005a66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
  }
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	00100002 	.word	0x00100002
 8005a74:	ffff0000 	.word	0xffff0000

08005a78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08c      	sub	sp, #48	; 0x30
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	4608      	mov	r0, r1
 8005a82:	4611      	mov	r1, r2
 8005a84:	461a      	mov	r2, r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	817b      	strh	r3, [r7, #10]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	813b      	strh	r3, [r7, #8]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a96:	f7fe fb0b 	bl	80040b0 <HAL_GetTick>
 8005a9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	f040 8244 	bne.w	8005f32 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	2319      	movs	r3, #25
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	4982      	ldr	r1, [pc, #520]	; (8005cbc <HAL_I2C_Mem_Read+0x244>)
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fe43 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e237      	b.n	8005f34 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_I2C_Mem_Read+0x5a>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e230      	b.n	8005f34 <HAL_I2C_Mem_Read+0x4bc>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d007      	beq.n	8005af8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2222      	movs	r2, #34	; 0x22
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2240      	movs	r2, #64	; 0x40
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4a62      	ldr	r2, [pc, #392]	; (8005cc0 <HAL_I2C_Mem_Read+0x248>)
 8005b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b3a:	88f8      	ldrh	r0, [r7, #6]
 8005b3c:	893a      	ldrh	r2, [r7, #8]
 8005b3e:	8979      	ldrh	r1, [r7, #10]
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	9301      	str	r3, [sp, #4]
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	4603      	mov	r3, r0
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 fd10 	bl	8006570 <I2C_RequestMemoryRead>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e1ec      	b.n	8005f34 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d113      	bne.n	8005b8a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	61fb      	str	r3, [r7, #28]
 8005b76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	e1c0      	b.n	8005f0c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d11e      	bne.n	8005bd0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ba2:	b672      	cpsid	i
}
 8005ba4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005bcc:	b662      	cpsie	i
}
 8005bce:	e035      	b.n	8005c3c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d11e      	bne.n	8005c16 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005be6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005be8:	b672      	cpsid	i
}
 8005bea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c12:	b662      	cpsie	i
}
 8005c14:	e012      	b.n	8005c3c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c24:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005c3c:	e166      	b.n	8005f0c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	f200 811f 	bhi.w	8005e86 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d123      	bne.n	8005c98 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 fecb 	bl	80069f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e167      	b.n	8005f34 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691a      	ldr	r2, [r3, #16]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c96:	e139      	b.n	8005f0c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d152      	bne.n	8005d46 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	4906      	ldr	r1, [pc, #24]	; (8005cc4 <HAL_I2C_Mem_Read+0x24c>)
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 fd48 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d008      	beq.n	8005cc8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e13c      	b.n	8005f34 <HAL_I2C_Mem_Read+0x4bc>
 8005cba:	bf00      	nop
 8005cbc:	00100002 	.word	0x00100002
 8005cc0:	ffff0000 	.word	0xffff0000
 8005cc4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005cc8:	b672      	cpsid	i
}
 8005cca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005d0e:	b662      	cpsie	i
}
 8005d10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d44:	e0e2      	b.n	8005f0c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	497b      	ldr	r1, [pc, #492]	; (8005f3c <HAL_I2C_Mem_Read+0x4c4>)
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fcf5 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0e9      	b.n	8005f34 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d70:	b672      	cpsid	i
}
 8005d72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005da6:	4b66      	ldr	r3, [pc, #408]	; (8005f40 <HAL_I2C_Mem_Read+0x4c8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	08db      	lsrs	r3, r3, #3
 8005dac:	4a65      	ldr	r2, [pc, #404]	; (8005f44 <HAL_I2C_Mem_Read+0x4cc>)
 8005dae:	fba2 2303 	umull	r2, r3, r2, r3
 8005db2:	0a1a      	lsrs	r2, r3, #8
 8005db4:	4613      	mov	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	00da      	lsls	r2, r3, #3
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d118      	bne.n	8005dfe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f043 0220 	orr.w	r2, r3, #32
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005dee:	b662      	cpsie	i
}
 8005df0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e09a      	b.n	8005f34 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d1d9      	bne.n	8005dc0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005e4e:	b662      	cpsie	i
}
 8005e50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e84:	e042      	b.n	8005f0c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fdb0 	bl	80069f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e04c      	b.n	8005f34 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	691a      	ldr	r2, [r3, #16]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d118      	bne.n	8005f0c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f47f ae94 	bne.w	8005c3e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e000      	b.n	8005f34 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005f32:	2302      	movs	r3, #2
  }
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3728      	adds	r7, #40	; 0x28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	00010004 	.word	0x00010004
 8005f40:	20000000 	.word	0x20000000
 8005f44:	14f8b589 	.word	0x14f8b589

08005f48 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	; 0x28
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	460b      	mov	r3, r1
 8005f56:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005f58:	f7fe f8aa 	bl	80040b0 <HAL_GetTick>
 8005f5c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	f040 8111 	bne.w	8006192 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2319      	movs	r3, #25
 8005f76:	2201      	movs	r2, #1
 8005f78:	4988      	ldr	r1, [pc, #544]	; (800619c <HAL_I2C_IsDeviceReady+0x254>)
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fbe0 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005f86:	2302      	movs	r3, #2
 8005f88:	e104      	b.n	8006194 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_I2C_IsDeviceReady+0x50>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e0fd      	b.n	8006194 <HAL_I2C_IsDeviceReady+0x24c>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d007      	beq.n	8005fbe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0201 	orr.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2224      	movs	r2, #36	; 0x24
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4a70      	ldr	r2, [pc, #448]	; (80061a0 <HAL_I2C_IsDeviceReady+0x258>)
 8005fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fb9e 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00d      	beq.n	8006026 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006018:	d103      	bne.n	8006022 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006020:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e0b6      	b.n	8006194 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006026:	897b      	ldrh	r3, [r7, #10]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006034:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006036:	f7fe f83b 	bl	80040b0 <HAL_GetTick>
 800603a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b02      	cmp	r3, #2
 8006048:	bf0c      	ite	eq
 800604a:	2301      	moveq	r3, #1
 800604c:	2300      	movne	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006060:	bf0c      	ite	eq
 8006062:	2301      	moveq	r3, #1
 8006064:	2300      	movne	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800606a:	e025      	b.n	80060b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800606c:	f7fe f820 	bl	80040b0 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d302      	bcc.n	8006082 <HAL_I2C_IsDeviceReady+0x13a>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d103      	bne.n	800608a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	22a0      	movs	r2, #160	; 0xa0
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b02      	cmp	r3, #2
 8006096:	bf0c      	ite	eq
 8006098:	2301      	moveq	r3, #1
 800609a:	2300      	movne	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ae:	bf0c      	ite	eq
 80060b0:	2301      	moveq	r3, #1
 80060b2:	2300      	movne	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2ba0      	cmp	r3, #160	; 0xa0
 80060c2:	d005      	beq.n	80060d0 <HAL_I2C_IsDeviceReady+0x188>
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <HAL_I2C_IsDeviceReady+0x188>
 80060ca:	7dbb      	ldrb	r3, [r7, #22]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0cd      	beq.n	800606c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d129      	bne.n	800613a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f6:	2300      	movs	r3, #0
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	2319      	movs	r3, #25
 8006112:	2201      	movs	r2, #1
 8006114:	4921      	ldr	r1, [pc, #132]	; (800619c <HAL_I2C_IsDeviceReady+0x254>)
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 fb12 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e036      	b.n	8006194 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2220      	movs	r2, #32
 800612a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	e02c      	b.n	8006194 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006148:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006152:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	2319      	movs	r3, #25
 800615a:	2201      	movs	r2, #1
 800615c:	490f      	ldr	r1, [pc, #60]	; (800619c <HAL_I2C_IsDeviceReady+0x254>)
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 faee 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e012      	b.n	8006194 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	3301      	adds	r3, #1
 8006172:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	429a      	cmp	r2, r3
 800617a:	f4ff af32 	bcc.w	8005fe2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006192:	2302      	movs	r3, #2
  }
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	00100002 	.word	0x00100002
 80061a0:	ffff0000 	.word	0xffff0000

080061a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	460b      	mov	r3, r1
 80061b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d006      	beq.n	80061ce <I2C_MasterRequestWrite+0x2a>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d003      	beq.n	80061ce <I2C_MasterRequestWrite+0x2a>
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061cc:	d108      	bne.n	80061e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e00b      	b.n	80061f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	2b12      	cmp	r3, #18
 80061e6:	d107      	bne.n	80061f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fa9b 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00d      	beq.n	800622c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621e:	d103      	bne.n	8006228 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006226:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e035      	b.n	8006298 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006234:	d108      	bne.n	8006248 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006236:	897b      	ldrh	r3, [r7, #10]
 8006238:	b2db      	uxtb	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006244:	611a      	str	r2, [r3, #16]
 8006246:	e01b      	b.n	8006280 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006248:	897b      	ldrh	r3, [r7, #10]
 800624a:	11db      	asrs	r3, r3, #7
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f003 0306 	and.w	r3, r3, #6
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f063 030f 	orn	r3, r3, #15
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	490e      	ldr	r1, [pc, #56]	; (80062a0 <I2C_MasterRequestWrite+0xfc>)
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 fac1 	bl	80067ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e010      	b.n	8006298 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006276:	897b      	ldrh	r3, [r7, #10]
 8006278:	b2da      	uxtb	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	4907      	ldr	r1, [pc, #28]	; (80062a4 <I2C_MasterRequestWrite+0x100>)
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 fab1 	bl	80067ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	00010008 	.word	0x00010008
 80062a4:	00010002 	.word	0x00010002

080062a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	607a      	str	r2, [r7, #4]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	460b      	mov	r3, r1
 80062b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d006      	beq.n	80062e2 <I2C_MasterRequestRead+0x3a>
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d003      	beq.n	80062e2 <I2C_MasterRequestRead+0x3a>
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062e0:	d108      	bne.n	80062f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	e00b      	b.n	800630c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	2b11      	cmp	r3, #17
 80062fa:	d107      	bne.n	800630c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800630a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 fa11 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00d      	beq.n	8006340 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006332:	d103      	bne.n	800633c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800633a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e079      	b.n	8006434 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006348:	d108      	bne.n	800635c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800634a:	897b      	ldrh	r3, [r7, #10]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f043 0301 	orr.w	r3, r3, #1
 8006352:	b2da      	uxtb	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	611a      	str	r2, [r3, #16]
 800635a:	e05f      	b.n	800641c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800635c:	897b      	ldrh	r3, [r7, #10]
 800635e:	11db      	asrs	r3, r3, #7
 8006360:	b2db      	uxtb	r3, r3
 8006362:	f003 0306 	and.w	r3, r3, #6
 8006366:	b2db      	uxtb	r3, r3
 8006368:	f063 030f 	orn	r3, r3, #15
 800636c:	b2da      	uxtb	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	4930      	ldr	r1, [pc, #192]	; (800643c <I2C_MasterRequestRead+0x194>)
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 fa37 	bl	80067ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e054      	b.n	8006434 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800638a:	897b      	ldrh	r3, [r7, #10]
 800638c:	b2da      	uxtb	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4929      	ldr	r1, [pc, #164]	; (8006440 <I2C_MasterRequestRead+0x198>)
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 fa27 	bl	80067ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e044      	b.n	8006434 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063aa:	2300      	movs	r3, #0
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f9af 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00d      	beq.n	8006404 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f6:	d103      	bne.n	8006400 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e017      	b.n	8006434 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006404:	897b      	ldrh	r3, [r7, #10]
 8006406:	11db      	asrs	r3, r3, #7
 8006408:	b2db      	uxtb	r3, r3
 800640a:	f003 0306 	and.w	r3, r3, #6
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f063 030e 	orn	r3, r3, #14
 8006414:	b2da      	uxtb	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	4907      	ldr	r1, [pc, #28]	; (8006440 <I2C_MasterRequestRead+0x198>)
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f9e3 	bl	80067ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	00010008 	.word	0x00010008
 8006440:	00010002 	.word	0x00010002

08006444 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	4608      	mov	r0, r1
 800644e:	4611      	mov	r1, r2
 8006450:	461a      	mov	r2, r3
 8006452:	4603      	mov	r3, r0
 8006454:	817b      	strh	r3, [r7, #10]
 8006456:	460b      	mov	r3, r1
 8006458:	813b      	strh	r3, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800646c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	2200      	movs	r2, #0
 8006476:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 f960 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00d      	beq.n	80064a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006494:	d103      	bne.n	800649e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800649c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e05f      	b.n	8006562 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064a2:	897b      	ldrh	r3, [r7, #10]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	6a3a      	ldr	r2, [r7, #32]
 80064b6:	492d      	ldr	r1, [pc, #180]	; (800656c <I2C_RequestMemoryWrite+0x128>)
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f998 	bl	80067ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e04c      	b.n	8006562 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c8:	2300      	movs	r3, #0
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	6a39      	ldr	r1, [r7, #32]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 fa02 	bl	80068ec <I2C_WaitOnTXEFlagUntilTimeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00d      	beq.n	800650a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d107      	bne.n	8006506 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006504:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e02b      	b.n	8006562 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800650a:	88fb      	ldrh	r3, [r7, #6]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d105      	bne.n	800651c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006510:	893b      	ldrh	r3, [r7, #8]
 8006512:	b2da      	uxtb	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	611a      	str	r2, [r3, #16]
 800651a:	e021      	b.n	8006560 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800651c:	893b      	ldrh	r3, [r7, #8]
 800651e:	0a1b      	lsrs	r3, r3, #8
 8006520:	b29b      	uxth	r3, r3
 8006522:	b2da      	uxtb	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800652a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652c:	6a39      	ldr	r1, [r7, #32]
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 f9dc 	bl	80068ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00d      	beq.n	8006556 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2b04      	cmp	r3, #4
 8006540:	d107      	bne.n	8006552 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006550:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e005      	b.n	8006562 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006556:	893b      	ldrh	r3, [r7, #8]
 8006558:	b2da      	uxtb	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	00010002 	.word	0x00010002

08006570 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b088      	sub	sp, #32
 8006574:	af02      	add	r7, sp, #8
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	4608      	mov	r0, r1
 800657a:	4611      	mov	r1, r2
 800657c:	461a      	mov	r2, r3
 800657e:	4603      	mov	r3, r0
 8006580:	817b      	strh	r3, [r7, #10]
 8006582:	460b      	mov	r3, r1
 8006584:	813b      	strh	r3, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006598:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f8c2 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00d      	beq.n	80065de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d0:	d103      	bne.n	80065da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e0aa      	b.n	8006734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065de:	897b      	ldrh	r3, [r7, #10]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	6a3a      	ldr	r2, [r7, #32]
 80065f2:	4952      	ldr	r1, [pc, #328]	; (800673c <I2C_RequestMemoryRead+0x1cc>)
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f8fa 	bl	80067ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e097      	b.n	8006734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800661a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661c:	6a39      	ldr	r1, [r7, #32]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 f964 	bl	80068ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00d      	beq.n	8006646 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	2b04      	cmp	r3, #4
 8006630:	d107      	bne.n	8006642 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006640:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e076      	b.n	8006734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d105      	bne.n	8006658 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800664c:	893b      	ldrh	r3, [r7, #8]
 800664e:	b2da      	uxtb	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	611a      	str	r2, [r3, #16]
 8006656:	e021      	b.n	800669c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006658:	893b      	ldrh	r3, [r7, #8]
 800665a:	0a1b      	lsrs	r3, r3, #8
 800665c:	b29b      	uxth	r3, r3
 800665e:	b2da      	uxtb	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006668:	6a39      	ldr	r1, [r7, #32]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 f93e 	bl	80068ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00d      	beq.n	8006692 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	2b04      	cmp	r3, #4
 800667c:	d107      	bne.n	800668e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e050      	b.n	8006734 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006692:	893b      	ldrh	r3, [r7, #8]
 8006694:	b2da      	uxtb	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800669c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669e:	6a39      	ldr	r1, [r7, #32]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f923 	bl	80068ec <I2C_WaitOnTXEFlagUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00d      	beq.n	80066c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d107      	bne.n	80066c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e035      	b.n	8006734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	2200      	movs	r2, #0
 80066e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f82b 	bl	8006740 <I2C_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00d      	beq.n	800670c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066fe:	d103      	bne.n	8006708 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e013      	b.n	8006734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800670c:	897b      	ldrh	r3, [r7, #10]
 800670e:	b2db      	uxtb	r3, r3
 8006710:	f043 0301 	orr.w	r3, r3, #1
 8006714:	b2da      	uxtb	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	6a3a      	ldr	r2, [r7, #32]
 8006720:	4906      	ldr	r1, [pc, #24]	; (800673c <I2C_RequestMemoryRead+0x1cc>)
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f863 	bl	80067ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	00010002 	.word	0x00010002

08006740 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006750:	e025      	b.n	800679e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006758:	d021      	beq.n	800679e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675a:	f7fd fca9 	bl	80040b0 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d302      	bcc.n	8006770 <I2C_WaitOnFlagUntilTimeout+0x30>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d116      	bne.n	800679e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f043 0220 	orr.w	r2, r3, #32
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e023      	b.n	80067e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	0c1b      	lsrs	r3, r3, #16
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d10d      	bne.n	80067c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	43da      	mvns	r2, r3
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	4013      	ands	r3, r2
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bf0c      	ite	eq
 80067ba:	2301      	moveq	r3, #1
 80067bc:	2300      	movne	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	461a      	mov	r2, r3
 80067c2:	e00c      	b.n	80067de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	43da      	mvns	r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4013      	ands	r3, r2
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	bf0c      	ite	eq
 80067d6:	2301      	moveq	r3, #1
 80067d8:	2300      	movne	r3, #0
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d0b6      	beq.n	8006752 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067fc:	e051      	b.n	80068a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680c:	d123      	bne.n	8006856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800681c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006826:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	f043 0204 	orr.w	r2, r3, #4
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e046      	b.n	80068e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800685c:	d021      	beq.n	80068a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685e:	f7fd fc27 	bl	80040b0 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	429a      	cmp	r2, r3
 800686c:	d302      	bcc.n	8006874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d116      	bne.n	80068a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	f043 0220 	orr.w	r2, r3, #32
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e020      	b.n	80068e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	0c1b      	lsrs	r3, r3, #16
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d10c      	bne.n	80068c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	43da      	mvns	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	bf14      	ite	ne
 80068be:	2301      	movne	r3, #1
 80068c0:	2300      	moveq	r3, #0
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	e00b      	b.n	80068de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	43da      	mvns	r2, r3
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4013      	ands	r3, r2
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	bf14      	ite	ne
 80068d8:	2301      	movne	r3, #1
 80068da:	2300      	moveq	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d18d      	bne.n	80067fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068f8:	e02d      	b.n	8006956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 f8ce 	bl	8006a9c <I2C_IsAcknowledgeFailed>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e02d      	b.n	8006966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006910:	d021      	beq.n	8006956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006912:	f7fd fbcd 	bl	80040b0 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	429a      	cmp	r2, r3
 8006920:	d302      	bcc.n	8006928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d116      	bne.n	8006956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	f043 0220 	orr.w	r2, r3, #32
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e007      	b.n	8006966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006960:	2b80      	cmp	r3, #128	; 0x80
 8006962:	d1ca      	bne.n	80068fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800697a:	e02d      	b.n	80069d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 f88d 	bl	8006a9c <I2C_IsAcknowledgeFailed>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e02d      	b.n	80069e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006992:	d021      	beq.n	80069d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006994:	f7fd fb8c 	bl	80040b0 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d302      	bcc.n	80069aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d116      	bne.n	80069d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c4:	f043 0220 	orr.w	r2, r3, #32
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e007      	b.n	80069e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d1ca      	bne.n	800697c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069fc:	e042      	b.n	8006a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	f003 0310 	and.w	r3, r3, #16
 8006a08:	2b10      	cmp	r3, #16
 8006a0a:	d119      	bne.n	8006a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f06f 0210 	mvn.w	r2, #16
 8006a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e029      	b.n	8006a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a40:	f7fd fb36 	bl	80040b0 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d302      	bcc.n	8006a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d116      	bne.n	8006a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	f043 0220 	orr.w	r2, r3, #32
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e007      	b.n	8006a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8e:	2b40      	cmp	r3, #64	; 0x40
 8006a90:	d1b5      	bne.n	80069fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab2:	d11b      	bne.n	8006aec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006abc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad8:	f043 0204 	orr.w	r2, r3, #4
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e272      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 8087 	beq.w	8006c26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b18:	4b92      	ldr	r3, [pc, #584]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f003 030c 	and.w	r3, r3, #12
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d00c      	beq.n	8006b3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b24:	4b8f      	ldr	r3, [pc, #572]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 030c 	and.w	r3, r3, #12
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d112      	bne.n	8006b56 <HAL_RCC_OscConfig+0x5e>
 8006b30:	4b8c      	ldr	r3, [pc, #560]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b3c:	d10b      	bne.n	8006b56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b3e:	4b89      	ldr	r3, [pc, #548]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d06c      	beq.n	8006c24 <HAL_RCC_OscConfig+0x12c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d168      	bne.n	8006c24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e24c      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b5e:	d106      	bne.n	8006b6e <HAL_RCC_OscConfig+0x76>
 8006b60:	4b80      	ldr	r3, [pc, #512]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a7f      	ldr	r2, [pc, #508]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	e02e      	b.n	8006bcc <HAL_RCC_OscConfig+0xd4>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10c      	bne.n	8006b90 <HAL_RCC_OscConfig+0x98>
 8006b76:	4b7b      	ldr	r3, [pc, #492]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a7a      	ldr	r2, [pc, #488]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	4b78      	ldr	r3, [pc, #480]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a77      	ldr	r2, [pc, #476]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	e01d      	b.n	8006bcc <HAL_RCC_OscConfig+0xd4>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b98:	d10c      	bne.n	8006bb4 <HAL_RCC_OscConfig+0xbc>
 8006b9a:	4b72      	ldr	r3, [pc, #456]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a71      	ldr	r2, [pc, #452]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	4b6f      	ldr	r3, [pc, #444]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a6e      	ldr	r2, [pc, #440]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	e00b      	b.n	8006bcc <HAL_RCC_OscConfig+0xd4>
 8006bb4:	4b6b      	ldr	r3, [pc, #428]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a6a      	ldr	r2, [pc, #424]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	4b68      	ldr	r3, [pc, #416]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a67      	ldr	r2, [pc, #412]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d013      	beq.n	8006bfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd4:	f7fd fa6c 	bl	80040b0 <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bdc:	f7fd fa68 	bl	80040b0 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b64      	cmp	r3, #100	; 0x64
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e200      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bee:	4b5d      	ldr	r3, [pc, #372]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0f0      	beq.n	8006bdc <HAL_RCC_OscConfig+0xe4>
 8006bfa:	e014      	b.n	8006c26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bfc:	f7fd fa58 	bl	80040b0 <HAL_GetTick>
 8006c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c04:	f7fd fa54 	bl	80040b0 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b64      	cmp	r3, #100	; 0x64
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e1ec      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c16:	4b53      	ldr	r3, [pc, #332]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1f0      	bne.n	8006c04 <HAL_RCC_OscConfig+0x10c>
 8006c22:	e000      	b.n	8006c26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d063      	beq.n	8006cfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c32:	4b4c      	ldr	r3, [pc, #304]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f003 030c 	and.w	r3, r3, #12
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00b      	beq.n	8006c56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c3e:	4b49      	ldr	r3, [pc, #292]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f003 030c 	and.w	r3, r3, #12
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d11c      	bne.n	8006c84 <HAL_RCC_OscConfig+0x18c>
 8006c4a:	4b46      	ldr	r3, [pc, #280]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d116      	bne.n	8006c84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c56:	4b43      	ldr	r3, [pc, #268]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <HAL_RCC_OscConfig+0x176>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d001      	beq.n	8006c6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e1c0      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c6e:	4b3d      	ldr	r3, [pc, #244]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	4939      	ldr	r1, [pc, #228]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c82:	e03a      	b.n	8006cfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d020      	beq.n	8006cce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c8c:	4b36      	ldr	r3, [pc, #216]	; (8006d68 <HAL_RCC_OscConfig+0x270>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c92:	f7fd fa0d 	bl	80040b0 <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c98:	e008      	b.n	8006cac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c9a:	f7fd fa09 	bl	80040b0 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e1a1      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cac:	4b2d      	ldr	r3, [pc, #180]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0f0      	beq.n	8006c9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb8:	4b2a      	ldr	r3, [pc, #168]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	4927      	ldr	r1, [pc, #156]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	600b      	str	r3, [r1, #0]
 8006ccc:	e015      	b.n	8006cfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cce:	4b26      	ldr	r3, [pc, #152]	; (8006d68 <HAL_RCC_OscConfig+0x270>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd4:	f7fd f9ec 	bl	80040b0 <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cdc:	f7fd f9e8 	bl	80040b0 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e180      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cee:	4b1d      	ldr	r3, [pc, #116]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f0      	bne.n	8006cdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d03a      	beq.n	8006d7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d019      	beq.n	8006d42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d0e:	4b17      	ldr	r3, [pc, #92]	; (8006d6c <HAL_RCC_OscConfig+0x274>)
 8006d10:	2201      	movs	r2, #1
 8006d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d14:	f7fd f9cc 	bl	80040b0 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d1c:	f7fd f9c8 	bl	80040b0 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e160      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <HAL_RCC_OscConfig+0x26c>)
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0f0      	beq.n	8006d1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006d3a:	2001      	movs	r0, #1
 8006d3c:	f000 fac4 	bl	80072c8 <RCC_Delay>
 8006d40:	e01c      	b.n	8006d7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d42:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <HAL_RCC_OscConfig+0x274>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d48:	f7fd f9b2 	bl	80040b0 <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d4e:	e00f      	b.n	8006d70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d50:	f7fd f9ae 	bl	80040b0 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d908      	bls.n	8006d70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e146      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
 8006d62:	bf00      	nop
 8006d64:	40021000 	.word	0x40021000
 8006d68:	42420000 	.word	0x42420000
 8006d6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d70:	4b92      	ldr	r3, [pc, #584]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e9      	bne.n	8006d50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80a6 	beq.w	8006ed6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d8e:	4b8b      	ldr	r3, [pc, #556]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10d      	bne.n	8006db6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d9a:	4b88      	ldr	r3, [pc, #544]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	4a87      	ldr	r2, [pc, #540]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006da4:	61d3      	str	r3, [r2, #28]
 8006da6:	4b85      	ldr	r3, [pc, #532]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dae:	60bb      	str	r3, [r7, #8]
 8006db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006db2:	2301      	movs	r3, #1
 8006db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db6:	4b82      	ldr	r3, [pc, #520]	; (8006fc0 <HAL_RCC_OscConfig+0x4c8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d118      	bne.n	8006df4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dc2:	4b7f      	ldr	r3, [pc, #508]	; (8006fc0 <HAL_RCC_OscConfig+0x4c8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a7e      	ldr	r2, [pc, #504]	; (8006fc0 <HAL_RCC_OscConfig+0x4c8>)
 8006dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dce:	f7fd f96f 	bl	80040b0 <HAL_GetTick>
 8006dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd4:	e008      	b.n	8006de8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dd6:	f7fd f96b 	bl	80040b0 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b64      	cmp	r3, #100	; 0x64
 8006de2:	d901      	bls.n	8006de8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e103      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de8:	4b75      	ldr	r3, [pc, #468]	; (8006fc0 <HAL_RCC_OscConfig+0x4c8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d0f0      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d106      	bne.n	8006e0a <HAL_RCC_OscConfig+0x312>
 8006dfc:	4b6f      	ldr	r3, [pc, #444]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	4a6e      	ldr	r2, [pc, #440]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e02:	f043 0301 	orr.w	r3, r3, #1
 8006e06:	6213      	str	r3, [r2, #32]
 8006e08:	e02d      	b.n	8006e66 <HAL_RCC_OscConfig+0x36e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10c      	bne.n	8006e2c <HAL_RCC_OscConfig+0x334>
 8006e12:	4b6a      	ldr	r3, [pc, #424]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	4a69      	ldr	r2, [pc, #420]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e18:	f023 0301 	bic.w	r3, r3, #1
 8006e1c:	6213      	str	r3, [r2, #32]
 8006e1e:	4b67      	ldr	r3, [pc, #412]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	4a66      	ldr	r2, [pc, #408]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e24:	f023 0304 	bic.w	r3, r3, #4
 8006e28:	6213      	str	r3, [r2, #32]
 8006e2a:	e01c      	b.n	8006e66 <HAL_RCC_OscConfig+0x36e>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	d10c      	bne.n	8006e4e <HAL_RCC_OscConfig+0x356>
 8006e34:	4b61      	ldr	r3, [pc, #388]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	4a60      	ldr	r2, [pc, #384]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e3a:	f043 0304 	orr.w	r3, r3, #4
 8006e3e:	6213      	str	r3, [r2, #32]
 8006e40:	4b5e      	ldr	r3, [pc, #376]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	4a5d      	ldr	r2, [pc, #372]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	6213      	str	r3, [r2, #32]
 8006e4c:	e00b      	b.n	8006e66 <HAL_RCC_OscConfig+0x36e>
 8006e4e:	4b5b      	ldr	r3, [pc, #364]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	4a5a      	ldr	r2, [pc, #360]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e54:	f023 0301 	bic.w	r3, r3, #1
 8006e58:	6213      	str	r3, [r2, #32]
 8006e5a:	4b58      	ldr	r3, [pc, #352]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	4a57      	ldr	r2, [pc, #348]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e60:	f023 0304 	bic.w	r3, r3, #4
 8006e64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d015      	beq.n	8006e9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e6e:	f7fd f91f 	bl	80040b0 <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e74:	e00a      	b.n	8006e8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e76:	f7fd f91b 	bl	80040b0 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e0b1      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e8c:	4b4b      	ldr	r3, [pc, #300]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0ee      	beq.n	8006e76 <HAL_RCC_OscConfig+0x37e>
 8006e98:	e014      	b.n	8006ec4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e9a:	f7fd f909 	bl	80040b0 <HAL_GetTick>
 8006e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ea0:	e00a      	b.n	8006eb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ea2:	f7fd f905 	bl	80040b0 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e09b      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eb8:	4b40      	ldr	r3, [pc, #256]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1ee      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d105      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eca:	4b3c      	ldr	r3, [pc, #240]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	4a3b      	ldr	r2, [pc, #236]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ed4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 8087 	beq.w	8006fee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ee0:	4b36      	ldr	r3, [pc, #216]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f003 030c 	and.w	r3, r3, #12
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d061      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d146      	bne.n	8006f82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef4:	4b33      	ldr	r3, [pc, #204]	; (8006fc4 <HAL_RCC_OscConfig+0x4cc>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006efa:	f7fd f8d9 	bl	80040b0 <HAL_GetTick>
 8006efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f00:	e008      	b.n	8006f14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f02:	f7fd f8d5 	bl	80040b0 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e06d      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f14:	4b29      	ldr	r3, [pc, #164]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1f0      	bne.n	8006f02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f28:	d108      	bne.n	8006f3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f2a:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	4921      	ldr	r1, [pc, #132]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f3c:	4b1f      	ldr	r3, [pc, #124]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a19      	ldr	r1, [r3, #32]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	491b      	ldr	r1, [pc, #108]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f54:	4b1b      	ldr	r3, [pc, #108]	; (8006fc4 <HAL_RCC_OscConfig+0x4cc>)
 8006f56:	2201      	movs	r2, #1
 8006f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f5a:	f7fd f8a9 	bl	80040b0 <HAL_GetTick>
 8006f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f60:	e008      	b.n	8006f74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f62:	f7fd f8a5 	bl	80040b0 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e03d      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f74:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0f0      	beq.n	8006f62 <HAL_RCC_OscConfig+0x46a>
 8006f80:	e035      	b.n	8006fee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f82:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <HAL_RCC_OscConfig+0x4cc>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f88:	f7fd f892 	bl	80040b0 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f90:	f7fd f88e 	bl	80040b0 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e026      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fa2:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <HAL_RCC_OscConfig+0x4c4>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1f0      	bne.n	8006f90 <HAL_RCC_OscConfig+0x498>
 8006fae:	e01e      	b.n	8006fee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d107      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e019      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
 8006fbc:	40021000 	.word	0x40021000
 8006fc0:	40007000 	.word	0x40007000
 8006fc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <HAL_RCC_OscConfig+0x500>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d106      	bne.n	8006fea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d001      	beq.n	8006fee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40021000 	.word	0x40021000

08006ffc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e0d0      	b.n	80071b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007010:	4b6a      	ldr	r3, [pc, #424]	; (80071bc <HAL_RCC_ClockConfig+0x1c0>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0307 	and.w	r3, r3, #7
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d910      	bls.n	8007040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800701e:	4b67      	ldr	r3, [pc, #412]	; (80071bc <HAL_RCC_ClockConfig+0x1c0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f023 0207 	bic.w	r2, r3, #7
 8007026:	4965      	ldr	r1, [pc, #404]	; (80071bc <HAL_RCC_ClockConfig+0x1c0>)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	4313      	orrs	r3, r2
 800702c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800702e:	4b63      	ldr	r3, [pc, #396]	; (80071bc <HAL_RCC_ClockConfig+0x1c0>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d001      	beq.n	8007040 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e0b8      	b.n	80071b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d020      	beq.n	800708e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007058:	4b59      	ldr	r3, [pc, #356]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	4a58      	ldr	r2, [pc, #352]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 800705e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007062:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0308 	and.w	r3, r3, #8
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007070:	4b53      	ldr	r3, [pc, #332]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	4a52      	ldr	r2, [pc, #328]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007076:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800707a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800707c:	4b50      	ldr	r3, [pc, #320]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	494d      	ldr	r1, [pc, #308]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 800708a:	4313      	orrs	r3, r2
 800708c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d040      	beq.n	800711c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d107      	bne.n	80070b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a2:	4b47      	ldr	r3, [pc, #284]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d115      	bne.n	80070da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e07f      	b.n	80071b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d107      	bne.n	80070ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ba:	4b41      	ldr	r3, [pc, #260]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e073      	b.n	80071b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ca:	4b3d      	ldr	r3, [pc, #244]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e06b      	b.n	80071b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070da:	4b39      	ldr	r3, [pc, #228]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f023 0203 	bic.w	r2, r3, #3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	4936      	ldr	r1, [pc, #216]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070ec:	f7fc ffe0 	bl	80040b0 <HAL_GetTick>
 80070f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070f2:	e00a      	b.n	800710a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070f4:	f7fc ffdc 	bl	80040b0 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007102:	4293      	cmp	r3, r2
 8007104:	d901      	bls.n	800710a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e053      	b.n	80071b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710a:	4b2d      	ldr	r3, [pc, #180]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f003 020c 	and.w	r2, r3, #12
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	429a      	cmp	r2, r3
 800711a:	d1eb      	bne.n	80070f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800711c:	4b27      	ldr	r3, [pc, #156]	; (80071bc <HAL_RCC_ClockConfig+0x1c0>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d210      	bcs.n	800714c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800712a:	4b24      	ldr	r3, [pc, #144]	; (80071bc <HAL_RCC_ClockConfig+0x1c0>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f023 0207 	bic.w	r2, r3, #7
 8007132:	4922      	ldr	r1, [pc, #136]	; (80071bc <HAL_RCC_ClockConfig+0x1c0>)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	4313      	orrs	r3, r2
 8007138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800713a:	4b20      	ldr	r3, [pc, #128]	; (80071bc <HAL_RCC_ClockConfig+0x1c0>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d001      	beq.n	800714c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e032      	b.n	80071b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d008      	beq.n	800716a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007158:	4b19      	ldr	r3, [pc, #100]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	4916      	ldr	r1, [pc, #88]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007166:	4313      	orrs	r3, r2
 8007168:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0308 	and.w	r3, r3, #8
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007176:	4b12      	ldr	r3, [pc, #72]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	490e      	ldr	r1, [pc, #56]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007186:	4313      	orrs	r3, r2
 8007188:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800718a:	f000 f821 	bl	80071d0 <HAL_RCC_GetSysClockFreq>
 800718e:	4602      	mov	r2, r0
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <HAL_RCC_ClockConfig+0x1c4>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	091b      	lsrs	r3, r3, #4
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	490a      	ldr	r1, [pc, #40]	; (80071c4 <HAL_RCC_ClockConfig+0x1c8>)
 800719c:	5ccb      	ldrb	r3, [r1, r3]
 800719e:	fa22 f303 	lsr.w	r3, r2, r3
 80071a2:	4a09      	ldr	r2, [pc, #36]	; (80071c8 <HAL_RCC_ClockConfig+0x1cc>)
 80071a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80071a6:	4b09      	ldr	r3, [pc, #36]	; (80071cc <HAL_RCC_ClockConfig+0x1d0>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fc ff3e 	bl	800402c <HAL_InitTick>

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	40022000 	.word	0x40022000
 80071c0:	40021000 	.word	0x40021000
 80071c4:	08011dfc 	.word	0x08011dfc
 80071c8:	20000000 	.word	0x20000000
 80071cc:	20000038 	.word	0x20000038

080071d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071d0:	b490      	push	{r4, r7}
 80071d2:	b08a      	sub	sp, #40	; 0x28
 80071d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80071d6:	4b29      	ldr	r3, [pc, #164]	; (800727c <HAL_RCC_GetSysClockFreq+0xac>)
 80071d8:	1d3c      	adds	r4, r7, #4
 80071da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80071e0:	f240 2301 	movw	r3, #513	; 0x201
 80071e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	2300      	movs	r3, #0
 80071ec:	61bb      	str	r3, [r7, #24]
 80071ee:	2300      	movs	r3, #0
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80071fa:	4b21      	ldr	r3, [pc, #132]	; (8007280 <HAL_RCC_GetSysClockFreq+0xb0>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	f003 030c 	and.w	r3, r3, #12
 8007206:	2b04      	cmp	r3, #4
 8007208:	d002      	beq.n	8007210 <HAL_RCC_GetSysClockFreq+0x40>
 800720a:	2b08      	cmp	r3, #8
 800720c:	d003      	beq.n	8007216 <HAL_RCC_GetSysClockFreq+0x46>
 800720e:	e02b      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007210:	4b1c      	ldr	r3, [pc, #112]	; (8007284 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007212:	623b      	str	r3, [r7, #32]
      break;
 8007214:	e02b      	b.n	800726e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	0c9b      	lsrs	r3, r3, #18
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	3328      	adds	r3, #40	; 0x28
 8007220:	443b      	add	r3, r7
 8007222:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007226:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d012      	beq.n	8007258 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007232:	4b13      	ldr	r3, [pc, #76]	; (8007280 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	0c5b      	lsrs	r3, r3, #17
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	3328      	adds	r3, #40	; 0x28
 800723e:	443b      	add	r3, r7
 8007240:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007244:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	4a0e      	ldr	r2, [pc, #56]	; (8007284 <HAL_RCC_GetSysClockFreq+0xb4>)
 800724a:	fb03 f202 	mul.w	r2, r3, r2
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	fbb2 f3f3 	udiv	r3, r2, r3
 8007254:	627b      	str	r3, [r7, #36]	; 0x24
 8007256:	e004      	b.n	8007262 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	4a0b      	ldr	r2, [pc, #44]	; (8007288 <HAL_RCC_GetSysClockFreq+0xb8>)
 800725c:	fb02 f303 	mul.w	r3, r2, r3
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	623b      	str	r3, [r7, #32]
      break;
 8007266:	e002      	b.n	800726e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007268:	4b06      	ldr	r3, [pc, #24]	; (8007284 <HAL_RCC_GetSysClockFreq+0xb4>)
 800726a:	623b      	str	r3, [r7, #32]
      break;
 800726c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800726e:	6a3b      	ldr	r3, [r7, #32]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3728      	adds	r7, #40	; 0x28
 8007274:	46bd      	mov	sp, r7
 8007276:	bc90      	pop	{r4, r7}
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	080117c0 	.word	0x080117c0
 8007280:	40021000 	.word	0x40021000
 8007284:	007a1200 	.word	0x007a1200
 8007288:	003d0900 	.word	0x003d0900

0800728c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007290:	4b02      	ldr	r3, [pc, #8]	; (800729c <HAL_RCC_GetHCLKFreq+0x10>)
 8007292:	681b      	ldr	r3, [r3, #0]
}
 8007294:	4618      	mov	r0, r3
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr
 800729c:	20000000 	.word	0x20000000

080072a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072a4:	f7ff fff2 	bl	800728c <HAL_RCC_GetHCLKFreq>
 80072a8:	4602      	mov	r2, r0
 80072aa:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	f003 0307 	and.w	r3, r3, #7
 80072b4:	4903      	ldr	r1, [pc, #12]	; (80072c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072b6:	5ccb      	ldrb	r3, [r1, r3]
 80072b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072bc:	4618      	mov	r0, r3
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	40021000 	.word	0x40021000
 80072c4:	08011e0c 	.word	0x08011e0c

080072c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <RCC_Delay+0x34>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a0a      	ldr	r2, [pc, #40]	; (8007300 <RCC_Delay+0x38>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	0a5b      	lsrs	r3, r3, #9
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	fb02 f303 	mul.w	r3, r2, r3
 80072e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80072e4:	bf00      	nop
  }
  while (Delay --);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	1e5a      	subs	r2, r3, #1
 80072ea:	60fa      	str	r2, [r7, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f9      	bne.n	80072e4 <RCC_Delay+0x1c>
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr
 80072fc:	20000000 	.word	0x20000000
 8007300:	10624dd3 	.word	0x10624dd3

08007304 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <HAL_SRAM_Init+0x1c>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800731e:	d101      	bne.n	8007324 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e038      	b.n	8007396 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d106      	bne.n	800733e <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f7fb feef 	bl	800311c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3308      	adds	r3, #8
 8007346:	4619      	mov	r1, r3
 8007348:	4610      	mov	r0, r2
 800734a:	f001 fae3 	bl	8008914 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	461a      	mov	r2, r3
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	f001 fb45 	bl	80089e8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6858      	ldr	r0, [r3, #4]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	f001 fb70 	bl	8008a50 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	6892      	ldr	r2, [r2, #8]
 8007378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	6892      	ldr	r2, [r2, #8]
 8007384:	f041 0101 	orr.w	r1, r1, #1
 8007388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b082      	sub	sp, #8
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e041      	b.n	8007434 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7fb fd69 	bl	8002e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	3304      	adds	r3, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f000 fee9 	bl	80081b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b01      	cmp	r3, #1
 800744e:	d001      	beq.n	8007454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e044      	b.n	80074de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0201 	orr.w	r2, r2, #1
 800746a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1d      	ldr	r2, [pc, #116]	; (80074e8 <HAL_TIM_Base_Start_IT+0xac>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d018      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x6c>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1c      	ldr	r2, [pc, #112]	; (80074ec <HAL_TIM_Base_Start_IT+0xb0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d013      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x6c>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007488:	d00e      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x6c>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a18      	ldr	r2, [pc, #96]	; (80074f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d009      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x6c>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a16      	ldr	r2, [pc, #88]	; (80074f4 <HAL_TIM_Base_Start_IT+0xb8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d004      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x6c>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a15      	ldr	r2, [pc, #84]	; (80074f8 <HAL_TIM_Base_Start_IT+0xbc>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d111      	bne.n	80074cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b06      	cmp	r3, #6
 80074b8:	d010      	beq.n	80074dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0201 	orr.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ca:	e007      	b.n	80074dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	40013400 	.word	0x40013400
 80074f0:	40000400 	.word	0x40000400
 80074f4:	40000800 	.word	0x40000800
 80074f8:	40000c00 	.word	0x40000c00

080074fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e041      	b.n	8007592 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f839 	bl	800759a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3304      	adds	r3, #4
 8007538:	4619      	mov	r1, r3
 800753a:	4610      	mov	r0, r2
 800753c:	f000 fe3a 	bl	80081b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr

080075ac <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d109      	bne.n	80075d4 <HAL_TIM_PWM_Start_DMA+0x28>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	bf0c      	ite	eq
 80075cc:	2301      	moveq	r3, #1
 80075ce:	2300      	movne	r3, #0
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	e022      	b.n	800761a <HAL_TIM_PWM_Start_DMA+0x6e>
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d109      	bne.n	80075ee <HAL_TIM_PWM_Start_DMA+0x42>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	bf0c      	ite	eq
 80075e6:	2301      	moveq	r3, #1
 80075e8:	2300      	movne	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	e015      	b.n	800761a <HAL_TIM_PWM_Start_DMA+0x6e>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d109      	bne.n	8007608 <HAL_TIM_PWM_Start_DMA+0x5c>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	bf0c      	ite	eq
 8007600:	2301      	moveq	r3, #1
 8007602:	2300      	movne	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	e008      	b.n	800761a <HAL_TIM_PWM_Start_DMA+0x6e>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b02      	cmp	r3, #2
 8007612:	bf0c      	ite	eq
 8007614:	2301      	moveq	r3, #1
 8007616:	2300      	movne	r3, #0
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 800761e:	2302      	movs	r3, #2
 8007620:	e162      	b.n	80078e8 <HAL_TIM_PWM_Start_DMA+0x33c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d109      	bne.n	800763c <HAL_TIM_PWM_Start_DMA+0x90>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b01      	cmp	r3, #1
 8007632:	bf0c      	ite	eq
 8007634:	2301      	moveq	r3, #1
 8007636:	2300      	movne	r3, #0
 8007638:	b2db      	uxtb	r3, r3
 800763a:	e022      	b.n	8007682 <HAL_TIM_PWM_Start_DMA+0xd6>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b04      	cmp	r3, #4
 8007640:	d109      	bne.n	8007656 <HAL_TIM_PWM_Start_DMA+0xaa>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b01      	cmp	r3, #1
 800764c:	bf0c      	ite	eq
 800764e:	2301      	moveq	r3, #1
 8007650:	2300      	movne	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	e015      	b.n	8007682 <HAL_TIM_PWM_Start_DMA+0xd6>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b08      	cmp	r3, #8
 800765a:	d109      	bne.n	8007670 <HAL_TIM_PWM_Start_DMA+0xc4>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b01      	cmp	r3, #1
 8007666:	bf0c      	ite	eq
 8007668:	2301      	moveq	r3, #1
 800766a:	2300      	movne	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	e008      	b.n	8007682 <HAL_TIM_PWM_Start_DMA+0xd6>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b01      	cmp	r3, #1
 800767a:	bf0c      	ite	eq
 800767c:	2301      	moveq	r3, #1
 800767e:	2300      	movne	r3, #0
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d024      	beq.n	80076d0 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d104      	bne.n	8007696 <HAL_TIM_PWM_Start_DMA+0xea>
 800768c:	887b      	ldrh	r3, [r7, #2]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e128      	b.n	80078e8 <HAL_TIM_PWM_Start_DMA+0x33c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d104      	bne.n	80076a6 <HAL_TIM_PWM_Start_DMA+0xfa>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076a4:	e016      	b.n	80076d4 <HAL_TIM_PWM_Start_DMA+0x128>
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	d104      	bne.n	80076b6 <HAL_TIM_PWM_Start_DMA+0x10a>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076b4:	e00e      	b.n	80076d4 <HAL_TIM_PWM_Start_DMA+0x128>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d104      	bne.n	80076c6 <HAL_TIM_PWM_Start_DMA+0x11a>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076c4:	e006      	b.n	80076d4 <HAL_TIM_PWM_Start_DMA+0x128>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076ce:	e001      	b.n	80076d4 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e109      	b.n	80078e8 <HAL_TIM_PWM_Start_DMA+0x33c>
  }

  switch (Channel)
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2b0c      	cmp	r3, #12
 80076d8:	f200 80ae 	bhi.w	8007838 <HAL_TIM_PWM_Start_DMA+0x28c>
 80076dc:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <HAL_TIM_PWM_Start_DMA+0x138>)
 80076de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e2:	bf00      	nop
 80076e4:	08007719 	.word	0x08007719
 80076e8:	08007839 	.word	0x08007839
 80076ec:	08007839 	.word	0x08007839
 80076f0:	08007839 	.word	0x08007839
 80076f4:	08007761 	.word	0x08007761
 80076f8:	08007839 	.word	0x08007839
 80076fc:	08007839 	.word	0x08007839
 8007700:	08007839 	.word	0x08007839
 8007704:	080077a9 	.word	0x080077a9
 8007708:	08007839 	.word	0x08007839
 800770c:	08007839 	.word	0x08007839
 8007710:	08007839 	.word	0x08007839
 8007714:	080077f1 	.word	0x080077f1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	4a74      	ldr	r2, [pc, #464]	; (80078f0 <HAL_TIM_PWM_Start_DMA+0x344>)
 800771e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	4a73      	ldr	r2, [pc, #460]	; (80078f4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007726:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	4a72      	ldr	r2, [pc, #456]	; (80078f8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800772e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007734:	6879      	ldr	r1, [r7, #4]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3334      	adds	r3, #52	; 0x34
 800773c:	461a      	mov	r2, r3
 800773e:	887b      	ldrh	r3, [r7, #2]
 8007740:	f7fc fe68 	bl	8004414 <HAL_DMA_Start_IT>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e0cc      	b.n	80078e8 <HAL_TIM_PWM_Start_DMA+0x33c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800775c:	60da      	str	r2, [r3, #12]
      break;
 800775e:	e06c      	b.n	800783a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007764:	4a62      	ldr	r2, [pc, #392]	; (80078f0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007766:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776c:	4a61      	ldr	r2, [pc, #388]	; (80078f4 <HAL_TIM_PWM_Start_DMA+0x348>)
 800776e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	4a60      	ldr	r2, [pc, #384]	; (80078f8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8007776:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3338      	adds	r3, #56	; 0x38
 8007784:	461a      	mov	r2, r3
 8007786:	887b      	ldrh	r3, [r7, #2]
 8007788:	f7fc fe44 	bl	8004414 <HAL_DMA_Start_IT>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e0a8      	b.n	80078e8 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077a4:	60da      	str	r2, [r3, #12]
      break;
 80077a6:	e048      	b.n	800783a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	4a50      	ldr	r2, [pc, #320]	; (80078f0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	4a4f      	ldr	r2, [pc, #316]	; (80078f4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80077b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	4a4e      	ldr	r2, [pc, #312]	; (80078f8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80077be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	333c      	adds	r3, #60	; 0x3c
 80077cc:	461a      	mov	r2, r3
 80077ce:	887b      	ldrh	r3, [r7, #2]
 80077d0:	f7fc fe20 	bl	8004414 <HAL_DMA_Start_IT>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e084      	b.n	80078e8 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077ec:	60da      	str	r2, [r3, #12]
      break;
 80077ee:	e024      	b.n	800783a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f4:	4a3e      	ldr	r2, [pc, #248]	; (80078f0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80077f6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	4a3d      	ldr	r2, [pc, #244]	; (80078f4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80077fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007804:	4a3c      	ldr	r2, [pc, #240]	; (80078f8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8007806:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3340      	adds	r3, #64	; 0x40
 8007814:	461a      	mov	r2, r3
 8007816:	887b      	ldrh	r3, [r7, #2]
 8007818:	f7fc fdfc 	bl	8004414 <HAL_DMA_Start_IT>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e060      	b.n	80078e8 <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007834:	60da      	str	r2, [r3, #12]
      break;
 8007836:	e000      	b.n	800783a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8007838:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2201      	movs	r2, #1
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	4618      	mov	r0, r3
 8007844:	f000 ff72 	bl	800872c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a2b      	ldr	r2, [pc, #172]	; (80078fc <HAL_TIM_PWM_Start_DMA+0x350>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d004      	beq.n	800785c <HAL_TIM_PWM_Start_DMA+0x2b0>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a2a      	ldr	r2, [pc, #168]	; (8007900 <HAL_TIM_PWM_Start_DMA+0x354>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d101      	bne.n	8007860 <HAL_TIM_PWM_Start_DMA+0x2b4>
 800785c:	2301      	movs	r3, #1
 800785e:	e000      	b.n	8007862 <HAL_TIM_PWM_Start_DMA+0x2b6>
 8007860:	2300      	movs	r3, #0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <HAL_TIM_PWM_Start_DMA+0x2ca>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007874:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a20      	ldr	r2, [pc, #128]	; (80078fc <HAL_TIM_PWM_Start_DMA+0x350>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d018      	beq.n	80078b2 <HAL_TIM_PWM_Start_DMA+0x306>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a1e      	ldr	r2, [pc, #120]	; (8007900 <HAL_TIM_PWM_Start_DMA+0x354>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <HAL_TIM_PWM_Start_DMA+0x306>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007892:	d00e      	beq.n	80078b2 <HAL_TIM_PWM_Start_DMA+0x306>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1a      	ldr	r2, [pc, #104]	; (8007904 <HAL_TIM_PWM_Start_DMA+0x358>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d009      	beq.n	80078b2 <HAL_TIM_PWM_Start_DMA+0x306>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a19      	ldr	r2, [pc, #100]	; (8007908 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d004      	beq.n	80078b2 <HAL_TIM_PWM_Start_DMA+0x306>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a17      	ldr	r2, [pc, #92]	; (800790c <HAL_TIM_PWM_Start_DMA+0x360>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d111      	bne.n	80078d6 <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2b06      	cmp	r3, #6
 80078c2:	d010      	beq.n	80078e6 <HAL_TIM_PWM_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d4:	e007      	b.n	80078e6 <HAL_TIM_PWM_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0201 	orr.w	r2, r2, #1
 80078e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3718      	adds	r7, #24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	080080a5 	.word	0x080080a5
 80078f4:	0800814d 	.word	0x0800814d
 80078f8:	08008013 	.word	0x08008013
 80078fc:	40012c00 	.word	0x40012c00
 8007900:	40013400 	.word	0x40013400
 8007904:	40000400 	.word	0x40000400
 8007908:	40000800 	.word	0x40000800
 800790c:	40000c00 	.word	0x40000c00

08007910 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b0c      	cmp	r3, #12
 800791e:	d855      	bhi.n	80079cc <HAL_TIM_PWM_Stop_DMA+0xbc>
 8007920:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	0800795d 	.word	0x0800795d
 800792c:	080079cd 	.word	0x080079cd
 8007930:	080079cd 	.word	0x080079cd
 8007934:	080079cd 	.word	0x080079cd
 8007938:	08007979 	.word	0x08007979
 800793c:	080079cd 	.word	0x080079cd
 8007940:	080079cd 	.word	0x080079cd
 8007944:	080079cd 	.word	0x080079cd
 8007948:	08007995 	.word	0x08007995
 800794c:	080079cd 	.word	0x080079cd
 8007950:	080079cd 	.word	0x080079cd
 8007954:	080079cd 	.word	0x080079cd
 8007958:	080079b1 	.word	0x080079b1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800796a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	4618      	mov	r0, r3
 8007972:	f7fc fdaf 	bl	80044d4 <HAL_DMA_Abort_IT>
      break;
 8007976:	e02a      	b.n	80079ce <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007986:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	4618      	mov	r0, r3
 800798e:	f7fc fda1 	bl	80044d4 <HAL_DMA_Abort_IT>
      break;
 8007992:	e01c      	b.n	80079ce <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fc fd93 	bl	80044d4 <HAL_DMA_Abort_IT>
      break;
 80079ae:	e00e      	b.n	80079ce <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fc fd85 	bl	80044d4 <HAL_DMA_Abort_IT>
      break;
 80079ca:	e000      	b.n	80079ce <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80079cc:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2200      	movs	r2, #0
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fea8 	bl	800872c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a2e      	ldr	r2, [pc, #184]	; (8007a9c <HAL_TIM_PWM_Stop_DMA+0x18c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d004      	beq.n	80079f0 <HAL_TIM_PWM_Stop_DMA+0xe0>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a2d      	ldr	r2, [pc, #180]	; (8007aa0 <HAL_TIM_PWM_Stop_DMA+0x190>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d101      	bne.n	80079f4 <HAL_TIM_PWM_Stop_DMA+0xe4>
 80079f0:	2301      	movs	r3, #1
 80079f2:	e000      	b.n	80079f6 <HAL_TIM_PWM_Stop_DMA+0xe6>
 80079f4:	2300      	movs	r3, #0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d017      	beq.n	8007a2a <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6a1a      	ldr	r2, [r3, #32]
 8007a00:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a04:	4013      	ands	r3, r2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10f      	bne.n	8007a2a <HAL_TIM_PWM_Stop_DMA+0x11a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6a1a      	ldr	r2, [r3, #32]
 8007a10:	f240 4344 	movw	r3, #1092	; 0x444
 8007a14:	4013      	ands	r3, r2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d107      	bne.n	8007a2a <HAL_TIM_PWM_Stop_DMA+0x11a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6a1a      	ldr	r2, [r3, #32]
 8007a30:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a34:	4013      	ands	r3, r2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10f      	bne.n	8007a5a <HAL_TIM_PWM_Stop_DMA+0x14a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6a1a      	ldr	r2, [r3, #32]
 8007a40:	f240 4344 	movw	r3, #1092	; 0x444
 8007a44:	4013      	ands	r3, r2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d107      	bne.n	8007a5a <HAL_TIM_PWM_Stop_DMA+0x14a>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0201 	bic.w	r2, r2, #1
 8007a58:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d104      	bne.n	8007a6a <HAL_TIM_PWM_Stop_DMA+0x15a>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a68:	e013      	b.n	8007a92 <HAL_TIM_PWM_Stop_DMA+0x182>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b04      	cmp	r3, #4
 8007a6e:	d104      	bne.n	8007a7a <HAL_TIM_PWM_Stop_DMA+0x16a>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a78:	e00b      	b.n	8007a92 <HAL_TIM_PWM_Stop_DMA+0x182>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d104      	bne.n	8007a8a <HAL_TIM_PWM_Stop_DMA+0x17a>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a88:	e003      	b.n	8007a92 <HAL_TIM_PWM_Stop_DMA+0x182>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	40012c00 	.word	0x40012c00
 8007aa0:	40013400 	.word	0x40013400

08007aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d122      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d11b      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0202 	mvn.w	r2, #2
 8007ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f003 0303 	and.w	r3, r3, #3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa6f 	bl	8007fca <HAL_TIM_IC_CaptureCallback>
 8007aec:	e005      	b.n	8007afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa62 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7fa f8e9 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d122      	bne.n	8007b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d11b      	bne.n	8007b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f06f 0204 	mvn.w	r2, #4
 8007b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa45 	bl	8007fca <HAL_TIM_IC_CaptureCallback>
 8007b40:	e005      	b.n	8007b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fa38 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7fa f8bf 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d122      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f003 0308 	and.w	r3, r3, #8
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d11b      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f06f 0208 	mvn.w	r2, #8
 8007b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fa1b 	bl	8007fca <HAL_TIM_IC_CaptureCallback>
 8007b94:	e005      	b.n	8007ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa0e 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7fa f895 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d122      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	2b10      	cmp	r3, #16
 8007bc2:	d11b      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f06f 0210 	mvn.w	r2, #16
 8007bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f9f1 	bl	8007fca <HAL_TIM_IC_CaptureCallback>
 8007be8:	e005      	b.n	8007bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f9e4 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7fa f86b 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d10e      	bne.n	8007c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d107      	bne.n	8007c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f06f 0201 	mvn.w	r2, #1
 8007c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7f9 fb7c 	bl	8001320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c32:	2b80      	cmp	r3, #128	; 0x80
 8007c34:	d10e      	bne.n	8007c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c40:	2b80      	cmp	r3, #128	; 0x80
 8007c42:	d107      	bne.n	8007c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fe56 	bl	8008900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d10e      	bne.n	8007c80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6c:	2b40      	cmp	r3, #64	; 0x40
 8007c6e:	d107      	bne.n	8007c80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f9b7 	bl	8007fee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f003 0320 	and.w	r3, r3, #32
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d10e      	bne.n	8007cac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d107      	bne.n	8007cac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f06f 0220 	mvn.w	r2, #32
 8007ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fe21 	bl	80088ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d101      	bne.n	8007cce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007cca:	2302      	movs	r3, #2
 8007ccc:	e0ac      	b.n	8007e28 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b0c      	cmp	r3, #12
 8007cda:	f200 809f 	bhi.w	8007e1c <HAL_TIM_PWM_ConfigChannel+0x168>
 8007cde:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007d19 	.word	0x08007d19
 8007ce8:	08007e1d 	.word	0x08007e1d
 8007cec:	08007e1d 	.word	0x08007e1d
 8007cf0:	08007e1d 	.word	0x08007e1d
 8007cf4:	08007d59 	.word	0x08007d59
 8007cf8:	08007e1d 	.word	0x08007e1d
 8007cfc:	08007e1d 	.word	0x08007e1d
 8007d00:	08007e1d 	.word	0x08007e1d
 8007d04:	08007d9b 	.word	0x08007d9b
 8007d08:	08007e1d 	.word	0x08007e1d
 8007d0c:	08007e1d 	.word	0x08007e1d
 8007d10:	08007e1d 	.word	0x08007e1d
 8007d14:	08007ddb 	.word	0x08007ddb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 fac2 	bl	80082a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0208 	orr.w	r2, r2, #8
 8007d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0204 	bic.w	r2, r2, #4
 8007d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6999      	ldr	r1, [r3, #24]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	691a      	ldr	r2, [r3, #16]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	619a      	str	r2, [r3, #24]
      break;
 8007d56:	e062      	b.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68b9      	ldr	r1, [r7, #8]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 fb12 	bl	8008388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6999      	ldr	r1, [r3, #24]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	021a      	lsls	r2, r3, #8
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	619a      	str	r2, [r3, #24]
      break;
 8007d98:	e041      	b.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fb65 	bl	8008470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69da      	ldr	r2, [r3, #28]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f042 0208 	orr.w	r2, r2, #8
 8007db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69da      	ldr	r2, [r3, #28]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0204 	bic.w	r2, r2, #4
 8007dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69d9      	ldr	r1, [r3, #28]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	691a      	ldr	r2, [r3, #16]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	61da      	str	r2, [r3, #28]
      break;
 8007dd8:	e021      	b.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fbb9 	bl	8008558 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	69da      	ldr	r2, [r3, #28]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69d9      	ldr	r1, [r3, #28]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	021a      	lsls	r2, r3, #8
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	61da      	str	r2, [r3, #28]
      break;
 8007e1a:	e000      	b.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007e1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d101      	bne.n	8007e48 <HAL_TIM_ConfigClockSource+0x18>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e0b3      	b.n	8007fb0 <HAL_TIM_ConfigClockSource+0x180>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e80:	d03e      	beq.n	8007f00 <HAL_TIM_ConfigClockSource+0xd0>
 8007e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e86:	f200 8087 	bhi.w	8007f98 <HAL_TIM_ConfigClockSource+0x168>
 8007e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8e:	f000 8085 	beq.w	8007f9c <HAL_TIM_ConfigClockSource+0x16c>
 8007e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e96:	d87f      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x168>
 8007e98:	2b70      	cmp	r3, #112	; 0x70
 8007e9a:	d01a      	beq.n	8007ed2 <HAL_TIM_ConfigClockSource+0xa2>
 8007e9c:	2b70      	cmp	r3, #112	; 0x70
 8007e9e:	d87b      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x168>
 8007ea0:	2b60      	cmp	r3, #96	; 0x60
 8007ea2:	d050      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0x116>
 8007ea4:	2b60      	cmp	r3, #96	; 0x60
 8007ea6:	d877      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x168>
 8007ea8:	2b50      	cmp	r3, #80	; 0x50
 8007eaa:	d03c      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0xf6>
 8007eac:	2b50      	cmp	r3, #80	; 0x50
 8007eae:	d873      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x168>
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	d058      	beq.n	8007f66 <HAL_TIM_ConfigClockSource+0x136>
 8007eb4:	2b40      	cmp	r3, #64	; 0x40
 8007eb6:	d86f      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x168>
 8007eb8:	2b30      	cmp	r3, #48	; 0x30
 8007eba:	d064      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x156>
 8007ebc:	2b30      	cmp	r3, #48	; 0x30
 8007ebe:	d86b      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x168>
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d060      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x156>
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d867      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x168>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d05c      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x156>
 8007ecc:	2b10      	cmp	r3, #16
 8007ece:	d05a      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007ed0:	e062      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	6899      	ldr	r1, [r3, #8]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f000 fc04 	bl	80086ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ef4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	609a      	str	r2, [r3, #8]
      break;
 8007efe:	e04e      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6818      	ldr	r0, [r3, #0]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	6899      	ldr	r1, [r3, #8]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f000 fbed 	bl	80086ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f22:	609a      	str	r2, [r3, #8]
      break;
 8007f24:	e03b      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	6859      	ldr	r1, [r3, #4]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	461a      	mov	r2, r3
 8007f34:	f000 fb64 	bl	8008600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2150      	movs	r1, #80	; 0x50
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 fbbb 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 8007f44:	e02b      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6818      	ldr	r0, [r3, #0]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	6859      	ldr	r1, [r3, #4]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	461a      	mov	r2, r3
 8007f54:	f000 fb82 	bl	800865c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2160      	movs	r1, #96	; 0x60
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fbab 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 8007f64:	e01b      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6859      	ldr	r1, [r3, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f000 fb44 	bl	8008600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2140      	movs	r1, #64	; 0x40
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fb9b 	bl	80086ba <TIM_ITRx_SetConfig>
      break;
 8007f84:	e00b      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4610      	mov	r0, r2
 8007f92:	f000 fb92 	bl	80086ba <TIM_ITRx_SetConfig>
        break;
 8007f96:	e002      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f98:	bf00      	nop
 8007f9a:	e000      	b.n	8007f9e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bc80      	pop	{r7}
 8007fc8:	4770      	bx	lr

08007fca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bc80      	pop	{r7}
 8007fda:	4770      	bx	lr

08007fdc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr

08007fee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr

08008000 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr

08008012 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	429a      	cmp	r2, r3
 8008028:	d107      	bne.n	800803a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2201      	movs	r2, #1
 800802e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008038:	e02a      	b.n	8008090 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d107      	bne.n	8008054 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2202      	movs	r2, #2
 8008048:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008052:	e01d      	b.n	8008090 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	429a      	cmp	r2, r3
 800805c:	d107      	bne.n	800806e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2204      	movs	r2, #4
 8008062:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800806c:	e010      	b.n	8008090 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	429a      	cmp	r2, r3
 8008076:	d107      	bne.n	8008088 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2208      	movs	r2, #8
 800807c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008086:	e003      	b.n	8008090 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f7ff ffb5 	bl	8008000 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	771a      	strb	r2, [r3, #28]
}
 800809c:	bf00      	nop
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d10b      	bne.n	80080d4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2201      	movs	r2, #1
 80080c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d136      	bne.n	8008138 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080d2:	e031      	b.n	8008138 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d10b      	bne.n	80080f6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2202      	movs	r2, #2
 80080e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d125      	bne.n	8008138 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080f4:	e020      	b.n	8008138 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d10b      	bne.n	8008118 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2204      	movs	r2, #4
 8008104:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d114      	bne.n	8008138 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008116:	e00f      	b.n	8008138 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	429a      	cmp	r2, r3
 8008120:	d10a      	bne.n	8008138 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2208      	movs	r2, #8
 8008126:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d103      	bne.n	8008138 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f7f9 fdc7 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	771a      	strb	r2, [r3, #28]
}
 8008144:	bf00      	nop
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d103      	bne.n	800816c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2201      	movs	r2, #1
 8008168:	771a      	strb	r2, [r3, #28]
 800816a:	e019      	b.n	80081a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	429a      	cmp	r2, r3
 8008174:	d103      	bne.n	800817e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2202      	movs	r2, #2
 800817a:	771a      	strb	r2, [r3, #28]
 800817c:	e010      	b.n	80081a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	429a      	cmp	r2, r3
 8008186:	d103      	bne.n	8008190 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2204      	movs	r2, #4
 800818c:	771a      	strb	r2, [r3, #28]
 800818e:	e007      	b.n	80081a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	429a      	cmp	r2, r3
 8008198:	d102      	bne.n	80081a0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2208      	movs	r2, #8
 800819e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7ff ff1b 	bl	8007fdc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	771a      	strb	r2, [r3, #28]
}
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a33      	ldr	r2, [pc, #204]	; (8008294 <TIM_Base_SetConfig+0xe0>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d013      	beq.n	80081f4 <TIM_Base_SetConfig+0x40>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a32      	ldr	r2, [pc, #200]	; (8008298 <TIM_Base_SetConfig+0xe4>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d00f      	beq.n	80081f4 <TIM_Base_SetConfig+0x40>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081da:	d00b      	beq.n	80081f4 <TIM_Base_SetConfig+0x40>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a2f      	ldr	r2, [pc, #188]	; (800829c <TIM_Base_SetConfig+0xe8>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d007      	beq.n	80081f4 <TIM_Base_SetConfig+0x40>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a2e      	ldr	r2, [pc, #184]	; (80082a0 <TIM_Base_SetConfig+0xec>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d003      	beq.n	80081f4 <TIM_Base_SetConfig+0x40>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a2d      	ldr	r2, [pc, #180]	; (80082a4 <TIM_Base_SetConfig+0xf0>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d108      	bne.n	8008206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a22      	ldr	r2, [pc, #136]	; (8008294 <TIM_Base_SetConfig+0xe0>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d013      	beq.n	8008236 <TIM_Base_SetConfig+0x82>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a21      	ldr	r2, [pc, #132]	; (8008298 <TIM_Base_SetConfig+0xe4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d00f      	beq.n	8008236 <TIM_Base_SetConfig+0x82>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821c:	d00b      	beq.n	8008236 <TIM_Base_SetConfig+0x82>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a1e      	ldr	r2, [pc, #120]	; (800829c <TIM_Base_SetConfig+0xe8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d007      	beq.n	8008236 <TIM_Base_SetConfig+0x82>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a1d      	ldr	r2, [pc, #116]	; (80082a0 <TIM_Base_SetConfig+0xec>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d003      	beq.n	8008236 <TIM_Base_SetConfig+0x82>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a1c      	ldr	r2, [pc, #112]	; (80082a4 <TIM_Base_SetConfig+0xf0>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d108      	bne.n	8008248 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800823c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	4313      	orrs	r3, r2
 8008246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	4313      	orrs	r3, r2
 8008254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a09      	ldr	r2, [pc, #36]	; (8008294 <TIM_Base_SetConfig+0xe0>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d003      	beq.n	800827c <TIM_Base_SetConfig+0xc8>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a08      	ldr	r2, [pc, #32]	; (8008298 <TIM_Base_SetConfig+0xe4>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d103      	bne.n	8008284 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	691a      	ldr	r2, [r3, #16]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	615a      	str	r2, [r3, #20]
}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	bc80      	pop	{r7}
 8008292:	4770      	bx	lr
 8008294:	40012c00 	.word	0x40012c00
 8008298:	40013400 	.word	0x40013400
 800829c:	40000400 	.word	0x40000400
 80082a0:	40000800 	.word	0x40000800
 80082a4:	40000c00 	.word	0x40000c00

080082a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	f023 0201 	bic.w	r2, r3, #1
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f023 0303 	bic.w	r3, r3, #3
 80082de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f023 0302 	bic.w	r3, r3, #2
 80082f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a20      	ldr	r2, [pc, #128]	; (8008380 <TIM_OC1_SetConfig+0xd8>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d003      	beq.n	800830c <TIM_OC1_SetConfig+0x64>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a1f      	ldr	r2, [pc, #124]	; (8008384 <TIM_OC1_SetConfig+0xdc>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d10c      	bne.n	8008326 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f023 0308 	bic.w	r3, r3, #8
 8008312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f023 0304 	bic.w	r3, r3, #4
 8008324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a15      	ldr	r2, [pc, #84]	; (8008380 <TIM_OC1_SetConfig+0xd8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d003      	beq.n	8008336 <TIM_OC1_SetConfig+0x8e>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a14      	ldr	r2, [pc, #80]	; (8008384 <TIM_OC1_SetConfig+0xdc>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d111      	bne.n	800835a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800833c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	4313      	orrs	r3, r2
 800834e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	4313      	orrs	r3, r2
 8008358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	621a      	str	r2, [r3, #32]
}
 8008374:	bf00      	nop
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	bc80      	pop	{r7}
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	40012c00 	.word	0x40012c00
 8008384:	40013400 	.word	0x40013400

08008388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	f023 0210 	bic.w	r2, r3, #16
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	021b      	lsls	r3, r3, #8
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f023 0320 	bic.w	r3, r3, #32
 80083d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	4313      	orrs	r3, r2
 80083de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a21      	ldr	r2, [pc, #132]	; (8008468 <TIM_OC2_SetConfig+0xe0>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d003      	beq.n	80083f0 <TIM_OC2_SetConfig+0x68>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a20      	ldr	r2, [pc, #128]	; (800846c <TIM_OC2_SetConfig+0xe4>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d10d      	bne.n	800840c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	011b      	lsls	r3, r3, #4
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	4313      	orrs	r3, r2
 8008402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800840a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a16      	ldr	r2, [pc, #88]	; (8008468 <TIM_OC2_SetConfig+0xe0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d003      	beq.n	800841c <TIM_OC2_SetConfig+0x94>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a15      	ldr	r2, [pc, #84]	; (800846c <TIM_OC2_SetConfig+0xe4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d113      	bne.n	8008444 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008422:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800842a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	4313      	orrs	r3, r2
 8008436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	4313      	orrs	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	621a      	str	r2, [r3, #32]
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr
 8008468:	40012c00 	.word	0x40012c00
 800846c:	40013400 	.word	0x40013400

08008470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 0303 	bic.w	r3, r3, #3
 80084a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	021b      	lsls	r3, r3, #8
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a21      	ldr	r2, [pc, #132]	; (8008550 <TIM_OC3_SetConfig+0xe0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d003      	beq.n	80084d6 <TIM_OC3_SetConfig+0x66>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a20      	ldr	r2, [pc, #128]	; (8008554 <TIM_OC3_SetConfig+0xe4>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d10d      	bne.n	80084f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	021b      	lsls	r3, r3, #8
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a16      	ldr	r2, [pc, #88]	; (8008550 <TIM_OC3_SetConfig+0xe0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d003      	beq.n	8008502 <TIM_OC3_SetConfig+0x92>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a15      	ldr	r2, [pc, #84]	; (8008554 <TIM_OC3_SetConfig+0xe4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d113      	bne.n	800852a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	011b      	lsls	r3, r3, #4
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	4313      	orrs	r3, r2
 800851c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	011b      	lsls	r3, r3, #4
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	4313      	orrs	r3, r2
 8008528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	621a      	str	r2, [r3, #32]
}
 8008544:	bf00      	nop
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	bc80      	pop	{r7}
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	40012c00 	.word	0x40012c00
 8008554:	40013400 	.word	0x40013400

08008558 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800858e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	021b      	lsls	r3, r3, #8
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	4313      	orrs	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	031b      	lsls	r3, r3, #12
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a11      	ldr	r2, [pc, #68]	; (80085f8 <TIM_OC4_SetConfig+0xa0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d003      	beq.n	80085c0 <TIM_OC4_SetConfig+0x68>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a10      	ldr	r2, [pc, #64]	; (80085fc <TIM_OC4_SetConfig+0xa4>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d109      	bne.n	80085d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	019b      	lsls	r3, r3, #6
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	621a      	str	r2, [r3, #32]
}
 80085ee:	bf00      	nop
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bc80      	pop	{r7}
 80085f6:	4770      	bx	lr
 80085f8:	40012c00 	.word	0x40012c00
 80085fc:	40013400 	.word	0x40013400

08008600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f023 0201 	bic.w	r2, r3, #1
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800862a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	011b      	lsls	r3, r3, #4
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4313      	orrs	r3, r2
 8008634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f023 030a 	bic.w	r3, r3, #10
 800863c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	621a      	str	r2, [r3, #32]
}
 8008652:	bf00      	nop
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a1b      	ldr	r3, [r3, #32]
 800866c:	f023 0210 	bic.w	r2, r3, #16
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	031b      	lsls	r3, r3, #12
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	4313      	orrs	r3, r2
 8008690:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008698:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	621a      	str	r2, [r3, #32]
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	f043 0307 	orr.w	r3, r3, #7
 80086dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	609a      	str	r2, [r3, #8]
}
 80086e4:	bf00      	nop
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bc80      	pop	{r7}
 80086ec:	4770      	bx	lr

080086ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b087      	sub	sp, #28
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	607a      	str	r2, [r7, #4]
 80086fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008708:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	021a      	lsls	r2, r3, #8
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	431a      	orrs	r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	4313      	orrs	r3, r2
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	4313      	orrs	r3, r2
 800871a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	609a      	str	r2, [r3, #8]
}
 8008722:	bf00      	nop
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr

0800872c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f003 031f 	and.w	r3, r3, #31
 800873e:	2201      	movs	r2, #1
 8008740:	fa02 f303 	lsl.w	r3, r2, r3
 8008744:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a1a      	ldr	r2, [r3, #32]
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	43db      	mvns	r3, r3
 800874e:	401a      	ands	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6a1a      	ldr	r2, [r3, #32]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f003 031f 	and.w	r3, r3, #31
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	fa01 f303 	lsl.w	r3, r1, r3
 8008764:	431a      	orrs	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	621a      	str	r2, [r3, #32]
}
 800876a:	bf00      	nop
 800876c:	371c      	adds	r7, #28
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr

08008774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008784:	2b01      	cmp	r3, #1
 8008786:	d101      	bne.n	800878c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008788:	2302      	movs	r3, #2
 800878a:	e050      	b.n	800882e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a1b      	ldr	r2, [pc, #108]	; (8008838 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d018      	beq.n	8008802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a19      	ldr	r2, [pc, #100]	; (800883c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d013      	beq.n	8008802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e2:	d00e      	beq.n	8008802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a15      	ldr	r2, [pc, #84]	; (8008840 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d009      	beq.n	8008802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a14      	ldr	r2, [pc, #80]	; (8008844 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d004      	beq.n	8008802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a12      	ldr	r2, [pc, #72]	; (8008848 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d10c      	bne.n	800881c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	4313      	orrs	r3, r2
 8008812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr
 8008838:	40012c00 	.word	0x40012c00
 800883c:	40013400 	.word	0x40013400
 8008840:	40000400 	.word	0x40000400
 8008844:	40000800 	.word	0x40000800
 8008848:	40000c00 	.word	0x40000c00

0800884c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008860:	2b01      	cmp	r3, #1
 8008862:	d101      	bne.n	8008868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008864:	2302      	movs	r3, #2
 8008866:	e03d      	b.n	80088e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	4313      	orrs	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	4313      	orrs	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	4313      	orrs	r3, r2
 8008898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bc80      	pop	{r7}
 80088ec:	4770      	bx	lr

080088ee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bc80      	pop	{r7}
 80088fe:	4770      	bx	lr

08008900 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	bc80      	pop	{r7}
 8008910:	4770      	bx	lr
	...

08008914 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8008914:	b480      	push	{r7}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	6812      	ldr	r2, [r2, #0]
 800892c:	f023 0101 	bic.w	r1, r3, #1
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2b08      	cmp	r3, #8
 800893c:	d102      	bne.n	8008944 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800893e:	2340      	movs	r3, #64	; 0x40
 8008940:	617b      	str	r3, [r7, #20]
 8008942:	e001      	b.n	8008948 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008954:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800895a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008960:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008966:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800896c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008972:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8008978:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800897e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8008984:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800898a:	4313      	orrs	r3, r2
 800898c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	4313      	orrs	r3, r2
 8008996:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80089a2:	4b10      	ldr	r3, [pc, #64]	; (80089e4 <FSMC_NORSRAM_Init+0xd0>)
 80089a4:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80089ac:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80089b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	43db      	mvns	r3, r3
 80089c4:	ea02 0103 	and.w	r1, r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	4319      	orrs	r1, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	371c      	adds	r7, #28
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	0008fb7f 	.word	0x0008fb7f

080089e8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fe:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	011b      	lsls	r3, r3, #4
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	021b      	lsls	r3, r3, #8
 8008a14:	431a      	orrs	r2, r3
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	041b      	lsls	r3, r3, #16
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	051b      	lsls	r3, r3, #20
 8008a26:	431a      	orrs	r2, r3
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	3b02      	subs	r3, #2
 8008a2e:	061b      	lsls	r3, r3, #24
 8008a30:	431a      	orrs	r2, r3
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	3201      	adds	r2, #1
 8008a3c:	4319      	orrs	r1, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc80      	pop	{r7}
 8008a4e:	4770      	bx	lr

08008a50 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a64:	d11d      	bne.n	8008aa2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a6e:	4b13      	ldr	r3, [pc, #76]	; (8008abc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	6811      	ldr	r1, [r2, #0]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	6852      	ldr	r2, [r2, #4]
 8008a7a:	0112      	lsls	r2, r2, #4
 8008a7c:	4311      	orrs	r1, r2
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	6892      	ldr	r2, [r2, #8]
 8008a82:	0212      	lsls	r2, r2, #8
 8008a84:	4311      	orrs	r1, r2
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	6992      	ldr	r2, [r2, #24]
 8008a8a:	4311      	orrs	r1, r2
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	68d2      	ldr	r2, [r2, #12]
 8008a90:	0412      	lsls	r2, r2, #16
 8008a92:	430a      	orrs	r2, r1
 8008a94:	ea43 0102 	orr.w	r1, r3, r2
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008aa0:	e005      	b.n	8008aae <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bc80      	pop	{r7}
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	cff00000 	.word	0xcff00000

08008ac0 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8008acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d105      	bne.n	8008ae0 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 f858 	bl	8009b8c <VL53L1_data_init>
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 8008ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d103      	bne.n	8008af0 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008af0:	2300      	movs	r3, #0
 8008af2:	73bb      	strb	r3, [r7, #14]
 8008af4:	e012      	b.n	8008b1c <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 8008af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d112      	bne.n	8008b24 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2201      	movs	r2, #1
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fbcf 	bl	80092aa <VL53L1_SetLimitCheckEnable>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	73bb      	strb	r3, [r7, #14]
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d9e9      	bls.n	8008af6 <VL53L1_DataInit+0x36>
 8008b22:	e000      	b.n	8008b26 <VL53L1_DataInit+0x66>
		else
			break;
 8008b24:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2203      	movs	r2, #3
 8008b42:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8008b46:	2320      	movs	r3, #32
 8008b48:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	7bba      	ldrb	r2, [r7, #14]
 8008b4e:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8008b50:	2108      	movs	r1, #8
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f8f5 	bl	8008d42 <VL53L1_SetPresetMode>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2208      	movs	r2, #8
 8008b60:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 8008b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8008b7c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f005 f83b 	bl	800dbfc <VL53L1_poll_for_boot_completion>
 8008b86:	4603      	mov	r3, r0
 8008b88:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8008b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	603a      	str	r2, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8008bac:	4a2a      	ldr	r2, [pc, #168]	; (8008c58 <ComputeDevicePresetMode+0xc0>)
 8008bae:	f107 0310 	add.w	r3, r7, #16
 8008bb2:	6812      	ldr	r2, [r2, #0]
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	8019      	strh	r1, [r3, #0]
 8008bb8:	3302      	adds	r3, #2
 8008bba:	0c12      	lsrs	r2, r2, #16
 8008bbc:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8008bbe:	4a27      	ldr	r2, [pc, #156]	; (8008c5c <ComputeDevicePresetMode+0xc4>)
 8008bc0:	f107 030c 	add.w	r3, r7, #12
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	8019      	strh	r1, [r3, #0]
 8008bca:	3302      	adds	r3, #2
 8008bcc:	0c12      	lsrs	r2, r2, #16
 8008bce:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008bd0:	4a23      	ldr	r2, [pc, #140]	; (8008c60 <ComputeDevicePresetMode+0xc8>)
 8008bd2:	f107 0308 	add.w	r3, r7, #8
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	8019      	strh	r1, [r3, #0]
 8008bdc:	3302      	adds	r3, #2
 8008bde:	0c12      	lsrs	r2, r2, #16
 8008be0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2201      	movs	r2, #1
 8008be6:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8008be8:	79bb      	ldrb	r3, [r7, #6]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d002      	beq.n	8008bf4 <ComputeDevicePresetMode+0x5c>
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d003      	beq.n	8008bfa <ComputeDevicePresetMode+0x62>
 8008bf2:	e005      	b.n	8008c00 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	75bb      	strb	r3, [r7, #22]
		break;
 8008bf8:	e004      	b.n	8008c04 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	75bb      	strb	r3, [r7, #22]
		break;
 8008bfe:	e001      	b.n	8008c04 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8008c00:	2302      	movs	r3, #2
 8008c02:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8008c04:	79fb      	ldrb	r3, [r7, #7]
 8008c06:	2b08      	cmp	r3, #8
 8008c08:	d015      	beq.n	8008c36 <ComputeDevicePresetMode+0x9e>
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	dc1b      	bgt.n	8008c46 <ComputeDevicePresetMode+0xae>
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d009      	beq.n	8008c26 <ComputeDevicePresetMode+0x8e>
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d117      	bne.n	8008c46 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8008c16:	7dbb      	ldrb	r3, [r7, #22]
 8008c18:	3318      	adds	r3, #24
 8008c1a:	443b      	add	r3, r7
 8008c1c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	701a      	strb	r2, [r3, #0]
		break;
 8008c24:	e011      	b.n	8008c4a <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8008c26:	7dbb      	ldrb	r3, [r7, #22]
 8008c28:	3318      	adds	r3, #24
 8008c2a:	443b      	add	r3, r7
 8008c2c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	701a      	strb	r2, [r3, #0]
		break;
 8008c34:	e009      	b.n	8008c4a <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8008c36:	7dbb      	ldrb	r3, [r7, #22]
 8008c38:	3318      	adds	r3, #24
 8008c3a:	443b      	add	r3, r7
 8008c3c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	701a      	strb	r2, [r3, #0]
		break;
 8008c44:	e001      	b.n	8008c4a <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008c46:	23f8      	movs	r3, #248	; 0xf8
 8008c48:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8008c4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	371c      	adds	r7, #28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bc80      	pop	{r7}
 8008c56:	4770      	bx	lr
 8008c58:	080117fc 	.word	0x080117fc
 8008c5c:	08011800 	.word	0x08011800
 8008c60:	08011804 	.word	0x08011804

08008c64 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8008c64:	b5b0      	push	{r4, r5, r7, lr}
 8008c66:	b08e      	sub	sp, #56	; 0x38
 8008c68:	af04      	add	r7, sp, #16
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	607b      	str	r3, [r7, #4]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	72fb      	strb	r3, [r7, #11]
 8008c72:	4613      	mov	r3, r2
 8008c74:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008c76:	2300      	movs	r3, #0
 8008c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8008c8c:	7afb      	ldrb	r3, [r7, #11]
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d002      	beq.n	8008c98 <SetPresetMode+0x34>
 8008c92:	7afb      	ldrb	r3, [r7, #11]
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d103      	bne.n	8008ca0 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8008c98:	2340      	movs	r3, #64	; 0x40
 8008c9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008c9e:	e002      	b.n	8008ca6 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8008ca0:	2320      	movs	r3, #32
 8008ca2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8008ca6:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8008caa:	7ab9      	ldrb	r1, [r7, #10]
 8008cac:	7afb      	ldrb	r3, [r7, #11]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff ff72 	bl	8008b98 <ComputeDevicePresetMode>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8008cba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d112      	bne.n	8008ce8 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8008cc2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8008cc6:	f107 001c 	add.w	r0, r7, #28
 8008cca:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8008cce:	f107 0314 	add.w	r3, r7, #20
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	f107 0318 	add.w	r3, r7, #24
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	4603      	mov	r3, r0
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f001 fa11 	bl	800a104 <VL53L1_get_preset_mode_timing_cfg>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8008ce8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d112      	bne.n	8008d16 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8008cf0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8008cf4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8008cf6:	69fd      	ldr	r5, [r7, #28]
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	9102      	str	r1, [sp, #8]
 8008d00:	9201      	str	r2, [sp, #4]
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	462b      	mov	r3, r5
 8008d06:	4622      	mov	r2, r4
 8008d08:	4601      	mov	r1, r0
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f001 faa4 	bl	800a258 <VL53L1_set_preset_mode>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8008d16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d103      	bne.n	8008d26 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d24:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8008d26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d103      	bne.n	8008d36 <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	7afa      	ldrb	r2, [r7, #11]
 8008d32:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8008d36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3728      	adds	r7, #40	; 0x28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bdb0      	pop	{r4, r5, r7, pc}

08008d42 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8008d52:	2303      	movs	r3, #3
 8008d54:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f003 fd92 	bl	800c880 <VL53L1_low_power_auto_data_init>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 8008d60:	7bba      	ldrb	r2, [r7, #14]
 8008d62:	78f9      	ldrb	r1, [r7, #3]
 8008d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff ff7b 	bl	8008c64 <SetPresetMode>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8008d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d117      	bne.n	8008daa <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8008d7a:	78fb      	ldrb	r3, [r7, #3]
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	d005      	beq.n	8008d8c <VL53L1_SetPresetMode+0x4a>
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d002      	beq.n	8008d8c <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d107      	bne.n	8008d9c <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8008d8c:	f24a 0128 	movw	r1, #41000	; 0xa028
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f891 	bl	8008eb8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73fb      	strb	r3, [r7, #15]
 8008d9a:	e006      	b.n	8008daa <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8008d9c:	f248 2135 	movw	r1, #33333	; 0x8235
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f889 	bl	8008eb8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8008daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8008db2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa0a 	bl	80091d0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8008dee:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d008      	beq.n	8008e08 <VL53L1_SetDistanceMode+0x3c>
 8008df6:	78fb      	ldrb	r3, [r7, #3]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d005      	beq.n	8008e08 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d002      	beq.n	8008e08 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8008e02:	f06f 0303 	mvn.w	r3, #3
 8008e06:	e052      	b.n	8008eae <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 8008e08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d107      	bne.n	8008e20 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8008e10:	f107 0308 	add.w	r3, r7, #8
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f001 f91e 	bl	800a058 <VL53L1_get_user_zone>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8008e26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8008e2e:	f107 0314 	add.w	r3, r7, #20
 8008e32:	f107 0210 	add.w	r2, r7, #16
 8008e36:	f107 010c 	add.w	r1, r7, #12
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f001 f848 	bl	8009ed0 <VL53L1_get_timeouts_us>
 8008e40:	4603      	mov	r3, r0
 8008e42:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8008e44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d107      	bne.n	8008e5c <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 8008e4c:	78fa      	ldrb	r2, [r7, #3]
 8008e4e:	7fb9      	ldrb	r1, [r7, #30]
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7ff ff06 	bl	8008c64 <SetPresetMode>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8008e5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d103      	bne.n	8008e6c <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8008e6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10e      	bne.n	8008e92 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8008e74:	68f9      	ldr	r1, [r7, #12]
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fff0 	bl	8009e60 <VL53L1_set_timeouts_us>
 8008e80:	4603      	mov	r3, r0
 8008e82:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8008e84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d102      	bne.n	8008e92 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8008e92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d107      	bne.n	8008eaa <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8008e9a:	f107 0308 	add.w	r3, r7, #8
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 f8b6 	bl	800a012 <VL53L1_set_user_zone>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8008eaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3720      	adds	r7, #32
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08c      	sub	sp, #48	; 0x30
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8008edc:	4b64      	ldr	r3, [pc, #400]	; (8009070 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 8008ede:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	4a64      	ldr	r2, [pc, #400]	; (8009074 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d902      	bls.n	8008eee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008ee8:	23fc      	movs	r3, #252	; 0xfc
 8008eea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8008eee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d109      	bne.n	8008f0a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008ef6:	f107 031a 	add.w	r3, r7, #26
 8008efa:	461a      	mov	r2, r3
 8008efc:	2105      	movs	r1, #5
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fa8c 	bl	800941c <VL53L1_GetSequenceStepEnable>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8008f0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d109      	bne.n	8008f26 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008f12:	f107 0319 	add.w	r3, r7, #25
 8008f16:	461a      	mov	r2, r3
 8008f18:	2106      	movs	r1, #6
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fa7e 	bl	800941c <VL53L1_GetSequenceStepEnable>
 8008f20:	4603      	mov	r3, r0
 8008f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8008f26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10b      	bne.n	8008f46 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8008f2e:	f107 0314 	add.w	r3, r7, #20
 8008f32:	f107 0210 	add.w	r2, r7, #16
 8008f36:	f107 010c 	add.w	r1, r7, #12
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 ffc8 	bl	8009ed0 <VL53L1_get_timeouts_us>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8008f46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f040 8081 	bne.w	8009052 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8008f56:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8008f60:	7efb      	ldrb	r3, [r7, #27]
 8008f62:	2b08      	cmp	r3, #8
 8008f64:	d026      	beq.n	8008fb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 8008f66:	2b08      	cmp	r3, #8
 8008f68:	dc43      	bgt.n	8008ff2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d00f      	beq.n	8008f8e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d13f      	bne.n	8008ff2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008f72:	7ebb      	ldrb	r3, [r7, #26]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d002      	beq.n	8008f7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 8008f78:	7e7b      	ldrb	r3, [r7, #25]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d103      	bne.n	8008f86 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 8008f7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f82:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8008f84:	e038      	b.n	8008ff8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 8008f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f8a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008f8c:	e034      	b.n	8008ff8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	005b      	lsls	r3, r3, #1
 8008f92:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008f94:	7ebb      	ldrb	r3, [r7, #26]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d002      	beq.n	8008fa0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8008f9a:	7e7b      	ldrb	r3, [r7, #25]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d103      	bne.n	8008fa8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8008fa0:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8008fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fa6:	e002      	b.n	8008fae <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 8008fa8:	f245 4360 	movw	r3, #21600	; 0x5460
 8008fac:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8008fae:	2302      	movs	r3, #2
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8008fb2:	e021      	b.n	8008ff8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	005b      	lsls	r3, r3, #1
 8008fb8:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8008fba:	23f5      	movs	r3, #245	; 0xf5
 8008fbc:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f248 0136 	movw	r1, #32822	; 0x8036
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f001 ffef 	bl	800afac <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	dd07      	ble.n	8008fe4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	22f5      	movs	r2, #245	; 0xf5
 8008fd8:	fb02 f303 	mul.w	r3, r2, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8008fea:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8008fec:	2302      	movs	r3, #2
 8008fee:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8008ff0:	e002      	b.n	8008ff8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008ff2:	23f8      	movs	r3, #248	; 0xf8
 8008ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d803      	bhi.n	8009008 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8009000:	23fc      	movs	r3, #252	; 0xfc
 8009002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009006:	e003      	b.n	8009010 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900c:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800900e:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8009010:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009014:	2b00      	cmp	r3, #0
 8009016:	d11c      	bne.n	8009052 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	429a      	cmp	r2, r3
 800901e:	d203      	bcs.n	8009028 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8009020:	23fc      	movs	r3, #252	; 0xfc
 8009022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009026:	e00d      	b.n	8009044 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009030:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8009032:	68f9      	ldr	r1, [r7, #12]
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 ff11 	bl	8009e60 <VL53L1_set_timeouts_us>
 800903e:	4603      	mov	r3, r0
 8009040:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8009044:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009048:	2b00      	cmp	r3, #0
 800904a:	d102      	bne.n	8009052 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8009052:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009056:	2b00      	cmp	r3, #0
 8009058:	d103      	bne.n	8009062 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009062:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009066:	4618      	mov	r0, r3
 8009068:	3730      	adds	r7, #48	; 0x30
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	00086470 	.word	0x00086470
 8009074:	00989680 	.word	0x00989680

08009078 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08c      	sub	sp, #48	; 0x30
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009082:	2300      	movs	r3, #0
 8009084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8009094:	2300      	movs	r3, #0
 8009096:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8009098:	2300      	movs	r3, #0
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2200      	movs	r2, #0
 80090a4:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 80090a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d109      	bne.n	80090c2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80090ae:	f107 031b 	add.w	r3, r7, #27
 80090b2:	461a      	mov	r2, r3
 80090b4:	2105      	movs	r1, #5
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f9b0 	bl	800941c <VL53L1_GetSequenceStepEnable>
 80090bc:	4603      	mov	r3, r0
 80090be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80090c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d109      	bne.n	80090de <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80090ca:	f107 031a 	add.w	r3, r7, #26
 80090ce:	461a      	mov	r2, r3
 80090d0:	2106      	movs	r1, #6
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f9a2 	bl	800941c <VL53L1_GetSequenceStepEnable>
 80090d8:	4603      	mov	r3, r0
 80090da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80090de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10b      	bne.n	80090fe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 80090e6:	f107 0310 	add.w	r3, r7, #16
 80090ea:	f107 0214 	add.w	r2, r7, #20
 80090ee:	f107 010c 	add.w	r1, r7, #12
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 feec 	bl	8009ed0 <VL53L1_get_timeouts_us>
 80090f8:	4603      	mov	r3, r0
 80090fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 80090fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009102:	2b00      	cmp	r3, #0
 8009104:	d156      	bne.n	80091b4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800910c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8009110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009114:	2b08      	cmp	r3, #8
 8009116:	d02a      	beq.n	800916e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 8009118:	2b08      	cmp	r3, #8
 800911a:	dc47      	bgt.n	80091ac <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 800911c:	2b03      	cmp	r3, #3
 800911e:	d012      	beq.n	8009146 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8009120:	2b04      	cmp	r3, #4
 8009122:	d143      	bne.n	80091ac <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8009124:	7efb      	ldrb	r3, [r7, #27]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d002      	beq.n	8009130 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800912a:	7ebb      	ldrb	r3, [r7, #26]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d105      	bne.n	800913c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009136:	3308      	adds	r3, #8
 8009138:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800913a:	e03c      	b.n	80091b6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8009142:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009144:	e037      	b.n	80091b6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8009146:	7efb      	ldrb	r3, [r7, #27]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d002      	beq.n	8009152 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 800914c:	7ebb      	ldrb	r3, [r7, #26]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d106      	bne.n	8009160 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8009158:	3334      	adds	r3, #52	; 0x34
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800915e:	e02a      	b.n	80091b6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8009166:	3330      	adds	r3, #48	; 0x30
 8009168:	005b      	lsls	r3, r3, #1
 800916a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800916c:	e023      	b.n	80091b6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800916e:	23f5      	movs	r3, #245	; 0xf5
 8009170:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8009172:	f107 0308 	add.w	r3, r7, #8
 8009176:	461a      	mov	r2, r3
 8009178:	f248 0136 	movw	r1, #32822	; 0x8036
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 ff15 	bl	800afac <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	dd07      	ble.n	8009198 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	22f5      	movs	r2, #245	; 0xf5
 800918c:	fb02 f303 	mul.w	r3, r2, r3
 8009190:	461a      	mov	r2, r3
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	4413      	add	r3, r2
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800919e:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	69fa      	ldr	r2, [r7, #28]
 80091a6:	4413      	add	r3, r2
 80091a8:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80091aa:	e004      	b.n	80091b6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80091ac:	23f8      	movs	r3, #248	; 0xf8
 80091ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80091b2:	e000      	b.n	80091b6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 80091b4:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 80091b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d102      	bne.n	80091c4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091c2:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80091c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3730      	adds	r7, #48	; 0x30
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	019b      	lsls	r3, r3, #6
 80091e6:	4a09      	ldr	r2, [pc, #36]	; (800920c <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 80091e8:	fba2 2303 	umull	r2, r3, r2, r3
 80091ec:	099b      	lsrs	r3, r3, #6
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	4413      	add	r3, r2
 80091f2:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80091f4:	68b9      	ldr	r1, [r7, #8]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fde5 	bl	8009dc6 <VL53L1_set_inter_measurement_period_ms>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8009200:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	10624dd3 	.word	0x10624dd3

08009210 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800921a:	2300      	movs	r3, #0
 800921c:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 800921e:	f107 0308 	add.w	r3, r7, #8
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fdf6 	bl	8009e16 <VL53L1_get_inter_measurement_period_ms>
 800922a:	4603      	mov	r3, r0
 800922c:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	019b      	lsls	r3, r3, #6
 8009234:	4907      	ldr	r1, [pc, #28]	; (8009254 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8009236:	fba1 1303 	umull	r1, r3, r1, r3
 800923a:	099b      	lsrs	r3, r3, #6
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8009246:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	10624dd3 	.word	0x10624dd3

08009258 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	460b      	mov	r3, r1
 8009262:	607a      	str	r2, [r7, #4]
 8009264:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009266:	2300      	movs	r3, #0
 8009268:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800926a:	897b      	ldrh	r3, [r7, #10]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d002      	beq.n	8009276 <SetLimitValue+0x1e>
 8009270:	2b01      	cmp	r3, #1
 8009272:	d009      	beq.n	8009288 <SetLimitValue+0x30>
 8009274:	e011      	b.n	800929a <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	0b9b      	lsrs	r3, r3, #14
 800927a:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800927c:	8abb      	ldrh	r3, [r7, #20]
 800927e:	4619      	mov	r1, r3
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f001 f974 	bl	800a56e <VL53L1_set_lite_sigma_threshold>
		break;
 8009286:	e00a      	b.n	800929e <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	0a5b      	lsrs	r3, r3, #9
 800928c:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800928e:	8abb      	ldrh	r3, [r7, #20]
 8009290:	4619      	mov	r1, r3
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f001 f995 	bl	800a5c2 <VL53L1_set_lite_min_count_rate>
		break;
 8009298:	e001      	b.n	800929e <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800929a:	23fc      	movs	r3, #252	; 0xfc
 800929c:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800929e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3718      	adds	r7, #24
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	460b      	mov	r3, r1
 80092b4:	807b      	strh	r3, [r7, #2]
 80092b6:	4613      	mov	r3, r2
 80092b8:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80092c2:	887b      	ldrh	r3, [r7, #2]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d902      	bls.n	80092ce <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80092c8:	23fc      	movs	r3, #252	; 0xfc
 80092ca:	73fb      	strb	r3, [r7, #15]
 80092cc:	e014      	b.n	80092f8 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 80092ce:	787b      	ldrb	r3, [r7, #1]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d102      	bne.n	80092da <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60bb      	str	r3, [r7, #8]
 80092d8:	e006      	b.n	80092e8 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80092da:	887b      	ldrh	r3, [r7, #2]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	33e0      	adds	r3, #224	; 0xe0
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80092e8:	887b      	ldrh	r3, [r7, #2]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7ff ffb2 	bl	8009258 <SetLimitValue>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 80092f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10c      	bne.n	800931a <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8009300:	787b      	ldrb	r3, [r7, #1]
 8009302:	2b00      	cmp	r3, #0
 8009304:	bf14      	ite	ne
 8009306:	2301      	movne	r3, #1
 8009308:	2300      	moveq	r3, #0
 800930a:	b2da      	uxtb	r2, r3
 800930c:	887b      	ldrh	r3, [r7, #2]
 800930e:	4611      	mov	r1, r2
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	4413      	add	r3, r2
 8009314:	460a      	mov	r2, r1
 8009316:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800931a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009326:	b480      	push	{r7}
 8009328:	b087      	sub	sp, #28
 800932a:	af00      	add	r7, sp, #0
 800932c:	60f8      	str	r0, [r7, #12]
 800932e:	460b      	mov	r3, r1
 8009330:	607a      	str	r2, [r7, #4]
 8009332:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009334:	2300      	movs	r3, #0
 8009336:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009338:	897b      	ldrh	r3, [r7, #10]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d905      	bls.n	800934a <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800933e:	23fc      	movs	r3, #252	; 0xfc
 8009340:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	701a      	strb	r2, [r3, #0]
 8009348:	e008      	b.n	800935c <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800934a:	897b      	ldrh	r3, [r7, #10]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4413      	add	r3, r2
 8009350:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8009354:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	7dba      	ldrb	r2, [r7, #22]
 800935a:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800935c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009360:	4618      	mov	r0, r3
 8009362:	371c      	adds	r7, #28
 8009364:	46bd      	mov	sp, r7
 8009366:	bc80      	pop	{r7}
 8009368:	4770      	bx	lr

0800936a <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b088      	sub	sp, #32
 800936e:	af00      	add	r7, sp, #0
 8009370:	60f8      	str	r0, [r7, #12]
 8009372:	460b      	mov	r3, r1
 8009374:	607a      	str	r2, [r7, #4]
 8009376:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009378:	2300      	movs	r3, #0
 800937a:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009380:	897b      	ldrh	r3, [r7, #10]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <VL53L1_GetLimitCheckValue+0x22>
 8009386:	2b01      	cmp	r3, #1
 8009388:	d00c      	beq.n	80093a4 <VL53L1_GetLimitCheckValue+0x3a>
 800938a:	e017      	b.n	80093bc <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800938c:	f107 0314 	add.w	r3, r7, #20
 8009390:	4619      	mov	r1, r3
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f001 f8d6 	bl	800a544 <VL53L1_get_lite_sigma_threshold>
 8009398:	4603      	mov	r3, r0
 800939a:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800939c:	8abb      	ldrh	r3, [r7, #20]
 800939e:	039b      	lsls	r3, r3, #14
 80093a0:	61bb      	str	r3, [r7, #24]
		break;
 80093a2:	e00d      	b.n	80093c0 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80093a4:	f107 0316 	add.w	r3, r7, #22
 80093a8:	4619      	mov	r1, r3
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f001 f8f4 	bl	800a598 <VL53L1_get_lite_min_count_rate>
 80093b0:	4603      	mov	r3, r0
 80093b2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80093b4:	8afb      	ldrh	r3, [r7, #22]
 80093b6:	025b      	lsls	r3, r3, #9
 80093b8:	61bb      	str	r3, [r7, #24]
		break;
 80093ba:	e001      	b.n	80093c0 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80093bc:	23fc      	movs	r3, #252	; 0xfc
 80093be:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80093c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d123      	bne.n	8009410 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d110      	bne.n	80093f0 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80093ce:	897b      	ldrh	r3, [r7, #10]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	33e0      	adds	r3, #224	; 0xe0
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80093e2:	897b      	ldrh	r3, [r7, #10]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	4413      	add	r3, r2
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 80093ee:	e00f      	b.n	8009410 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80093f6:	897b      	ldrh	r3, [r7, #10]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	33e0      	adds	r3, #224	; 0xe0
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8009404:	897b      	ldrh	r3, [r7, #10]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	4413      	add	r3, r2
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8009410:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009414:	4618      	mov	r0, r3
 8009416:	3720      	adds	r7, #32
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	460b      	mov	r3, r1
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800942a:	2300      	movs	r3, #0
 800942c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	4619      	mov	r1, r3
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 fdb6 	bl	8009fa6 <VL53L1_get_sequence_config_bit>
 800943a:	4603      	mov	r3, r0
 800943c:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800943e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009454:	2300      	movs	r3, #0
 8009456:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	789b      	ldrb	r3, [r3, #2]
 800945c:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800945e:	7dbb      	ldrb	r3, [r7, #22]
 8009460:	2b40      	cmp	r3, #64	; 0x40
 8009462:	d002      	beq.n	800946a <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fa69 	bl	800993c <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8009470:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 8009472:	7d7b      	ldrb	r3, [r7, #21]
 8009474:	2b63      	cmp	r3, #99	; 0x63
 8009476:	dc12      	bgt.n	800949e <VL53L1_StartMeasurement+0x52>
 8009478:	2b62      	cmp	r3, #98	; 0x62
 800947a:	da0d      	bge.n	8009498 <VL53L1_StartMeasurement+0x4c>
 800947c:	2b05      	cmp	r3, #5
 800947e:	dc0e      	bgt.n	800949e <VL53L1_StartMeasurement+0x52>
 8009480:	2b04      	cmp	r3, #4
 8009482:	da09      	bge.n	8009498 <VL53L1_StartMeasurement+0x4c>
 8009484:	2b02      	cmp	r3, #2
 8009486:	dc02      	bgt.n	800948e <VL53L1_StartMeasurement+0x42>
 8009488:	2b00      	cmp	r3, #0
 800948a:	da05      	bge.n	8009498 <VL53L1_StartMeasurement+0x4c>
 800948c:	e007      	b.n	800949e <VL53L1_StartMeasurement+0x52>
 800948e:	2b03      	cmp	r3, #3
 8009490:	d105      	bne.n	800949e <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8009492:	2300      	movs	r3, #0
 8009494:	75fb      	strb	r3, [r7, #23]
		break;
 8009496:	e004      	b.n	80094a2 <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8009498:	23f2      	movs	r3, #242	; 0xf2
 800949a:	75fb      	strb	r3, [r7, #23]
		break;
 800949c:	e001      	b.n	80094a2 <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800949e:	23fd      	movs	r3, #253	; 0xfd
 80094a0:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 80094a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d11f      	bne.n	80094ea <VL53L1_StartMeasurement+0x9e>
 80094aa:	7dbb      	ldrb	r3, [r7, #22]
 80094ac:	2b40      	cmp	r3, #64	; 0x40
 80094ae:	d11c      	bne.n	80094ea <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80094b0:	f107 0310 	add.w	r3, r7, #16
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7ff fdde 	bl	8009078 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80094bc:	4603      	mov	r3, r0
 80094be:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	4a17      	ldr	r2, [pc, #92]	; (8009520 <VL53L1_StartMeasurement+0xd4>)
 80094c4:	fba2 2303 	umull	r2, r3, r2, r3
 80094c8:	099b      	lsrs	r3, r3, #6
 80094ca:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80094cc:	f107 030c 	add.w	r3, r7, #12
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff fe9c 	bl	8009210 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80094d8:	4603      	mov	r3, r0
 80094da:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	1d1a      	adds	r2, r3, #4
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d901      	bls.n	80094ea <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80094e6:	23fc      	movs	r3, #252	; 0xfc
 80094e8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 80094ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d107      	bne.n	8009502 <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 80094f2:	7dbb      	ldrb	r3, [r7, #22]
 80094f4:	2206      	movs	r2, #6
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 f897 	bl	800a62c <VL53L1_init_and_start_range>
 80094fe:	4603      	mov	r3, r0
 8009500:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8009502:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d103      	bne.n	8009512 <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2204      	movs	r2, #4
 800950e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8009512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	10624dd3 	.word	0x10624dd3

08009524 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	789b      	ldrb	r3, [r3, #2]
 8009534:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 fc04 	bl	800ad48 <VL53L1_clear_interrupt_and_enable_next_range>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8009544:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009558:	2300      	movs	r3, #0
 800955a:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 800955c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f004 fb77 	bl	800dc54 <VL53L1_poll_for_range_completion>
 8009566:	4603      	mov	r3, r0
 8009568:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800956a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
	...

08009578 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8009578:	b480      	push	{r7}
 800957a:	b08d      	sub	sp, #52	; 0x34
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	603a      	str	r2, [r7, #0]
 8009582:	71fb      	strb	r3, [r7, #7]
 8009584:	460b      	mov	r3, r1
 8009586:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8009588:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800958c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800958e:	231e      	movs	r3, #30
 8009590:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8009592:	4b32      	ldr	r3, [pc, #200]	; (800965c <ComputeRQL+0xe4>)
 8009594:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 8009596:	4b32      	ldr	r3, [pc, #200]	; (8009660 <ComputeRQL+0xe8>)
 8009598:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800959a:	f641 139a 	movw	r3, #6554	; 0x199a
 800959e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 80095a0:	79fb      	ldrb	r3, [r7, #7]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d103      	bne.n	80095ae <ComputeRQL+0x36>
		returnvalue = 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095ac:	e04f      	b.n	800964e <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 80095ae:	79bb      	ldrb	r3, [r7, #6]
 80095b0:	2b07      	cmp	r3, #7
 80095b2:	d103      	bne.n	80095bc <ComputeRQL+0x44>
		returnvalue = 50;
 80095b4:	2332      	movs	r3, #50	; 0x32
 80095b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095ba:	e048      	b.n	800964e <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80095c2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80095c6:	429a      	cmp	r2, r3
 80095c8:	dd03      	ble.n	80095d2 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 80095ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095cc:	041b      	lsls	r3, r3, #16
 80095ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095d0:	e007      	b.n	80095e2 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80095d8:	461a      	mov	r2, r3
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	fb02 f303 	mul.w	r3, r2, r3
 80095e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 80095e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d020      	beq.n	800962a <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80095ec:	461a      	mov	r2, r3
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	fb02 f303 	mul.w	r3, r2, r3
 80095f4:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80095f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f8:	085b      	lsrs	r3, r3, #1
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	4413      	add	r3, r2
 80095fe:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	fbb2 f3f3 	udiv	r3, r2, r3
 8009608:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	041b      	lsls	r3, r3, #16
 800960e:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	429a      	cmp	r2, r3
 8009616:	d804      	bhi.n	8009622 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8009618:	69fa      	ldr	r2, [r7, #28]
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009620:	e006      	b.n	8009630 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8009622:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8009626:	62bb      	str	r3, [r7, #40]	; 0x28
 8009628:	e002      	b.n	8009630 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800962a:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800962e:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	0c1b      	lsrs	r3, r3, #16
 8009634:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8009636:	7bfb      	ldrb	r3, [r7, #15]
 8009638:	2b32      	cmp	r3, #50	; 0x32
 800963a:	d905      	bls.n	8009648 <ComputeRQL+0xd0>
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	2b64      	cmp	r3, #100	; 0x64
 8009640:	bf28      	it	cs
 8009642:	2364      	movcs	r3, #100	; 0x64
 8009644:	b2db      	uxtb	r3, r3
 8009646:	e000      	b.n	800964a <ComputeRQL+0xd2>
 8009648:	2332      	movs	r3, #50	; 0x32
 800964a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800964e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009652:	4618      	mov	r0, r3
 8009654:	3734      	adds	r7, #52	; 0x34
 8009656:	46bd      	mov	sp, r7
 8009658:	bc80      	pop	{r7}
 800965a:	4770      	bx	lr
 800965c:	0075b333 	.word	0x0075b333
 8009660:	0030cccd 	.word	0x0030cccd

08009664 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	4603      	mov	r3, r0
 800966c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800966e:	79fb      	ldrb	r3, [r7, #7]
 8009670:	3b04      	subs	r3, #4
 8009672:	2b0f      	cmp	r3, #15
 8009674:	d83d      	bhi.n	80096f2 <ConvertStatusLite+0x8e>
 8009676:	a201      	add	r2, pc, #4	; (adr r2, 800967c <ConvertStatusLite+0x18>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	080096cf 	.word	0x080096cf
 8009680:	080096c9 	.word	0x080096c9
 8009684:	080096d5 	.word	0x080096d5
 8009688:	080096db 	.word	0x080096db
 800968c:	080096e7 	.word	0x080096e7
 8009690:	080096ed 	.word	0x080096ed
 8009694:	080096f3 	.word	0x080096f3
 8009698:	080096f3 	.word	0x080096f3
 800969c:	080096e1 	.word	0x080096e1
 80096a0:	080096f3 	.word	0x080096f3
 80096a4:	080096f3 	.word	0x080096f3
 80096a8:	080096f3 	.word	0x080096f3
 80096ac:	080096f3 	.word	0x080096f3
 80096b0:	080096f3 	.word	0x080096f3
 80096b4:	080096bd 	.word	0x080096bd
 80096b8:	080096c3 	.word	0x080096c3
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80096bc:	230a      	movs	r3, #10
 80096be:	73fb      	strb	r3, [r7, #15]
		break;
 80096c0:	e019      	b.n	80096f6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80096c2:	2306      	movs	r3, #6
 80096c4:	73fb      	strb	r3, [r7, #15]
		break;
 80096c6:	e016      	b.n	80096f6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80096c8:	2304      	movs	r3, #4
 80096ca:	73fb      	strb	r3, [r7, #15]
		break;
 80096cc:	e013      	b.n	80096f6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80096ce:	2302      	movs	r3, #2
 80096d0:	73fb      	strb	r3, [r7, #15]
		break;
 80096d2:	e010      	b.n	80096f6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80096d4:	2301      	movs	r3, #1
 80096d6:	73fb      	strb	r3, [r7, #15]
		break;
 80096d8:	e00d      	b.n	80096f6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80096da:	2307      	movs	r3, #7
 80096dc:	73fb      	strb	r3, [r7, #15]
		break;
 80096de:	e00a      	b.n	80096f6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80096e0:	2309      	movs	r3, #9
 80096e2:	73fb      	strb	r3, [r7, #15]
		break;
 80096e4:	e007      	b.n	80096f6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80096e6:	2303      	movs	r3, #3
 80096e8:	73fb      	strb	r3, [r7, #15]
		break;
 80096ea:	e004      	b.n	80096f6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73fb      	strb	r3, [r7, #15]
		break;
 80096f0:	e001      	b.n	80096f6 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80096f2:	23ff      	movs	r3, #255	; 0xff
 80096f4:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bc80      	pop	{r7}
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop

08009704 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b08c      	sub	sp, #48	; 0x30
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	607b      	str	r3, [r7, #4]
 800970e:	460b      	mov	r3, r1
 8009710:	72fb      	strb	r3, [r7, #11]
 8009712:	4613      	mov	r3, r2
 8009714:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009716:	2300      	movs	r3, #0
 8009718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800972a:	f003 031f 	and.w	r3, r3, #31
 800972e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8009732:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8009736:	7afb      	ldrb	r3, [r7, #11]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	4618      	mov	r0, r3
 800973c:	f7ff ff1c 	bl	8009578 <ComputeRQL>
 8009740:	4603      	mov	r3, r0
 8009742:	461a      	mov	r2, r3
 8009744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009746:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800974c:	025b      	lsls	r3, r3, #9
 800974e:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8009750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009754:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800975a:	025b      	lsls	r3, r3, #9
 800975c:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009762:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8009770:	025b      	lsls	r3, r3, #9
 8009772:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8009774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009776:	6a3a      	ldr	r2, [r7, #32]
 8009778:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	2200      	movs	r2, #0
 8009788:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800978a:	7abb      	ldrb	r3, [r7, #10]
 800978c:	2b11      	cmp	r3, #17
 800978e:	d009      	beq.n	80097a4 <SetSimpleData+0xa0>
 8009790:	2b11      	cmp	r3, #17
 8009792:	dc0f      	bgt.n	80097b4 <SetSimpleData+0xb0>
 8009794:	2b03      	cmp	r3, #3
 8009796:	dc02      	bgt.n	800979e <SetSimpleData+0x9a>
 8009798:	2b00      	cmp	r3, #0
 800979a:	dc03      	bgt.n	80097a4 <SetSimpleData+0xa0>
 800979c:	e00a      	b.n	80097b4 <SetSimpleData+0xb0>
 800979e:	2b0d      	cmp	r3, #13
 80097a0:	d004      	beq.n	80097ac <SetSimpleData+0xa8>
 80097a2:	e007      	b.n	80097b4 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	2205      	movs	r2, #5
 80097a8:	76da      	strb	r2, [r3, #27]
		break;
 80097aa:	e006      	b.n	80097ba <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	220d      	movs	r2, #13
 80097b0:	76da      	strb	r2, [r3, #27]
		break;
 80097b2:	e002      	b.n	80097ba <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	2200      	movs	r2, #0
 80097b8:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80097ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097bc:	7edb      	ldrb	r3, [r3, #27]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d108      	bne.n	80097d4 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 80097c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff ff4c 	bl	8009664 <ConvertStatusLite>
 80097cc:	4603      	mov	r3, r0
 80097ce:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80097d8:	025b      	lsls	r3, r3, #9
 80097da:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a3a      	ldr	r2, [r7, #32]
 80097e0:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097e8:	025b      	lsls	r3, r3, #9
 80097ea:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6a3a      	ldr	r2, [r7, #32]
 80097f0:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 80097f4:	f107 0314 	add.w	r3, r7, #20
 80097f8:	461a      	mov	r2, r3
 80097fa:	2100      	movs	r1, #0
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f7ff fdb4 	bl	800936a <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8009802:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009806:	2b06      	cmp	r3, #6
 8009808:	bf0c      	ite	eq
 800980a:	2301      	moveq	r3, #1
 800980c:	2300      	movne	r3, #0
 800980e:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8009810:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8009812:	f107 0319 	add.w	r3, r7, #25
 8009816:	461a      	mov	r2, r3
 8009818:	2100      	movs	r1, #0
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7ff fd83 	bl	8009326 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8009820:	7e7b      	ldrb	r3, [r7, #25]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d104      	bne.n	8009830 <SetSimpleData+0x12c>
 8009826:	7ffb      	ldrb	r3, [r7, #31]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d101      	bne.n	8009830 <SetSimpleData+0x12c>
 800982c:	2301      	movs	r3, #1
 800982e:	e000      	b.n	8009832 <SetSimpleData+0x12e>
 8009830:	2300      	movs	r3, #0
 8009832:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	7fba      	ldrb	r2, [r7, #30]
 8009838:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800983c:	f107 0314 	add.w	r3, r7, #20
 8009840:	461a      	mov	r2, r3
 8009842:	2101      	movs	r1, #1
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f7ff fd90 	bl	800936a <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800984a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800984e:	2b04      	cmp	r3, #4
 8009850:	bf0c      	ite	eq
 8009852:	2301      	moveq	r3, #1
 8009854:	2300      	movne	r3, #0
 8009856:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8009858:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800985a:	f107 0319 	add.w	r3, r7, #25
 800985e:	461a      	mov	r2, r3
 8009860:	2101      	movs	r1, #1
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f7ff fd5f 	bl	8009326 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8009868:	7e7b      	ldrb	r3, [r7, #25]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d104      	bne.n	8009878 <SetSimpleData+0x174>
 800986e:	7f7b      	ldrb	r3, [r7, #29]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d101      	bne.n	8009878 <SetSimpleData+0x174>
 8009874:	2301      	movs	r3, #1
 8009876:	e000      	b.n	800987a <SetSimpleData+0x176>
 8009878:	2300      	movs	r3, #0
 800987a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	7fba      	ldrb	r2, [r7, #30]
 8009880:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8009884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009886:	8b1b      	ldrh	r3, [r3, #24]
 8009888:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800988a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988c:	7edb      	ldrb	r3, [r3, #27]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d110      	bne.n	80098b4 <SetSimpleData+0x1b0>
 8009892:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009896:	2b00      	cmp	r3, #0
 8009898:	da0c      	bge.n	80098b4 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800989a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800989e:	4b08      	ldr	r3, [pc, #32]	; (80098c0 <SetSimpleData+0x1bc>)
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	da03      	bge.n	80098ae <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 80098a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a8:	220e      	movs	r2, #14
 80098aa:	76da      	strb	r2, [r3, #27]
 80098ac:	e002      	b.n	80098b4 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80098ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b0:	2200      	movs	r2, #0
 80098b2:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 80098b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3730      	adds	r7, #48	; 0x30
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20000040 	.word	0x20000040

080098c4 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b0a8      	sub	sp, #160	; 0xa0
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80098ce:	2300      	movs	r3, #0
 80098d0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 80098d4:	f107 0308 	add.w	r3, r7, #8
 80098d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 80098dc:	221c      	movs	r2, #28
 80098de:	21ff      	movs	r1, #255	; 0xff
 80098e0:	6838      	ldr	r0, [r7, #0]
 80098e2:	f004 ffcf 	bl	800e884 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 80098e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80098ea:	2102      	movs	r1, #2
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f001 f9bb 	bl	800ac68 <VL53L1_get_device_results>
 80098f2:	4603      	mov	r3, r0
 80098f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 80098f8:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d117      	bne.n	8009930 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8009900:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009904:	789a      	ldrb	r2, [r3, #2]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800990a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800990e:	3304      	adds	r3, #4
 8009910:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 8009914:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009918:	78da      	ldrb	r2, [r3, #3]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009922:	2101      	movs	r1, #1
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7ff feed 	bl	8009704 <SetSimpleData>
 800992a:	4603      	mov	r3, r0
 800992c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009930:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8009934:	4618      	mov	r0, r3
 8009936:	3798      	adds	r7, #152	; 0x98
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b0c6      	sub	sp, #280	; 0x118
 8009940:	af00      	add	r7, sp, #0
 8009942:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009946:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800994a:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800994c:	2300      	movs	r3, #0
 800994e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8009958:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10b      	bne.n	8009978 <VL53L1_LoadPatch+0x3c>
		status = VL53L1_WrByte(
 8009960:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009964:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009968:	2200      	movs	r2, #0
 800996a:	2185      	movs	r1, #133	; 0x85
 800996c:	6818      	ldr	r0, [r3, #0]
 800996e:	f004 fa4b 	bl	800de08 <VL53L1_WrByte>
 8009972:	4603      	mov	r3, r0
 8009974:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 8009978:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800997c:	2b00      	cmp	r3, #0
 800997e:	d106      	bne.n	800998e <VL53L1_LoadPatch+0x52>
		VL53L1_enable_powerforce(Dev);
 8009980:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009984:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009988:	6818      	ldr	r0, [r3, #0]
 800998a:	f002 fd44 	bl	800c416 <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800998e:	4b7e      	ldr	r3, [pc, #504]	; (8009b88 <VL53L1_LoadPatch+0x24c>)
 8009990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009992:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	switch(patch_tuning) {
 8009996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800999a:	2b03      	cmp	r3, #3
 800999c:	d81a      	bhi.n	80099d4 <VL53L1_LoadPatch+0x98>
 800999e:	a201      	add	r2, pc, #4	; (adr r2, 80099a4 <VL53L1_LoadPatch+0x68>)
 80099a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a4:	080099b5 	.word	0x080099b5
 80099a8:	080099bd 	.word	0x080099bd
 80099ac:	080099c5 	.word	0x080099c5
 80099b0:	080099cd 	.word	0x080099cd
	case 0:
		patch_power = 0x00;
 80099b4:	2300      	movs	r3, #0
 80099b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80099ba:	e00e      	b.n	80099da <VL53L1_LoadPatch+0x9e>
	case 1:
		patch_power = 0x10;
 80099bc:	2310      	movs	r3, #16
 80099be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80099c2:	e00a      	b.n	80099da <VL53L1_LoadPatch+0x9e>
	case 2:
		patch_power = 0x20;
 80099c4:	2320      	movs	r3, #32
 80099c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80099ca:	e006      	b.n	80099da <VL53L1_LoadPatch+0x9e>
	case 3:
		patch_power = 0x40;
 80099cc:	2340      	movs	r3, #64	; 0x40
 80099ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80099d2:	e002      	b.n	80099da <VL53L1_LoadPatch+0x9e>
	default:
		patch_power = 0x00;
 80099d4:	2300      	movs	r3, #0
 80099d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 80099da:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d134      	bne.n	8009a4c <VL53L1_LoadPatch+0x110>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 80099e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80099e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80099ea:	2229      	movs	r2, #41	; 0x29
 80099ec:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80099ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80099f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80099f6:	22c9      	movs	r2, #201	; 0xc9
 80099f8:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80099fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80099fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009a02:	220e      	movs	r2, #14
 8009a04:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8009a06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009a0e:	2240      	movs	r2, #64	; 0x40
 8009a10:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8009a12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009a1a:	2228      	movs	r2, #40	; 0x28
 8009a1c:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8009a1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009a2c:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 8009a2e:	f107 020c 	add.w	r2, r7, #12
 8009a32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a36:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009a3a:	2306      	movs	r3, #6
 8009a3c:	f240 4176 	movw	r1, #1142	; 0x476
 8009a40:	6800      	ldr	r0, [r0, #0]
 8009a42:	f004 f975 	bl	800dd30 <VL53L1_WriteMulti>
 8009a46:	4603      	mov	r3, r0
 8009a48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 8009a4c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d132      	bne.n	8009aba <VL53L1_LoadPatch+0x17e>
		comms_buffer[0] = 0x03;
 8009a54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009a5c:	2203      	movs	r2, #3
 8009a5e:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8009a60:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009a68:	226d      	movs	r2, #109	; 0x6d
 8009a6a:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8009a6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009a74:	2203      	movs	r2, #3
 8009a76:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8009a78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009a80:	226f      	movs	r2, #111	; 0x6f
 8009a82:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8009a84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009a8c:	2207      	movs	r2, #7
 8009a8e:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8009a90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009a98:	2229      	movs	r2, #41	; 0x29
 8009a9a:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 8009a9c:	f107 020c 	add.w	r2, r7, #12
 8009aa0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009aa4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009aa8:	2306      	movs	r3, #6
 8009aaa:	f240 4196 	movw	r1, #1174	; 0x496
 8009aae:	6800      	ldr	r0, [r0, #0]
 8009ab0:	f004 f93e 	bl	800dd30 <VL53L1_WriteMulti>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 8009aba:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d11a      	bne.n	8009af8 <VL53L1_LoadPatch+0x1bc>
		comms_buffer[0] = 0x00;
 8009ac2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009ac6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009aca:	2200      	movs	r2, #0
 8009acc:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8009ace:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009ad2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009ad6:	2207      	movs	r2, #7
 8009ad8:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8009ada:	f107 020c 	add.w	r2, r7, #12
 8009ade:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009ae2:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	f240 4172 	movw	r1, #1138	; 0x472
 8009aec:	6800      	ldr	r0, [r0, #0]
 8009aee:	f004 f91f 	bl	800dd30 <VL53L1_WriteMulti>
 8009af2:	4603      	mov	r3, r0
 8009af4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 8009af8:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d11a      	bne.n	8009b36 <VL53L1_LoadPatch+0x1fa>
		comms_buffer[0] = 0x00;
 8009b00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009b04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009b08:	2200      	movs	r2, #0
 8009b0a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8009b0c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009b10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009b14:	2207      	movs	r2, #7
 8009b16:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8009b18:	f107 020c 	add.w	r2, r7, #12
 8009b1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009b20:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009b24:	2302      	movs	r3, #2
 8009b26:	f240 4174 	movw	r1, #1140	; 0x474
 8009b2a:	6800      	ldr	r0, [r0, #0]
 8009b2c:	f004 f900 	bl	800dd30 <VL53L1_WriteMulti>
 8009b30:	4603      	mov	r3, r0
 8009b32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 8009b36:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10c      	bne.n	8009b58 <VL53L1_LoadPatch+0x21c>
		status = VL53L1_WrByte(
 8009b3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009b42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009b46:	2201      	movs	r2, #1
 8009b48:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8009b4c:	6818      	ldr	r0, [r3, #0]
 8009b4e:	f004 f95b 	bl	800de08 <VL53L1_WrByte>
 8009b52:	4603      	mov	r3, r0
 8009b54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 8009b58:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10b      	bne.n	8009b78 <VL53L1_LoadPatch+0x23c>
		status = VL53L1_WrByte(
 8009b60:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009b64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009b68:	2201      	movs	r2, #1
 8009b6a:	2185      	movs	r1, #133	; 0x85
 8009b6c:	6818      	ldr	r0, [r3, #0]
 8009b6e:	f004 f94b 	bl	800de08 <VL53L1_WrByte>
 8009b72:	4603      	mov	r3, r0
 8009b74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 8009b78:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20000040 	.word	0x20000040

08009b8c <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8009b8c:	b5b0      	push	{r4, r5, r7, lr}
 8009b8e:	b088      	sub	sp, #32
 8009b90:	af04      	add	r7, sp, #16
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8009ba0:	2162      	movs	r1, #98	; 0x62
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f002 f8fb 	bl	800bd9e <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	2200      	movs	r2, #0
 8009bac:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009bcc:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009bd4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8009bdc:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2264      	movs	r2, #100	; 0x64
 8009be2:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009bea:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f240 72db 	movw	r2, #2011	; 0x7db
 8009bfa:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f002 f8b2 	bl	800bd68 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009c04:	78fb      	ldrb	r3, [r7, #3]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d008      	beq.n	8009c1c <VL53L1_data_init+0x90>
 8009c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d104      	bne.n	8009c1c <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f857 	bl	8009cc6 <VL53L1_read_p2p_data>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009c22:	4618      	mov	r0, r3
 8009c24:	f001 fbe6 	bl	800b3f4 <VL53L1_init_refspadchar_config_struct>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009c32:	4618      	mov	r0, r3
 8009c34:	f001 fc01 	bl	800b43a <VL53L1_init_ssc_config_struct>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	f103 0242 	add.w	r2, r3, #66	; 0x42
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8009c48:	4619      	mov	r1, r3
 8009c4a:	4610      	mov	r0, r2
 8009c4c:	f001 fc15 	bl	800b47a <VL53L1_init_xtalk_config_struct>
 8009c50:	4603      	mov	r3, r0
 8009c52:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f001 fc6f 	bl	800b53e <VL53L1_init_offset_cal_config_struct>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	33a4      	adds	r3, #164	; 0xa4
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f001 fc8e 	bl	800b58a <VL53L1_init_tuning_parm_storage_struct>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8009c72:	2120      	movs	r1, #32
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fcb9 	bl	800a5ec <VL53L1_set_vhv_loopbound>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8009c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d116      	bne.n	8009cb4 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	7858      	ldrb	r0, [r3, #1]
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	8b1c      	ldrh	r4, [r3, #24]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	689d      	ldr	r5, [r3, #8]
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	6912      	ldr	r2, [r2, #16]
 8009c9a:	68b9      	ldr	r1, [r7, #8]
 8009c9c:	6949      	ldr	r1, [r1, #20]
 8009c9e:	9102      	str	r1, [sp, #8]
 8009ca0:	9201      	str	r2, [sp, #4]
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	462b      	mov	r3, r5
 8009ca6:	4622      	mov	r2, r4
 8009ca8:	4601      	mov	r1, r0
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fad4 	bl	800a258 <VL53L1_set_preset_mode>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f002 fde3 	bl	800c880 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8009cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bdb0      	pop	{r4, r5, r7, pc}

08009cc6 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8009cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d108      	bne.n	8009cf0 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f002 ff61 	bl	800cbae <VL53L1_get_static_nvm_managed>
 8009cec:	4603      	mov	r3, r0
 8009cee:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8009cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d107      	bne.n	8009d08 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	3342      	adds	r3, #66	; 0x42
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f003 f893 	bl	800ce2a <VL53L1_get_customer_nvm_managed>
 8009d04:	4603      	mov	r3, r0
 8009d06:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8009d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d115      	bne.n	8009d3c <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f003 ff44 	bl	800dba6 <VL53L1_get_nvm_copy_data>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8009d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d108      	bne.n	8009d3c <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	33f0      	adds	r3, #240	; 0xf0
 8009d34:	4619      	mov	r1, r3
 8009d36:	4610      	mov	r0, r2
 8009d38:	f002 f991 	bl	800c05e <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8009d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d109      	bne.n	8009d58 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	21de      	movs	r1, #222	; 0xde
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f004 f8b8 	bl	800dec4 <VL53L1_RdWord>
 8009d54:	4603      	mov	r3, r0
 8009d56:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8009d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d62:	d204      	bcs.n	8009d6e <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8009d6a:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8009d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d107      	bne.n	8009d86 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	339e      	adds	r3, #158	; 0x9e
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f98d 	bl	800a09c <VL53L1_get_mode_mitigation_roi>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d114      	bne.n	8009dba <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10f      	bne.n	8009dba <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8009da0:	011b      	lsls	r3, r3, #4
 8009da2:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8009db0:	011b      	lsls	r3, r3, #4
 8009db2:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8009dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b085      	sub	sp, #20
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009de2:	23f1      	movs	r3, #241	; 0xf1
 8009de4:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8009de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10c      	bne.n	8009e08 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8009dfa:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8009e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bc80      	pop	{r7}
 8009e14:	4770      	bx	lr

08009e16 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b085      	sub	sp, #20
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e20:	2300      	movs	r3, #0
 8009e22:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009e32:	23f1      	movs	r3, #241	; 0xf1
 8009e34:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8009e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d109      	bne.n	8009e52 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8009e4a:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8009e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bc80      	pop	{r7}
 8009e5e:	4770      	bx	lr

08009e60 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af02      	add	r7, sp, #8
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009e80:	23f1      	movs	r3, #241	; 0xf1
 8009e82:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8009e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d11b      	bne.n	8009ec4 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 8009eb0:	9201      	str	r2, [sp, #4]
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	6879      	ldr	r1, [r7, #4]
 8009eba:	68b8      	ldr	r0, [r7, #8]
 8009ebc:	f002 fc15 	bl	800c6ea <VL53L1_calc_timeout_register_values>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ec4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3718      	adds	r7, #24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b088      	sub	sp, #32
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8009eea:	2300      	movs	r3, #0
 8009eec:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009ef8:	23f1      	movs	r3, #241	; 0xf1
 8009efa:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8009efc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d14a      	bne.n	8009f9a <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 8009f10:	4619      	mov	r1, r3
 8009f12:	4610      	mov	r0, r2
 8009f14:	f002 fa91 	bl	800c43a <VL53L1_calc_macro_period_us>
 8009f18:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 8009f20:	6979      	ldr	r1, [r7, #20]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f002 fb48 	bl	800c5b8 <VL53L1_calc_timeout_us>
 8009f28:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 8009f34:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8009f36:	8a7b      	ldrh	r3, [r7, #18]
 8009f38:	021b      	lsls	r3, r3, #8
 8009f3a:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8009f42:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8009f44:	4413      	add	r3, r2
 8009f46:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8009f48:	8a7b      	ldrh	r3, [r7, #18]
 8009f4a:	6979      	ldr	r1, [r7, #20]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f002 fb73 	bl	800c638 <VL53L1_calc_decoded_timeout_us>
 8009f52:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 8009f5e:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8009f60:	8a7b      	ldrh	r3, [r7, #18]
 8009f62:	021b      	lsls	r3, r3, #8
 8009f64:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8009f6c:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8009f6e:	4413      	add	r3, r2
 8009f70:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8009f72:	8a7b      	ldrh	r3, [r7, #18]
 8009f74:	6979      	ldr	r1, [r7, #20]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f002 fb5e 	bl	800c638 <VL53L1_calc_decoded_timeout_us>
 8009f7c:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009f9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3720      	adds	r7, #32
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b087      	sub	sp, #28
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	60f8      	str	r0, [r7, #12]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	607a      	str	r2, [r7, #4]
 8009fb2:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	2b07      	cmp	r3, #7
 8009fc4:	d81c      	bhi.n	800a000 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8009fc6:	7afb      	ldrb	r3, [r7, #11]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d004      	beq.n	8009fd6 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd4:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 8009fdc:	7dbb      	ldrb	r3, [r7, #22]
 8009fde:	4013      	ands	r3, r2
 8009fe0:	b2da      	uxtb	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00b      	beq.n	800a004 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	7afb      	ldrb	r3, [r7, #11]
 8009ff4:	fa42 f303 	asr.w	r3, r2, r3
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	701a      	strb	r2, [r3, #0]
 8009ffe:	e001      	b.n	800a004 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a000:	23fc      	movs	r3, #252	; 0xfc
 800a002:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800a004:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	371c      	adds	r7, #28
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bc80      	pop	{r7}
 800a010:	4770      	bx	lr

0800a012 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	7858      	ldrb	r0, [r3, #1]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	7819      	ldrb	r1, [r3, #0]
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800a032:	461a      	mov	r2, r3
 800a034:	f002 fbd2 	bl	800c7dc <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	7898      	ldrb	r0, [r3, #2]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	78d9      	ldrb	r1, [r3, #3]
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800a046:	461a      	mov	r2, r3
 800a048:	f002 fc05 	bl	800c856 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800a04c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a062:	2300      	movs	r3, #0
 800a064:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	3301      	adds	r3, #1
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	4619      	mov	r1, r3
 800a078:	f002 fcb6 	bl	800c9e8 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	1c99      	adds	r1, r3, #2
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	3303      	adds	r3, #3
 800a08a:	461a      	mov	r2, r3
 800a08c:	f002 fbcc 	bl	800c828 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800a090:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800a0c0:	f107 020e 	add.w	r2, r7, #14
 800a0c4:	f107 010d 	add.w	r1, r7, #13
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f002 fc8d 	bl	800c9e8 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800a0ce:	7bba      	ldrb	r2, [r7, #14]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800a0d4:	7b7a      	ldrb	r2, [r7, #13]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800a0e0:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	091b      	lsrs	r3, r3, #4
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
 800a0ee:	f003 030f 	and.w	r3, r3, #15
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800a0f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	607a      	str	r2, [r7, #4]
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	460b      	mov	r3, r1
 800a112:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a114:	2300      	movs	r3, #0
 800a116:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800a11c:	7afb      	ldrb	r3, [r7, #11]
 800a11e:	3b01      	subs	r3, #1
 800a120:	2b25      	cmp	r3, #37	; 0x25
 800a122:	f200 808e 	bhi.w	800a242 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800a126:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a1c5 	.word	0x0800a1c5
 800a130:	0800a1c5 	.word	0x0800a1c5
 800a134:	0800a1c5 	.word	0x0800a1c5
 800a138:	0800a1c5 	.word	0x0800a1c5
 800a13c:	0800a1c5 	.word	0x0800a1c5
 800a140:	0800a1ef 	.word	0x0800a1ef
 800a144:	0800a1ef 	.word	0x0800a1ef
 800a148:	0800a1ef 	.word	0x0800a1ef
 800a14c:	0800a243 	.word	0x0800a243
 800a150:	0800a243 	.word	0x0800a243
 800a154:	0800a243 	.word	0x0800a243
 800a158:	0800a243 	.word	0x0800a243
 800a15c:	0800a243 	.word	0x0800a243
 800a160:	0800a243 	.word	0x0800a243
 800a164:	0800a243 	.word	0x0800a243
 800a168:	0800a243 	.word	0x0800a243
 800a16c:	0800a1c5 	.word	0x0800a1c5
 800a170:	0800a1ef 	.word	0x0800a1ef
 800a174:	0800a243 	.word	0x0800a243
 800a178:	0800a243 	.word	0x0800a243
 800a17c:	0800a243 	.word	0x0800a243
 800a180:	0800a243 	.word	0x0800a243
 800a184:	0800a243 	.word	0x0800a243
 800a188:	0800a243 	.word	0x0800a243
 800a18c:	0800a243 	.word	0x0800a243
 800a190:	0800a243 	.word	0x0800a243
 800a194:	0800a243 	.word	0x0800a243
 800a198:	0800a243 	.word	0x0800a243
 800a19c:	0800a243 	.word	0x0800a243
 800a1a0:	0800a243 	.word	0x0800a243
 800a1a4:	0800a243 	.word	0x0800a243
 800a1a8:	0800a243 	.word	0x0800a243
 800a1ac:	0800a243 	.word	0x0800a243
 800a1b0:	0800a243 	.word	0x0800a243
 800a1b4:	0800a243 	.word	0x0800a243
 800a1b8:	0800a219 	.word	0x0800a219
 800a1bc:	0800a219 	.word	0x0800a219
 800a1c0:	0800a219 	.word	0x0800a219
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	601a      	str	r2, [r3, #0]
	break;
 800a1ec:	e02c      	b.n	800a248 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	601a      	str	r2, [r3, #0]
	break;
 800a216:	e017      	b.n	800a248 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	601a      	str	r2, [r3, #0]
	break;
 800a240:	e002      	b.n	800a248 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a242:	23fc      	movs	r3, #252	; 0xfc
 800a244:	75fb      	strb	r3, [r7, #23]
		break;
 800a246:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800a248:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	371c      	adds	r7, #28
 800a250:	46bd      	mov	sp, r7
 800a252:	bc80      	pop	{r7}
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop

0800a258 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b092      	sub	sp, #72	; 0x48
 800a25c:	af04      	add	r7, sp, #16
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	607b      	str	r3, [r7, #4]
 800a262:	460b      	mov	r3, r1
 800a264:	72fb      	strb	r3, [r7, #11]
 800a266:	4613      	mov	r3, r2
 800a268:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a26a:	2300      	movs	r3, #0
 800a26c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800a274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a276:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a27a:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800a27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800a282:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a286:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a28a:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800a28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800a292:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800a294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a296:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a29a:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800a29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29e:	33a4      	adds	r3, #164	; 0xa4
 800a2a0:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800a2a8:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ac:	7afa      	ldrb	r2, [r7, #11]
 800a2ae:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2b4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2ba:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2c0:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800a2c2:	2103      	movs	r1, #3
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f001 fd6a 	bl	800bd9e <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800a2ca:	7afb      	ldrb	r3, [r7, #11]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	2b25      	cmp	r3, #37	; 0x25
 800a2d0:	f200 810c 	bhi.w	800a4ec <VL53L1_set_preset_mode+0x294>
 800a2d4:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <VL53L1_set_preset_mode+0x84>)
 800a2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2da:	bf00      	nop
 800a2dc:	0800a375 	.word	0x0800a375
 800a2e0:	0800a391 	.word	0x0800a391
 800a2e4:	0800a3ad 	.word	0x0800a3ad
 800a2e8:	0800a3c9 	.word	0x0800a3c9
 800a2ec:	0800a3e5 	.word	0x0800a3e5
 800a2f0:	0800a401 	.word	0x0800a401
 800a2f4:	0800a41d 	.word	0x0800a41d
 800a2f8:	0800a439 	.word	0x0800a439
 800a2fc:	0800a4ed 	.word	0x0800a4ed
 800a300:	0800a4ed 	.word	0x0800a4ed
 800a304:	0800a4ed 	.word	0x0800a4ed
 800a308:	0800a4ed 	.word	0x0800a4ed
 800a30c:	0800a4ed 	.word	0x0800a4ed
 800a310:	0800a4ed 	.word	0x0800a4ed
 800a314:	0800a4ed 	.word	0x0800a4ed
 800a318:	0800a4ed 	.word	0x0800a4ed
 800a31c:	0800a455 	.word	0x0800a455
 800a320:	0800a471 	.word	0x0800a471
 800a324:	0800a4ed 	.word	0x0800a4ed
 800a328:	0800a4ed 	.word	0x0800a4ed
 800a32c:	0800a4ed 	.word	0x0800a4ed
 800a330:	0800a4ed 	.word	0x0800a4ed
 800a334:	0800a4ed 	.word	0x0800a4ed
 800a338:	0800a4ed 	.word	0x0800a4ed
 800a33c:	0800a4ed 	.word	0x0800a4ed
 800a340:	0800a4ed 	.word	0x0800a4ed
 800a344:	0800a4ed 	.word	0x0800a4ed
 800a348:	0800a4ed 	.word	0x0800a4ed
 800a34c:	0800a4ed 	.word	0x0800a4ed
 800a350:	0800a4ed 	.word	0x0800a4ed
 800a354:	0800a4ed 	.word	0x0800a4ed
 800a358:	0800a4ed 	.word	0x0800a4ed
 800a35c:	0800a4ed 	.word	0x0800a4ed
 800a360:	0800a4ed 	.word	0x0800a4ed
 800a364:	0800a4ed 	.word	0x0800a4ed
 800a368:	0800a48d 	.word	0x0800a48d
 800a36c:	0800a4ad 	.word	0x0800a4ad
 800a370:	0800a4cd 	.word	0x0800a4cd

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	9301      	str	r3, [sp, #4]
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a384:	f001 f98f 	bl	800b6a6 <VL53L1_preset_mode_standard_ranging>
 800a388:	4603      	mov	r3, r0
 800a38a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a38e:	e0b1      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a39e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3a0:	f001 fa9e 	bl	800b8e0 <VL53L1_preset_mode_standard_ranging_short_range>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a3aa:	e0a3      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	9301      	str	r3, [sp, #4]
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3bc:	f001 fad1 	bl	800b962 <VL53L1_preset_mode_standard_ranging_long_range>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a3c6:	e095      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	9301      	str	r3, [sp, #4]
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3d8:	f001 fb04 	bl	800b9e4 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a3e2:	e087      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	9301      	str	r3, [sp, #4]
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3f4:	f001 fb1b 	bl	800ba2e <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a3fe:	e079      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	9301      	str	r3, [sp, #4]
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a40e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a410:	f001 fb32 	bl	800ba78 <VL53L1_preset_mode_timed_ranging>
 800a414:	4603      	mov	r3, r0
 800a416:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a41a:	e06b      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a42a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a42c:	f001 fb5e 	bl	800baec <VL53L1_preset_mode_timed_ranging_short_range>
 800a430:	4603      	mov	r3, r0
 800a432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a436:	e05d      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	9301      	str	r3, [sp, #4]
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a448:	f001 fb8a 	bl	800bb60 <VL53L1_preset_mode_timed_ranging_long_range>
 800a44c:	4603      	mov	r3, r0
 800a44e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a452:	e04f      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	9301      	str	r3, [sp, #4]
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	6a3b      	ldr	r3, [r7, #32]
 800a45e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a464:	f001 fc5e 	bl	800bd24 <VL53L1_preset_mode_olt>
 800a468:	4603      	mov	r3, r0
 800a46a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a46e:	e041      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	9301      	str	r3, [sp, #4]
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a47c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a47e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a480:	f001 fc1a 	bl	800bcb8 <VL53L1_preset_mode_singleshot_ranging>
 800a484:	4603      	mov	r3, r0
 800a486:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a48a:	e033      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	9302      	str	r3, [sp, #8]
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	9301      	str	r3, [sp, #4]
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a49c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a49e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4a0:	f001 fbbe 	bl	800bc20 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a4aa:	e023      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	9302      	str	r3, [sp, #8]
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	9301      	str	r3, [sp, #4]
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4c0:	f001 fb88 	bl	800bbd4 <VL53L1_preset_mode_low_power_auto_ranging>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a4ca:	e013      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	9302      	str	r3, [sp, #8]
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4e0:	f001 fbc4 	bl	800bc6c <VL53L1_preset_mode_low_power_auto_long_ranging>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a4ea:	e003      	b.n	800a4f4 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a4ec:	23fc      	movs	r3, #252	; 0xfc
 800a4ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800a4f2:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800a4f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d105      	bne.n	800a508 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fe:	893a      	ldrh	r2, [r7, #8]
 800a500:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800a502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a504:	893a      	ldrh	r2, [r7, #8]
 800a506:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800a508:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d108      	bne.n	800a522 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800a510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a514:	6879      	ldr	r1, [r7, #4]
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f7ff fca2 	bl	8009e60 <VL53L1_set_timeouts_us>
 800a51c:	4603      	mov	r3, r0
 800a51e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800a522:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a526:	2b00      	cmp	r3, #0
 800a528:	d106      	bne.n	800a538 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800a52a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f7ff fc4a 	bl	8009dc6 <VL53L1_set_inter_measurement_period_ms>
 800a532:	4603      	mov	r3, r0
 800a534:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800a538:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3738      	adds	r7, #56	; 0x38
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a54e:	2300      	movs	r3, #0
 800a550:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a560:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a564:	4618      	mov	r0, r3
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	bc80      	pop	{r7}
 800a56c:	4770      	bx	lr

0800a56e <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800a56e:	b480      	push	{r7}
 800a570:	b085      	sub	sp, #20
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	460b      	mov	r3, r1
 800a578:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a57a:	2300      	movs	r3, #0
 800a57c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	887a      	ldrh	r2, [r7, #2]
 800a586:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800a58a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	bc80      	pop	{r7}
 800a596:	4770      	bx	lr

0800a598 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a5b4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3714      	adds	r7, #20
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bc80      	pop	{r7}
 800a5c0:	4770      	bx	lr

0800a5c2 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800a5c2:	b480      	push	{r7}
 800a5c4:	b085      	sub	sp, #20
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	887a      	ldrh	r2, [r7, #2]
 800a5da:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800a5de:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3714      	adds	r7, #20
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bc80      	pop	{r7}
 800a5ea:	4770      	bx	lr

0800a5ec <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a606:	f003 0303 	and.w	r3, r3, #3
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	78fb      	ldrb	r3, [r7, #3]
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	b2db      	uxtb	r3, r3
 800a612:	4413      	add	r3, r2
 800a614:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800a61c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	bc80      	pop	{r7}
 800a628:	4770      	bx	lr
	...

0800a62c <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b0d0      	sub	sp, #320	; 0x140
 800a630:	af00      	add	r7, sp, #0
 800a632:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a636:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a63a:	6018      	str	r0, [r3, #0]
 800a63c:	4608      	mov	r0, r1
 800a63e:	4611      	mov	r1, r2
 800a640:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a644:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800a648:	4602      	mov	r2, r0
 800a64a:	701a      	strb	r2, [r3, #0]
 800a64c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a650:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a654:	460a      	mov	r2, r1
 800a656:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a658:	2300      	movs	r3, #0
 800a65a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a65e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a662:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800a66c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a670:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a674:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800a678:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a67c:	3342      	adds	r3, #66	; 0x42
 800a67e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800a682:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a686:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a68a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800a68e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a692:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800a696:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800a69a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a69e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a6a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800a6a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6aa:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800a6ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800a6b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6b6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a6ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800a6be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6c2:	332c      	adds	r3, #44	; 0x2c
 800a6c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800a6c8:	f107 030c 	add.w	r3, r7, #12
 800a6cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800a6e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6ec:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a6f0:	f2a2 123d 	subw	r2, r2, #317	; 0x13d
 800a6f4:	7812      	ldrb	r2, [r2, #0]
 800a6f6:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800a6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6fc:	791b      	ldrb	r3, [r3, #4]
 800a6fe:	b25b      	sxtb	r3, r3
 800a700:	f003 030f 	and.w	r3, r3, #15
 800a704:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800a706:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a70a:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800a70e:	f993 3000 	ldrsb.w	r3, [r3]
 800a712:	4313      	orrs	r3, r2
 800a714:	b25b      	sxtb	r3, r3
 800a716:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800a718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71c:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800a71e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a722:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800a726:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a72a:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800a72e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a732:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800a736:	2bff      	cmp	r3, #255	; 0xff
 800a738:	d104      	bne.n	800a744 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800a73a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a744:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a748:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d139      	bne.n	800a7c4 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800a750:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a754:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d133      	bne.n	800a7c4 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800a75c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a760:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800a764:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a768:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800a76c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a770:	2220      	movs	r2, #32
 800a772:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800a776:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a77a:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800a77e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10c      	bne.n	800a7a0 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800a786:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a78a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800a78e:	b29b      	uxth	r3, r3
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	b29b      	uxth	r3, r3
 800a794:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800a796:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a79a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800a79e:	e004      	b.n	800a7aa <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800a7a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800a7aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a7ae:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	d805      	bhi.n	800a7c4 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800a7b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a7bc:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a7c0:	2205      	movs	r2, #5
 800a7c2:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a7c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a7c8:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d113      	bne.n	800a7f8 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800a7d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a7d4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d10d      	bne.n	800a7f8 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800a7dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a7e0:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800a7e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a7e8:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800a7ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a7f0:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a7f4:	2206      	movs	r2, #6
 800a7f6:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800a7f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a7fc:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	3b01      	subs	r3, #1
 800a804:	2b05      	cmp	r3, #5
 800a806:	d827      	bhi.n	800a858 <VL53L1_init_and_start_range+0x22c>
 800a808:	a201      	add	r2, pc, #4	; (adr r2, 800a810 <VL53L1_init_and_start_range+0x1e4>)
 800a80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80e:	bf00      	nop
 800a810:	0800a851 	.word	0x0800a851
 800a814:	0800a849 	.word	0x0800a849
 800a818:	0800a841 	.word	0x0800a841
 800a81c:	0800a839 	.word	0x0800a839
 800a820:	0800a831 	.word	0x0800a831
 800a824:	0800a829 	.word	0x0800a829
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800a828:	2301      	movs	r3, #1
 800a82a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a82e:	e017      	b.n	800a860 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800a830:	230d      	movs	r3, #13
 800a832:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a836:	e013      	b.n	800a860 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800a838:	2324      	movs	r3, #36	; 0x24
 800a83a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a83e:	e00f      	b.n	800a860 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800a840:	2344      	movs	r3, #68	; 0x44
 800a842:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a846:	e00b      	b.n	800a860 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800a848:	235a      	movs	r3, #90	; 0x5a
 800a84a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a84e:	e007      	b.n	800a860 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800a850:	2371      	movs	r3, #113	; 0x71
 800a852:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a856:	e003      	b.n	800a860 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800a858:	2383      	movs	r3, #131	; 0x83
 800a85a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a85e:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800a860:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a864:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800a868:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800a86c:	f107 030c 	add.w	r3, r7, #12
 800a870:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800a874:	2300      	movs	r3, #0
 800a876:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800a87a:	e00b      	b.n	800a894 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 800a87c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a880:	1c5a      	adds	r2, r3, #1
 800a882:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800a886:	2200      	movs	r2, #0
 800a888:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800a88a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800a88e:	3301      	adds	r3, #1
 800a890:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800a894:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800a898:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d3ed      	bcc.n	800a87c <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800a8a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a8a4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2b05      	cmp	r3, #5
 800a8ac:	d917      	bls.n	800a8de <VL53L1_init_and_start_range+0x2b2>
 800a8ae:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d113      	bne.n	800a8de <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a8b6:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a8ba:	f1c3 0301 	rsb	r3, r3, #1
 800a8be:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a8c2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800a8c6:	f107 020c 	add.w	r2, r7, #12
 800a8ca:	4413      	add	r3, r2
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	210b      	movs	r1, #11
 800a8d0:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800a8d4:	f002 f8b6 	bl	800ca44 <VL53L1_i2c_encode_static_nvm_managed>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800a8de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a8e2:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d917      	bls.n	800a91c <VL53L1_init_and_start_range+0x2f0>
 800a8ec:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d113      	bne.n	800a91c <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a8f4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a8f8:	f1c3 030d 	rsb	r3, r3, #13
 800a8fc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a900:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800a904:	f107 020c 	add.w	r2, r7, #12
 800a908:	4413      	add	r3, r2
 800a90a:	461a      	mov	r2, r3
 800a90c:	2117      	movs	r1, #23
 800a90e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a912:	f002 f973 	bl	800cbfc <VL53L1_i2c_encode_customer_nvm_managed>
 800a916:	4603      	mov	r3, r0
 800a918:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800a91c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a920:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	2b03      	cmp	r3, #3
 800a928:	d917      	bls.n	800a95a <VL53L1_init_and_start_range+0x32e>
 800a92a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d113      	bne.n	800a95a <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a932:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a936:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800a93a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a93e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800a942:	f107 020c 	add.w	r2, r7, #12
 800a946:	4413      	add	r3, r2
 800a948:	461a      	mov	r2, r3
 800a94a:	2120      	movs	r1, #32
 800a94c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800a950:	f002 fa92 	bl	800ce78 <VL53L1_i2c_encode_static_config>
 800a954:	4603      	mov	r3, r0
 800a956:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800a95a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a95e:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2b02      	cmp	r3, #2
 800a966:	d917      	bls.n	800a998 <VL53L1_init_and_start_range+0x36c>
 800a968:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d113      	bne.n	800a998 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800a970:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a974:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800a978:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a97c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800a980:	f107 020c 	add.w	r2, r7, #12
 800a984:	4413      	add	r3, r2
 800a986:	461a      	mov	r2, r3
 800a988:	2116      	movs	r1, #22
 800a98a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800a98e:	f002 fb56 	bl	800d03e <VL53L1_i2c_encode_general_config>
 800a992:	4603      	mov	r3, r0
 800a994:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800a998:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a99c:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d917      	bls.n	800a9d6 <VL53L1_init_and_start_range+0x3aa>
 800a9a6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d113      	bne.n	800a9d6 <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a9ae:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a9b2:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800a9b6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a9ba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800a9be:	f107 020c 	add.w	r2, r7, #12
 800a9c2:	4413      	add	r3, r2
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	2117      	movs	r1, #23
 800a9c8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a9cc:	f002 fbbb 	bl	800d146 <VL53L1_i2c_encode_timing_config>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800a9d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a9da:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d036      	beq.n	800aa52 <VL53L1_init_and_start_range+0x426>
 800a9e4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d132      	bne.n	800aa52 <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a9ec:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a9f0:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800a9f4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800a9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fc:	791b      	ldrb	r3, [r3, #4]
 800a9fe:	f003 0320 	and.w	r3, r3, #32
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d017      	beq.n	800aa36 <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800aa06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aa0a:	789b      	ldrb	r3, [r3, #2]
 800aa0c:	f043 0301 	orr.w	r3, r3, #1
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800aa16:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800aa18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aa1c:	789b      	ldrb	r3, [r3, #2]
 800aa1e:	f043 0301 	orr.w	r3, r3, #1
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800aa28:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800aa2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aa2e:	789a      	ldrb	r2, [r3, #2]
 800aa30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800aa34:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800aa36:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800aa3a:	f107 020c 	add.w	r2, r7, #12
 800aa3e:	4413      	add	r3, r2
 800aa40:	461a      	mov	r2, r3
 800aa42:	2112      	movs	r1, #18
 800aa44:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800aa48:	f002 fbff 	bl	800d24a <VL53L1_i2c_encode_dynamic_config>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800aa52:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d113      	bne.n	800aa82 <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 800aa5a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800aa5e:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800aa62:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800aa66:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800aa6a:	f107 020c 	add.w	r2, r7, #12
 800aa6e:	4413      	add	r3, r2
 800aa70:	461a      	mov	r2, r3
 800aa72:	2105      	movs	r1, #5
 800aa74:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800aa78:	f002 fc6c 	bl	800d354 <VL53L1_i2c_encode_system_control>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800aa82:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10f      	bne.n	800aaaa <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 800aa8a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800aa8e:	f107 020c 	add.w	r2, r7, #12
 800aa92:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800aa96:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800aa9a:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 800aa9e:	6800      	ldr	r0, [r0, #0]
 800aaa0:	f003 f946 	bl	800dd30 <VL53L1_WriteMulti>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800aaaa:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d109      	bne.n	800aac6 <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800aab2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aab6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	f001 f998 	bl	800bdf0 <VL53L1_update_ll_driver_rd_state>
 800aac0:	4603      	mov	r3, r0
 800aac2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800aac6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d109      	bne.n	800aae2 <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800aace:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aad2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800aad6:	6818      	ldr	r0, [r3, #0]
 800aad8:	f001 fa5c 	bl	800bf94 <VL53L1_update_ll_driver_cfg_state>
 800aadc:	4603      	mov	r3, r0
 800aade:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800aae2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b0c8      	sub	sp, #288	; 0x120
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800aafa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800aafe:	6018      	str	r0, [r3, #0]
 800ab00:	460a      	mov	r2, r1
 800ab02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ab06:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800ab0a:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ab12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ab16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800ab20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ab24:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800ab28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800ab2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ab30:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ab34:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800ab38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ab3c:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800ab40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800ab44:	2388      	movs	r3, #136	; 0x88
 800ab46:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800ab56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ab5a:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d008      	beq.n	800ab76 <VL53L1_get_measurement_results+0x86>
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d10d      	bne.n	800ab84 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800ab68:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800ab6c:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800ab70:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800ab74:	e00a      	b.n	800ab8c <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800ab76:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800ab7a:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800ab7e:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800ab82:	e003      	b.n	800ab8c <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 800ab84:	232c      	movs	r3, #44	; 0x2c
 800ab86:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800ab8a:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ab8c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10f      	bne.n	800abb4 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 800ab94:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800ab98:	f107 0208 	add.w	r2, r7, #8
 800ab9c:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800aba0:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800aba4:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 800aba8:	6800      	ldr	r0, [r0, #0]
 800abaa:	f003 f8f7 	bl	800dd9c <VL53L1_ReadMulti>
 800abae:	4603      	mov	r3, r0
 800abb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800abb4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800abb8:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d917      	bls.n	800abf2 <VL53L1_get_measurement_results+0x102>
 800abc2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d113      	bne.n	800abf2 <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800abca:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800abce:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800abd2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800abd6:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800abda:	f107 0208 	add.w	r2, r7, #8
 800abde:	4413      	add	r3, r2
 800abe0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800abe4:	4619      	mov	r1, r3
 800abe6:	2038      	movs	r0, #56	; 0x38
 800abe8:	f002 fd45 	bl	800d676 <VL53L1_i2c_decode_debug_results>
 800abec:	4603      	mov	r3, r0
 800abee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800abf2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800abf6:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d017      	beq.n	800ac30 <VL53L1_get_measurement_results+0x140>
 800ac00:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d113      	bne.n	800ac30 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800ac08:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800ac0c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800ac10:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800ac14:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800ac18:	f107 0208 	add.w	r2, r7, #8
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800ac22:	4619      	mov	r1, r3
 800ac24:	2021      	movs	r0, #33	; 0x21
 800ac26:	f002 fcc5 	bl	800d5b4 <VL53L1_i2c_decode_core_results>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800ac30:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d110      	bne.n	800ac5a <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800ac3e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800ac42:	f107 0208 	add.w	r2, r7, #8
 800ac46:	4413      	add	r3, r2
 800ac48:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	202c      	movs	r0, #44	; 0x2c
 800ac50:	f002 fbba 	bl	800d3c8 <VL53L1_i2c_decode_system_results>
 800ac54:	4603      	mov	r3, r0
 800ac56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ac5a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b088      	sub	sp, #32
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	460b      	mov	r3, r1
 800ac72:	607a      	str	r2, [r7, #4]
 800ac74:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ac76:	2300      	movs	r3, #0
 800ac78:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800ac84:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ac8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d106      	bne.n	800aca0 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800ac92:	7afb      	ldrb	r3, [r7, #11]
 800ac94:	4619      	mov	r1, r3
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f7ff ff2a 	bl	800aaf0 <VL53L1_get_measurement_results>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800aca0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10c      	bne.n	800acc2 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800acae:	4618      	mov	r0, r3
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	f000 f85d 	bl	800ad7c <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d11f      	bne.n	800ad0c <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800accc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10e      	bne.n	800acf2 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d109      	bne.n	800acf2 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f001 fe19 	bl	800c916 <VL53L1_low_power_auto_setup_manual_calibration>
 800ace4:	4603      	mov	r3, r0
 800ace6:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800acf0:	e00c      	b.n	800ad0c <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800acf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d108      	bne.n	800ad0c <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d103      	bne.n	800ad0c <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	2202      	movs	r2, #2
 800ad08:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800ad20:	2284      	movs	r2, #132	; 0x84
 800ad22:	6939      	ldr	r1, [r7, #16]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f003 fd9f 	bl	800e868 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800ad2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d104      	bne.n	800ad3c <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f001 f8e4 	bl	800bf00 <VL53L1_check_ll_driver_rd_state>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800ad3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3720      	adds	r7, #32
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ad54:	2300      	movs	r3, #0
 800ad56:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ad58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d107      	bne.n	800ad70 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	2203      	movs	r2, #3
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7ff fc60 	bl	800a62c <VL53L1_init_and_start_range>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800ad70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b089      	sub	sp, #36	; 0x24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
 800ad88:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800ad92:	2300      	movs	r3, #0
 800ad94:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	78da      	ldrb	r2, [r3, #3]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	3304      	adds	r3, #4
 800ada2:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800ada4:	2300      	movs	r3, #0
 800ada6:	77fb      	strb	r3, [r7, #31]
 800ada8:	e0d0      	b.n	800af4c <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	7ffa      	ldrb	r2, [r7, #31]
 800adae:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	2200      	movs	r2, #0
 800adb4:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	78db      	ldrb	r3, [r3, #3]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	785b      	ldrb	r3, [r3, #1]
 800adc2:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800adc6:	2b09      	cmp	r3, #9
 800adc8:	d104      	bne.n	800add4 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	2213      	movs	r2, #19
 800adce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800add2:	e007      	b.n	800ade4 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	785b      	ldrb	r3, [r3, #1]
 800add8:	f003 031f 	and.w	r3, r3, #31
 800addc:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800ade4:	7ffb      	ldrb	r3, [r7, #31]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d002      	beq.n	800adf0 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800adea:	2b01      	cmp	r3, #1
 800adec:	d05d      	beq.n	800aeaa <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800adee:	e0a7      	b.n	800af40 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	789b      	ldrb	r3, [r3, #2]
 800adf4:	2b07      	cmp	r3, #7
 800adf6:	d104      	bne.n	800ae02 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	821a      	strh	r2, [r3, #16]
 800ae00:	e00c      	b.n	800ae1c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	789b      	ldrb	r3, [r3, #2]
 800ae06:	2b08      	cmp	r3, #8
 800ae08:	d104      	bne.n	800ae14 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	821a      	strh	r2, [r3, #16]
 800ae12:	e003      	b.n	800ae1c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	895b      	ldrh	r3, [r3, #10]
 800ae38:	015b      	lsls	r3, r3, #5
 800ae3a:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae42:	d302      	bcc.n	800ae4a <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800ae44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae48:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800ae5e:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	fb02 f303 	mul.w	r3, r2, r3
 800ae68:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae70:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	da01      	bge.n	800ae7c <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800ae78:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ae7c:	12db      	asrs	r3, r3, #11
 800ae7e:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	b21a      	sxth	r2, r3
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	621a      	str	r2, [r3, #32]

			break;
 800aea8:	e04a      	b.n	800af40 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aec0:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	8bdb      	ldrh	r3, [r3, #30]
 800aece:	015b      	lsls	r3, r3, #5
 800aed0:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aed8:	d302      	bcc.n	800aee0 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800aeda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aede:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800aef4:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	fb02 f303 	mul.w	r3, r2, r3
 800aefe:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af06:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	da01      	bge.n	800af12 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800af0e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800af12:	12db      	asrs	r3, r3, #11
 800af14:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	b21a      	sxth	r2, r3
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	621a      	str	r2, [r3, #32]

			break;
 800af3e:	bf00      	nop
		}

		pdata++;
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	3340      	adds	r3, #64	; 0x40
 800af44:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800af46:	7ffb      	ldrb	r3, [r7, #31]
 800af48:	3301      	adds	r3, #1
 800af4a:	77fb      	strb	r3, [r7, #31]
 800af4c:	7ffb      	ldrb	r3, [r7, #31]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	f67f af2b 	bls.w	800adaa <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2200      	movs	r2, #0
 800af58:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	785b      	ldrb	r3, [r3, #1]
 800af5e:	f003 031f 	and.w	r3, r3, #31
 800af62:	2b11      	cmp	r3, #17
 800af64:	bf8c      	ite	hi
 800af66:	2201      	movhi	r2, #1
 800af68:	2200      	movls	r2, #0
 800af6a:	b2d2      	uxtb	r2, r2
 800af6c:	2a00      	cmp	r2, #0
 800af6e:	d116      	bne.n	800af9e <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800af70:	2201      	movs	r2, #1
 800af72:	409a      	lsls	r2, r3
 800af74:	4b0c      	ldr	r3, [pc, #48]	; (800afa8 <VL53L1_copy_sys_and_core_results_to_range_results+0x22c>)
 800af76:	4013      	ands	r3, r2
 800af78:	2b00      	cmp	r3, #0
 800af7a:	bf14      	ite	ne
 800af7c:	2301      	movne	r3, #1
 800af7e:	2300      	moveq	r3, #0
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00b      	beq.n	800af9e <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	785b      	ldrb	r3, [r3, #1]
 800af8a:	f003 031f 	and.w	r3, r3, #31
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800af9c:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800af9e:	bf00      	nop
 800afa0:	3724      	adds	r7, #36	; 0x24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bc80      	pop	{r7}
 800afa6:	4770      	bx	lr
 800afa8:	0002200e 	.word	0x0002200e

0800afac <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	460b      	mov	r3, r1
 800afb6:	607a      	str	r2, [r7, #4]
 800afb8:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800afba:	2300      	movs	r3, #0
 800afbc:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800afc2:	897b      	ldrh	r3, [r7, #10]
 800afc4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800afc8:	2b38      	cmp	r3, #56	; 0x38
 800afca:	f200 8204 	bhi.w	800b3d6 <VL53L1_get_tuning_parm+0x42a>
 800afce:	a201      	add	r2, pc, #4	; (adr r2, 800afd4 <VL53L1_get_tuning_parm+0x28>)
 800afd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd4:	0800b0b9 	.word	0x0800b0b9
 800afd8:	0800b0c7 	.word	0x0800b0c7
 800afdc:	0800b0d5 	.word	0x0800b0d5
 800afe0:	0800b0e3 	.word	0x0800b0e3
 800afe4:	0800b0f1 	.word	0x0800b0f1
 800afe8:	0800b0ff 	.word	0x0800b0ff
 800afec:	0800b10d 	.word	0x0800b10d
 800aff0:	0800b11b 	.word	0x0800b11b
 800aff4:	0800b129 	.word	0x0800b129
 800aff8:	0800b137 	.word	0x0800b137
 800affc:	0800b145 	.word	0x0800b145
 800b000:	0800b153 	.word	0x0800b153
 800b004:	0800b161 	.word	0x0800b161
 800b008:	0800b16f 	.word	0x0800b16f
 800b00c:	0800b17d 	.word	0x0800b17d
 800b010:	0800b18b 	.word	0x0800b18b
 800b014:	0800b199 	.word	0x0800b199
 800b018:	0800b1a7 	.word	0x0800b1a7
 800b01c:	0800b1b5 	.word	0x0800b1b5
 800b020:	0800b1c3 	.word	0x0800b1c3
 800b024:	0800b1d1 	.word	0x0800b1d1
 800b028:	0800b1df 	.word	0x0800b1df
 800b02c:	0800b1ed 	.word	0x0800b1ed
 800b030:	0800b1fb 	.word	0x0800b1fb
 800b034:	0800b209 	.word	0x0800b209
 800b038:	0800b217 	.word	0x0800b217
 800b03c:	0800b225 	.word	0x0800b225
 800b040:	0800b233 	.word	0x0800b233
 800b044:	0800b241 	.word	0x0800b241
 800b048:	0800b24f 	.word	0x0800b24f
 800b04c:	0800b25d 	.word	0x0800b25d
 800b050:	0800b26b 	.word	0x0800b26b
 800b054:	0800b279 	.word	0x0800b279
 800b058:	0800b287 	.word	0x0800b287
 800b05c:	0800b295 	.word	0x0800b295
 800b060:	0800b2a3 	.word	0x0800b2a3
 800b064:	0800b2b1 	.word	0x0800b2b1
 800b068:	0800b2bf 	.word	0x0800b2bf
 800b06c:	0800b2cd 	.word	0x0800b2cd
 800b070:	0800b2db 	.word	0x0800b2db
 800b074:	0800b2e9 	.word	0x0800b2e9
 800b078:	0800b2f7 	.word	0x0800b2f7
 800b07c:	0800b305 	.word	0x0800b305
 800b080:	0800b313 	.word	0x0800b313
 800b084:	0800b321 	.word	0x0800b321
 800b088:	0800b32f 	.word	0x0800b32f
 800b08c:	0800b33d 	.word	0x0800b33d
 800b090:	0800b34b 	.word	0x0800b34b
 800b094:	0800b359 	.word	0x0800b359
 800b098:	0800b367 	.word	0x0800b367
 800b09c:	0800b375 	.word	0x0800b375
 800b0a0:	0800b383 	.word	0x0800b383
 800b0a4:	0800b391 	.word	0x0800b391
 800b0a8:	0800b39f 	.word	0x0800b39f
 800b0ac:	0800b3ad 	.word	0x0800b3ad
 800b0b0:	0800b3bb 	.word	0x0800b3bb
 800b0b4:	0800b3c9 	.word	0x0800b3c9

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800b0be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	601a      	str	r2, [r3, #0]
	break;
 800b0c4:	e18e      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800b0cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	601a      	str	r2, [r3, #0]
	break;
 800b0d2:	e187      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800b0da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	601a      	str	r2, [r3, #0]
	break;
 800b0e0:	e180      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800b0e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	601a      	str	r2, [r3, #0]
	break;
 800b0ee:	e179      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b0f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	601a      	str	r2, [r3, #0]
	break;
 800b0fc:	e172      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800b104:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	601a      	str	r2, [r3, #0]
	break;
 800b10a:	e16b      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800b112:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	601a      	str	r2, [r3, #0]
	break;
 800b118:	e164      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800b120:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	601a      	str	r2, [r3, #0]
	break;
 800b126:	e15d      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800b12e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	601a      	str	r2, [r3, #0]
	break;
 800b134:	e156      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800b13c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	601a      	str	r2, [r3, #0]
	break;
 800b142:	e14f      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800b14a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	601a      	str	r2, [r3, #0]
	break;
 800b150:	e148      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800b158:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	601a      	str	r2, [r3, #0]
	break;
 800b15e:	e141      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800b166:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	601a      	str	r2, [r3, #0]
	break;
 800b16c:	e13a      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800b174:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	601a      	str	r2, [r3, #0]
	break;
 800b17a:	e133      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800b182:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	601a      	str	r2, [r3, #0]
	break;
 800b188:	e12c      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800b190:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	601a      	str	r2, [r3, #0]
	break;
 800b196:	e125      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800b19e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	601a      	str	r2, [r3, #0]
	break;
 800b1a4:	e11e      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800b1ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	601a      	str	r2, [r3, #0]
	break;
 800b1b2:	e117      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800b1ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	601a      	str	r2, [r3, #0]
	break;
 800b1c0:	e110      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800b1c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	601a      	str	r2, [r3, #0]
	break;
 800b1ce:	e109      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b1d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	601a      	str	r2, [r3, #0]
	break;
 800b1dc:	e102      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800b1e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	601a      	str	r2, [r3, #0]
	break;
 800b1ea:	e0fb      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800b1f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	601a      	str	r2, [r3, #0]
	break;
 800b1f8:	e0f4      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800b200:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	601a      	str	r2, [r3, #0]
	break;
 800b206:	e0ed      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800b20e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	601a      	str	r2, [r3, #0]
	break;
 800b214:	e0e6      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800b21c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	601a      	str	r2, [r3, #0]
	break;
 800b222:	e0df      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800b22a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	601a      	str	r2, [r3, #0]
	break;
 800b230:	e0d8      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800b238:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	601a      	str	r2, [r3, #0]
	break;
 800b23e:	e0d1      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800b246:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	601a      	str	r2, [r3, #0]
	break;
 800b24c:	e0ca      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b254:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	601a      	str	r2, [r3, #0]
	break;
 800b25a:	e0c3      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800b262:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	601a      	str	r2, [r3, #0]
	break;
 800b268:	e0bc      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800b270:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	601a      	str	r2, [r3, #0]
	break;
 800b276:	e0b5      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b27e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	601a      	str	r2, [r3, #0]
	break;
 800b284:	e0ae      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800b28c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	601a      	str	r2, [r3, #0]
	break;
 800b292:	e0a7      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800b29a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	601a      	str	r2, [r3, #0]
	break;
 800b2a0:	e0a0      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800b2a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	601a      	str	r2, [r3, #0]
	break;
 800b2ae:	e099      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800b2b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	601a      	str	r2, [r3, #0]
	break;
 800b2bc:	e092      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b2c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	601a      	str	r2, [r3, #0]
	break;
 800b2ca:	e08b      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800b2d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	601a      	str	r2, [r3, #0]
	break;
 800b2d8:	e084      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b2e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	601a      	str	r2, [r3, #0]
	break;
 800b2e6:	e07d      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800b2ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	601a      	str	r2, [r3, #0]
	break;
 800b2f4:	e076      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800b2fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	601a      	str	r2, [r3, #0]
	break;
 800b302:	e06f      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800b30a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	601a      	str	r2, [r3, #0]
	break;
 800b310:	e068      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800b318:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	601a      	str	r2, [r3, #0]
	break;
 800b31e:	e061      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800b326:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	601a      	str	r2, [r3, #0]
	break;
 800b32c:	e05a      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800b334:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	601a      	str	r2, [r3, #0]
	break;
 800b33a:	e053      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800b342:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	601a      	str	r2, [r3, #0]
	break;
 800b348:	e04c      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800b350:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	601a      	str	r2, [r3, #0]
	break;
 800b356:	e045      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800b35e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	601a      	str	r2, [r3, #0]
	break;
 800b364:	e03e      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b36c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	601a      	str	r2, [r3, #0]
	break;
 800b372:	e037      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b37a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	601a      	str	r2, [r3, #0]
	break;
 800b380:	e030      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b388:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	601a      	str	r2, [r3, #0]
	break;
 800b38e:	e029      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b396:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	601a      	str	r2, [r3, #0]
	break;
 800b39c:	e022      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b3a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	601a      	str	r2, [r3, #0]
	break;
 800b3aa:	e01b      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800b3b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	601a      	str	r2, [r3, #0]
	break;
 800b3b8:	e014      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	601a      	str	r2, [r3, #0]
	break;
 800b3c6:	e00d      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800b3ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	601a      	str	r2, [r3, #0]
	break;
 800b3d4:	e006      	b.n	800b3e4 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b3dc:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b3de:	23fc      	movs	r3, #252	; 0xfc
 800b3e0:	75fb      	strb	r3, [r7, #23]
	break;
 800b3e2:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800b3e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	371c      	adds	r7, #28
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bc80      	pop	{r7}
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop

0800b3f4 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2208      	movs	r2, #8
 800b404:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	220b      	movs	r2, #11
 800b40a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b412:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b41a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b422:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800b42a:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b42c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3714      	adds	r7, #20
 800b434:	46bd      	mov	sp, r7
 800b436:	bc80      	pop	{r7}
 800b438:	4770      	bx	lr

0800b43a <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b085      	sub	sp, #20
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b442:	2300      	movs	r3, #0
 800b444:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2212      	movs	r2, #18
 800b450:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	220f      	movs	r2, #15
 800b456:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800b464:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	220c      	movs	r2, #12
 800b46a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b46c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	bc80      	pop	{r7}
 800b478:	4770      	bx	lr

0800b47a <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b084      	sub	sp, #16
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b484:	2300      	movs	r3, #0
 800b486:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	895b      	ldrh	r3, [r3, #10]
 800b48c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	895b      	ldrh	r3, [r3, #10]
 800b4aa:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	2240      	movs	r2, #64	; 0x40
 800b4ce:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10d      	bne.n	800b4f4 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d108      	bne.n	800b4f4 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d103      	bne.n	800b4f4 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	741a      	strb	r2, [r3, #16]
 800b4f2:	e002      	b.n	800b4fa <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800b4fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d114      	bne.n	800b52c <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800b506:	2b01      	cmp	r3, #1
 800b508:	d110      	bne.n	800b52c <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	6818      	ldr	r0, [r3, #0]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	7d1b      	ldrb	r3, [r3, #20]
 800b51e:	f000 ffbb 	bl	800c498 <VL53L1_calc_range_ignore_threshold>
 800b522:	4603      	mov	r3, r0
 800b524:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	82da      	strh	r2, [r3, #22]
 800b52a:	e002      	b.n	800b532 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	2200      	movs	r2, #0
 800b530:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800b53e:	b480      	push	{r7}
 800b540:	b085      	sub	sp, #20
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b546:	2300      	movs	r3, #0
 800b548:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b550:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b558:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b560:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b568:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2208      	movs	r2, #8
 800b56e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2228      	movs	r2, #40	; 0x28
 800b574:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2209      	movs	r2, #9
 800b57a:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3714      	adds	r7, #20
 800b584:	46bd      	mov	sp, r7
 800b586:	bc80      	pop	{r7}
 800b588:	4770      	bx	lr

0800b58a <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800b58a:	b480      	push	{r7}
 800b58c:	b085      	sub	sp, #20
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b592:	2300      	movs	r3, #0
 800b594:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f248 0203 	movw	r2, #32771	; 0x8003
 800b59c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f248 0201 	movw	r2, #32769	; 0x8001
 800b5a4:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f248 0241 	movw	r2, #32833	; 0x8041
 800b5ac:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	220e      	movs	r2, #14
 800b5b2:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	220a      	movs	r2, #10
 800b5b8:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2206      	movs	r2, #6
 800b5be:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	220e      	movs	r2, #14
 800b5c4:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	220a      	movs	r2, #10
 800b5ca:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2206      	movs	r2, #6
 800b5d0:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2221      	movs	r2, #33	; 0x21
 800b5dc:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b5f0:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b5f8:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b600:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	22c0      	movs	r2, #192	; 0xc0
 800b606:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	22c0      	movs	r2, #192	; 0xc0
 800b60c:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	22c0      	movs	r2, #192	; 0xc0
 800b612:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2208      	movs	r2, #8
 800b618:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2210      	movs	r2, #16
 800b61e:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2202      	movs	r2, #2
 800b62c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2202      	movs	r2, #2
 800b63c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b64e:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b656:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f248 0230 	movw	r2, #32816	; 0x8030
 800b65e:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b666:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b66e:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b676:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f24f 6218 	movw	r2, #63000	; 0xf618
 800b67e:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b686:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800b68e:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800b696:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800b698:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3714      	adds	r7, #20
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bc80      	pop	{r7}
 800b6a4:	4770      	bx	lr

0800b6a6 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b087      	sub	sp, #28
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	60f8      	str	r0, [r7, #12]
 800b6ae:	60b9      	str	r1, [r7, #8]
 800b6b0:	607a      	str	r2, [r7, #4]
 800b6b2:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b6be:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2211      	movs	r2, #17
 800b700:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2202      	movs	r2, #2
 800b706:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2202      	movs	r2, #2
 800b712:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2208      	movs	r2, #8
 800b718:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800b728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72a:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2201      	movs	r2, #1
 800b73e:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	22ff      	movs	r2, #255	; 0xff
 800b756:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800b758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b762:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2200      	movs	r2, #0
 800b778:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	2200      	movs	r2, #0
 800b77e:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	2200      	movs	r2, #0
 800b784:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	2220      	movs	r2, #32
 800b78a:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	220b      	movs	r2, #11
 800b790:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b794:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	2202      	movs	r2, #2
 800b79e:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	220d      	movs	r2, #13
 800b7a4:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800b7cc:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2238      	movs	r2, #56	; 0x38
 800b7d8:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	22ff      	movs	r2, #255	; 0xff
 800b7de:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	221a      	movs	r2, #26
 800b7f0:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2220      	movs	r2, #32
 800b7fc:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	22cc      	movs	r2, #204	; 0xcc
 800b808:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	220b      	movs	r2, #11
 800b80e:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	22f5      	movs	r2, #245	; 0xf5
 800b81a:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2209      	movs	r2, #9
 800b820:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800b822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b824:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2208      	movs	r2, #8
 800b836:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2278      	movs	r2, #120	; 0x78
 800b83c:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2201      	movs	r2, #1
 800b84e:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	2200      	movs	r2, #0
 800b854:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2200      	movs	r2, #0
 800b85a:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2200      	movs	r2, #0
 800b860:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	220b      	movs	r2, #11
 800b870:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	2209      	movs	r2, #9
 800b876:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87a:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2201      	movs	r2, #1
 800b88c:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b890:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	22c7      	movs	r2, #199	; 0xc7
 800b8a6:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	22ff      	movs	r2, #255	; 0xff
 800b8ac:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	22db      	movs	r2, #219	; 0xdb
 800b8b2:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	2202      	movs	r2, #2
 800b8b8:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800b8c6:	6a3b      	ldr	r3, [r7, #32]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800b8cc:	6a3b      	ldr	r3, [r7, #32]
 800b8ce:	2221      	movs	r2, #33	; 0x21
 800b8d0:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800b8d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	371c      	adds	r7, #28
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bc80      	pop	{r7}
 800b8de:	4770      	bx	lr

0800b8e0 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af02      	add	r7, sp, #8
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
 800b8ec:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f4:	9301      	str	r3, [sp, #4]
 800b8f6:	6a3b      	ldr	r3, [r7, #32]
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	68b9      	ldr	r1, [r7, #8]
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f7ff fed0 	bl	800b6a6 <VL53L1_preset_mode_standard_ranging>
 800b906:	4603      	mov	r3, r0
 800b908:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b90a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d121      	bne.n	800b956 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2207      	movs	r2, #7
 800b916:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2205      	movs	r2, #5
 800b91c:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800b926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b928:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2208      	movs	r2, #8
 800b932:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2238      	movs	r2, #56	; 0x38
 800b938:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2207      	movs	r2, #7
 800b93e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2205      	movs	r2, #5
 800b944:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800b946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b948:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800b94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b950:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b956:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3718      	adds	r7, #24
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b088      	sub	sp, #32
 800b966:	af02      	add	r7, sp, #8
 800b968:	60f8      	str	r0, [r7, #12]
 800b96a:	60b9      	str	r1, [r7, #8]
 800b96c:	607a      	str	r2, [r7, #4]
 800b96e:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b970:	2300      	movs	r3, #0
 800b972:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	6a3b      	ldr	r3, [r7, #32]
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	68b9      	ldr	r1, [r7, #8]
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f7ff fe8f 	bl	800b6a6 <VL53L1_preset_mode_standard_ranging>
 800b988:	4603      	mov	r3, r0
 800b98a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b98c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d121      	bne.n	800b9d8 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	220f      	movs	r2, #15
 800b998:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	220d      	movs	r2, #13
 800b99e:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2208      	movs	r2, #8
 800b9b4:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	22b8      	movs	r2, #184	; 0xb8
 800b9ba:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	220f      	movs	r2, #15
 800b9c0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	220d      	movs	r2, #13
 800b9c6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b9d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b088      	sub	sp, #32
 800b9e8:	af02      	add	r7, sp, #8
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	68b9      	ldr	r1, [r7, #8]
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f7ff fe4e 	bl	800b6a6 <VL53L1_preset_mode_standard_ranging>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ba0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d105      	bne.n	800ba22 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2202      	movs	r2, #2
 800ba1a:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	223b      	movs	r2, #59	; 0x3b
 800ba20:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ba22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3718      	adds	r7, #24
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b088      	sub	sp, #32
 800ba32:	af02      	add	r7, sp, #8
 800ba34:	60f8      	str	r0, [r7, #12]
 800ba36:	60b9      	str	r1, [r7, #8]
 800ba38:	607a      	str	r2, [r7, #4]
 800ba3a:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	9301      	str	r3, [sp, #4]
 800ba44:	6a3b      	ldr	r3, [r7, #32]
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	68b9      	ldr	r1, [r7, #8]
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f7ff fe29 	bl	800b6a6 <VL53L1_preset_mode_standard_ranging>
 800ba54:	4603      	mov	r3, r0
 800ba56:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ba58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d105      	bne.n	800ba6c <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	2202      	movs	r2, #2
 800ba64:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	225b      	movs	r2, #91	; 0x5b
 800ba6a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ba6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af02      	add	r7, sp, #8
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ba86:	2300      	movs	r3, #0
 800ba88:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	68b9      	ldr	r1, [r7, #8]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f7ff fe04 	bl	800b6a6 <VL53L1_preset_mode_standard_ranging>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800baa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d11a      	bne.n	800bae0 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2200      	movs	r2, #0
 800baae:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	22b1      	movs	r2, #177	; 0xb1
 800baba:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	22d4      	movs	r2, #212	; 0xd4
 800bac6:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bace:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800bada:	6a3b      	ldr	r3, [r7, #32]
 800badc:	2240      	movs	r2, #64	; 0x40
 800bade:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3718      	adds	r7, #24
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b088      	sub	sp, #32
 800baf0:	af02      	add	r7, sp, #8
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
 800baf8:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bafa:	2300      	movs	r3, #0
 800bafc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800bafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb00:	9301      	str	r3, [sp, #4]
 800bb02:	6a3b      	ldr	r3, [r7, #32]
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	68b9      	ldr	r1, [r7, #8]
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f7ff fee7 	bl	800b8e0 <VL53L1_preset_mode_standard_ranging_short_range>
 800bb12:	4603      	mov	r3, r0
 800bb14:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bb16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d11a      	bne.n	800bb54 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	2200      	movs	r2, #0
 800bb22:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2284      	movs	r2, #132	; 0x84
 800bb2e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	22b1      	movs	r2, #177	; 0xb1
 800bb3a:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bb42:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800bb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb46:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800bb4e:	6a3b      	ldr	r3, [r7, #32]
 800bb50:	2240      	movs	r2, #64	; 0x40
 800bb52:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bb54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3718      	adds	r7, #24
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b088      	sub	sp, #32
 800bb64:	af02      	add	r7, sp, #8
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	68b9      	ldr	r1, [r7, #8]
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f7ff feee 	bl	800b962 <VL53L1_preset_mode_standard_ranging_long_range>
 800bb86:	4603      	mov	r3, r0
 800bb88:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bb8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d11a      	bne.n	800bbc8 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2200      	movs	r2, #0
 800bb96:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2297      	movs	r2, #151	; 0x97
 800bba2:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	22b1      	movs	r2, #177	; 0xb1
 800bbae:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bbb6:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbba:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800bbc2:	6a3b      	ldr	r3, [r7, #32]
 800bbc4:	2240      	movs	r2, #64	; 0x40
 800bbc6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bbc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af02      	add	r7, sp, #8
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
 800bbe0:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	68b9      	ldr	r1, [r7, #8]
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f7ff ff3f 	bl	800ba78 <VL53L1_preset_mode_timed_ranging>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800bbfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d106      	bne.n	800bc14 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800bc06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc08:	6839      	ldr	r1, [r7, #0]
 800bc0a:	68b8      	ldr	r0, [r7, #8]
 800bc0c:	f000 fe6b 	bl	800c8e6 <VL53L1_config_low_power_auto_mode>
 800bc10:	4603      	mov	r3, r0
 800bc12:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800bc14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3718      	adds	r7, #24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b088      	sub	sp, #32
 800bc24:	af02      	add	r7, sp, #8
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
 800bc2c:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800bc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	68b9      	ldr	r1, [r7, #8]
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f7ff ff53 	bl	800baec <VL53L1_preset_mode_timed_ranging_short_range>
 800bc46:	4603      	mov	r3, r0
 800bc48:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800bc4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d106      	bne.n	800bc60 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800bc52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	68b8      	ldr	r0, [r7, #8]
 800bc58:	f000 fe45 	bl	800c8e6 <VL53L1_config_low_power_auto_mode>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800bc60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b088      	sub	sp, #32
 800bc70:	af02      	add	r7, sp, #8
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
 800bc78:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800bc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc80:	9301      	str	r3, [sp, #4]
 800bc82:	6a3b      	ldr	r3, [r7, #32]
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	68b9      	ldr	r1, [r7, #8]
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f7ff ff67 	bl	800bb60 <VL53L1_preset_mode_timed_ranging_long_range>
 800bc92:	4603      	mov	r3, r0
 800bc94:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800bc96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d106      	bne.n	800bcac <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800bc9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bca0:	6839      	ldr	r1, [r7, #0]
 800bca2:	68b8      	ldr	r0, [r7, #8]
 800bca4:	f000 fe1f 	bl	800c8e6 <VL53L1_config_low_power_auto_mode>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800bcac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3718      	adds	r7, #24
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b088      	sub	sp, #32
 800bcbc:	af02      	add	r7, sp, #8
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
 800bcc4:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	9301      	str	r3, [sp, #4]
 800bcce:	6a3b      	ldr	r3, [r7, #32]
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	68b9      	ldr	r1, [r7, #8]
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f7ff fce4 	bl	800b6a6 <VL53L1_preset_mode_standard_ranging>
 800bcde:	4603      	mov	r3, r0
 800bce0:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d116      	bne.n	800bd18 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	2200      	movs	r2, #0
 800bcee:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	22b1      	movs	r2, #177	; 0xb1
 800bcfa:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	22d4      	movs	r2, #212	; 0xd4
 800bd06:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800bd12:	6a3b      	ldr	r3, [r7, #32]
 800bd14:	2210      	movs	r2, #16
 800bd16:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bd18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b088      	sub	sp, #32
 800bd28:	af02      	add	r7, sp, #8
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bd32:	2300      	movs	r3, #0
 800bd34:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800bd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd38:	9301      	str	r3, [sp, #4]
 800bd3a:	6a3b      	ldr	r3, [r7, #32]
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f7ff fcae 	bl	800b6a6 <VL53L1_preset_mode_standard_ranging>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bd4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d102      	bne.n	800bd5c <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800bd5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3718      	adds	r7, #24
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2202      	movs	r2, #2
 800bd80:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	220d      	movs	r2, #13
 800bd88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f640 028e 	movw	r2, #2190	; 0x88e
 800bd92:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bd94:	bf00      	nop
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bc80      	pop	{r7}
 800bd9c:	4770      	bx	lr

0800bd9e <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b085      	sub	sp, #20
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	460b      	mov	r3, r1
 800bda8:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	332c      	adds	r3, #44	; 0x2c
 800bdb2:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	78fa      	ldrb	r2, [r7, #3]
 800bdb8:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	2202      	movs	r2, #2
 800bdc4:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	78fa      	ldrb	r2, [r7, #3]
 800bdd0:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	2202      	movs	r2, #2
 800bddc:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	2200      	movs	r2, #0
 800bde2:	71da      	strb	r2, [r3, #7]

}
 800bde4:	bf00      	nop
 800bde6:	3714      	adds	r7, #20
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bc80      	pop	{r7}
 800bdec:	4770      	bx	lr
	...

0800bdf0 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b087      	sub	sp, #28
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	332c      	adds	r3, #44	; 0x2c
 800be04:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800be0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10c      	bne.n	800be2e <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2203      	movs	r2, #3
 800be18:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2200      	movs	r2, #0
 800be1e:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2202      	movs	r2, #2
 800be24:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2200      	movs	r2, #0
 800be2a:	71da      	strb	r2, [r3, #7]
 800be2c:	e060      	b.n	800bef0 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	795b      	ldrb	r3, [r3, #5]
 800be32:	2bff      	cmp	r3, #255	; 0xff
 800be34:	d103      	bne.n	800be3e <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2280      	movs	r2, #128	; 0x80
 800be3a:	715a      	strb	r2, [r3, #5]
 800be3c:	e005      	b.n	800be4a <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	795b      	ldrb	r3, [r3, #5]
 800be42:	3301      	adds	r3, #1
 800be44:	b2da      	uxtb	r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	799b      	ldrb	r3, [r3, #6]
 800be4e:	f083 0302 	eor.w	r3, r3, #2
 800be52:	b2da      	uxtb	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	791b      	ldrb	r3, [r3, #4]
 800be5c:	3b03      	subs	r3, #3
 800be5e:	2b05      	cmp	r3, #5
 800be60:	d839      	bhi.n	800bed6 <VL53L1_update_ll_driver_rd_state+0xe6>
 800be62:	a201      	add	r2, pc, #4	; (adr r2, 800be68 <VL53L1_update_ll_driver_rd_state+0x78>)
 800be64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be68:	0800be81 	.word	0x0800be81
 800be6c:	0800bed7 	.word	0x0800bed7
 800be70:	0800bed7 	.word	0x0800bed7
 800be74:	0800beab 	.word	0x0800beab
 800be78:	0800beb9 	.word	0x0800beb9
 800be7c:	0800bec1 	.word	0x0800bec1

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800be86:	f003 0302 	and.w	r3, r3, #2
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	dd03      	ble.n	800be96 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2206      	movs	r2, #6
 800be92:	711a      	strb	r2, [r3, #4]
 800be94:	e002      	b.n	800be9c <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2208      	movs	r2, #8
 800be9a:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2200      	movs	r2, #0
 800bea0:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2200      	movs	r2, #0
 800bea6:	71da      	strb	r2, [r3, #7]

		break;
 800bea8:	e022      	b.n	800bef0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2208      	movs	r2, #8
 800beb4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800beb6:	e01b      	b.n	800bef0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2208      	movs	r2, #8
 800bebc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800bebe:	e017      	b.n	800bef0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	79db      	ldrb	r3, [r3, #7]
 800bec4:	f083 0301 	eor.w	r3, r3, #1
 800bec8:	b2da      	uxtb	r2, r3
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2208      	movs	r2, #8
 800bed2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800bed4:	e00c      	b.n	800bef0 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2203      	movs	r2, #3
 800beda:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2200      	movs	r2, #0
 800bee0:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2202      	movs	r2, #2
 800bee6:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	71da      	strb	r2, [r3, #7]

		break;
 800beee:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800bef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	371c      	adds	r7, #28
 800bef8:	46bd      	mov	sp, r7
 800befa:	bc80      	pop	{r7}
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop

0800bf00 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b089      	sub	sp, #36	; 0x24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	332c      	adds	r3, #44	; 0x2c
 800bf14:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800bf1c:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800bf22:	2300      	movs	r3, #0
 800bf24:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800bf26:	2300      	movs	r3, #0
 800bf28:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800bf2e:	f003 031f 	and.w	r3, r3, #31
 800bf32:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	78db      	ldrb	r3, [r3, #3]
 800bf38:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800bf3e:	111b      	asrs	r3, r3, #4
 800bf40:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800bf42:	f003 0302 	and.w	r3, r3, #2
 800bf46:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800bf4e:	f003 0320 	and.w	r3, r3, #32
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d017      	beq.n	800bf86 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	791b      	ldrb	r3, [r3, #4]
 800bf5a:	2b06      	cmp	r3, #6
 800bf5c:	d105      	bne.n	800bf6a <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800bf5e:	7bfb      	ldrb	r3, [r7, #15]
 800bf60:	2b12      	cmp	r3, #18
 800bf62:	d010      	beq.n	800bf86 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800bf64:	23ef      	movs	r3, #239	; 0xef
 800bf66:	77fb      	strb	r3, [r7, #31]
 800bf68:	e00d      	b.n	800bf86 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	795b      	ldrb	r3, [r3, #5]
 800bf6e:	7bba      	ldrb	r2, [r7, #14]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d001      	beq.n	800bf78 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800bf74:	23ee      	movs	r3, #238	; 0xee
 800bf76:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	799b      	ldrb	r3, [r3, #6]
 800bf7c:	7b7a      	ldrb	r2, [r7, #13]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d001      	beq.n	800bf86 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800bf82:	23ed      	movs	r3, #237	; 0xed
 800bf84:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800bf86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3724      	adds	r7, #36	; 0x24
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bc80      	pop	{r7}
 800bf92:	4770      	bx	lr

0800bf94 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b087      	sub	sp, #28
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	332c      	adds	r3, #44	; 0x2c
 800bfa8:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800bfb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d10c      	bne.n	800bfd2 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2203      	movs	r2, #3
 800bfbc:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2202      	movs	r2, #2
 800bfc8:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	70da      	strb	r2, [r3, #3]
 800bfd0:	e03e      	b.n	800c050 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	785b      	ldrb	r3, [r3, #1]
 800bfd6:	2bff      	cmp	r3, #255	; 0xff
 800bfd8:	d103      	bne.n	800bfe2 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2280      	movs	r2, #128	; 0x80
 800bfde:	705a      	strb	r2, [r3, #1]
 800bfe0:	e005      	b.n	800bfee <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	785b      	ldrb	r3, [r3, #1]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	789b      	ldrb	r3, [r3, #2]
 800bff2:	f083 0302 	eor.w	r3, r3, #2
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	2b03      	cmp	r3, #3
 800c002:	d002      	beq.n	800c00a <VL53L1_update_ll_driver_cfg_state+0x76>
 800c004:	2b04      	cmp	r3, #4
 800c006:	d00e      	beq.n	800c026 <VL53L1_update_ll_driver_cfg_state+0x92>
 800c008:	e015      	b.n	800c036 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	78db      	ldrb	r3, [r3, #3]
 800c00e:	f083 0301 	eor.w	r3, r3, #1
 800c012:	b2da      	uxtb	r2, r3
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2201      	movs	r2, #1
 800c01c:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2204      	movs	r2, #4
 800c022:	701a      	strb	r2, [r3, #0]
		break;
 800c024:	e014      	b.n	800c050 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	78db      	ldrb	r3, [r3, #3]
 800c02a:	f083 0301 	eor.w	r3, r3, #1
 800c02e:	b2da      	uxtb	r2, r3
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	70da      	strb	r2, [r3, #3]

		break;
 800c034:	e00c      	b.n	800c050 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2203      	movs	r2, #3
 800c03a:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2202      	movs	r2, #2
 800c046:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2200      	movs	r2, #0
 800c04c:	70da      	strb	r2, [r3, #3]

		break;
 800c04e:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800c050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c054:	4618      	mov	r0, r3
 800c056:	371c      	adds	r7, #28
 800c058:	46bd      	mov	sp, r7
 800c05a:	bc80      	pop	{r7}
 800c05c:	4770      	bx	lr

0800c05e <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800c05e:	b480      	push	{r7}
 800c060:	b083      	sub	sp, #12
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	7c1a      	ldrb	r2, [r3, #16]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	3301      	adds	r3, #1
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	7c52      	ldrb	r2, [r2, #17]
 800c078:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	3302      	adds	r3, #2
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	7c92      	ldrb	r2, [r2, #18]
 800c082:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	3303      	adds	r3, #3
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	7cd2      	ldrb	r2, [r2, #19]
 800c08c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	3304      	adds	r3, #4
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	7d12      	ldrb	r2, [r2, #20]
 800c096:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	3305      	adds	r3, #5
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	7d52      	ldrb	r2, [r2, #21]
 800c0a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	3306      	adds	r3, #6
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	7d92      	ldrb	r2, [r2, #22]
 800c0aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	3307      	adds	r3, #7
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	7dd2      	ldrb	r2, [r2, #23]
 800c0b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	3308      	adds	r3, #8
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	7e12      	ldrb	r2, [r2, #24]
 800c0be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	3309      	adds	r3, #9
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	7e52      	ldrb	r2, [r2, #25]
 800c0c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	330a      	adds	r3, #10
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	7e92      	ldrb	r2, [r2, #26]
 800c0d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	330b      	adds	r3, #11
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	7ed2      	ldrb	r2, [r2, #27]
 800c0dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	330c      	adds	r3, #12
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	7f12      	ldrb	r2, [r2, #28]
 800c0e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	330d      	adds	r3, #13
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	7f52      	ldrb	r2, [r2, #29]
 800c0f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	330e      	adds	r3, #14
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	7f92      	ldrb	r2, [r2, #30]
 800c0fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	330f      	adds	r3, #15
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	7fd2      	ldrb	r2, [r2, #31]
 800c104:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	3310      	adds	r3, #16
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c110:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	3311      	adds	r3, #17
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800c11c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	3312      	adds	r3, #18
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800c128:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	3313      	adds	r3, #19
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800c134:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	3314      	adds	r3, #20
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c140:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	3315      	adds	r3, #21
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c14c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	3316      	adds	r3, #22
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800c158:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	3317      	adds	r3, #23
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800c164:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	3318      	adds	r3, #24
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800c170:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	3319      	adds	r3, #25
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800c17c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	331a      	adds	r3, #26
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800c188:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	331b      	adds	r3, #27
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800c194:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	331c      	adds	r3, #28
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c1a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	331d      	adds	r3, #29
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c1ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	331e      	adds	r3, #30
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800c1b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	331f      	adds	r3, #31
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800c1c4:	701a      	strb	r2, [r3, #0]
}
 800c1c6:	bf00      	nop
 800c1c8:	370c      	adds	r7, #12
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bc80      	pop	{r7}
 800c1ce:	4770      	bx	lr

0800c1d0 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	603a      	str	r2, [r7, #0]
 800c1da:	80fb      	strh	r3, [r7, #6]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800c1e8:	88fb      	ldrh	r3, [r7, #6]
 800c1ea:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	81fb      	strh	r3, [r7, #14]
 800c1f0:	e00e      	b.n	800c210 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800c1f2:	88ba      	ldrh	r2, [r7, #4]
 800c1f4:	89fb      	ldrh	r3, [r7, #14]
 800c1f6:	1ad3      	subs	r3, r2, r3
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	89ba      	ldrh	r2, [r7, #12]
 800c200:	b2d2      	uxtb	r2, r2
 800c202:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800c204:	89bb      	ldrh	r3, [r7, #12]
 800c206:	0a1b      	lsrs	r3, r3, #8
 800c208:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800c20a:	89fb      	ldrh	r3, [r7, #14]
 800c20c:	3301      	adds	r3, #1
 800c20e:	81fb      	strh	r3, [r7, #14]
 800c210:	89fa      	ldrh	r2, [r7, #14]
 800c212:	88bb      	ldrh	r3, [r7, #4]
 800c214:	429a      	cmp	r2, r3
 800c216:	d3ec      	bcc.n	800c1f2 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800c218:	bf00      	nop
 800c21a:	bf00      	nop
 800c21c:	3714      	adds	r7, #20
 800c21e:	46bd      	mov	sp, r7
 800c220:	bc80      	pop	{r7}
 800c222:	4770      	bx	lr

0800c224 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	4603      	mov	r3, r0
 800c22c:	6039      	str	r1, [r7, #0]
 800c22e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800c230:	2300      	movs	r3, #0
 800c232:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800c234:	e00a      	b.n	800c24c <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800c236:	89fb      	ldrh	r3, [r7, #14]
 800c238:	021b      	lsls	r3, r3, #8
 800c23a:	b21a      	sxth	r2, r3
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	1c59      	adds	r1, r3, #1
 800c240:	6039      	str	r1, [r7, #0]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	b21b      	sxth	r3, r3
 800c246:	4313      	orrs	r3, r2
 800c248:	b21b      	sxth	r3, r3
 800c24a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800c24c:	88fb      	ldrh	r3, [r7, #6]
 800c24e:	1e5a      	subs	r2, r3, #1
 800c250:	80fa      	strh	r2, [r7, #6]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1ef      	bne.n	800c236 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800c256:	89fb      	ldrh	r3, [r7, #14]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3714      	adds	r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bc80      	pop	{r7}
 800c260:	4770      	bx	lr

0800c262 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c262:	b480      	push	{r7}
 800c264:	b085      	sub	sp, #20
 800c266:	af00      	add	r7, sp, #0
 800c268:	4603      	mov	r3, r0
 800c26a:	603a      	str	r2, [r7, #0]
 800c26c:	80fb      	strh	r3, [r7, #6]
 800c26e:	460b      	mov	r3, r1
 800c270:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800c276:	2300      	movs	r3, #0
 800c278:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800c27a:	88fb      	ldrh	r3, [r7, #6]
 800c27c:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800c27e:	2300      	movs	r3, #0
 800c280:	81fb      	strh	r3, [r7, #14]
 800c282:	e00f      	b.n	800c2a4 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800c284:	88ba      	ldrh	r2, [r7, #4]
 800c286:	89fb      	ldrh	r3, [r7, #14]
 800c288:	1ad3      	subs	r3, r2, r3
 800c28a:	3b01      	subs	r3, #1
 800c28c:	683a      	ldr	r2, [r7, #0]
 800c28e:	4413      	add	r3, r2
 800c290:	89ba      	ldrh	r2, [r7, #12]
 800c292:	b2d2      	uxtb	r2, r2
 800c294:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800c296:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c29a:	121b      	asrs	r3, r3, #8
 800c29c:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800c29e:	89fb      	ldrh	r3, [r7, #14]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	81fb      	strh	r3, [r7, #14]
 800c2a4:	89fa      	ldrh	r2, [r7, #14]
 800c2a6:	88bb      	ldrh	r3, [r7, #4]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d3eb      	bcc.n	800c284 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800c2ac:	bf00      	nop
 800c2ae:	bf00      	nop
 800c2b0:	3714      	adds	r7, #20
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bc80      	pop	{r7}
 800c2b6:	4770      	bx	lr

0800c2b8 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	4603      	mov	r3, r0
 800c2c0:	6039      	str	r1, [r7, #0]
 800c2c2:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	b25b      	sxtb	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	da0e      	bge.n	800c2f0 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800c2d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2d6:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800c2d8:	e00a      	b.n	800c2f0 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800c2da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c2de:	021b      	lsls	r3, r3, #8
 800c2e0:	b21a      	sxth	r2, r3
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	1c59      	adds	r1, r3, #1
 800c2e6:	6039      	str	r1, [r7, #0]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	b21b      	sxth	r3, r3
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800c2f0:	88fb      	ldrh	r3, [r7, #6]
 800c2f2:	1e5a      	subs	r2, r3, #1
 800c2f4:	80fa      	strh	r2, [r7, #6]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1ef      	bne.n	800c2da <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800c2fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3714      	adds	r7, #20
 800c302:	46bd      	mov	sp, r7
 800c304:	bc80      	pop	{r7}
 800c306:	4770      	bx	lr

0800c308 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c308:	b480      	push	{r7}
 800c30a:	b087      	sub	sp, #28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	460b      	mov	r3, r1
 800c312:	607a      	str	r2, [r7, #4]
 800c314:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800c316:	2300      	movs	r3, #0
 800c318:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800c322:	2300      	movs	r3, #0
 800c324:	82fb      	strh	r3, [r7, #22]
 800c326:	e00e      	b.n	800c346 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800c328:	897a      	ldrh	r2, [r7, #10]
 800c32a:	8afb      	ldrh	r3, [r7, #22]
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	3b01      	subs	r3, #1
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	4413      	add	r3, r2
 800c334:	693a      	ldr	r2, [r7, #16]
 800c336:	b2d2      	uxtb	r2, r2
 800c338:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	0a1b      	lsrs	r3, r3, #8
 800c33e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800c340:	8afb      	ldrh	r3, [r7, #22]
 800c342:	3301      	adds	r3, #1
 800c344:	82fb      	strh	r3, [r7, #22]
 800c346:	8afa      	ldrh	r2, [r7, #22]
 800c348:	897b      	ldrh	r3, [r7, #10]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d3ec      	bcc.n	800c328 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800c34e:	bf00      	nop
 800c350:	bf00      	nop
 800c352:	371c      	adds	r7, #28
 800c354:	46bd      	mov	sp, r7
 800c356:	bc80      	pop	{r7}
 800c358:	4770      	bx	lr

0800c35a <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c35a:	b480      	push	{r7}
 800c35c:	b085      	sub	sp, #20
 800c35e:	af00      	add	r7, sp, #0
 800c360:	4603      	mov	r3, r0
 800c362:	6039      	str	r1, [r7, #0]
 800c364:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800c36a:	e007      	b.n	800c37c <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	021a      	lsls	r2, r3, #8
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	1c59      	adds	r1, r3, #1
 800c374:	6039      	str	r1, [r7, #0]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	4313      	orrs	r3, r2
 800c37a:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800c37c:	88fb      	ldrh	r3, [r7, #6]
 800c37e:	1e5a      	subs	r2, r3, #1
 800c380:	80fa      	strh	r2, [r7, #6]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1f2      	bne.n	800c36c <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800c386:	68fb      	ldr	r3, [r7, #12]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bc80      	pop	{r7}
 800c390:	4770      	bx	lr

0800c392 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c392:	b480      	push	{r7}
 800c394:	b085      	sub	sp, #20
 800c396:	af00      	add	r7, sp, #0
 800c398:	4603      	mov	r3, r0
 800c39a:	6039      	str	r1, [r7, #0]
 800c39c:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	b25b      	sxtb	r3, r3
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	da0b      	bge.n	800c3c4 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800c3ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3b0:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800c3b2:	e007      	b.n	800c3c4 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	021a      	lsls	r2, r3, #8
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	1c59      	adds	r1, r3, #1
 800c3bc:	6039      	str	r1, [r7, #0]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800c3c4:	88fb      	ldrh	r3, [r7, #6]
 800c3c6:	1e5a      	subs	r2, r3, #1
 800c3c8:	80fa      	strh	r2, [r7, #6]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1f2      	bne.n	800c3b4 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bc80      	pop	{r7}
 800c3d8:	4770      	bx	lr

0800c3da <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b084      	sub	sp, #16
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	78fa      	ldrb	r2, [r7, #3]
 800c3f2:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	2183      	movs	r1, #131	; 0x83
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f001 fd01 	bl	800de08 <VL53L1_WrByte>
 800c406:	4603      	mov	r3, r0
 800c408:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800c40a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b084      	sub	sp, #16
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c41e:	2300      	movs	r3, #0
 800c420:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800c422:	2101      	movs	r1, #1
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff ffd8 	bl	800c3da <VL53L1_set_powerforce_register>
 800c42a:	4603      	mov	r3, r0
 800c42c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b086      	sub	sp, #24
 800c43e:	af00      	add	r7, sp, #0
 800c440:	4603      	mov	r3, r0
 800c442:	460a      	mov	r2, r1
 800c444:	80fb      	strh	r3, [r7, #6]
 800c446:	4613      	mov	r3, r2
 800c448:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800c44e:	2300      	movs	r3, #0
 800c450:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800c456:	88fb      	ldrh	r3, [r7, #6]
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 faa0 	bl	800c99e <VL53L1_calc_pll_period_us>
 800c45e:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800c460:	797b      	ldrb	r3, [r7, #5]
 800c462:	4618      	mov	r0, r3
 800c464:	f000 faae 	bl	800c9c4 <VL53L1_decode_vcsel_period>
 800c468:	4603      	mov	r3, r0
 800c46a:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800c46c:	697a      	ldr	r2, [r7, #20]
 800c46e:	4613      	mov	r3, r2
 800c470:	00db      	lsls	r3, r3, #3
 800c472:	4413      	add	r3, r2
 800c474:	021b      	lsls	r3, r3, #8
 800c476:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	099b      	lsrs	r3, r3, #6
 800c47c:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800c47e:	7cfa      	ldrb	r2, [r7, #19]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	fb02 f303 	mul.w	r3, r2, r3
 800c486:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	099b      	lsrs	r3, r3, #6
 800c48c:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800c48e:	68fb      	ldr	r3, [r7, #12]
}
 800c490:	4618      	mov	r0, r3
 800c492:	3718      	adds	r7, #24
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800c498:	b480      	push	{r7}
 800c49a:	b089      	sub	sp, #36	; 0x24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	4608      	mov	r0, r1
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	817b      	strh	r3, [r7, #10]
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	813b      	strh	r3, [r7, #8]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	011b      	lsls	r3, r3, #4
 800c4ca:	4a23      	ldr	r2, [pc, #140]	; (800c558 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c4cc:	fb82 1203 	smull	r1, r2, r2, r3
 800c4d0:	1192      	asrs	r2, r2, #6
 800c4d2:	17db      	asrs	r3, r3, #31
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800c4d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	da03      	bge.n	800c4e8 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800c4e0:	897b      	ldrh	r3, [r7, #10]
 800c4e2:	425b      	negs	r3, r3
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800c4e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	da03      	bge.n	800c4f8 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800c4f0:	893b      	ldrh	r3, [r7, #8]
 800c4f2:	425b      	negs	r3, r3
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800c4f8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800c4fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c500:	4413      	add	r3, r2
 800c502:	015b      	lsls	r3, r3, #5
 800c504:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	4a13      	ldr	r2, [pc, #76]	; (800c558 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c50a:	fb82 1203 	smull	r1, r2, r2, r3
 800c50e:	1192      	asrs	r2, r2, #6
 800c510:	17db      	asrs	r3, r3, #31
 800c512:	1ad3      	subs	r3, r2, r3
 800c514:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800c516:	697a      	ldr	r2, [r7, #20]
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	4413      	add	r3, r2
 800c51c:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800c51e:	79fa      	ldrb	r2, [r7, #7]
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	fb02 f303 	mul.w	r3, r2, r3
 800c526:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	3310      	adds	r3, #16
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	da00      	bge.n	800c532 <VL53L1_calc_range_ignore_threshold+0x9a>
 800c530:	331f      	adds	r3, #31
 800c532:	115b      	asrs	r3, r3, #5
 800c534:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c53c:	db03      	blt.n	800c546 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800c53e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c542:	83fb      	strh	r3, [r7, #30]
 800c544:	e001      	b.n	800c54a <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800c54a:	8bfb      	ldrh	r3, [r7, #30]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3724      	adds	r7, #36	; 0x24
 800c550:	46bd      	mov	sp, r7
 800c552:	bc80      	pop	{r7}
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	10624dd3 	.word	0x10624dd3

0800c55c <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800c566:	2300      	movs	r3, #0
 800c568:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	031a      	lsls	r2, r3, #12
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	085b      	lsrs	r3, r3, #1
 800c572:	441a      	add	r2, r3
	timeout_mclks   =
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	fbb2 f3f3 	udiv	r3, r2, r3
 800c57a:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800c57c:	68fb      	ldr	r3, [r7, #12]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	bc80      	pop	{r7}
 800c586:	4770      	bx	lr

0800c588 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7ff ffdd 	bl	800c55c <VL53L1_calc_timeout_mclks>
 800c5a2:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 f860 	bl	800c66a <VL53L1_encode_timeout>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800c5ae:	897b      	ldrh	r3, [r7, #10]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800c5b8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c5bc:	b087      	sub	sp, #28
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800c5c8:	f04f 0000 	mov.w	r0, #0
 800c5cc:	f04f 0100 	mov.w	r1, #0
 800c5d0:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800c5d4:	6879      	ldr	r1, [r7, #4]
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	4688      	mov	r8, r1
 800c5da:	4681      	mov	r9, r0
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	2000      	movs	r0, #0
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	fb04 f009 	mul.w	r0, r4, r9
 800c5e8:	fb08 f105 	mul.w	r1, r8, r5
 800c5ec:	4401      	add	r1, r0
 800c5ee:	fba8 2304 	umull	r2, r3, r8, r4
 800c5f2:	4419      	add	r1, r3
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800c5fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800c5fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c602:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800c606:	f143 0b00 	adc.w	fp, r3, #0
 800c60a:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800c60e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c612:	f04f 0200 	mov.w	r2, #0
 800c616:	f04f 0300 	mov.w	r3, #0
 800c61a:	0b02      	lsrs	r2, r0, #12
 800c61c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c620:	0b0b      	lsrs	r3, r1, #12
 800c622:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c62a:	697b      	ldr	r3, [r7, #20]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	371c      	adds	r7, #28
 800c630:	46bd      	mov	sp, r7
 800c632:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c636:	4770      	bx	lr

0800c638 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	4603      	mov	r3, r0
 800c640:	6039      	str	r1, [r7, #0]
 800c642:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800c648:	2300      	movs	r3, #0
 800c64a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800c64c:	88fb      	ldrh	r3, [r7, #6]
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 f836 	bl	800c6c0 <VL53L1_decode_timeout>
 800c654:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f7ff ffad 	bl	800c5b8 <VL53L1_calc_timeout_us>
 800c65e:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c660:	68bb      	ldr	r3, [r7, #8]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3710      	adds	r7, #16
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800c66a:	b480      	push	{r7}
 800c66c:	b087      	sub	sp, #28
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c672:	2300      	movs	r3, #0
 800c674:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c676:	2300      	movs	r3, #0
 800c678:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d017      	beq.n	800c6b4 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	3b01      	subs	r3, #1
 800c688:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c68a:	e005      	b.n	800c698 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	085b      	lsrs	r3, r3, #1
 800c690:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c692:	89fb      	ldrh	r3, [r7, #14]
 800c694:	3301      	adds	r3, #1
 800c696:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1f4      	bne.n	800c68c <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c6a2:	89fb      	ldrh	r3, [r7, #14]
 800c6a4:	021b      	lsls	r3, r3, #8
 800c6a6:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c6b0:	4413      	add	r3, r2
 800c6b2:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c6b4:	8afb      	ldrh	r3, [r7, #22]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	371c      	adds	r7, #28
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bc80      	pop	{r7}
 800c6be:	4770      	bx	lr

0800c6c0 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b085      	sub	sp, #20
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c6ce:	88fb      	ldrh	r3, [r7, #6]
 800c6d0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c6d2:	88fa      	ldrh	r2, [r7, #6]
 800c6d4:	0a12      	lsrs	r2, r2, #8
 800c6d6:	b292      	uxth	r2, r2
 800c6d8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c6da:	3301      	adds	r3, #1
 800c6dc:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c6de:	68fb      	ldr	r3, [r7, #12]
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3714      	adds	r7, #20
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bc80      	pop	{r7}
 800c6e8:	4770      	bx	lr

0800c6ea <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b088      	sub	sp, #32
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	60f8      	str	r0, [r7, #12]
 800c6f2:	60b9      	str	r1, [r7, #8]
 800c6f4:	607a      	str	r2, [r7, #4]
 800c6f6:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800c708:	887b      	ldrh	r3, [r7, #2]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d102      	bne.n	800c714 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800c70e:	23f1      	movs	r3, #241	; 0xf1
 800c710:	77fb      	strb	r3, [r7, #31]
 800c712:	e05d      	b.n	800c7d0 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c716:	799a      	ldrb	r2, [r3, #6]
 800c718:	887b      	ldrh	r3, [r7, #2]
 800c71a:	4611      	mov	r1, r2
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7ff fe8c 	bl	800c43a <VL53L1_calc_macro_period_us>
 800c722:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800c724:	6979      	ldr	r1, [r7, #20]
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f7ff ff18 	bl	800c55c <VL53L1_calc_timeout_mclks>
 800c72c:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	2bff      	cmp	r3, #255	; 0xff
 800c732:	d901      	bls.n	800c738 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800c734:	23ff      	movs	r3, #255	; 0xff
 800c736:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c740:	6979      	ldr	r1, [r7, #20]
 800c742:	68b8      	ldr	r0, [r7, #8]
 800c744:	f7ff ff20 	bl	800c588 <VL53L1_calc_encoded_timeout>
 800c748:	4603      	mov	r3, r0
 800c74a:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c74c:	8a7b      	ldrh	r3, [r7, #18]
 800c74e:	0a1b      	lsrs	r3, r3, #8
 800c750:	b29b      	uxth	r3, r3
 800c752:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c758:	8a7b      	ldrh	r3, [r7, #18]
 800c75a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75e:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c760:	6979      	ldr	r1, [r7, #20]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f7ff ff10 	bl	800c588 <VL53L1_calc_encoded_timeout>
 800c768:	4603      	mov	r3, r0
 800c76a:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c76c:	8a7b      	ldrh	r3, [r7, #18]
 800c76e:	0a1b      	lsrs	r3, r3, #8
 800c770:	b29b      	uxth	r3, r3
 800c772:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c776:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c778:	8a7b      	ldrh	r3, [r7, #18]
 800c77a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c782:	7a5a      	ldrb	r2, [r3, #9]
 800c784:	887b      	ldrh	r3, [r7, #2]
 800c786:	4611      	mov	r1, r2
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff fe56 	bl	800c43a <VL53L1_calc_macro_period_us>
 800c78e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800c790:	6979      	ldr	r1, [r7, #20]
 800c792:	68b8      	ldr	r0, [r7, #8]
 800c794:	f7ff fef8 	bl	800c588 <VL53L1_calc_encoded_timeout>
 800c798:	4603      	mov	r3, r0
 800c79a:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c79c:	8a7b      	ldrh	r3, [r7, #18]
 800c79e:	0a1b      	lsrs	r3, r3, #8
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800c7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c7a8:	8a7b      	ldrh	r3, [r7, #18]
 800c7aa:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800c7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ae:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800c7b0:	6979      	ldr	r1, [r7, #20]
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f7ff fee8 	bl	800c588 <VL53L1_calc_encoded_timeout>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c7bc:	8a7b      	ldrh	r3, [r7, #18]
 800c7be:	0a1b      	lsrs	r3, r3, #8
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800c7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c7c8:	8a7b      	ldrh	r3, [r7, #18]
 800c7ca:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800c7d0:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3720      	adds	r7, #32
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	603a      	str	r2, [r7, #0]
 800c7e6:	71fb      	strb	r3, [r7, #7]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800c7ec:	79fb      	ldrb	r3, [r7, #7]
 800c7ee:	2b07      	cmp	r3, #7
 800c7f0:	d90a      	bls.n	800c808 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800c7f2:	79bb      	ldrb	r3, [r7, #6]
 800c7f4:	00db      	lsls	r3, r3, #3
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	79fb      	ldrb	r3, [r7, #7]
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	3b71      	subs	r3, #113	; 0x71
 800c800:	b2da      	uxtb	r2, r3
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800c806:	e00a      	b.n	800c81e <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800c808:	79bb      	ldrb	r3, [r7, #6]
 800c80a:	f1c3 030f 	rsb	r3, r3, #15
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	00db      	lsls	r3, r3, #3
 800c812:	b2da      	uxtb	r2, r3
 800c814:	79fb      	ldrb	r3, [r7, #7]
 800c816:	4413      	add	r3, r2
 800c818:	b2da      	uxtb	r2, r3
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	701a      	strb	r2, [r3, #0]
}
 800c81e:	bf00      	nop
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	bc80      	pop	{r7}
 800c826:	4770      	bx	lr

0800c828 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	4603      	mov	r3, r0
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800c836:	7bfb      	ldrb	r3, [r7, #15]
 800c838:	091b      	lsrs	r3, r3, #4
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800c840:	7bfb      	ldrb	r3, [r7, #15]
 800c842:	f003 030f 	and.w	r3, r3, #15
 800c846:	b2da      	uxtb	r2, r3
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	701a      	strb	r2, [r3, #0]

}
 800c84c:	bf00      	nop
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	bc80      	pop	{r7}
 800c854:	4770      	bx	lr

0800c856 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800c856:	b480      	push	{r7}
 800c858:	b083      	sub	sp, #12
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	4603      	mov	r3, r0
 800c85e:	603a      	str	r2, [r7, #0]
 800c860:	71fb      	strb	r3, [r7, #7]
 800c862:	460b      	mov	r3, r1
 800c864:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800c866:	79bb      	ldrb	r3, [r7, #6]
 800c868:	011b      	lsls	r3, r3, #4
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	79fb      	ldrb	r3, [r7, #7]
 800c86e:	4413      	add	r3, r2
 800c870:	b2da      	uxtb	r2, r3
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	701a      	strb	r2, [r3, #0]

}
 800c876:	bf00      	nop
 800c878:	370c      	adds	r7, #12
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bc80      	pop	{r7}
 800c87e:	4770      	bx	lr

0800c880 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c888:	2300      	movs	r3, #0
 800c88a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2203      	movs	r2, #3
 800c894:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800c8d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bc80      	pop	{r7}
 800c8e4:	4770      	bx	lr

0800c8e6 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800c8e6:	b480      	push	{r7}
 800c8e8:	b087      	sub	sp, #28
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	60f8      	str	r0, [r7, #12]
 800c8ee:	60b9      	str	r1, [r7, #8]
 800c8f0:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	229b      	movs	r2, #155	; 0x9b
 800c906:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800c908:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	371c      	adds	r7, #28
 800c910:	46bd      	mov	sp, r7
 800c912:	bc80      	pop	{r7}
 800c914:	4770      	bx	lr

0800c916 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800c916:	b480      	push	{r7}
 800c918:	b085      	sub	sp, #20
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c922:	2300      	movs	r3, #0
 800c924:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800c944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c948:	b2da      	uxtb	r2, r3
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c956:	f003 0303 	and.w	r3, r3, #3
 800c95a:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c966:	4413      	add	r3, r2
 800c968:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800c990:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3714      	adds	r7, #20
 800c998:	46bd      	mov	sp, r7
 800c99a:	bc80      	pop	{r7}
 800c99c:	4770      	bx	lr

0800c99e <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800c99e:	b480      	push	{r7}
 800c9a0:	b085      	sub	sp, #20
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800c9ac:	88fb      	ldrh	r3, [r7, #6]
 800c9ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c9b2:	fb92 f3f3 	sdiv	r3, r2, r3
 800c9b6:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3714      	adds	r7, #20
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bc80      	pop	{r7}
 800c9c2:	4770      	bx	lr

0800c9c4 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800c9d2:	79fb      	ldrb	r3, [r7, #7]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800c9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bc80      	pop	{r7}
 800c9e6:	4770      	bx	lr

0800c9e8 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
 800c9f4:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800c9f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	da10      	bge.n	800ca20 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ca00:	43db      	mvns	r3, r3
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	f003 0307 	and.w	r3, r3, #7
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	3308      	adds	r3, #8
 800ca0c:	b2da      	uxtb	r2, r3
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800ca12:	7bfb      	ldrb	r3, [r7, #15]
 800ca14:	3b80      	subs	r3, #128	; 0x80
 800ca16:	10db      	asrs	r3, r3, #3
 800ca18:	b2da      	uxtb	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800ca1e:	e00c      	b.n	800ca3a <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
 800ca22:	f003 0307 	and.w	r3, r3, #7
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ca32:	10db      	asrs	r3, r3, #3
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	701a      	strb	r2, [r3, #0]
}
 800ca3a:	bf00      	nop
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bc80      	pop	{r7}
 800ca42:	4770      	bx	lr

0800ca44 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	607a      	str	r2, [r7, #4]
 800ca50:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ca52:	2300      	movs	r3, #0
 800ca54:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800ca56:	897b      	ldrh	r3, [r7, #10]
 800ca58:	2b0a      	cmp	r3, #10
 800ca5a:	d802      	bhi.n	800ca62 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ca5c:	f06f 0309 	mvn.w	r3, #9
 800ca60:	e047      	b.n	800caf2 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca6a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800ca78:	f002 020f 	and.w	r2, r2, #15
 800ca7c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800ca7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800ca88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ca8c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ca8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800ca98:	f002 0203 	and.w	r2, r2, #3
 800ca9c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ca9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800caa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800caac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800caae:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	88d8      	ldrh	r0, [r3, #6]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	3305      	adds	r3, #5
 800cab8:	461a      	mov	r2, r3
 800caba:	2102      	movs	r1, #2
 800cabc:	f7ff fb88 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800cac8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800cad2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800cadc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800cae0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800cae2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800caec:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800caee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3718      	adds	r7, #24
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b086      	sub	sp, #24
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	4603      	mov	r3, r0
 800cb02:	60b9      	str	r1, [r7, #8]
 800cb04:	607a      	str	r2, [r7, #4]
 800cb06:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800cb0c:	89fb      	ldrh	r3, [r7, #14]
 800cb0e:	2b0a      	cmp	r3, #10
 800cb10:	d802      	bhi.n	800cb18 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cb12:	f06f 0309 	mvn.w	r3, #9
 800cb16:	e046      	b.n	800cba6 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb20:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	f003 030f 	and.w	r3, r3, #15
 800cb30:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	3302      	adds	r3, #2
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb40:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	3303      	adds	r3, #3
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	f003 0303 	and.w	r3, r3, #3
 800cb50:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	3304      	adds	r3, #4
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb60:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	3305      	adds	r3, #5
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	2002      	movs	r0, #2
 800cb6e:	f7ff fb59 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800cb72:	4603      	mov	r3, r0
 800cb74:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	79da      	ldrb	r2, [r3, #7]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	7a1a      	ldrb	r2, [r3, #8]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	3309      	adds	r3, #9
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb94:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	7a9a      	ldrb	r2, [r3, #10]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800cba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3718      	adds	r7, #24
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b086      	sub	sp, #24
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800cbbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d108      	bne.n	800cbd6 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800cbc4:	f107 020c 	add.w	r2, r7, #12
 800cbc8:	230b      	movs	r3, #11
 800cbca:	2101      	movs	r1, #1
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f001 f8e5 	bl	800dd9c <VL53L1_ReadMulti>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800cbd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d108      	bne.n	800cbf0 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800cbde:	f107 030c 	add.w	r3, r7, #12
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	200b      	movs	r0, #11
 800cbe8:	f7ff ff87 	bl	800cafa <VL53L1_i2c_decode_static_nvm_managed>
 800cbec:	4603      	mov	r3, r0
 800cbee:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800cbf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3718      	adds	r7, #24
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b086      	sub	sp, #24
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	460b      	mov	r3, r1
 800cc06:	607a      	str	r2, [r7, #4]
 800cc08:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800cc0e:	897b      	ldrh	r3, [r7, #10]
 800cc10:	2b16      	cmp	r3, #22
 800cc12:	d802      	bhi.n	800cc1a <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cc14:	f06f 0309 	mvn.w	r3, #9
 800cc18:	e076      	b.n	800cd08 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800cc2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800cc34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800cc3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800cc48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800cc52:	f002 020f 	and.w	r2, r2, #15
 800cc56:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800cc58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800cc62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800cc6c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800cc70:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800cc72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800cc7c:	f002 0203 	and.w	r2, r2, #3
 800cc80:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800cc82:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	8958      	ldrh	r0, [r3, #10]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3309      	adds	r3, #9
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	2102      	movs	r1, #2
 800cc90:	f7ff fa9e 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	330b      	adds	r3, #11
 800cc9e:	461a      	mov	r2, r3
 800cca0:	2102      	movs	r1, #2
 800cca2:	f7ff fade 	bl	800c262 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	330d      	adds	r3, #13
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	2102      	movs	r1, #2
 800ccb4:	f7ff fad5 	bl	800c262 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	8a18      	ldrh	r0, [r3, #16]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	330f      	adds	r3, #15
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	2102      	movs	r1, #2
 800ccc4:	f7ff fa84 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800ccce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ccd2:	b218      	sxth	r0, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	3311      	adds	r3, #17
 800ccd8:	461a      	mov	r2, r3
 800ccda:	2102      	movs	r1, #2
 800ccdc:	f7ff fac1 	bl	800c262 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	3313      	adds	r3, #19
 800ccea:	461a      	mov	r2, r3
 800ccec:	2102      	movs	r1, #2
 800ccee:	f7ff fab8 	bl	800c262 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3315      	adds	r3, #21
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	2102      	movs	r1, #2
 800cd00:	f7ff faaf 	bl	800c262 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800cd04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3718      	adds	r7, #24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b086      	sub	sp, #24
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	4603      	mov	r3, r0
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
 800cd1c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800cd22:	89fb      	ldrh	r3, [r7, #14]
 800cd24:	2b16      	cmp	r3, #22
 800cd26:	d802      	bhi.n	800cd2e <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cd28:	f06f 0309 	mvn.w	r3, #9
 800cd2c:	e079      	b.n	800ce22 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	785a      	ldrb	r2, [r3, #1]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	789a      	ldrb	r2, [r3, #2]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	78da      	ldrb	r2, [r3, #3]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	791a      	ldrb	r2, [r3, #4]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	3305      	adds	r3, #5
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	f003 030f 	and.w	r3, r3, #15
 800cd60:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	799a      	ldrb	r2, [r3, #6]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	3307      	adds	r3, #7
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd78:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	3308      	adds	r3, #8
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	f003 0303 	and.w	r3, r3, #3
 800cd88:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	3309      	adds	r3, #9
 800cd92:	4619      	mov	r1, r3
 800cd94:	2002      	movs	r0, #2
 800cd96:	f7ff fa45 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	330b      	adds	r3, #11
 800cda6:	4619      	mov	r1, r3
 800cda8:	2002      	movs	r0, #2
 800cdaa:	f7ff fa85 	bl	800c2b8 <VL53L1_i2c_decode_int16_t>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	330d      	adds	r3, #13
 800cdba:	4619      	mov	r1, r3
 800cdbc:	2002      	movs	r0, #2
 800cdbe:	f7ff fa7b 	bl	800c2b8 <VL53L1_i2c_decode_int16_t>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	330f      	adds	r3, #15
 800cdce:	4619      	mov	r1, r3
 800cdd0:	2002      	movs	r0, #2
 800cdd2:	f7ff fa27 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	3311      	adds	r3, #17
 800cde2:	4619      	mov	r1, r3
 800cde4:	2002      	movs	r0, #2
 800cde6:	f7ff fa67 	bl	800c2b8 <VL53L1_i2c_decode_int16_t>
 800cdea:	4603      	mov	r3, r0
 800cdec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cdf0:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	3313      	adds	r3, #19
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	2002      	movs	r0, #2
 800cdfe:	f7ff fa5b 	bl	800c2b8 <VL53L1_i2c_decode_int16_t>
 800ce02:	4603      	mov	r3, r0
 800ce04:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	3315      	adds	r3, #21
 800ce0e:	4619      	mov	r1, r3
 800ce10:	2002      	movs	r0, #2
 800ce12:	f7ff fa51 	bl	800c2b8 <VL53L1_i2c_decode_int16_t>
 800ce16:	4603      	mov	r3, r0
 800ce18:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800ce1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3718      	adds	r7, #24
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b088      	sub	sp, #32
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ce34:	2300      	movs	r3, #0
 800ce36:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800ce38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d108      	bne.n	800ce52 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800ce40:	f107 0208 	add.w	r2, r7, #8
 800ce44:	2317      	movs	r3, #23
 800ce46:	210d      	movs	r1, #13
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 ffa7 	bl	800dd9c <VL53L1_ReadMulti>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800ce52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d108      	bne.n	800ce6c <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800ce5a:	f107 0308 	add.w	r3, r7, #8
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	4619      	mov	r1, r3
 800ce62:	2017      	movs	r0, #23
 800ce64:	f7ff ff54 	bl	800cd10 <VL53L1_i2c_decode_customer_nvm_managed>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800ce6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3720      	adds	r7, #32
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b086      	sub	sp, #24
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	460b      	mov	r3, r1
 800ce82:	607a      	str	r2, [r7, #4]
 800ce84:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ce86:	2300      	movs	r3, #0
 800ce88:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ce8a:	897b      	ldrh	r3, [r7, #10]
 800ce8c:	2b1f      	cmp	r3, #31
 800ce8e:	d802      	bhi.n	800ce96 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ce90:	f06f 0309 	mvn.w	r3, #9
 800ce94:	e0cf      	b.n	800d036 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	881b      	ldrh	r3, [r3, #0]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	2102      	movs	r1, #2
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7ff f996 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800ceac:	f002 0201 	and.w	r2, r2, #1
 800ceb0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ceb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800cebc:	f002 020f 	and.w	r2, r2, #15
 800cec0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800cec2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800cecc:	f002 020f 	and.w	r2, r2, #15
 800ced0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ced2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800cedc:	f002 021f 	and.w	r2, r2, #31
 800cee0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800cee2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ceec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cef0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800cef2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800cefc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cf00:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800cf02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800cf0c:	f002 0201 	and.w	r2, r2, #1
 800cf10:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800cf12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800cf1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800cf26:	f002 0201 	and.w	r2, r2, #1
 800cf2a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800cf2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800cf36:	f002 0203 	and.w	r2, r2, #3
 800cf3a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800cf3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800cf46:	f002 021f 	and.w	r2, r2, #31
 800cf4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800cf4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800cf56:	f002 0203 	and.w	r2, r2, #3
 800cf5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800cf5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800cf66:	f002 0203 	and.w	r2, r2, #3
 800cf6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800cf6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800cf76:	f002 0207 	and.w	r2, r2, #7
 800cf7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800cf7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800cf86:	f002 021f 	and.w	r2, r2, #31
 800cf8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800cf8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800cf96:	f002 0201 	and.w	r2, r2, #1
 800cf9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800cf9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800cfa6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800cfb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800cfba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800cfc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800cfca:	68fa      	ldr	r2, [r7, #12]
 800cfcc:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800cfce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800cfd8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	8b18      	ldrh	r0, [r3, #24]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	3318      	adds	r3, #24
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	2102      	movs	r1, #2
 800cfe6:	f7ff f8f3 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800cff2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800cffc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800d006:	f002 020f 	and.w	r2, r2, #15
 800d00a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800d00c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800d016:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800d020:	f002 020f 	and.w	r2, r2, #15
 800d024:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800d026:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800d030:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d032:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3718      	adds	r7, #24
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b086      	sub	sp, #24
 800d042:	af00      	add	r7, sp, #0
 800d044:	60f8      	str	r0, [r7, #12]
 800d046:	460b      	mov	r3, r1
 800d048:	607a      	str	r2, [r7, #4]
 800d04a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d04c:	2300      	movs	r3, #0
 800d04e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d050:	897b      	ldrh	r3, [r7, #10]
 800d052:	2b15      	cmp	r3, #21
 800d054:	d802      	bhi.n	800d05c <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d056:	f06f 0309 	mvn.w	r3, #9
 800d05a:	e070      	b.n	800d13e <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800d06c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800d076:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800d080:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d084:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800d086:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800d08c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d090:	b298      	uxth	r0, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	3304      	adds	r3, #4
 800d096:	461a      	mov	r2, r3
 800d098:	2102      	movs	r1, #2
 800d09a:	f7ff f899 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800d0a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d0aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d0ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800d0b2:	68fa      	ldr	r2, [r7, #12]
 800d0b4:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800d0b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800d0c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800d0ca:	f002 0201 	and.w	r2, r2, #1
 800d0ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d0d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800d0da:	f002 0207 	and.w	r2, r2, #7
 800d0de:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800d0e0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	8998      	ldrh	r0, [r3, #12]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	330c      	adds	r3, #12
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	2102      	movs	r1, #2
 800d0ee:	f7ff f86f 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	89d8      	ldrh	r0, [r3, #14]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	330e      	adds	r3, #14
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	2102      	movs	r1, #2
 800d0fe:	f7ff f867 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	8a18      	ldrh	r0, [r3, #16]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	3310      	adds	r3, #16
 800d10a:	461a      	mov	r2, r3
 800d10c:	2102      	movs	r1, #2
 800d10e:	f7ff f85f 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800d11a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800d124:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800d12e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800d138:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d13a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3718      	adds	r7, #24
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b086      	sub	sp, #24
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	60f8      	str	r0, [r7, #12]
 800d14e:	460b      	mov	r3, r1
 800d150:	607a      	str	r2, [r7, #4]
 800d152:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d154:	2300      	movs	r3, #0
 800d156:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d158:	897b      	ldrh	r3, [r7, #10]
 800d15a:	2b16      	cmp	r3, #22
 800d15c:	d802      	bhi.n	800d164 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d15e:	f06f 0309 	mvn.w	r3, #9
 800d162:	e06e      	b.n	800d242 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	f003 030f 	and.w	r3, r3, #15
 800d16c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800d17a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800d184:	f002 020f 	and.w	r2, r2, #15
 800d188:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800d18a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800d190:	68fa      	ldr	r2, [r7, #12]
 800d192:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800d194:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800d19e:	f002 020f 	and.w	r2, r2, #15
 800d1a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800d1a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800d1ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800d1b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800d1bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d1be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800d1c8:	f002 020f 	and.w	r2, r2, #15
 800d1cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800d1ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800d1d4:	68fa      	ldr	r2, [r7, #12]
 800d1d6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800d1d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800d1e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800d1e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d1e8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	8958      	ldrh	r0, [r3, #10]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	330a      	adds	r3, #10
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	2102      	movs	r1, #2
 800d1f6:	f7fe ffeb 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	8998      	ldrh	r0, [r3, #12]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	330c      	adds	r3, #12
 800d202:	461a      	mov	r2, r3
 800d204:	2102      	movs	r1, #2
 800d206:	f7fe ffe3 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800d212:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800d21c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6918      	ldr	r0, [r3, #16]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	3312      	adds	r3, #18
 800d226:	461a      	mov	r2, r3
 800d228:	2104      	movs	r1, #4
 800d22a:	f7ff f86d 	bl	800c308 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800d236:	f002 0201 	and.w	r2, r2, #1
 800d23a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800d23c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d23e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d242:	4618      	mov	r0, r3
 800d244:	3718      	adds	r7, #24
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b086      	sub	sp, #24
 800d24e:	af00      	add	r7, sp, #0
 800d250:	60f8      	str	r0, [r7, #12]
 800d252:	460b      	mov	r3, r1
 800d254:	607a      	str	r2, [r7, #4]
 800d256:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d258:	2300      	movs	r3, #0
 800d25a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d25c:	897b      	ldrh	r3, [r7, #10]
 800d25e:	2b11      	cmp	r3, #17
 800d260:	d802      	bhi.n	800d268 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d262:	f06f 0309 	mvn.w	r3, #9
 800d266:	e071      	b.n	800d34c <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	f003 0303 	and.w	r3, r3, #3
 800d270:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	8858      	ldrh	r0, [r3, #2]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	3301      	adds	r3, #1
 800d27e:	461a      	mov	r2, r3
 800d280:	2102      	movs	r1, #2
 800d282:	f7fe ffa5 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	8898      	ldrh	r0, [r3, #4]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	3303      	adds	r3, #3
 800d28e:	461a      	mov	r2, r3
 800d290:	2102      	movs	r1, #2
 800d292:	f7fe ff9d 	bl	800c1d0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800d29e:	f002 0201 	and.w	r2, r2, #1
 800d2a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800d2a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800d2ae:	f002 0207 	and.w	r2, r2, #7
 800d2b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d2b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800d2be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800d2c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800d2d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d2d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d2d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800d2e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d2e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800d2e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800d2f2:	f002 0203 	and.w	r2, r2, #3
 800d2f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800d2f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800d302:	f002 0203 	and.w	r2, r2, #3
 800d306:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800d308:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800d312:	f002 020f 	and.w	r2, r2, #15
 800d316:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800d318:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800d322:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800d32c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800d336:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800d340:	f002 0203 	and.w	r2, r2, #3
 800d344:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800d346:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d348:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3718      	adds	r7, #24
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d354:	b480      	push	{r7}
 800d356:	b087      	sub	sp, #28
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	460b      	mov	r3, r1
 800d35e:	607a      	str	r2, [r7, #4]
 800d360:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d362:	2300      	movs	r3, #0
 800d364:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800d366:	897b      	ldrh	r3, [r7, #10]
 800d368:	2b04      	cmp	r3, #4
 800d36a:	d802      	bhi.n	800d372 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d36c:	f06f 0309 	mvn.w	r3, #9
 800d370:	e025      	b.n	800d3be <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	f003 0301 	and.w	r3, r3, #1
 800d37a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800d388:	f002 0201 	and.w	r2, r2, #1
 800d38c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800d38e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800d398:	f002 0201 	and.w	r2, r2, #1
 800d39c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800d39e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800d3a8:	f002 0203 	and.w	r2, r2, #3
 800d3ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800d3ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800d3b8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d3ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	371c      	adds	r7, #28
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bc80      	pop	{r7}
 800d3c6:	4770      	bx	lr

0800d3c8 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800d3da:	89fb      	ldrh	r3, [r7, #14]
 800d3dc:	2b2b      	cmp	r3, #43	; 0x2b
 800d3de:	d802      	bhi.n	800d3e6 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d3e0:	f06f 0309 	mvn.w	r3, #9
 800d3e4:	e0e2      	b.n	800d5ac <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3ee:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	785a      	ldrb	r2, [r3, #1]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	3302      	adds	r3, #2
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	f003 030f 	and.w	r3, r3, #15
 800d406:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	78da      	ldrb	r2, [r3, #3]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	3304      	adds	r3, #4
 800d418:	4619      	mov	r1, r3
 800d41a:	2002      	movs	r0, #2
 800d41c:	f7fe ff02 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d420:	4603      	mov	r3, r0
 800d422:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	3306      	adds	r3, #6
 800d42c:	4619      	mov	r1, r3
 800d42e:	2002      	movs	r0, #2
 800d430:	f7fe fef8 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d434:	4603      	mov	r3, r0
 800d436:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	3308      	adds	r3, #8
 800d440:	4619      	mov	r1, r3
 800d442:	2002      	movs	r0, #2
 800d444:	f7fe feee 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d448:	4603      	mov	r3, r0
 800d44a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	330a      	adds	r3, #10
 800d454:	4619      	mov	r1, r3
 800d456:	2002      	movs	r0, #2
 800d458:	f7fe fee4 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d45c:	4603      	mov	r3, r0
 800d45e:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	330c      	adds	r3, #12
 800d468:	4619      	mov	r1, r3
 800d46a:	2002      	movs	r0, #2
 800d46c:	f7fe feda 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d470:	4603      	mov	r3, r0
 800d472:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	330e      	adds	r3, #14
 800d47c:	4619      	mov	r1, r3
 800d47e:	2002      	movs	r0, #2
 800d480:	f7fe fed0 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d484:	4603      	mov	r3, r0
 800d486:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	3310      	adds	r3, #16
 800d490:	4619      	mov	r1, r3
 800d492:	2002      	movs	r0, #2
 800d494:	f7fe fec6 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d498:	4603      	mov	r3, r0
 800d49a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	3312      	adds	r3, #18
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	2002      	movs	r0, #2
 800d4a8:	f7fe febc 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	3314      	adds	r3, #20
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	2002      	movs	r0, #2
 800d4bc:	f7fe feb2 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	3316      	adds	r3, #22
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	2002      	movs	r0, #2
 800d4d0:	f7fe fea8 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	3318      	adds	r3, #24
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	2002      	movs	r0, #2
 800d4e4:	f7fe fe9e 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	331a      	adds	r3, #26
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	2002      	movs	r0, #2
 800d4f8:	f7fe fe94 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	331c      	adds	r3, #28
 800d508:	4619      	mov	r1, r3
 800d50a:	2002      	movs	r0, #2
 800d50c:	f7fe fe8a 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d510:	4603      	mov	r3, r0
 800d512:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	331e      	adds	r3, #30
 800d51c:	4619      	mov	r1, r3
 800d51e:	2002      	movs	r0, #2
 800d520:	f7fe fe80 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d524:	4603      	mov	r3, r0
 800d526:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	3320      	adds	r3, #32
 800d530:	4619      	mov	r1, r3
 800d532:	2002      	movs	r0, #2
 800d534:	f7fe fe76 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d538:	4603      	mov	r3, r0
 800d53a:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	3322      	adds	r3, #34	; 0x22
 800d544:	4619      	mov	r1, r3
 800d546:	2002      	movs	r0, #2
 800d548:	f7fe fe6c 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d54c:	4603      	mov	r3, r0
 800d54e:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	3324      	adds	r3, #36	; 0x24
 800d558:	4619      	mov	r1, r3
 800d55a:	2002      	movs	r0, #2
 800d55c:	f7fe fe62 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d560:	4603      	mov	r3, r0
 800d562:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	3326      	adds	r3, #38	; 0x26
 800d56c:	4619      	mov	r1, r3
 800d56e:	2002      	movs	r0, #2
 800d570:	f7fe fe58 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d574:	4603      	mov	r3, r0
 800d576:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	3328      	adds	r3, #40	; 0x28
 800d580:	4619      	mov	r1, r3
 800d582:	2002      	movs	r0, #2
 800d584:	f7fe fe4e 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d588:	4603      	mov	r3, r0
 800d58a:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800d5a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3718      	adds	r7, #24
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b086      	sub	sp, #24
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	607a      	str	r2, [r7, #4]
 800d5c0:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800d5c6:	89fb      	ldrh	r3, [r7, #14]
 800d5c8:	2b20      	cmp	r3, #32
 800d5ca:	d802      	bhi.n	800d5d2 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d5cc:	f06f 0309 	mvn.w	r3, #9
 800d5d0:	e04d      	b.n	800d66e <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800d5d2:	68b9      	ldr	r1, [r7, #8]
 800d5d4:	2004      	movs	r0, #4
 800d5d6:	f7fe fec0 	bl	800c35a <VL53L1_i2c_decode_uint32_t>
 800d5da:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	2004      	movs	r0, #4
 800d5e8:	f7fe feb7 	bl	800c35a <VL53L1_i2c_decode_uint32_t>
 800d5ec:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	3308      	adds	r3, #8
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	2004      	movs	r0, #4
 800d5fa:	f7fe feca 	bl	800c392 <VL53L1_i2c_decode_int32_t>
 800d5fe:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	330c      	adds	r3, #12
 800d608:	4619      	mov	r1, r3
 800d60a:	2004      	movs	r0, #4
 800d60c:	f7fe fea5 	bl	800c35a <VL53L1_i2c_decode_uint32_t>
 800d610:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	3310      	adds	r3, #16
 800d61a:	4619      	mov	r1, r3
 800d61c:	2004      	movs	r0, #4
 800d61e:	f7fe fe9c 	bl	800c35a <VL53L1_i2c_decode_uint32_t>
 800d622:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	3314      	adds	r3, #20
 800d62c:	4619      	mov	r1, r3
 800d62e:	2004      	movs	r0, #4
 800d630:	f7fe fe93 	bl	800c35a <VL53L1_i2c_decode_uint32_t>
 800d634:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	3318      	adds	r3, #24
 800d63e:	4619      	mov	r1, r3
 800d640:	2004      	movs	r0, #4
 800d642:	f7fe fea6 	bl	800c392 <VL53L1_i2c_decode_int32_t>
 800d646:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	331c      	adds	r3, #28
 800d650:	4619      	mov	r1, r3
 800d652:	2004      	movs	r0, #4
 800d654:	f7fe fe81 	bl	800c35a <VL53L1_i2c_decode_uint32_t>
 800d658:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	f893 2020 	ldrb.w	r2, [r3, #32]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800d66a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3718      	adds	r7, #24
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b086      	sub	sp, #24
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	4603      	mov	r3, r0
 800d67e:	60b9      	str	r1, [r7, #8]
 800d680:	607a      	str	r2, [r7, #4]
 800d682:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d684:	2300      	movs	r3, #0
 800d686:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800d688:	89fb      	ldrh	r3, [r7, #14]
 800d68a:	2b37      	cmp	r3, #55	; 0x37
 800d68c:	d802      	bhi.n	800d694 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d68e:	f06f 0309 	mvn.w	r3, #9
 800d692:	e15e      	b.n	800d952 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800d694:	68b9      	ldr	r1, [r7, #8]
 800d696:	2002      	movs	r0, #2
 800d698:	f7fe fdc4 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d69c:	4603      	mov	r3, r0
 800d69e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	3302      	adds	r3, #2
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6ae:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	3303      	adds	r3, #3
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6be:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	3304      	adds	r3, #4
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	f003 0303 	and.w	r3, r3, #3
 800d6ce:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	3305      	adds	r3, #5
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	f003 0301 	and.w	r3, r3, #1
 800d6de:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	3306      	adds	r3, #6
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6ee:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	3307      	adds	r3, #7
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6fe:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	3308      	adds	r3, #8
 800d708:	4619      	mov	r1, r3
 800d70a:	2002      	movs	r0, #2
 800d70c:	f7fe fd8a 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d710:	4603      	mov	r3, r0
 800d712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d716:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	330a      	adds	r3, #10
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	f003 0303 	and.w	r3, r3, #3
 800d726:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	330b      	adds	r3, #11
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	f003 0303 	and.w	r3, r3, #3
 800d736:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	330c      	adds	r3, #12
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	f003 030f 	and.w	r3, r3, #15
 800d746:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	330d      	adds	r3, #13
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	f003 0307 	and.w	r3, r3, #7
 800d756:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	330e      	adds	r3, #14
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	f003 0301 	and.w	r3, r3, #1
 800d766:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	330f      	adds	r3, #15
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	f003 0303 	and.w	r3, r3, #3
 800d776:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	7c1a      	ldrb	r2, [r3, #16]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	7c5a      	ldrb	r2, [r3, #17]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	3312      	adds	r3, #18
 800d790:	4619      	mov	r1, r3
 800d792:	2002      	movs	r0, #2
 800d794:	f7fe fd46 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d798:	4603      	mov	r3, r0
 800d79a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d79e:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	3316      	adds	r3, #22
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	2002      	movs	r0, #2
 800d7ac:	f7fe fd3a 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	3318      	adds	r3, #24
 800d7bc:	4619      	mov	r1, r3
 800d7be:	2002      	movs	r0, #2
 800d7c0:	f7fe fd30 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	331a      	adds	r3, #26
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	f003 0301 	and.w	r3, r3, #1
 800d7d6:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	331b      	adds	r3, #27
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	f003 0307 	and.w	r3, r3, #7
 800d7e6:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	7f1a      	ldrb	r2, [r3, #28]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	7f5a      	ldrb	r2, [r3, #29]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	331e      	adds	r3, #30
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d806:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	331f      	adds	r3, #31
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d816:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	3320      	adds	r3, #32
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	f003 0303 	and.w	r3, r3, #3
 800d826:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	3321      	adds	r3, #33	; 0x21
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	f003 030f 	and.w	r3, r3, #15
 800d836:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	3325      	adds	r3, #37	; 0x25
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	f003 0301 	and.w	r3, r3, #1
 800d86a:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	3326      	adds	r3, #38	; 0x26
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	f003 0303 	and.w	r3, r3, #3
 800d87c:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	3327      	adds	r3, #39	; 0x27
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	f003 031f 	and.w	r3, r3, #31
 800d88e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	3328      	adds	r3, #40	; 0x28
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	f003 031f 	and.w	r3, r3, #31
 800d8a0:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	3329      	adds	r3, #41	; 0x29
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	f003 031f 	and.w	r3, r3, #31
 800d8b2:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	332a      	adds	r3, #42	; 0x2a
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	f003 0301 	and.w	r3, r3, #1
 800d8c4:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	332b      	adds	r3, #43	; 0x2b
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	f003 0301 	and.w	r3, r3, #1
 800d8d6:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	332c      	adds	r3, #44	; 0x2c
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	f003 0303 	and.w	r3, r3, #3
 800d8e8:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	332d      	adds	r3, #45	; 0x2d
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8fa:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	332e      	adds	r3, #46	; 0x2e
 800d906:	4619      	mov	r1, r3
 800d908:	2004      	movs	r0, #4
 800d90a:	f7fe fd26 	bl	800c35a <VL53L1_i2c_decode_uint32_t>
 800d90e:	4603      	mov	r3, r0
 800d910:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	3332      	adds	r3, #50	; 0x32
 800d91c:	4619      	mov	r1, r3
 800d91e:	2004      	movs	r0, #4
 800d920:	f7fe fd1b 	bl	800c35a <VL53L1_i2c_decode_uint32_t>
 800d924:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	3336      	adds	r3, #54	; 0x36
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	f003 0301 	and.w	r3, r3, #1
 800d934:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	3337      	adds	r3, #55	; 0x37
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	f003 0301 	and.w	r3, r3, #1
 800d946:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800d94e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3718      	adds	r7, #24
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b086      	sub	sp, #24
 800d95e:	af00      	add	r7, sp, #0
 800d960:	4603      	mov	r3, r0
 800d962:	60b9      	str	r1, [r7, #8]
 800d964:	607a      	str	r2, [r7, #4]
 800d966:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d968:	2300      	movs	r3, #0
 800d96a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800d96c:	89fb      	ldrh	r3, [r7, #14]
 800d96e:	2b30      	cmp	r3, #48	; 0x30
 800d970:	d802      	bhi.n	800d978 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d972:	f06f 0309 	mvn.w	r3, #9
 800d976:	e112      	b.n	800db9e <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	785a      	ldrb	r2, [r3, #1]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	789a      	ldrb	r2, [r3, #2]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	3303      	adds	r3, #3
 800d994:	4619      	mov	r1, r3
 800d996:	2002      	movs	r0, #2
 800d998:	f7fe fc44 	bl	800c224 <VL53L1_i2c_decode_uint16_t>
 800d99c:	4603      	mov	r3, r0
 800d99e:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	3305      	adds	r3, #5
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ae:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	3306      	adds	r3, #6
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	f003 0307 	and.w	r3, r3, #7
 800d9be:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	3307      	adds	r3, #7
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	f003 0307 	and.w	r3, r3, #7
 800d9ce:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	3308      	adds	r3, #8
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9de:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	3309      	adds	r3, #9
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9ee:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	330a      	adds	r3, #10
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	f003 0301 	and.w	r3, r3, #1
 800d9fe:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	330b      	adds	r3, #11
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da0e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	330c      	adds	r3, #12
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	f003 0301 	and.w	r3, r3, #1
 800da1e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	330d      	adds	r3, #13
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da2e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	330e      	adds	r3, #14
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da3e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	7bda      	ldrb	r2, [r3, #15]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	7c1a      	ldrb	r2, [r3, #16]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	7c5a      	ldrb	r2, [r3, #17]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	7c9a      	ldrb	r2, [r3, #18]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	7cda      	ldrb	r2, [r3, #19]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	7d1a      	ldrb	r2, [r3, #20]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	7d5a      	ldrb	r2, [r3, #21]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	7d9a      	ldrb	r2, [r3, #22]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	7dda      	ldrb	r2, [r3, #23]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	7e1a      	ldrb	r2, [r3, #24]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	7e5a      	ldrb	r2, [r3, #25]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	7e9a      	ldrb	r2, [r3, #26]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	7eda      	ldrb	r2, [r3, #27]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	7f1a      	ldrb	r2, [r3, #28]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	7f5a      	ldrb	r2, [r3, #29]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	7f9a      	ldrb	r2, [r3, #30]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	7fda      	ldrb	r2, [r3, #31]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800db9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b090      	sub	sp, #64	; 0x40
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
 800dbae:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800dbb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10a      	bne.n	800dbd4 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800dbbe:	f107 020c 	add.w	r2, r7, #12
 800dbc2:	2331      	movs	r3, #49	; 0x31
 800dbc4:	f240 110f 	movw	r1, #271	; 0x10f
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f8e7 	bl	800dd9c <VL53L1_ReadMulti>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800dbd4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d109      	bne.n	800dbf0 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800dbdc:	f107 030c 	add.w	r3, r7, #12
 800dbe0:	683a      	ldr	r2, [r7, #0]
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	2031      	movs	r0, #49	; 0x31
 800dbe6:	f7ff feb8 	bl	800d95a <VL53L1_i2c_decode_nvm_copy_data>
 800dbea:	4603      	mov	r3, r0
 800dbec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800dbf0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3740      	adds	r7, #64	; 0x40
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af02      	add	r7, sp, #8
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800dc06:	2300      	movs	r3, #0
 800dc08:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800dc0a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 f9b6 	bl	800df80 <VL53L1_WaitUs>
 800dc14:	4603      	mov	r3, r0
 800dc16:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800dc18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d10b      	bne.n	800dc38 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800dc20:	2301      	movs	r3, #1
 800dc22:	9301      	str	r3, [sp, #4]
 800dc24:	2301      	movs	r3, #1
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	2301      	movs	r3, #1
 800dc2a:	22e5      	movs	r2, #229	; 0xe5
 800dc2c:	6839      	ldr	r1, [r7, #0]
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 f9bc 	bl	800dfac <VL53L1_WaitValueMaskEx>
 800dc34:	4603      	mov	r3, r0
 800dc36:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800dc38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d103      	bne.n	800dc48 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800dc40:	2103      	movs	r1, #3
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f7fe f8ab 	bl	800bd9e <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800dc48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b088      	sub	sp, #32
 800dc58:	af02      	add	r7, sp, #8
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800dc66:	2300      	movs	r3, #0
 800dc68:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800dc74:	f003 0310 	and.w	r3, r3, #16
 800dc78:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800dc7a:	7bfb      	ldrb	r3, [r7, #15]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d102      	bne.n	800dc86 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 800dc80:	2301      	movs	r3, #1
 800dc82:	75fb      	strb	r3, [r7, #23]
 800dc84:	e001      	b.n	800dc8a <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 800dc86:	2300      	movs	r3, #0
 800dc88:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 800dc8a:	7dfb      	ldrb	r3, [r7, #23]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	9201      	str	r2, [sp, #4]
 800dc90:	2201      	movs	r2, #1
 800dc92:	9200      	str	r2, [sp, #0]
 800dc94:	2231      	movs	r2, #49	; 0x31
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 f987 	bl	800dfac <VL53L1_WaitValueMaskEx>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800dca2:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3718      	adds	r7, #24
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b088      	sub	sp, #32
 800dcb2:	af02      	add	r7, sp, #8
 800dcb4:	60f8      	str	r0, [r7, #12]
 800dcb6:	60b9      	str	r1, [r7, #8]
 800dcb8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	330a      	adds	r3, #10
 800dcbe:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800dccc:	b299      	uxth	r1, r3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	f7f7 fa75 	bl	80051c8 <HAL_I2C_Master_Transmit>
 800dcde:	4603      	mov	r3, r0
 800dce0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800dce2:	693b      	ldr	r3, [r7, #16]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3718      	adds	r7, #24
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b088      	sub	sp, #32
 800dcf0:	af02      	add	r7, sp, #8
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	330a      	adds	r3, #10
 800dcfc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800dd0a:	f043 0301 	orr.w	r3, r3, #1
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	b299      	uxth	r1, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	4613      	mov	r3, r2
 800dd1c:	68ba      	ldr	r2, [r7, #8]
 800dd1e:	f7f7 fb51 	bl	80053c4 <HAL_I2C_Master_Receive>
 800dd22:	4603      	mov	r3, r0
 800dd24:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800dd26:	693b      	ldr	r3, [r7, #16]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3718      	adds	r7, #24
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	607a      	str	r2, [r7, #4]
 800dd3a:	603b      	str	r3, [r7, #0]
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800dd40:	2300      	movs	r3, #0
 800dd42:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	2bff      	cmp	r3, #255	; 0xff
 800dd48:	d902      	bls.n	800dd50 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800dd4a:	f06f 0303 	mvn.w	r3, #3
 800dd4e:	e01d      	b.n	800dd8c <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800dd50:	897b      	ldrh	r3, [r7, #10]
 800dd52:	0a1b      	lsrs	r3, r3, #8
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	4b0e      	ldr	r3, [pc, #56]	; (800dd94 <VL53L1_WriteMulti+0x64>)
 800dd5a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800dd5c:	897b      	ldrh	r3, [r7, #10]
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	4b0c      	ldr	r3, [pc, #48]	; (800dd94 <VL53L1_WriteMulti+0x64>)
 800dd62:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800dd64:	683a      	ldr	r2, [r7, #0]
 800dd66:	6879      	ldr	r1, [r7, #4]
 800dd68:	480b      	ldr	r0, [pc, #44]	; (800dd98 <VL53L1_WriteMulti+0x68>)
 800dd6a:	f000 fd7d 	bl	800e868 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	3302      	adds	r3, #2
 800dd72:	461a      	mov	r2, r3
 800dd74:	4907      	ldr	r1, [pc, #28]	; (800dd94 <VL53L1_WriteMulti+0x64>)
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f7ff ff99 	bl	800dcae <_I2CWrite>
 800dd7c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d001      	beq.n	800dd88 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800dd84:	23f3      	movs	r3, #243	; 0xf3
 800dd86:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800dd88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3718      	adds	r7, #24
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	20000898 	.word	0x20000898
 800dd98:	2000089a 	.word	0x2000089a

0800dd9c <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b086      	sub	sp, #24
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	607a      	str	r2, [r7, #4]
 800dda6:	603b      	str	r3, [r7, #0]
 800dda8:	460b      	mov	r3, r1
 800ddaa:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ddac:	2300      	movs	r3, #0
 800ddae:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800ddb0:	897b      	ldrh	r3, [r7, #10]
 800ddb2:	0a1b      	lsrs	r3, r3, #8
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	4b12      	ldr	r3, [pc, #72]	; (800de04 <VL53L1_ReadMulti+0x68>)
 800ddba:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800ddbc:	897b      	ldrh	r3, [r7, #10]
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	4b10      	ldr	r3, [pc, #64]	; (800de04 <VL53L1_ReadMulti+0x68>)
 800ddc2:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ddc4:	2202      	movs	r2, #2
 800ddc6:	490f      	ldr	r1, [pc, #60]	; (800de04 <VL53L1_ReadMulti+0x68>)
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f7ff ff70 	bl	800dcae <_I2CWrite>
 800ddce:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d002      	beq.n	800dddc <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ddd6:	23f3      	movs	r3, #243	; 0xf3
 800ddd8:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ddda:	e00c      	b.n	800ddf6 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800dddc:	683a      	ldr	r2, [r7, #0]
 800ddde:	6879      	ldr	r1, [r7, #4]
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f7ff ff83 	bl	800dcec <_I2CRead>
 800dde6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d002      	beq.n	800ddf4 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ddee:	23f3      	movs	r3, #243	; 0xf3
 800ddf0:	75fb      	strb	r3, [r7, #23]
 800ddf2:	e000      	b.n	800ddf6 <VL53L1_ReadMulti+0x5a>
    }
done:
 800ddf4:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800ddf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3718      	adds	r7, #24
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	20000898 	.word	0x20000898

0800de08 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	460b      	mov	r3, r1
 800de12:	807b      	strh	r3, [r7, #2]
 800de14:	4613      	mov	r3, r2
 800de16:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800de18:	2300      	movs	r3, #0
 800de1a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800de1c:	887b      	ldrh	r3, [r7, #2]
 800de1e:	0a1b      	lsrs	r3, r3, #8
 800de20:	b29b      	uxth	r3, r3
 800de22:	b2da      	uxtb	r2, r3
 800de24:	4b0c      	ldr	r3, [pc, #48]	; (800de58 <VL53L1_WrByte+0x50>)
 800de26:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800de28:	887b      	ldrh	r3, [r7, #2]
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	4b0a      	ldr	r3, [pc, #40]	; (800de58 <VL53L1_WrByte+0x50>)
 800de2e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800de30:	4a09      	ldr	r2, [pc, #36]	; (800de58 <VL53L1_WrByte+0x50>)
 800de32:	787b      	ldrb	r3, [r7, #1]
 800de34:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800de36:	2203      	movs	r2, #3
 800de38:	4907      	ldr	r1, [pc, #28]	; (800de58 <VL53L1_WrByte+0x50>)
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff ff37 	bl	800dcae <_I2CWrite>
 800de40:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800de48:	23f3      	movs	r3, #243	; 0xf3
 800de4a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800de4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de50:	4618      	mov	r0, r3
 800de52:	3710      	adds	r7, #16
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	20000898 	.word	0x20000898

0800de5c <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b086      	sub	sp, #24
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	460b      	mov	r3, r1
 800de66:	607a      	str	r2, [r7, #4]
 800de68:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800de6a:	2300      	movs	r3, #0
 800de6c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800de6e:	897b      	ldrh	r3, [r7, #10]
 800de70:	0a1b      	lsrs	r3, r3, #8
 800de72:	b29b      	uxth	r3, r3
 800de74:	b2da      	uxtb	r2, r3
 800de76:	4b12      	ldr	r3, [pc, #72]	; (800dec0 <VL53L1_RdByte+0x64>)
 800de78:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800de7a:	897b      	ldrh	r3, [r7, #10]
 800de7c:	b2da      	uxtb	r2, r3
 800de7e:	4b10      	ldr	r3, [pc, #64]	; (800dec0 <VL53L1_RdByte+0x64>)
 800de80:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800de82:	2202      	movs	r2, #2
 800de84:	490e      	ldr	r1, [pc, #56]	; (800dec0 <VL53L1_RdByte+0x64>)
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f7ff ff11 	bl	800dcae <_I2CWrite>
 800de8c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d002      	beq.n	800de9a <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800de94:	23f3      	movs	r3, #243	; 0xf3
 800de96:	75fb      	strb	r3, [r7, #23]
        goto done;
 800de98:	e00c      	b.n	800deb4 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800de9a:	2201      	movs	r2, #1
 800de9c:	6879      	ldr	r1, [r7, #4]
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f7ff ff24 	bl	800dcec <_I2CRead>
 800dea4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800deac:	23f3      	movs	r3, #243	; 0xf3
 800deae:	75fb      	strb	r3, [r7, #23]
 800deb0:	e000      	b.n	800deb4 <VL53L1_RdByte+0x58>
    }
done:
 800deb2:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800deb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3718      	adds	r7, #24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	20000898 	.word	0x20000898

0800dec4 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b086      	sub	sp, #24
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	460b      	mov	r3, r1
 800dece:	607a      	str	r2, [r7, #4]
 800ded0:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800ded2:	2300      	movs	r3, #0
 800ded4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800ded6:	897b      	ldrh	r3, [r7, #10]
 800ded8:	0a1b      	lsrs	r3, r3, #8
 800deda:	b29b      	uxth	r3, r3
 800dedc:	b2da      	uxtb	r2, r3
 800dede:	4b18      	ldr	r3, [pc, #96]	; (800df40 <VL53L1_RdWord+0x7c>)
 800dee0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800dee2:	897b      	ldrh	r3, [r7, #10]
 800dee4:	b2da      	uxtb	r2, r3
 800dee6:	4b16      	ldr	r3, [pc, #88]	; (800df40 <VL53L1_RdWord+0x7c>)
 800dee8:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800deea:	2202      	movs	r2, #2
 800deec:	4914      	ldr	r1, [pc, #80]	; (800df40 <VL53L1_RdWord+0x7c>)
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f7ff fedd 	bl	800dcae <_I2CWrite>
 800def4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d002      	beq.n	800df02 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800defc:	23f3      	movs	r3, #243	; 0xf3
 800defe:	75fb      	strb	r3, [r7, #23]
        goto done;
 800df00:	e017      	b.n	800df32 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800df02:	2202      	movs	r2, #2
 800df04:	490e      	ldr	r1, [pc, #56]	; (800df40 <VL53L1_RdWord+0x7c>)
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f7ff fef0 	bl	800dcec <_I2CRead>
 800df0c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d002      	beq.n	800df1a <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800df14:	23f3      	movs	r3, #243	; 0xf3
 800df16:	75fb      	strb	r3, [r7, #23]
        goto done;
 800df18:	e00b      	b.n	800df32 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800df1a:	4b09      	ldr	r3, [pc, #36]	; (800df40 <VL53L1_RdWord+0x7c>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	b29b      	uxth	r3, r3
 800df20:	021b      	lsls	r3, r3, #8
 800df22:	b29a      	uxth	r2, r3
 800df24:	4b06      	ldr	r3, [pc, #24]	; (800df40 <VL53L1_RdWord+0x7c>)
 800df26:	785b      	ldrb	r3, [r3, #1]
 800df28:	b29b      	uxth	r3, r3
 800df2a:	4413      	add	r3, r2
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800df32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3718      	adds	r7, #24
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	20000898 	.word	0x20000898

0800df44 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800df4c:	2300      	movs	r3, #0
 800df4e:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800df56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3714      	adds	r7, #20
 800df5e:	46bd      	mov	sp, r7
 800df60:	bc80      	pop	{r7}
 800df62:	4770      	bx	lr

0800df64 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	4618      	mov	r0, r3
 800df72:	f7f6 f8a7 	bl	80040c4 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	4a06      	ldr	r2, [pc, #24]	; (800dfa8 <VL53L1_WaitUs+0x28>)
 800df8e:	fb82 1203 	smull	r1, r2, r2, r3
 800df92:	1192      	asrs	r2, r2, #6
 800df94:	17db      	asrs	r3, r3, #31
 800df96:	1ad3      	subs	r3, r2, r3
 800df98:	4618      	mov	r0, r3
 800df9a:	f7f6 f893 	bl	80040c4 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800df9e:	2300      	movs	r3, #0
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	10624dd3 	.word	0x10624dd3

0800dfac <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800dfac:	b590      	push	{r4, r7, lr}
 800dfae:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800dfb8:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800dfbc:	6020      	str	r0, [r4, #0]
 800dfbe:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800dfc2:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800dfc6:	6001      	str	r1, [r0, #0]
 800dfc8:	4619      	mov	r1, r3
 800dfca:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800dfce:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800dfd2:	801a      	strh	r2, [r3, #0]
 800dfd4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800dfd8:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 800dfdc:	460a      	mov	r2, r1
 800dfde:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800dfec:	2300      	movs	r3, #0
 800dfee:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800dff2:	2300      	movs	r3, #0
 800dff4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800dff8:	2300      	movs	r3, #0
 800dffa:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800dffe:	2300      	movs	r3, #0
 800e000:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800e004:	f107 0310 	add.w	r3, r7, #16
 800e008:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e00c:	493b      	ldr	r1, [pc, #236]	; (800e0fc <VL53L1_WaitValueMaskEx+0x150>)
 800e00e:	4618      	mov	r0, r3
 800e010:	f001 f8c0 	bl	800f194 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800e014:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e018:	4618      	mov	r0, r3
 800e01a:	f7ff ff93 	bl	800df44 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800e01e:	e049      	b.n	800e0b4 <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800e020:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e024:	2b00      	cmp	r3, #0
 800e026:	d110      	bne.n	800e04a <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 800e028:	f207 2213 	addw	r2, r7, #531	; 0x213
 800e02c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e030:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800e034:	8819      	ldrh	r1, [r3, #0]
 800e036:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e03a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800e03e:	6818      	ldr	r0, [r3, #0]
 800e040:	f7ff ff0c 	bl	800de5c <VL53L1_RdByte>
 800e044:	4603      	mov	r3, r0
 800e046:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800e04a:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800e04e:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800e052:	4013      	ands	r3, r2
 800e054:	b2db      	uxtb	r3, r3
 800e056:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800e05a:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 800e05e:	7812      	ldrb	r2, [r2, #0]
 800e060:	429a      	cmp	r2, r3
 800e062:	d102      	bne.n	800e06a <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 800e064:	2301      	movs	r3, #1
 800e066:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800e06a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d114      	bne.n	800e09c <VL53L1_WaitValueMaskEx+0xf0>
 800e072:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e076:	2b00      	cmp	r3, #0
 800e078:	d110      	bne.n	800e09c <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 800e07a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d00c      	beq.n	800e09c <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800e082:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800e086:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e08a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800e08e:	4611      	mov	r1, r2
 800e090:	6818      	ldr	r0, [r3, #0]
 800e092:	f7ff ff67 	bl	800df64 <VL53L1_WaitMs>
 800e096:	4603      	mov	r3, r0
 800e098:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800e09c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7ff ff4f 	bl	800df44 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800e0a6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800e0aa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e0ae:	1ad3      	subs	r3, r2, r3
 800e0b0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800e0b4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d10c      	bne.n	800e0d6 <VL53L1_WaitValueMaskEx+0x12a>
 800e0bc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e0c0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800e0c4:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d203      	bcs.n	800e0d6 <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 800e0ce:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d0a4      	beq.n	800e020 <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800e0d6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d106      	bne.n	800e0ec <VL53L1_WaitValueMaskEx+0x140>
 800e0de:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d102      	bne.n	800e0ec <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 800e0e6:	23f9      	movs	r3, #249	; 0xf9
 800e0e8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800e0ec:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd90      	pop	{r4, r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	08011808 	.word	0x08011808

0800e100 <MPU6050_Initialize>:
/* Includes */
#include "MPU6050.h"
#include "stm32f1xx.h"

/////functions////
void MPU6050_Initialize(I2C_HandleTypeDef *handle_i2c) {
 800e100:	b580      	push	{r7, lr}
 800e102:	b088      	sub	sp, #32
 800e104:	af04      	add	r7, sp, #16
 800e106:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &check, 1,10000);
 800e108:	f242 7310 	movw	r3, #10000	; 0x2710
 800e10c:	9302      	str	r3, [sp, #8]
 800e10e:	2301      	movs	r3, #1
 800e110:	9301      	str	r3, [sp, #4]
 800e112:	f107 030f 	add.w	r3, r7, #15
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	2301      	movs	r3, #1
 800e11a:	2275      	movs	r2, #117	; 0x75
 800e11c:	21d0      	movs	r1, #208	; 0xd0
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7f7 fcaa 	bl	8005a78 <HAL_I2C_Mem_Read>

	if (check == 0x68) {
 800e124:	7bfb      	ldrb	r3, [r7, #15]
 800e126:	2b68      	cmp	r3, #104	; 0x68
 800e128:	d13f      	bne.n	800e1aa <MPU6050_Initialize+0xaa>

		Data = 0;
 800e12a:	2300      	movs	r3, #0
 800e12c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &Data, 1,10000);
 800e12e:	f242 7310 	movw	r3, #10000	; 0x2710
 800e132:	9302      	str	r3, [sp, #8]
 800e134:	2301      	movs	r3, #1
 800e136:	9301      	str	r3, [sp, #4]
 800e138:	f107 030e 	add.w	r3, r7, #14
 800e13c:	9300      	str	r3, [sp, #0]
 800e13e:	2301      	movs	r3, #1
 800e140:	226b      	movs	r2, #107	; 0x6b
 800e142:	21d0      	movs	r1, #208	; 0xd0
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f7f7 fb9d 	bl	8005884 <HAL_I2C_Mem_Write>

		Data = 0x07;
 800e14a:	2307      	movs	r3, #7
 800e14c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_SMPLRT_DIV, 1, &Data, 1,10000);
 800e14e:	f242 7310 	movw	r3, #10000	; 0x2710
 800e152:	9302      	str	r3, [sp, #8]
 800e154:	2301      	movs	r3, #1
 800e156:	9301      	str	r3, [sp, #4]
 800e158:	f107 030e 	add.w	r3, r7, #14
 800e15c:	9300      	str	r3, [sp, #0]
 800e15e:	2301      	movs	r3, #1
 800e160:	2219      	movs	r2, #25
 800e162:	21d0      	movs	r1, #208	; 0xd0
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7f7 fb8d 	bl	8005884 <HAL_I2C_Mem_Write>

		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1, MPU6050_ACCEL_RANGE_2_G, 1,10000);
 800e16a:	f242 7310 	movw	r3, #10000	; 0x2710
 800e16e:	9302      	str	r3, [sp, #8]
 800e170:	2301      	movs	r3, #1
 800e172:	9301      	str	r3, [sp, #4]
 800e174:	2300      	movs	r3, #0
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	2301      	movs	r3, #1
 800e17a:	221c      	movs	r2, #28
 800e17c:	21d0      	movs	r1, #208	; 0xd0
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f7f7 fb80 	bl	8005884 <HAL_I2C_Mem_Write>
		MPU6050_AFS_SEL=MPU6050_ACCEL_RANGE_2_G;
 800e184:	4b0b      	ldr	r3, [pc, #44]	; (800e1b4 <MPU6050_Initialize+0xb4>)
 800e186:	2200      	movs	r2, #0
 800e188:	701a      	strb	r2, [r3, #0]

		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, MPU6050_GYRO_RANGE_250_DEG, 1, 10000);
 800e18a:	f242 7310 	movw	r3, #10000	; 0x2710
 800e18e:	9302      	str	r3, [sp, #8]
 800e190:	2301      	movs	r3, #1
 800e192:	9301      	str	r3, [sp, #4]
 800e194:	2300      	movs	r3, #0
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	2301      	movs	r3, #1
 800e19a:	221b      	movs	r2, #27
 800e19c:	21d0      	movs	r1, #208	; 0xd0
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f7f7 fb70 	bl	8005884 <HAL_I2C_Mem_Write>
		MPU6050_FS_SEL=MPU6050_GYRO_RANGE_250_DEG;
 800e1a4:	4b04      	ldr	r3, [pc, #16]	; (800e1b8 <MPU6050_Initialize+0xb8>)
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	701a      	strb	r2, [r3, #0]
	}

}
 800e1aa:	bf00      	nop
 800e1ac:	3710      	adds	r7, #16
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	2000029c 	.word	0x2000029c
 800e1b8:	20000314 	.word	0x20000314

0800e1bc <MPU6050_SetScaleAccelRange>:
void MPU6050_Read_DeviceID(I2C_HandleTypeDef *handle_i2c){
    HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &MPU6050_Dev_ID, 1, 10000);
}

void MPU6050_SetScaleAccelRange(I2C_HandleTypeDef *handle_i2c,mpu6050_accel_range_t MPU6050_ACCEL_RANGE_X_G)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b086      	sub	sp, #24
 800e1c0:	af04      	add	r7, sp, #16
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	460b      	mov	r3, r1
 800e1c6:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1,&MPU6050_ACCEL_RANGE_X_G, 1,10000);
 800e1c8:	f242 7310 	movw	r3, #10000	; 0x2710
 800e1cc:	9302      	str	r3, [sp, #8]
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	1cfb      	adds	r3, r7, #3
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	221c      	movs	r2, #28
 800e1da:	21d0      	movs	r1, #208	; 0xd0
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7f7 fb51 	bl	8005884 <HAL_I2C_Mem_Write>
	MPU6050_AFS_SEL=MPU6050_ACCEL_RANGE_X_G;
 800e1e2:	78fa      	ldrb	r2, [r7, #3]
 800e1e4:	4b02      	ldr	r3, [pc, #8]	; (800e1f0 <MPU6050_SetScaleAccelRange+0x34>)
 800e1e6:	701a      	strb	r2, [r3, #0]
}
 800e1e8:	bf00      	nop
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	2000029c 	.word	0x2000029c

0800e1f4 <MPU6050_SetScaleGyroRange>:


void MPU6050_SetScaleGyroRange(I2C_HandleTypeDef *handle_i2c,MPU6050_gyro_range_t MPU6050_GYRO_RANGE_XXX_DEG)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b086      	sub	sp, #24
 800e1f8:	af04      	add	r7, sp, #16
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1,&MPU6050_GYRO_RANGE_XXX_DEG, 1,10000);
 800e200:	f242 7310 	movw	r3, #10000	; 0x2710
 800e204:	9302      	str	r3, [sp, #8]
 800e206:	2301      	movs	r3, #1
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	1cfb      	adds	r3, r7, #3
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	2301      	movs	r3, #1
 800e210:	221b      	movs	r2, #27
 800e212:	21d0      	movs	r1, #208	; 0xd0
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f7f7 fb35 	bl	8005884 <HAL_I2C_Mem_Write>
	MPU6050_FS_SEL=MPU6050_GYRO_RANGE_XXX_DEG;
 800e21a:	78fa      	ldrb	r2, [r7, #3]
 800e21c:	4b02      	ldr	r3, [pc, #8]	; (800e228 <MPU6050_SetScaleGyroRange+0x34>)
 800e21e:	701a      	strb	r2, [r3, #0]
}
 800e220:	bf00      	nop
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	20000314 	.word	0x20000314

0800e22c <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *handle_i2c) {
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b088      	sub	sp, #32
 800e230:	af04      	add	r7, sp, #16
 800e232:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, Rec_Data, 6,10000);
 800e234:	f242 7310 	movw	r3, #10000	; 0x2710
 800e238:	9302      	str	r3, [sp, #8]
 800e23a:	2306      	movs	r3, #6
 800e23c:	9301      	str	r3, [sp, #4]
 800e23e:	f107 0308 	add.w	r3, r7, #8
 800e242:	9300      	str	r3, [sp, #0]
 800e244:	2301      	movs	r3, #1
 800e246:	223b      	movs	r2, #59	; 0x3b
 800e248:	21d0      	movs	r1, #208	; 0xd0
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7f7 fc14 	bl	8005a78 <HAL_I2C_Mem_Read>

	MPU6050_Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800e250:	7a3b      	ldrb	r3, [r7, #8]
 800e252:	021b      	lsls	r3, r3, #8
 800e254:	b21a      	sxth	r2, r3
 800e256:	7a7b      	ldrb	r3, [r7, #9]
 800e258:	b21b      	sxth	r3, r3
 800e25a:	4313      	orrs	r3, r2
 800e25c:	b21a      	sxth	r2, r3
 800e25e:	4ba3      	ldr	r3, [pc, #652]	; (800e4ec <MPU6050_Read_Accel+0x2c0>)
 800e260:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800e262:	7abb      	ldrb	r3, [r7, #10]
 800e264:	021b      	lsls	r3, r3, #8
 800e266:	b21a      	sxth	r2, r3
 800e268:	7afb      	ldrb	r3, [r7, #11]
 800e26a:	b21b      	sxth	r3, r3
 800e26c:	4313      	orrs	r3, r2
 800e26e:	b21a      	sxth	r2, r3
 800e270:	4b9f      	ldr	r3, [pc, #636]	; (800e4f0 <MPU6050_Read_Accel+0x2c4>)
 800e272:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800e274:	7b3b      	ldrb	r3, [r7, #12]
 800e276:	021b      	lsls	r3, r3, #8
 800e278:	b21a      	sxth	r2, r3
 800e27a:	7b7b      	ldrb	r3, [r7, #13]
 800e27c:	b21b      	sxth	r3, r3
 800e27e:	4313      	orrs	r3, r2
 800e280:	b21a      	sxth	r2, r3
 800e282:	4b9c      	ldr	r3, [pc, #624]	; (800e4f4 <MPU6050_Read_Accel+0x2c8>)
 800e284:	801a      	strh	r2, [r3, #0]
	0 ±2g 16384 LSB/g
	1 ±4g 8192 LSB/g
	2 ±8g 4096 LSB/g
	3 ±16g 2048 LSB/g
	 */
	switch (MPU6050_AFS_SEL) {
 800e286:	4b9c      	ldr	r3, [pc, #624]	; (800e4f8 <MPU6050_Read_Accel+0x2cc>)
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	2b18      	cmp	r3, #24
 800e28c:	f200 812a 	bhi.w	800e4e4 <MPU6050_Read_Accel+0x2b8>
 800e290:	a201      	add	r2, pc, #4	; (adr r2, 800e298 <MPU6050_Read_Accel+0x6c>)
 800e292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e296:	bf00      	nop
 800e298:	0800e2fd 	.word	0x0800e2fd
 800e29c:	0800e4e5 	.word	0x0800e4e5
 800e2a0:	0800e4e5 	.word	0x0800e4e5
 800e2a4:	0800e4e5 	.word	0x0800e4e5
 800e2a8:	0800e4e5 	.word	0x0800e4e5
 800e2ac:	0800e4e5 	.word	0x0800e4e5
 800e2b0:	0800e4e5 	.word	0x0800e4e5
 800e2b4:	0800e4e5 	.word	0x0800e4e5
 800e2b8:	0800e377 	.word	0x0800e377
 800e2bc:	0800e4e5 	.word	0x0800e4e5
 800e2c0:	0800e4e5 	.word	0x0800e4e5
 800e2c4:	0800e4e5 	.word	0x0800e4e5
 800e2c8:	0800e4e5 	.word	0x0800e4e5
 800e2cc:	0800e4e5 	.word	0x0800e4e5
 800e2d0:	0800e4e5 	.word	0x0800e4e5
 800e2d4:	0800e4e5 	.word	0x0800e4e5
 800e2d8:	0800e3f1 	.word	0x0800e3f1
 800e2dc:	0800e4e5 	.word	0x0800e4e5
 800e2e0:	0800e4e5 	.word	0x0800e4e5
 800e2e4:	0800e4e5 	.word	0x0800e4e5
 800e2e8:	0800e4e5 	.word	0x0800e4e5
 800e2ec:	0800e4e5 	.word	0x0800e4e5
 800e2f0:	0800e4e5 	.word	0x0800e4e5
 800e2f4:	0800e4e5 	.word	0x0800e4e5
 800e2f8:	0800e46b 	.word	0x0800e46b
	case 0x00://0
		MPU6050_Ax = MPU6050_Accel_X_RAW / 16384.0;
 800e2fc:	4b7b      	ldr	r3, [pc, #492]	; (800e4ec <MPU6050_Read_Accel+0x2c0>)
 800e2fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e302:	4618      	mov	r0, r3
 800e304:	f7f2 f8ea 	bl	80004dc <__aeabi_i2d>
 800e308:	f04f 0200 	mov.w	r2, #0
 800e30c:	4b7b      	ldr	r3, [pc, #492]	; (800e4fc <MPU6050_Read_Accel+0x2d0>)
 800e30e:	f7f2 fa79 	bl	8000804 <__aeabi_ddiv>
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	4610      	mov	r0, r2
 800e318:	4619      	mov	r1, r3
 800e31a:	f7f2 fc41 	bl	8000ba0 <__aeabi_d2f>
 800e31e:	4603      	mov	r3, r0
 800e320:	4a77      	ldr	r2, [pc, #476]	; (800e500 <MPU6050_Read_Accel+0x2d4>)
 800e322:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 16384.0;
 800e324:	4b72      	ldr	r3, [pc, #456]	; (800e4f0 <MPU6050_Read_Accel+0x2c4>)
 800e326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7f2 f8d6 	bl	80004dc <__aeabi_i2d>
 800e330:	f04f 0200 	mov.w	r2, #0
 800e334:	4b71      	ldr	r3, [pc, #452]	; (800e4fc <MPU6050_Read_Accel+0x2d0>)
 800e336:	f7f2 fa65 	bl	8000804 <__aeabi_ddiv>
 800e33a:	4602      	mov	r2, r0
 800e33c:	460b      	mov	r3, r1
 800e33e:	4610      	mov	r0, r2
 800e340:	4619      	mov	r1, r3
 800e342:	f7f2 fc2d 	bl	8000ba0 <__aeabi_d2f>
 800e346:	4603      	mov	r3, r0
 800e348:	4a6e      	ldr	r2, [pc, #440]	; (800e504 <MPU6050_Read_Accel+0x2d8>)
 800e34a:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 16384.0;
 800e34c:	4b69      	ldr	r3, [pc, #420]	; (800e4f4 <MPU6050_Read_Accel+0x2c8>)
 800e34e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e352:	4618      	mov	r0, r3
 800e354:	f7f2 f8c2 	bl	80004dc <__aeabi_i2d>
 800e358:	f04f 0200 	mov.w	r2, #0
 800e35c:	4b67      	ldr	r3, [pc, #412]	; (800e4fc <MPU6050_Read_Accel+0x2d0>)
 800e35e:	f7f2 fa51 	bl	8000804 <__aeabi_ddiv>
 800e362:	4602      	mov	r2, r0
 800e364:	460b      	mov	r3, r1
 800e366:	4610      	mov	r0, r2
 800e368:	4619      	mov	r1, r3
 800e36a:	f7f2 fc19 	bl	8000ba0 <__aeabi_d2f>
 800e36e:	4603      	mov	r3, r0
 800e370:	4a65      	ldr	r2, [pc, #404]	; (800e508 <MPU6050_Read_Accel+0x2dc>)
 800e372:	6013      	str	r3, [r2, #0]

		break;
 800e374:	e0b6      	b.n	800e4e4 <MPU6050_Read_Accel+0x2b8>
	case 0x08://1
		MPU6050_Ax = MPU6050_Accel_X_RAW / 8192.0;
 800e376:	4b5d      	ldr	r3, [pc, #372]	; (800e4ec <MPU6050_Read_Accel+0x2c0>)
 800e378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7f2 f8ad 	bl	80004dc <__aeabi_i2d>
 800e382:	f04f 0200 	mov.w	r2, #0
 800e386:	4b61      	ldr	r3, [pc, #388]	; (800e50c <MPU6050_Read_Accel+0x2e0>)
 800e388:	f7f2 fa3c 	bl	8000804 <__aeabi_ddiv>
 800e38c:	4602      	mov	r2, r0
 800e38e:	460b      	mov	r3, r1
 800e390:	4610      	mov	r0, r2
 800e392:	4619      	mov	r1, r3
 800e394:	f7f2 fc04 	bl	8000ba0 <__aeabi_d2f>
 800e398:	4603      	mov	r3, r0
 800e39a:	4a59      	ldr	r2, [pc, #356]	; (800e500 <MPU6050_Read_Accel+0x2d4>)
 800e39c:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 8192.0;
 800e39e:	4b54      	ldr	r3, [pc, #336]	; (800e4f0 <MPU6050_Read_Accel+0x2c4>)
 800e3a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7f2 f899 	bl	80004dc <__aeabi_i2d>
 800e3aa:	f04f 0200 	mov.w	r2, #0
 800e3ae:	4b57      	ldr	r3, [pc, #348]	; (800e50c <MPU6050_Read_Accel+0x2e0>)
 800e3b0:	f7f2 fa28 	bl	8000804 <__aeabi_ddiv>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	4610      	mov	r0, r2
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	f7f2 fbf0 	bl	8000ba0 <__aeabi_d2f>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	4a50      	ldr	r2, [pc, #320]	; (800e504 <MPU6050_Read_Accel+0x2d8>)
 800e3c4:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 8192.0;
 800e3c6:	4b4b      	ldr	r3, [pc, #300]	; (800e4f4 <MPU6050_Read_Accel+0x2c8>)
 800e3c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7f2 f885 	bl	80004dc <__aeabi_i2d>
 800e3d2:	f04f 0200 	mov.w	r2, #0
 800e3d6:	4b4d      	ldr	r3, [pc, #308]	; (800e50c <MPU6050_Read_Accel+0x2e0>)
 800e3d8:	f7f2 fa14 	bl	8000804 <__aeabi_ddiv>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	460b      	mov	r3, r1
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	f7f2 fbdc 	bl	8000ba0 <__aeabi_d2f>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	4a47      	ldr	r2, [pc, #284]	; (800e508 <MPU6050_Read_Accel+0x2dc>)
 800e3ec:	6013      	str	r3, [r2, #0]

		break;
 800e3ee:	e079      	b.n	800e4e4 <MPU6050_Read_Accel+0x2b8>
	case 0x10://2
		MPU6050_Ax = MPU6050_Accel_X_RAW / 4096.0;
 800e3f0:	4b3e      	ldr	r3, [pc, #248]	; (800e4ec <MPU6050_Read_Accel+0x2c0>)
 800e3f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7f2 f870 	bl	80004dc <__aeabi_i2d>
 800e3fc:	f04f 0200 	mov.w	r2, #0
 800e400:	4b43      	ldr	r3, [pc, #268]	; (800e510 <MPU6050_Read_Accel+0x2e4>)
 800e402:	f7f2 f9ff 	bl	8000804 <__aeabi_ddiv>
 800e406:	4602      	mov	r2, r0
 800e408:	460b      	mov	r3, r1
 800e40a:	4610      	mov	r0, r2
 800e40c:	4619      	mov	r1, r3
 800e40e:	f7f2 fbc7 	bl	8000ba0 <__aeabi_d2f>
 800e412:	4603      	mov	r3, r0
 800e414:	4a3a      	ldr	r2, [pc, #232]	; (800e500 <MPU6050_Read_Accel+0x2d4>)
 800e416:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 4096.0;
 800e418:	4b35      	ldr	r3, [pc, #212]	; (800e4f0 <MPU6050_Read_Accel+0x2c4>)
 800e41a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e41e:	4618      	mov	r0, r3
 800e420:	f7f2 f85c 	bl	80004dc <__aeabi_i2d>
 800e424:	f04f 0200 	mov.w	r2, #0
 800e428:	4b39      	ldr	r3, [pc, #228]	; (800e510 <MPU6050_Read_Accel+0x2e4>)
 800e42a:	f7f2 f9eb 	bl	8000804 <__aeabi_ddiv>
 800e42e:	4602      	mov	r2, r0
 800e430:	460b      	mov	r3, r1
 800e432:	4610      	mov	r0, r2
 800e434:	4619      	mov	r1, r3
 800e436:	f7f2 fbb3 	bl	8000ba0 <__aeabi_d2f>
 800e43a:	4603      	mov	r3, r0
 800e43c:	4a31      	ldr	r2, [pc, #196]	; (800e504 <MPU6050_Read_Accel+0x2d8>)
 800e43e:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 4096.0;
 800e440:	4b2c      	ldr	r3, [pc, #176]	; (800e4f4 <MPU6050_Read_Accel+0x2c8>)
 800e442:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e446:	4618      	mov	r0, r3
 800e448:	f7f2 f848 	bl	80004dc <__aeabi_i2d>
 800e44c:	f04f 0200 	mov.w	r2, #0
 800e450:	4b2f      	ldr	r3, [pc, #188]	; (800e510 <MPU6050_Read_Accel+0x2e4>)
 800e452:	f7f2 f9d7 	bl	8000804 <__aeabi_ddiv>
 800e456:	4602      	mov	r2, r0
 800e458:	460b      	mov	r3, r1
 800e45a:	4610      	mov	r0, r2
 800e45c:	4619      	mov	r1, r3
 800e45e:	f7f2 fb9f 	bl	8000ba0 <__aeabi_d2f>
 800e462:	4603      	mov	r3, r0
 800e464:	4a28      	ldr	r2, [pc, #160]	; (800e508 <MPU6050_Read_Accel+0x2dc>)
 800e466:	6013      	str	r3, [r2, #0]

		break;
 800e468:	e03c      	b.n	800e4e4 <MPU6050_Read_Accel+0x2b8>
	case 0x18://3
		MPU6050_Ax = MPU6050_Accel_X_RAW / 2048.0;
 800e46a:	4b20      	ldr	r3, [pc, #128]	; (800e4ec <MPU6050_Read_Accel+0x2c0>)
 800e46c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e470:	4618      	mov	r0, r3
 800e472:	f7f2 f833 	bl	80004dc <__aeabi_i2d>
 800e476:	f04f 0200 	mov.w	r2, #0
 800e47a:	4b26      	ldr	r3, [pc, #152]	; (800e514 <MPU6050_Read_Accel+0x2e8>)
 800e47c:	f7f2 f9c2 	bl	8000804 <__aeabi_ddiv>
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	4610      	mov	r0, r2
 800e486:	4619      	mov	r1, r3
 800e488:	f7f2 fb8a 	bl	8000ba0 <__aeabi_d2f>
 800e48c:	4603      	mov	r3, r0
 800e48e:	4a1c      	ldr	r2, [pc, #112]	; (800e500 <MPU6050_Read_Accel+0x2d4>)
 800e490:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 2048.0;
 800e492:	4b17      	ldr	r3, [pc, #92]	; (800e4f0 <MPU6050_Read_Accel+0x2c4>)
 800e494:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e498:	4618      	mov	r0, r3
 800e49a:	f7f2 f81f 	bl	80004dc <__aeabi_i2d>
 800e49e:	f04f 0200 	mov.w	r2, #0
 800e4a2:	4b1c      	ldr	r3, [pc, #112]	; (800e514 <MPU6050_Read_Accel+0x2e8>)
 800e4a4:	f7f2 f9ae 	bl	8000804 <__aeabi_ddiv>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	460b      	mov	r3, r1
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	f7f2 fb76 	bl	8000ba0 <__aeabi_d2f>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	4a13      	ldr	r2, [pc, #76]	; (800e504 <MPU6050_Read_Accel+0x2d8>)
 800e4b8:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 2048.0;
 800e4ba:	4b0e      	ldr	r3, [pc, #56]	; (800e4f4 <MPU6050_Read_Accel+0x2c8>)
 800e4bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7f2 f80b 	bl	80004dc <__aeabi_i2d>
 800e4c6:	f04f 0200 	mov.w	r2, #0
 800e4ca:	4b12      	ldr	r3, [pc, #72]	; (800e514 <MPU6050_Read_Accel+0x2e8>)
 800e4cc:	f7f2 f99a 	bl	8000804 <__aeabi_ddiv>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	f7f2 fb62 	bl	8000ba0 <__aeabi_d2f>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	4a0a      	ldr	r2, [pc, #40]	; (800e508 <MPU6050_Read_Accel+0x2dc>)
 800e4e0:	6013      	str	r3, [r2, #0]

		break;
 800e4e2:	bf00      	nop
	}
}
 800e4e4:	bf00      	nop
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	20000304 	.word	0x20000304
 800e4f0:	20000306 	.word	0x20000306
 800e4f4:	200002a4 	.word	0x200002a4
 800e4f8:	2000029c 	.word	0x2000029c
 800e4fc:	40d00000 	.word	0x40d00000
 800e500:	2000030c 	.word	0x2000030c
 800e504:	200002f4 	.word	0x200002f4
 800e508:	20000298 	.word	0x20000298
 800e50c:	40c00000 	.word	0x40c00000
 800e510:	40b00000 	.word	0x40b00000
 800e514:	40a00000 	.word	0x40a00000

0800e518 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(I2C_HandleTypeDef *handle_i2c) {
 800e518:	b580      	push	{r7, lr}
 800e51a:	b088      	sub	sp, #32
 800e51c:	af04      	add	r7, sp, #16
 800e51e:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, Rec_Data, 6,10000);
 800e520:	f242 7310 	movw	r3, #10000	; 0x2710
 800e524:	9302      	str	r3, [sp, #8]
 800e526:	2306      	movs	r3, #6
 800e528:	9301      	str	r3, [sp, #4]
 800e52a:	f107 0308 	add.w	r3, r7, #8
 800e52e:	9300      	str	r3, [sp, #0]
 800e530:	2301      	movs	r3, #1
 800e532:	2243      	movs	r2, #67	; 0x43
 800e534:	21d0      	movs	r1, #208	; 0xd0
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7f7 fa9e 	bl	8005a78 <HAL_I2C_Mem_Read>

	MPU6050_Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800e53c:	7a3b      	ldrb	r3, [r7, #8]
 800e53e:	021b      	lsls	r3, r3, #8
 800e540:	b21a      	sxth	r2, r3
 800e542:	7a7b      	ldrb	r3, [r7, #9]
 800e544:	b21b      	sxth	r3, r3
 800e546:	4313      	orrs	r3, r2
 800e548:	b21a      	sxth	r2, r3
 800e54a:	4bab      	ldr	r3, [pc, #684]	; (800e7f8 <MPU6050_Read_Gyro+0x2e0>)
 800e54c:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800e54e:	7abb      	ldrb	r3, [r7, #10]
 800e550:	021b      	lsls	r3, r3, #8
 800e552:	b21a      	sxth	r2, r3
 800e554:	7afb      	ldrb	r3, [r7, #11]
 800e556:	b21b      	sxth	r3, r3
 800e558:	4313      	orrs	r3, r2
 800e55a:	b21a      	sxth	r2, r3
 800e55c:	4ba7      	ldr	r3, [pc, #668]	; (800e7fc <MPU6050_Read_Gyro+0x2e4>)
 800e55e:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800e560:	7b3b      	ldrb	r3, [r7, #12]
 800e562:	021b      	lsls	r3, r3, #8
 800e564:	b21a      	sxth	r2, r3
 800e566:	7b7b      	ldrb	r3, [r7, #13]
 800e568:	b21b      	sxth	r3, r3
 800e56a:	4313      	orrs	r3, r2
 800e56c:	b21a      	sxth	r2, r3
 800e56e:	4ba4      	ldr	r3, [pc, #656]	; (800e800 <MPU6050_Read_Gyro+0x2e8>)
 800e570:	801a      	strh	r2, [r3, #0]
	1 ± 500 °/s 65.5 LSB/°/s
	2 ± 1000 °/s 32.8 LSB/°/s
	3 ± 2000 °/s 16.4 LSB/°/s
	 */

	switch (MPU6050_FS_SEL) {
 800e572:	4ba4      	ldr	r3, [pc, #656]	; (800e804 <MPU6050_Read_Gyro+0x2ec>)
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	2b18      	cmp	r3, #24
 800e578:	f200 812a 	bhi.w	800e7d0 <MPU6050_Read_Gyro+0x2b8>
 800e57c:	a201      	add	r2, pc, #4	; (adr r2, 800e584 <MPU6050_Read_Gyro+0x6c>)
 800e57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e582:	bf00      	nop
 800e584:	0800e5e9 	.word	0x0800e5e9
 800e588:	0800e7d1 	.word	0x0800e7d1
 800e58c:	0800e7d1 	.word	0x0800e7d1
 800e590:	0800e7d1 	.word	0x0800e7d1
 800e594:	0800e7d1 	.word	0x0800e7d1
 800e598:	0800e7d1 	.word	0x0800e7d1
 800e59c:	0800e7d1 	.word	0x0800e7d1
 800e5a0:	0800e7d1 	.word	0x0800e7d1
 800e5a4:	0800e663 	.word	0x0800e663
 800e5a8:	0800e7d1 	.word	0x0800e7d1
 800e5ac:	0800e7d1 	.word	0x0800e7d1
 800e5b0:	0800e7d1 	.word	0x0800e7d1
 800e5b4:	0800e7d1 	.word	0x0800e7d1
 800e5b8:	0800e7d1 	.word	0x0800e7d1
 800e5bc:	0800e7d1 	.word	0x0800e7d1
 800e5c0:	0800e7d1 	.word	0x0800e7d1
 800e5c4:	0800e6dd 	.word	0x0800e6dd
 800e5c8:	0800e7d1 	.word	0x0800e7d1
 800e5cc:	0800e7d1 	.word	0x0800e7d1
 800e5d0:	0800e7d1 	.word	0x0800e7d1
 800e5d4:	0800e7d1 	.word	0x0800e7d1
 800e5d8:	0800e7d1 	.word	0x0800e7d1
 800e5dc:	0800e7d1 	.word	0x0800e7d1
 800e5e0:	0800e7d1 	.word	0x0800e7d1
 800e5e4:	0800e757 	.word	0x0800e757
	case 0x00://0
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 131.0;
 800e5e8:	4b83      	ldr	r3, [pc, #524]	; (800e7f8 <MPU6050_Read_Gyro+0x2e0>)
 800e5ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7f1 ff74 	bl	80004dc <__aeabi_i2d>
 800e5f4:	a378      	add	r3, pc, #480	; (adr r3, 800e7d8 <MPU6050_Read_Gyro+0x2c0>)
 800e5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fa:	f7f2 f903 	bl	8000804 <__aeabi_ddiv>
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	4610      	mov	r0, r2
 800e604:	4619      	mov	r1, r3
 800e606:	f7f2 facb 	bl	8000ba0 <__aeabi_d2f>
 800e60a:	4603      	mov	r3, r0
 800e60c:	4a7e      	ldr	r2, [pc, #504]	; (800e808 <MPU6050_Read_Gyro+0x2f0>)
 800e60e:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 131.0;
 800e610:	4b7a      	ldr	r3, [pc, #488]	; (800e7fc <MPU6050_Read_Gyro+0x2e4>)
 800e612:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e616:	4618      	mov	r0, r3
 800e618:	f7f1 ff60 	bl	80004dc <__aeabi_i2d>
 800e61c:	a36e      	add	r3, pc, #440	; (adr r3, 800e7d8 <MPU6050_Read_Gyro+0x2c0>)
 800e61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e622:	f7f2 f8ef 	bl	8000804 <__aeabi_ddiv>
 800e626:	4602      	mov	r2, r0
 800e628:	460b      	mov	r3, r1
 800e62a:	4610      	mov	r0, r2
 800e62c:	4619      	mov	r1, r3
 800e62e:	f7f2 fab7 	bl	8000ba0 <__aeabi_d2f>
 800e632:	4603      	mov	r3, r0
 800e634:	4a75      	ldr	r2, [pc, #468]	; (800e80c <MPU6050_Read_Gyro+0x2f4>)
 800e636:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 131.0;
 800e638:	4b71      	ldr	r3, [pc, #452]	; (800e800 <MPU6050_Read_Gyro+0x2e8>)
 800e63a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e63e:	4618      	mov	r0, r3
 800e640:	f7f1 ff4c 	bl	80004dc <__aeabi_i2d>
 800e644:	a364      	add	r3, pc, #400	; (adr r3, 800e7d8 <MPU6050_Read_Gyro+0x2c0>)
 800e646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64a:	f7f2 f8db 	bl	8000804 <__aeabi_ddiv>
 800e64e:	4602      	mov	r2, r0
 800e650:	460b      	mov	r3, r1
 800e652:	4610      	mov	r0, r2
 800e654:	4619      	mov	r1, r3
 800e656:	f7f2 faa3 	bl	8000ba0 <__aeabi_d2f>
 800e65a:	4603      	mov	r3, r0
 800e65c:	4a6c      	ldr	r2, [pc, #432]	; (800e810 <MPU6050_Read_Gyro+0x2f8>)
 800e65e:	6013      	str	r3, [r2, #0]
		break;
 800e660:	e0b6      	b.n	800e7d0 <MPU6050_Read_Gyro+0x2b8>
	case 0x08://1
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 65.5;
 800e662:	4b65      	ldr	r3, [pc, #404]	; (800e7f8 <MPU6050_Read_Gyro+0x2e0>)
 800e664:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e668:	4618      	mov	r0, r3
 800e66a:	f7f1 ff37 	bl	80004dc <__aeabi_i2d>
 800e66e:	a35c      	add	r3, pc, #368	; (adr r3, 800e7e0 <MPU6050_Read_Gyro+0x2c8>)
 800e670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e674:	f7f2 f8c6 	bl	8000804 <__aeabi_ddiv>
 800e678:	4602      	mov	r2, r0
 800e67a:	460b      	mov	r3, r1
 800e67c:	4610      	mov	r0, r2
 800e67e:	4619      	mov	r1, r3
 800e680:	f7f2 fa8e 	bl	8000ba0 <__aeabi_d2f>
 800e684:	4603      	mov	r3, r0
 800e686:	4a60      	ldr	r2, [pc, #384]	; (800e808 <MPU6050_Read_Gyro+0x2f0>)
 800e688:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 65.5;
 800e68a:	4b5c      	ldr	r3, [pc, #368]	; (800e7fc <MPU6050_Read_Gyro+0x2e4>)
 800e68c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e690:	4618      	mov	r0, r3
 800e692:	f7f1 ff23 	bl	80004dc <__aeabi_i2d>
 800e696:	a352      	add	r3, pc, #328	; (adr r3, 800e7e0 <MPU6050_Read_Gyro+0x2c8>)
 800e698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69c:	f7f2 f8b2 	bl	8000804 <__aeabi_ddiv>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	f7f2 fa7a 	bl	8000ba0 <__aeabi_d2f>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	4a57      	ldr	r2, [pc, #348]	; (800e80c <MPU6050_Read_Gyro+0x2f4>)
 800e6b0:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 65.5;
 800e6b2:	4b53      	ldr	r3, [pc, #332]	; (800e800 <MPU6050_Read_Gyro+0x2e8>)
 800e6b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7f1 ff0f 	bl	80004dc <__aeabi_i2d>
 800e6be:	a348      	add	r3, pc, #288	; (adr r3, 800e7e0 <MPU6050_Read_Gyro+0x2c8>)
 800e6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c4:	f7f2 f89e 	bl	8000804 <__aeabi_ddiv>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	4610      	mov	r0, r2
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	f7f2 fa66 	bl	8000ba0 <__aeabi_d2f>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	4a4e      	ldr	r2, [pc, #312]	; (800e810 <MPU6050_Read_Gyro+0x2f8>)
 800e6d8:	6013      	str	r3, [r2, #0]
		break;
 800e6da:	e079      	b.n	800e7d0 <MPU6050_Read_Gyro+0x2b8>
	case 0x10://2
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 32.8;
 800e6dc:	4b46      	ldr	r3, [pc, #280]	; (800e7f8 <MPU6050_Read_Gyro+0x2e0>)
 800e6de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7f1 fefa 	bl	80004dc <__aeabi_i2d>
 800e6e8:	a33f      	add	r3, pc, #252	; (adr r3, 800e7e8 <MPU6050_Read_Gyro+0x2d0>)
 800e6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ee:	f7f2 f889 	bl	8000804 <__aeabi_ddiv>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	4610      	mov	r0, r2
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	f7f2 fa51 	bl	8000ba0 <__aeabi_d2f>
 800e6fe:	4603      	mov	r3, r0
 800e700:	4a41      	ldr	r2, [pc, #260]	; (800e808 <MPU6050_Read_Gyro+0x2f0>)
 800e702:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 32.8;
 800e704:	4b3d      	ldr	r3, [pc, #244]	; (800e7fc <MPU6050_Read_Gyro+0x2e4>)
 800e706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7f1 fee6 	bl	80004dc <__aeabi_i2d>
 800e710:	a335      	add	r3, pc, #212	; (adr r3, 800e7e8 <MPU6050_Read_Gyro+0x2d0>)
 800e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e716:	f7f2 f875 	bl	8000804 <__aeabi_ddiv>
 800e71a:	4602      	mov	r2, r0
 800e71c:	460b      	mov	r3, r1
 800e71e:	4610      	mov	r0, r2
 800e720:	4619      	mov	r1, r3
 800e722:	f7f2 fa3d 	bl	8000ba0 <__aeabi_d2f>
 800e726:	4603      	mov	r3, r0
 800e728:	4a38      	ldr	r2, [pc, #224]	; (800e80c <MPU6050_Read_Gyro+0x2f4>)
 800e72a:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 32.8;
 800e72c:	4b34      	ldr	r3, [pc, #208]	; (800e800 <MPU6050_Read_Gyro+0x2e8>)
 800e72e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e732:	4618      	mov	r0, r3
 800e734:	f7f1 fed2 	bl	80004dc <__aeabi_i2d>
 800e738:	a32b      	add	r3, pc, #172	; (adr r3, 800e7e8 <MPU6050_Read_Gyro+0x2d0>)
 800e73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73e:	f7f2 f861 	bl	8000804 <__aeabi_ddiv>
 800e742:	4602      	mov	r2, r0
 800e744:	460b      	mov	r3, r1
 800e746:	4610      	mov	r0, r2
 800e748:	4619      	mov	r1, r3
 800e74a:	f7f2 fa29 	bl	8000ba0 <__aeabi_d2f>
 800e74e:	4603      	mov	r3, r0
 800e750:	4a2f      	ldr	r2, [pc, #188]	; (800e810 <MPU6050_Read_Gyro+0x2f8>)
 800e752:	6013      	str	r3, [r2, #0]
		break;
 800e754:	e03c      	b.n	800e7d0 <MPU6050_Read_Gyro+0x2b8>
	case 0x18://3
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 16.4;
 800e756:	4b28      	ldr	r3, [pc, #160]	; (800e7f8 <MPU6050_Read_Gyro+0x2e0>)
 800e758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7f1 febd 	bl	80004dc <__aeabi_i2d>
 800e762:	a323      	add	r3, pc, #140	; (adr r3, 800e7f0 <MPU6050_Read_Gyro+0x2d8>)
 800e764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e768:	f7f2 f84c 	bl	8000804 <__aeabi_ddiv>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	4610      	mov	r0, r2
 800e772:	4619      	mov	r1, r3
 800e774:	f7f2 fa14 	bl	8000ba0 <__aeabi_d2f>
 800e778:	4603      	mov	r3, r0
 800e77a:	4a23      	ldr	r2, [pc, #140]	; (800e808 <MPU6050_Read_Gyro+0x2f0>)
 800e77c:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 16.4;
 800e77e:	4b1f      	ldr	r3, [pc, #124]	; (800e7fc <MPU6050_Read_Gyro+0x2e4>)
 800e780:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e784:	4618      	mov	r0, r3
 800e786:	f7f1 fea9 	bl	80004dc <__aeabi_i2d>
 800e78a:	a319      	add	r3, pc, #100	; (adr r3, 800e7f0 <MPU6050_Read_Gyro+0x2d8>)
 800e78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e790:	f7f2 f838 	bl	8000804 <__aeabi_ddiv>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	4610      	mov	r0, r2
 800e79a:	4619      	mov	r1, r3
 800e79c:	f7f2 fa00 	bl	8000ba0 <__aeabi_d2f>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	4a1a      	ldr	r2, [pc, #104]	; (800e80c <MPU6050_Read_Gyro+0x2f4>)
 800e7a4:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 16.4;
 800e7a6:	4b16      	ldr	r3, [pc, #88]	; (800e800 <MPU6050_Read_Gyro+0x2e8>)
 800e7a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7f1 fe95 	bl	80004dc <__aeabi_i2d>
 800e7b2:	a30f      	add	r3, pc, #60	; (adr r3, 800e7f0 <MPU6050_Read_Gyro+0x2d8>)
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	f7f2 f824 	bl	8000804 <__aeabi_ddiv>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	460b      	mov	r3, r1
 800e7c0:	4610      	mov	r0, r2
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	f7f2 f9ec 	bl	8000ba0 <__aeabi_d2f>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	4a11      	ldr	r2, [pc, #68]	; (800e810 <MPU6050_Read_Gyro+0x2f8>)
 800e7cc:	6013      	str	r3, [r2, #0]
		break;
 800e7ce:	bf00      	nop
	}
}
 800e7d0:	bf00      	nop
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	00000000 	.word	0x00000000
 800e7dc:	40606000 	.word	0x40606000
 800e7e0:	00000000 	.word	0x00000000
 800e7e4:	40506000 	.word	0x40506000
 800e7e8:	66666666 	.word	0x66666666
 800e7ec:	40406666 	.word	0x40406666
 800e7f0:	66666666 	.word	0x66666666
 800e7f4:	40306666 	.word	0x40306666
 800e7f8:	20000308 	.word	0x20000308
 800e7fc:	200002fc 	.word	0x200002fc
 800e800:	200002a8 	.word	0x200002a8
 800e804:	20000314 	.word	0x20000314
 800e808:	200002a0 	.word	0x200002a0
 800e80c:	200002f8 	.word	0x200002f8
 800e810:	20000310 	.word	0x20000310

0800e814 <__errno>:
 800e814:	4b01      	ldr	r3, [pc, #4]	; (800e81c <__errno+0x8>)
 800e816:	6818      	ldr	r0, [r3, #0]
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop
 800e81c:	20000070 	.word	0x20000070

0800e820 <__libc_init_array>:
 800e820:	b570      	push	{r4, r5, r6, lr}
 800e822:	2600      	movs	r6, #0
 800e824:	4d0c      	ldr	r5, [pc, #48]	; (800e858 <__libc_init_array+0x38>)
 800e826:	4c0d      	ldr	r4, [pc, #52]	; (800e85c <__libc_init_array+0x3c>)
 800e828:	1b64      	subs	r4, r4, r5
 800e82a:	10a4      	asrs	r4, r4, #2
 800e82c:	42a6      	cmp	r6, r4
 800e82e:	d109      	bne.n	800e844 <__libc_init_array+0x24>
 800e830:	f002 ff10 	bl	8011654 <_init>
 800e834:	2600      	movs	r6, #0
 800e836:	4d0a      	ldr	r5, [pc, #40]	; (800e860 <__libc_init_array+0x40>)
 800e838:	4c0a      	ldr	r4, [pc, #40]	; (800e864 <__libc_init_array+0x44>)
 800e83a:	1b64      	subs	r4, r4, r5
 800e83c:	10a4      	asrs	r4, r4, #2
 800e83e:	42a6      	cmp	r6, r4
 800e840:	d105      	bne.n	800e84e <__libc_init_array+0x2e>
 800e842:	bd70      	pop	{r4, r5, r6, pc}
 800e844:	f855 3b04 	ldr.w	r3, [r5], #4
 800e848:	4798      	blx	r3
 800e84a:	3601      	adds	r6, #1
 800e84c:	e7ee      	b.n	800e82c <__libc_init_array+0xc>
 800e84e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e852:	4798      	blx	r3
 800e854:	3601      	adds	r6, #1
 800e856:	e7f2      	b.n	800e83e <__libc_init_array+0x1e>
 800e858:	080121ec 	.word	0x080121ec
 800e85c:	080121ec 	.word	0x080121ec
 800e860:	080121ec 	.word	0x080121ec
 800e864:	080121f0 	.word	0x080121f0

0800e868 <memcpy>:
 800e868:	440a      	add	r2, r1
 800e86a:	4291      	cmp	r1, r2
 800e86c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e870:	d100      	bne.n	800e874 <memcpy+0xc>
 800e872:	4770      	bx	lr
 800e874:	b510      	push	{r4, lr}
 800e876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e87a:	4291      	cmp	r1, r2
 800e87c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e880:	d1f9      	bne.n	800e876 <memcpy+0xe>
 800e882:	bd10      	pop	{r4, pc}

0800e884 <memset>:
 800e884:	4603      	mov	r3, r0
 800e886:	4402      	add	r2, r0
 800e888:	4293      	cmp	r3, r2
 800e88a:	d100      	bne.n	800e88e <memset+0xa>
 800e88c:	4770      	bx	lr
 800e88e:	f803 1b01 	strb.w	r1, [r3], #1
 800e892:	e7f9      	b.n	800e888 <memset+0x4>

0800e894 <__cvt>:
 800e894:	2b00      	cmp	r3, #0
 800e896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e89a:	461f      	mov	r7, r3
 800e89c:	bfbb      	ittet	lt
 800e89e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800e8a2:	461f      	movlt	r7, r3
 800e8a4:	2300      	movge	r3, #0
 800e8a6:	232d      	movlt	r3, #45	; 0x2d
 800e8a8:	b088      	sub	sp, #32
 800e8aa:	4614      	mov	r4, r2
 800e8ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e8ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e8b0:	7013      	strb	r3, [r2, #0]
 800e8b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800e8b8:	f023 0820 	bic.w	r8, r3, #32
 800e8bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e8c0:	d005      	beq.n	800e8ce <__cvt+0x3a>
 800e8c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e8c6:	d100      	bne.n	800e8ca <__cvt+0x36>
 800e8c8:	3501      	adds	r5, #1
 800e8ca:	2302      	movs	r3, #2
 800e8cc:	e000      	b.n	800e8d0 <__cvt+0x3c>
 800e8ce:	2303      	movs	r3, #3
 800e8d0:	aa07      	add	r2, sp, #28
 800e8d2:	9204      	str	r2, [sp, #16]
 800e8d4:	aa06      	add	r2, sp, #24
 800e8d6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e8da:	e9cd 3500 	strd	r3, r5, [sp]
 800e8de:	4622      	mov	r2, r4
 800e8e0:	463b      	mov	r3, r7
 800e8e2:	f000 fcf9 	bl	800f2d8 <_dtoa_r>
 800e8e6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e8ea:	4606      	mov	r6, r0
 800e8ec:	d102      	bne.n	800e8f4 <__cvt+0x60>
 800e8ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8f0:	07db      	lsls	r3, r3, #31
 800e8f2:	d522      	bpl.n	800e93a <__cvt+0xa6>
 800e8f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e8f8:	eb06 0905 	add.w	r9, r6, r5
 800e8fc:	d110      	bne.n	800e920 <__cvt+0x8c>
 800e8fe:	7833      	ldrb	r3, [r6, #0]
 800e900:	2b30      	cmp	r3, #48	; 0x30
 800e902:	d10a      	bne.n	800e91a <__cvt+0x86>
 800e904:	2200      	movs	r2, #0
 800e906:	2300      	movs	r3, #0
 800e908:	4620      	mov	r0, r4
 800e90a:	4639      	mov	r1, r7
 800e90c:	f7f2 f8b8 	bl	8000a80 <__aeabi_dcmpeq>
 800e910:	b918      	cbnz	r0, 800e91a <__cvt+0x86>
 800e912:	f1c5 0501 	rsb	r5, r5, #1
 800e916:	f8ca 5000 	str.w	r5, [sl]
 800e91a:	f8da 3000 	ldr.w	r3, [sl]
 800e91e:	4499      	add	r9, r3
 800e920:	2200      	movs	r2, #0
 800e922:	2300      	movs	r3, #0
 800e924:	4620      	mov	r0, r4
 800e926:	4639      	mov	r1, r7
 800e928:	f7f2 f8aa 	bl	8000a80 <__aeabi_dcmpeq>
 800e92c:	b108      	cbz	r0, 800e932 <__cvt+0x9e>
 800e92e:	f8cd 901c 	str.w	r9, [sp, #28]
 800e932:	2230      	movs	r2, #48	; 0x30
 800e934:	9b07      	ldr	r3, [sp, #28]
 800e936:	454b      	cmp	r3, r9
 800e938:	d307      	bcc.n	800e94a <__cvt+0xb6>
 800e93a:	4630      	mov	r0, r6
 800e93c:	9b07      	ldr	r3, [sp, #28]
 800e93e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e940:	1b9b      	subs	r3, r3, r6
 800e942:	6013      	str	r3, [r2, #0]
 800e944:	b008      	add	sp, #32
 800e946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e94a:	1c59      	adds	r1, r3, #1
 800e94c:	9107      	str	r1, [sp, #28]
 800e94e:	701a      	strb	r2, [r3, #0]
 800e950:	e7f0      	b.n	800e934 <__cvt+0xa0>

0800e952 <__exponent>:
 800e952:	4603      	mov	r3, r0
 800e954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e956:	2900      	cmp	r1, #0
 800e958:	f803 2b02 	strb.w	r2, [r3], #2
 800e95c:	bfb6      	itet	lt
 800e95e:	222d      	movlt	r2, #45	; 0x2d
 800e960:	222b      	movge	r2, #43	; 0x2b
 800e962:	4249      	neglt	r1, r1
 800e964:	2909      	cmp	r1, #9
 800e966:	7042      	strb	r2, [r0, #1]
 800e968:	dd2b      	ble.n	800e9c2 <__exponent+0x70>
 800e96a:	f10d 0407 	add.w	r4, sp, #7
 800e96e:	46a4      	mov	ip, r4
 800e970:	270a      	movs	r7, #10
 800e972:	fb91 f6f7 	sdiv	r6, r1, r7
 800e976:	460a      	mov	r2, r1
 800e978:	46a6      	mov	lr, r4
 800e97a:	fb07 1516 	mls	r5, r7, r6, r1
 800e97e:	2a63      	cmp	r2, #99	; 0x63
 800e980:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800e984:	4631      	mov	r1, r6
 800e986:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e98a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e98e:	dcf0      	bgt.n	800e972 <__exponent+0x20>
 800e990:	3130      	adds	r1, #48	; 0x30
 800e992:	f1ae 0502 	sub.w	r5, lr, #2
 800e996:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e99a:	4629      	mov	r1, r5
 800e99c:	1c44      	adds	r4, r0, #1
 800e99e:	4561      	cmp	r1, ip
 800e9a0:	d30a      	bcc.n	800e9b8 <__exponent+0x66>
 800e9a2:	f10d 0209 	add.w	r2, sp, #9
 800e9a6:	eba2 020e 	sub.w	r2, r2, lr
 800e9aa:	4565      	cmp	r5, ip
 800e9ac:	bf88      	it	hi
 800e9ae:	2200      	movhi	r2, #0
 800e9b0:	4413      	add	r3, r2
 800e9b2:	1a18      	subs	r0, r3, r0
 800e9b4:	b003      	add	sp, #12
 800e9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9bc:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e9c0:	e7ed      	b.n	800e99e <__exponent+0x4c>
 800e9c2:	2330      	movs	r3, #48	; 0x30
 800e9c4:	3130      	adds	r1, #48	; 0x30
 800e9c6:	7083      	strb	r3, [r0, #2]
 800e9c8:	70c1      	strb	r1, [r0, #3]
 800e9ca:	1d03      	adds	r3, r0, #4
 800e9cc:	e7f1      	b.n	800e9b2 <__exponent+0x60>
	...

0800e9d0 <_printf_float>:
 800e9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d4:	b091      	sub	sp, #68	; 0x44
 800e9d6:	460c      	mov	r4, r1
 800e9d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e9dc:	4616      	mov	r6, r2
 800e9de:	461f      	mov	r7, r3
 800e9e0:	4605      	mov	r5, r0
 800e9e2:	f001 fa67 	bl	800feb4 <_localeconv_r>
 800e9e6:	6803      	ldr	r3, [r0, #0]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ec:	f7f1 fc1c 	bl	8000228 <strlen>
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	930e      	str	r3, [sp, #56]	; 0x38
 800e9f4:	f8d8 3000 	ldr.w	r3, [r8]
 800e9f8:	900a      	str	r0, [sp, #40]	; 0x28
 800e9fa:	3307      	adds	r3, #7
 800e9fc:	f023 0307 	bic.w	r3, r3, #7
 800ea00:	f103 0208 	add.w	r2, r3, #8
 800ea04:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ea08:	f8d4 b000 	ldr.w	fp, [r4]
 800ea0c:	f8c8 2000 	str.w	r2, [r8]
 800ea10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ea18:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800ea1c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ea20:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea26:	4640      	mov	r0, r8
 800ea28:	4b9c      	ldr	r3, [pc, #624]	; (800ec9c <_printf_float+0x2cc>)
 800ea2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea2c:	f7f2 f85a 	bl	8000ae4 <__aeabi_dcmpun>
 800ea30:	bb70      	cbnz	r0, 800ea90 <_printf_float+0xc0>
 800ea32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea36:	4640      	mov	r0, r8
 800ea38:	4b98      	ldr	r3, [pc, #608]	; (800ec9c <_printf_float+0x2cc>)
 800ea3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea3c:	f7f2 f834 	bl	8000aa8 <__aeabi_dcmple>
 800ea40:	bb30      	cbnz	r0, 800ea90 <_printf_float+0xc0>
 800ea42:	2200      	movs	r2, #0
 800ea44:	2300      	movs	r3, #0
 800ea46:	4640      	mov	r0, r8
 800ea48:	4651      	mov	r1, sl
 800ea4a:	f7f2 f823 	bl	8000a94 <__aeabi_dcmplt>
 800ea4e:	b110      	cbz	r0, 800ea56 <_printf_float+0x86>
 800ea50:	232d      	movs	r3, #45	; 0x2d
 800ea52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea56:	4b92      	ldr	r3, [pc, #584]	; (800eca0 <_printf_float+0x2d0>)
 800ea58:	4892      	ldr	r0, [pc, #584]	; (800eca4 <_printf_float+0x2d4>)
 800ea5a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ea5e:	bf94      	ite	ls
 800ea60:	4698      	movls	r8, r3
 800ea62:	4680      	movhi	r8, r0
 800ea64:	2303      	movs	r3, #3
 800ea66:	f04f 0a00 	mov.w	sl, #0
 800ea6a:	6123      	str	r3, [r4, #16]
 800ea6c:	f02b 0304 	bic.w	r3, fp, #4
 800ea70:	6023      	str	r3, [r4, #0]
 800ea72:	4633      	mov	r3, r6
 800ea74:	4621      	mov	r1, r4
 800ea76:	4628      	mov	r0, r5
 800ea78:	9700      	str	r7, [sp, #0]
 800ea7a:	aa0f      	add	r2, sp, #60	; 0x3c
 800ea7c:	f000 f9d4 	bl	800ee28 <_printf_common>
 800ea80:	3001      	adds	r0, #1
 800ea82:	f040 8090 	bne.w	800eba6 <_printf_float+0x1d6>
 800ea86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea8a:	b011      	add	sp, #68	; 0x44
 800ea8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea90:	4642      	mov	r2, r8
 800ea92:	4653      	mov	r3, sl
 800ea94:	4640      	mov	r0, r8
 800ea96:	4651      	mov	r1, sl
 800ea98:	f7f2 f824 	bl	8000ae4 <__aeabi_dcmpun>
 800ea9c:	b148      	cbz	r0, 800eab2 <_printf_float+0xe2>
 800ea9e:	f1ba 0f00 	cmp.w	sl, #0
 800eaa2:	bfb8      	it	lt
 800eaa4:	232d      	movlt	r3, #45	; 0x2d
 800eaa6:	4880      	ldr	r0, [pc, #512]	; (800eca8 <_printf_float+0x2d8>)
 800eaa8:	bfb8      	it	lt
 800eaaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eaae:	4b7f      	ldr	r3, [pc, #508]	; (800ecac <_printf_float+0x2dc>)
 800eab0:	e7d3      	b.n	800ea5a <_printf_float+0x8a>
 800eab2:	6863      	ldr	r3, [r4, #4]
 800eab4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800eab8:	1c5a      	adds	r2, r3, #1
 800eaba:	d142      	bne.n	800eb42 <_printf_float+0x172>
 800eabc:	2306      	movs	r3, #6
 800eabe:	6063      	str	r3, [r4, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	9206      	str	r2, [sp, #24]
 800eac4:	aa0e      	add	r2, sp, #56	; 0x38
 800eac6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800eaca:	aa0d      	add	r2, sp, #52	; 0x34
 800eacc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ead0:	9203      	str	r2, [sp, #12]
 800ead2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ead6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800eada:	6023      	str	r3, [r4, #0]
 800eadc:	6863      	ldr	r3, [r4, #4]
 800eade:	4642      	mov	r2, r8
 800eae0:	9300      	str	r3, [sp, #0]
 800eae2:	4628      	mov	r0, r5
 800eae4:	4653      	mov	r3, sl
 800eae6:	910b      	str	r1, [sp, #44]	; 0x2c
 800eae8:	f7ff fed4 	bl	800e894 <__cvt>
 800eaec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eaee:	4680      	mov	r8, r0
 800eaf0:	2947      	cmp	r1, #71	; 0x47
 800eaf2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800eaf4:	d108      	bne.n	800eb08 <_printf_float+0x138>
 800eaf6:	1cc8      	adds	r0, r1, #3
 800eaf8:	db02      	blt.n	800eb00 <_printf_float+0x130>
 800eafa:	6863      	ldr	r3, [r4, #4]
 800eafc:	4299      	cmp	r1, r3
 800eafe:	dd40      	ble.n	800eb82 <_printf_float+0x1b2>
 800eb00:	f1a9 0902 	sub.w	r9, r9, #2
 800eb04:	fa5f f989 	uxtb.w	r9, r9
 800eb08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800eb0c:	d81f      	bhi.n	800eb4e <_printf_float+0x17e>
 800eb0e:	464a      	mov	r2, r9
 800eb10:	3901      	subs	r1, #1
 800eb12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eb16:	910d      	str	r1, [sp, #52]	; 0x34
 800eb18:	f7ff ff1b 	bl	800e952 <__exponent>
 800eb1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb1e:	4682      	mov	sl, r0
 800eb20:	1813      	adds	r3, r2, r0
 800eb22:	2a01      	cmp	r2, #1
 800eb24:	6123      	str	r3, [r4, #16]
 800eb26:	dc02      	bgt.n	800eb2e <_printf_float+0x15e>
 800eb28:	6822      	ldr	r2, [r4, #0]
 800eb2a:	07d2      	lsls	r2, r2, #31
 800eb2c:	d501      	bpl.n	800eb32 <_printf_float+0x162>
 800eb2e:	3301      	adds	r3, #1
 800eb30:	6123      	str	r3, [r4, #16]
 800eb32:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d09b      	beq.n	800ea72 <_printf_float+0xa2>
 800eb3a:	232d      	movs	r3, #45	; 0x2d
 800eb3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb40:	e797      	b.n	800ea72 <_printf_float+0xa2>
 800eb42:	2947      	cmp	r1, #71	; 0x47
 800eb44:	d1bc      	bne.n	800eac0 <_printf_float+0xf0>
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d1ba      	bne.n	800eac0 <_printf_float+0xf0>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e7b7      	b.n	800eabe <_printf_float+0xee>
 800eb4e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800eb52:	d118      	bne.n	800eb86 <_printf_float+0x1b6>
 800eb54:	2900      	cmp	r1, #0
 800eb56:	6863      	ldr	r3, [r4, #4]
 800eb58:	dd0b      	ble.n	800eb72 <_printf_float+0x1a2>
 800eb5a:	6121      	str	r1, [r4, #16]
 800eb5c:	b913      	cbnz	r3, 800eb64 <_printf_float+0x194>
 800eb5e:	6822      	ldr	r2, [r4, #0]
 800eb60:	07d0      	lsls	r0, r2, #31
 800eb62:	d502      	bpl.n	800eb6a <_printf_float+0x19a>
 800eb64:	3301      	adds	r3, #1
 800eb66:	440b      	add	r3, r1
 800eb68:	6123      	str	r3, [r4, #16]
 800eb6a:	f04f 0a00 	mov.w	sl, #0
 800eb6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800eb70:	e7df      	b.n	800eb32 <_printf_float+0x162>
 800eb72:	b913      	cbnz	r3, 800eb7a <_printf_float+0x1aa>
 800eb74:	6822      	ldr	r2, [r4, #0]
 800eb76:	07d2      	lsls	r2, r2, #31
 800eb78:	d501      	bpl.n	800eb7e <_printf_float+0x1ae>
 800eb7a:	3302      	adds	r3, #2
 800eb7c:	e7f4      	b.n	800eb68 <_printf_float+0x198>
 800eb7e:	2301      	movs	r3, #1
 800eb80:	e7f2      	b.n	800eb68 <_printf_float+0x198>
 800eb82:	f04f 0967 	mov.w	r9, #103	; 0x67
 800eb86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb88:	4299      	cmp	r1, r3
 800eb8a:	db05      	blt.n	800eb98 <_printf_float+0x1c8>
 800eb8c:	6823      	ldr	r3, [r4, #0]
 800eb8e:	6121      	str	r1, [r4, #16]
 800eb90:	07d8      	lsls	r0, r3, #31
 800eb92:	d5ea      	bpl.n	800eb6a <_printf_float+0x19a>
 800eb94:	1c4b      	adds	r3, r1, #1
 800eb96:	e7e7      	b.n	800eb68 <_printf_float+0x198>
 800eb98:	2900      	cmp	r1, #0
 800eb9a:	bfcc      	ite	gt
 800eb9c:	2201      	movgt	r2, #1
 800eb9e:	f1c1 0202 	rsble	r2, r1, #2
 800eba2:	4413      	add	r3, r2
 800eba4:	e7e0      	b.n	800eb68 <_printf_float+0x198>
 800eba6:	6823      	ldr	r3, [r4, #0]
 800eba8:	055a      	lsls	r2, r3, #21
 800ebaa:	d407      	bmi.n	800ebbc <_printf_float+0x1ec>
 800ebac:	6923      	ldr	r3, [r4, #16]
 800ebae:	4642      	mov	r2, r8
 800ebb0:	4631      	mov	r1, r6
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	47b8      	blx	r7
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	d12b      	bne.n	800ec12 <_printf_float+0x242>
 800ebba:	e764      	b.n	800ea86 <_printf_float+0xb6>
 800ebbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ebc0:	f240 80dd 	bls.w	800ed7e <_printf_float+0x3ae>
 800ebc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ebc8:	2200      	movs	r2, #0
 800ebca:	2300      	movs	r3, #0
 800ebcc:	f7f1 ff58 	bl	8000a80 <__aeabi_dcmpeq>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d033      	beq.n	800ec3c <_printf_float+0x26c>
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	4631      	mov	r1, r6
 800ebd8:	4628      	mov	r0, r5
 800ebda:	4a35      	ldr	r2, [pc, #212]	; (800ecb0 <_printf_float+0x2e0>)
 800ebdc:	47b8      	blx	r7
 800ebde:	3001      	adds	r0, #1
 800ebe0:	f43f af51 	beq.w	800ea86 <_printf_float+0xb6>
 800ebe4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	db02      	blt.n	800ebf2 <_printf_float+0x222>
 800ebec:	6823      	ldr	r3, [r4, #0]
 800ebee:	07d8      	lsls	r0, r3, #31
 800ebf0:	d50f      	bpl.n	800ec12 <_printf_float+0x242>
 800ebf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	47b8      	blx	r7
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	f43f af42 	beq.w	800ea86 <_printf_float+0xb6>
 800ec02:	f04f 0800 	mov.w	r8, #0
 800ec06:	f104 091a 	add.w	r9, r4, #26
 800ec0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec0c:	3b01      	subs	r3, #1
 800ec0e:	4543      	cmp	r3, r8
 800ec10:	dc09      	bgt.n	800ec26 <_printf_float+0x256>
 800ec12:	6823      	ldr	r3, [r4, #0]
 800ec14:	079b      	lsls	r3, r3, #30
 800ec16:	f100 8102 	bmi.w	800ee1e <_printf_float+0x44e>
 800ec1a:	68e0      	ldr	r0, [r4, #12]
 800ec1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec1e:	4298      	cmp	r0, r3
 800ec20:	bfb8      	it	lt
 800ec22:	4618      	movlt	r0, r3
 800ec24:	e731      	b.n	800ea8a <_printf_float+0xba>
 800ec26:	2301      	movs	r3, #1
 800ec28:	464a      	mov	r2, r9
 800ec2a:	4631      	mov	r1, r6
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	47b8      	blx	r7
 800ec30:	3001      	adds	r0, #1
 800ec32:	f43f af28 	beq.w	800ea86 <_printf_float+0xb6>
 800ec36:	f108 0801 	add.w	r8, r8, #1
 800ec3a:	e7e6      	b.n	800ec0a <_printf_float+0x23a>
 800ec3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	dc38      	bgt.n	800ecb4 <_printf_float+0x2e4>
 800ec42:	2301      	movs	r3, #1
 800ec44:	4631      	mov	r1, r6
 800ec46:	4628      	mov	r0, r5
 800ec48:	4a19      	ldr	r2, [pc, #100]	; (800ecb0 <_printf_float+0x2e0>)
 800ec4a:	47b8      	blx	r7
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	f43f af1a 	beq.w	800ea86 <_printf_float+0xb6>
 800ec52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ec56:	4313      	orrs	r3, r2
 800ec58:	d102      	bne.n	800ec60 <_printf_float+0x290>
 800ec5a:	6823      	ldr	r3, [r4, #0]
 800ec5c:	07d9      	lsls	r1, r3, #31
 800ec5e:	d5d8      	bpl.n	800ec12 <_printf_float+0x242>
 800ec60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec64:	4631      	mov	r1, r6
 800ec66:	4628      	mov	r0, r5
 800ec68:	47b8      	blx	r7
 800ec6a:	3001      	adds	r0, #1
 800ec6c:	f43f af0b 	beq.w	800ea86 <_printf_float+0xb6>
 800ec70:	f04f 0900 	mov.w	r9, #0
 800ec74:	f104 0a1a 	add.w	sl, r4, #26
 800ec78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec7a:	425b      	negs	r3, r3
 800ec7c:	454b      	cmp	r3, r9
 800ec7e:	dc01      	bgt.n	800ec84 <_printf_float+0x2b4>
 800ec80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec82:	e794      	b.n	800ebae <_printf_float+0x1de>
 800ec84:	2301      	movs	r3, #1
 800ec86:	4652      	mov	r2, sl
 800ec88:	4631      	mov	r1, r6
 800ec8a:	4628      	mov	r0, r5
 800ec8c:	47b8      	blx	r7
 800ec8e:	3001      	adds	r0, #1
 800ec90:	f43f aef9 	beq.w	800ea86 <_printf_float+0xb6>
 800ec94:	f109 0901 	add.w	r9, r9, #1
 800ec98:	e7ee      	b.n	800ec78 <_printf_float+0x2a8>
 800ec9a:	bf00      	nop
 800ec9c:	7fefffff 	.word	0x7fefffff
 800eca0:	08011e18 	.word	0x08011e18
 800eca4:	08011e1c 	.word	0x08011e1c
 800eca8:	08011e24 	.word	0x08011e24
 800ecac:	08011e20 	.word	0x08011e20
 800ecb0:	08011e28 	.word	0x08011e28
 800ecb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	bfa8      	it	ge
 800ecbc:	461a      	movge	r2, r3
 800ecbe:	2a00      	cmp	r2, #0
 800ecc0:	4691      	mov	r9, r2
 800ecc2:	dc37      	bgt.n	800ed34 <_printf_float+0x364>
 800ecc4:	f04f 0b00 	mov.w	fp, #0
 800ecc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eccc:	f104 021a 	add.w	r2, r4, #26
 800ecd0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ecd4:	ebaa 0309 	sub.w	r3, sl, r9
 800ecd8:	455b      	cmp	r3, fp
 800ecda:	dc33      	bgt.n	800ed44 <_printf_float+0x374>
 800ecdc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ece0:	429a      	cmp	r2, r3
 800ece2:	db3b      	blt.n	800ed5c <_printf_float+0x38c>
 800ece4:	6823      	ldr	r3, [r4, #0]
 800ece6:	07da      	lsls	r2, r3, #31
 800ece8:	d438      	bmi.n	800ed5c <_printf_float+0x38c>
 800ecea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecec:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ecee:	eba3 020a 	sub.w	r2, r3, sl
 800ecf2:	eba3 0901 	sub.w	r9, r3, r1
 800ecf6:	4591      	cmp	r9, r2
 800ecf8:	bfa8      	it	ge
 800ecfa:	4691      	movge	r9, r2
 800ecfc:	f1b9 0f00 	cmp.w	r9, #0
 800ed00:	dc34      	bgt.n	800ed6c <_printf_float+0x39c>
 800ed02:	f04f 0800 	mov.w	r8, #0
 800ed06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed0a:	f104 0a1a 	add.w	sl, r4, #26
 800ed0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ed12:	1a9b      	subs	r3, r3, r2
 800ed14:	eba3 0309 	sub.w	r3, r3, r9
 800ed18:	4543      	cmp	r3, r8
 800ed1a:	f77f af7a 	ble.w	800ec12 <_printf_float+0x242>
 800ed1e:	2301      	movs	r3, #1
 800ed20:	4652      	mov	r2, sl
 800ed22:	4631      	mov	r1, r6
 800ed24:	4628      	mov	r0, r5
 800ed26:	47b8      	blx	r7
 800ed28:	3001      	adds	r0, #1
 800ed2a:	f43f aeac 	beq.w	800ea86 <_printf_float+0xb6>
 800ed2e:	f108 0801 	add.w	r8, r8, #1
 800ed32:	e7ec      	b.n	800ed0e <_printf_float+0x33e>
 800ed34:	4613      	mov	r3, r2
 800ed36:	4631      	mov	r1, r6
 800ed38:	4642      	mov	r2, r8
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	47b8      	blx	r7
 800ed3e:	3001      	adds	r0, #1
 800ed40:	d1c0      	bne.n	800ecc4 <_printf_float+0x2f4>
 800ed42:	e6a0      	b.n	800ea86 <_printf_float+0xb6>
 800ed44:	2301      	movs	r3, #1
 800ed46:	4631      	mov	r1, r6
 800ed48:	4628      	mov	r0, r5
 800ed4a:	920b      	str	r2, [sp, #44]	; 0x2c
 800ed4c:	47b8      	blx	r7
 800ed4e:	3001      	adds	r0, #1
 800ed50:	f43f ae99 	beq.w	800ea86 <_printf_float+0xb6>
 800ed54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed56:	f10b 0b01 	add.w	fp, fp, #1
 800ed5a:	e7b9      	b.n	800ecd0 <_printf_float+0x300>
 800ed5c:	4631      	mov	r1, r6
 800ed5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed62:	4628      	mov	r0, r5
 800ed64:	47b8      	blx	r7
 800ed66:	3001      	adds	r0, #1
 800ed68:	d1bf      	bne.n	800ecea <_printf_float+0x31a>
 800ed6a:	e68c      	b.n	800ea86 <_printf_float+0xb6>
 800ed6c:	464b      	mov	r3, r9
 800ed6e:	4631      	mov	r1, r6
 800ed70:	4628      	mov	r0, r5
 800ed72:	eb08 020a 	add.w	r2, r8, sl
 800ed76:	47b8      	blx	r7
 800ed78:	3001      	adds	r0, #1
 800ed7a:	d1c2      	bne.n	800ed02 <_printf_float+0x332>
 800ed7c:	e683      	b.n	800ea86 <_printf_float+0xb6>
 800ed7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed80:	2a01      	cmp	r2, #1
 800ed82:	dc01      	bgt.n	800ed88 <_printf_float+0x3b8>
 800ed84:	07db      	lsls	r3, r3, #31
 800ed86:	d537      	bpl.n	800edf8 <_printf_float+0x428>
 800ed88:	2301      	movs	r3, #1
 800ed8a:	4642      	mov	r2, r8
 800ed8c:	4631      	mov	r1, r6
 800ed8e:	4628      	mov	r0, r5
 800ed90:	47b8      	blx	r7
 800ed92:	3001      	adds	r0, #1
 800ed94:	f43f ae77 	beq.w	800ea86 <_printf_float+0xb6>
 800ed98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed9c:	4631      	mov	r1, r6
 800ed9e:	4628      	mov	r0, r5
 800eda0:	47b8      	blx	r7
 800eda2:	3001      	adds	r0, #1
 800eda4:	f43f ae6f 	beq.w	800ea86 <_printf_float+0xb6>
 800eda8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800edac:	2200      	movs	r2, #0
 800edae:	2300      	movs	r3, #0
 800edb0:	f7f1 fe66 	bl	8000a80 <__aeabi_dcmpeq>
 800edb4:	b9d8      	cbnz	r0, 800edee <_printf_float+0x41e>
 800edb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edb8:	f108 0201 	add.w	r2, r8, #1
 800edbc:	3b01      	subs	r3, #1
 800edbe:	4631      	mov	r1, r6
 800edc0:	4628      	mov	r0, r5
 800edc2:	47b8      	blx	r7
 800edc4:	3001      	adds	r0, #1
 800edc6:	d10e      	bne.n	800ede6 <_printf_float+0x416>
 800edc8:	e65d      	b.n	800ea86 <_printf_float+0xb6>
 800edca:	2301      	movs	r3, #1
 800edcc:	464a      	mov	r2, r9
 800edce:	4631      	mov	r1, r6
 800edd0:	4628      	mov	r0, r5
 800edd2:	47b8      	blx	r7
 800edd4:	3001      	adds	r0, #1
 800edd6:	f43f ae56 	beq.w	800ea86 <_printf_float+0xb6>
 800edda:	f108 0801 	add.w	r8, r8, #1
 800edde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ede0:	3b01      	subs	r3, #1
 800ede2:	4543      	cmp	r3, r8
 800ede4:	dcf1      	bgt.n	800edca <_printf_float+0x3fa>
 800ede6:	4653      	mov	r3, sl
 800ede8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800edec:	e6e0      	b.n	800ebb0 <_printf_float+0x1e0>
 800edee:	f04f 0800 	mov.w	r8, #0
 800edf2:	f104 091a 	add.w	r9, r4, #26
 800edf6:	e7f2      	b.n	800edde <_printf_float+0x40e>
 800edf8:	2301      	movs	r3, #1
 800edfa:	4642      	mov	r2, r8
 800edfc:	e7df      	b.n	800edbe <_printf_float+0x3ee>
 800edfe:	2301      	movs	r3, #1
 800ee00:	464a      	mov	r2, r9
 800ee02:	4631      	mov	r1, r6
 800ee04:	4628      	mov	r0, r5
 800ee06:	47b8      	blx	r7
 800ee08:	3001      	adds	r0, #1
 800ee0a:	f43f ae3c 	beq.w	800ea86 <_printf_float+0xb6>
 800ee0e:	f108 0801 	add.w	r8, r8, #1
 800ee12:	68e3      	ldr	r3, [r4, #12]
 800ee14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ee16:	1a5b      	subs	r3, r3, r1
 800ee18:	4543      	cmp	r3, r8
 800ee1a:	dcf0      	bgt.n	800edfe <_printf_float+0x42e>
 800ee1c:	e6fd      	b.n	800ec1a <_printf_float+0x24a>
 800ee1e:	f04f 0800 	mov.w	r8, #0
 800ee22:	f104 0919 	add.w	r9, r4, #25
 800ee26:	e7f4      	b.n	800ee12 <_printf_float+0x442>

0800ee28 <_printf_common>:
 800ee28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee2c:	4616      	mov	r6, r2
 800ee2e:	4699      	mov	r9, r3
 800ee30:	688a      	ldr	r2, [r1, #8]
 800ee32:	690b      	ldr	r3, [r1, #16]
 800ee34:	4607      	mov	r7, r0
 800ee36:	4293      	cmp	r3, r2
 800ee38:	bfb8      	it	lt
 800ee3a:	4613      	movlt	r3, r2
 800ee3c:	6033      	str	r3, [r6, #0]
 800ee3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee42:	460c      	mov	r4, r1
 800ee44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee48:	b10a      	cbz	r2, 800ee4e <_printf_common+0x26>
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	6033      	str	r3, [r6, #0]
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	0699      	lsls	r1, r3, #26
 800ee52:	bf42      	ittt	mi
 800ee54:	6833      	ldrmi	r3, [r6, #0]
 800ee56:	3302      	addmi	r3, #2
 800ee58:	6033      	strmi	r3, [r6, #0]
 800ee5a:	6825      	ldr	r5, [r4, #0]
 800ee5c:	f015 0506 	ands.w	r5, r5, #6
 800ee60:	d106      	bne.n	800ee70 <_printf_common+0x48>
 800ee62:	f104 0a19 	add.w	sl, r4, #25
 800ee66:	68e3      	ldr	r3, [r4, #12]
 800ee68:	6832      	ldr	r2, [r6, #0]
 800ee6a:	1a9b      	subs	r3, r3, r2
 800ee6c:	42ab      	cmp	r3, r5
 800ee6e:	dc28      	bgt.n	800eec2 <_printf_common+0x9a>
 800ee70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee74:	1e13      	subs	r3, r2, #0
 800ee76:	6822      	ldr	r2, [r4, #0]
 800ee78:	bf18      	it	ne
 800ee7a:	2301      	movne	r3, #1
 800ee7c:	0692      	lsls	r2, r2, #26
 800ee7e:	d42d      	bmi.n	800eedc <_printf_common+0xb4>
 800ee80:	4649      	mov	r1, r9
 800ee82:	4638      	mov	r0, r7
 800ee84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee88:	47c0      	blx	r8
 800ee8a:	3001      	adds	r0, #1
 800ee8c:	d020      	beq.n	800eed0 <_printf_common+0xa8>
 800ee8e:	6823      	ldr	r3, [r4, #0]
 800ee90:	68e5      	ldr	r5, [r4, #12]
 800ee92:	f003 0306 	and.w	r3, r3, #6
 800ee96:	2b04      	cmp	r3, #4
 800ee98:	bf18      	it	ne
 800ee9a:	2500      	movne	r5, #0
 800ee9c:	6832      	ldr	r2, [r6, #0]
 800ee9e:	f04f 0600 	mov.w	r6, #0
 800eea2:	68a3      	ldr	r3, [r4, #8]
 800eea4:	bf08      	it	eq
 800eea6:	1aad      	subeq	r5, r5, r2
 800eea8:	6922      	ldr	r2, [r4, #16]
 800eeaa:	bf08      	it	eq
 800eeac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	bfc4      	itt	gt
 800eeb4:	1a9b      	subgt	r3, r3, r2
 800eeb6:	18ed      	addgt	r5, r5, r3
 800eeb8:	341a      	adds	r4, #26
 800eeba:	42b5      	cmp	r5, r6
 800eebc:	d11a      	bne.n	800eef4 <_printf_common+0xcc>
 800eebe:	2000      	movs	r0, #0
 800eec0:	e008      	b.n	800eed4 <_printf_common+0xac>
 800eec2:	2301      	movs	r3, #1
 800eec4:	4652      	mov	r2, sl
 800eec6:	4649      	mov	r1, r9
 800eec8:	4638      	mov	r0, r7
 800eeca:	47c0      	blx	r8
 800eecc:	3001      	adds	r0, #1
 800eece:	d103      	bne.n	800eed8 <_printf_common+0xb0>
 800eed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed8:	3501      	adds	r5, #1
 800eeda:	e7c4      	b.n	800ee66 <_printf_common+0x3e>
 800eedc:	2030      	movs	r0, #48	; 0x30
 800eede:	18e1      	adds	r1, r4, r3
 800eee0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eee4:	1c5a      	adds	r2, r3, #1
 800eee6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eeea:	4422      	add	r2, r4
 800eeec:	3302      	adds	r3, #2
 800eeee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eef2:	e7c5      	b.n	800ee80 <_printf_common+0x58>
 800eef4:	2301      	movs	r3, #1
 800eef6:	4622      	mov	r2, r4
 800eef8:	4649      	mov	r1, r9
 800eefa:	4638      	mov	r0, r7
 800eefc:	47c0      	blx	r8
 800eefe:	3001      	adds	r0, #1
 800ef00:	d0e6      	beq.n	800eed0 <_printf_common+0xa8>
 800ef02:	3601      	adds	r6, #1
 800ef04:	e7d9      	b.n	800eeba <_printf_common+0x92>
	...

0800ef08 <_printf_i>:
 800ef08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef0c:	7e0f      	ldrb	r7, [r1, #24]
 800ef0e:	4691      	mov	r9, r2
 800ef10:	2f78      	cmp	r7, #120	; 0x78
 800ef12:	4680      	mov	r8, r0
 800ef14:	460c      	mov	r4, r1
 800ef16:	469a      	mov	sl, r3
 800ef18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ef1e:	d807      	bhi.n	800ef30 <_printf_i+0x28>
 800ef20:	2f62      	cmp	r7, #98	; 0x62
 800ef22:	d80a      	bhi.n	800ef3a <_printf_i+0x32>
 800ef24:	2f00      	cmp	r7, #0
 800ef26:	f000 80d9 	beq.w	800f0dc <_printf_i+0x1d4>
 800ef2a:	2f58      	cmp	r7, #88	; 0x58
 800ef2c:	f000 80a4 	beq.w	800f078 <_printf_i+0x170>
 800ef30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef38:	e03a      	b.n	800efb0 <_printf_i+0xa8>
 800ef3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef3e:	2b15      	cmp	r3, #21
 800ef40:	d8f6      	bhi.n	800ef30 <_printf_i+0x28>
 800ef42:	a101      	add	r1, pc, #4	; (adr r1, 800ef48 <_printf_i+0x40>)
 800ef44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef48:	0800efa1 	.word	0x0800efa1
 800ef4c:	0800efb5 	.word	0x0800efb5
 800ef50:	0800ef31 	.word	0x0800ef31
 800ef54:	0800ef31 	.word	0x0800ef31
 800ef58:	0800ef31 	.word	0x0800ef31
 800ef5c:	0800ef31 	.word	0x0800ef31
 800ef60:	0800efb5 	.word	0x0800efb5
 800ef64:	0800ef31 	.word	0x0800ef31
 800ef68:	0800ef31 	.word	0x0800ef31
 800ef6c:	0800ef31 	.word	0x0800ef31
 800ef70:	0800ef31 	.word	0x0800ef31
 800ef74:	0800f0c3 	.word	0x0800f0c3
 800ef78:	0800efe5 	.word	0x0800efe5
 800ef7c:	0800f0a5 	.word	0x0800f0a5
 800ef80:	0800ef31 	.word	0x0800ef31
 800ef84:	0800ef31 	.word	0x0800ef31
 800ef88:	0800f0e5 	.word	0x0800f0e5
 800ef8c:	0800ef31 	.word	0x0800ef31
 800ef90:	0800efe5 	.word	0x0800efe5
 800ef94:	0800ef31 	.word	0x0800ef31
 800ef98:	0800ef31 	.word	0x0800ef31
 800ef9c:	0800f0ad 	.word	0x0800f0ad
 800efa0:	682b      	ldr	r3, [r5, #0]
 800efa2:	1d1a      	adds	r2, r3, #4
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	602a      	str	r2, [r5, #0]
 800efa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efb0:	2301      	movs	r3, #1
 800efb2:	e0a4      	b.n	800f0fe <_printf_i+0x1f6>
 800efb4:	6820      	ldr	r0, [r4, #0]
 800efb6:	6829      	ldr	r1, [r5, #0]
 800efb8:	0606      	lsls	r6, r0, #24
 800efba:	f101 0304 	add.w	r3, r1, #4
 800efbe:	d50a      	bpl.n	800efd6 <_printf_i+0xce>
 800efc0:	680e      	ldr	r6, [r1, #0]
 800efc2:	602b      	str	r3, [r5, #0]
 800efc4:	2e00      	cmp	r6, #0
 800efc6:	da03      	bge.n	800efd0 <_printf_i+0xc8>
 800efc8:	232d      	movs	r3, #45	; 0x2d
 800efca:	4276      	negs	r6, r6
 800efcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efd0:	230a      	movs	r3, #10
 800efd2:	485e      	ldr	r0, [pc, #376]	; (800f14c <_printf_i+0x244>)
 800efd4:	e019      	b.n	800f00a <_printf_i+0x102>
 800efd6:	680e      	ldr	r6, [r1, #0]
 800efd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800efdc:	602b      	str	r3, [r5, #0]
 800efde:	bf18      	it	ne
 800efe0:	b236      	sxthne	r6, r6
 800efe2:	e7ef      	b.n	800efc4 <_printf_i+0xbc>
 800efe4:	682b      	ldr	r3, [r5, #0]
 800efe6:	6820      	ldr	r0, [r4, #0]
 800efe8:	1d19      	adds	r1, r3, #4
 800efea:	6029      	str	r1, [r5, #0]
 800efec:	0601      	lsls	r1, r0, #24
 800efee:	d501      	bpl.n	800eff4 <_printf_i+0xec>
 800eff0:	681e      	ldr	r6, [r3, #0]
 800eff2:	e002      	b.n	800effa <_printf_i+0xf2>
 800eff4:	0646      	lsls	r6, r0, #25
 800eff6:	d5fb      	bpl.n	800eff0 <_printf_i+0xe8>
 800eff8:	881e      	ldrh	r6, [r3, #0]
 800effa:	2f6f      	cmp	r7, #111	; 0x6f
 800effc:	bf0c      	ite	eq
 800effe:	2308      	moveq	r3, #8
 800f000:	230a      	movne	r3, #10
 800f002:	4852      	ldr	r0, [pc, #328]	; (800f14c <_printf_i+0x244>)
 800f004:	2100      	movs	r1, #0
 800f006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f00a:	6865      	ldr	r5, [r4, #4]
 800f00c:	2d00      	cmp	r5, #0
 800f00e:	bfa8      	it	ge
 800f010:	6821      	ldrge	r1, [r4, #0]
 800f012:	60a5      	str	r5, [r4, #8]
 800f014:	bfa4      	itt	ge
 800f016:	f021 0104 	bicge.w	r1, r1, #4
 800f01a:	6021      	strge	r1, [r4, #0]
 800f01c:	b90e      	cbnz	r6, 800f022 <_printf_i+0x11a>
 800f01e:	2d00      	cmp	r5, #0
 800f020:	d04d      	beq.n	800f0be <_printf_i+0x1b6>
 800f022:	4615      	mov	r5, r2
 800f024:	fbb6 f1f3 	udiv	r1, r6, r3
 800f028:	fb03 6711 	mls	r7, r3, r1, r6
 800f02c:	5dc7      	ldrb	r7, [r0, r7]
 800f02e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f032:	4637      	mov	r7, r6
 800f034:	42bb      	cmp	r3, r7
 800f036:	460e      	mov	r6, r1
 800f038:	d9f4      	bls.n	800f024 <_printf_i+0x11c>
 800f03a:	2b08      	cmp	r3, #8
 800f03c:	d10b      	bne.n	800f056 <_printf_i+0x14e>
 800f03e:	6823      	ldr	r3, [r4, #0]
 800f040:	07de      	lsls	r6, r3, #31
 800f042:	d508      	bpl.n	800f056 <_printf_i+0x14e>
 800f044:	6923      	ldr	r3, [r4, #16]
 800f046:	6861      	ldr	r1, [r4, #4]
 800f048:	4299      	cmp	r1, r3
 800f04a:	bfde      	ittt	le
 800f04c:	2330      	movle	r3, #48	; 0x30
 800f04e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f052:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f056:	1b52      	subs	r2, r2, r5
 800f058:	6122      	str	r2, [r4, #16]
 800f05a:	464b      	mov	r3, r9
 800f05c:	4621      	mov	r1, r4
 800f05e:	4640      	mov	r0, r8
 800f060:	f8cd a000 	str.w	sl, [sp]
 800f064:	aa03      	add	r2, sp, #12
 800f066:	f7ff fedf 	bl	800ee28 <_printf_common>
 800f06a:	3001      	adds	r0, #1
 800f06c:	d14c      	bne.n	800f108 <_printf_i+0x200>
 800f06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f072:	b004      	add	sp, #16
 800f074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f078:	4834      	ldr	r0, [pc, #208]	; (800f14c <_printf_i+0x244>)
 800f07a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f07e:	6829      	ldr	r1, [r5, #0]
 800f080:	6823      	ldr	r3, [r4, #0]
 800f082:	f851 6b04 	ldr.w	r6, [r1], #4
 800f086:	6029      	str	r1, [r5, #0]
 800f088:	061d      	lsls	r5, r3, #24
 800f08a:	d514      	bpl.n	800f0b6 <_printf_i+0x1ae>
 800f08c:	07df      	lsls	r7, r3, #31
 800f08e:	bf44      	itt	mi
 800f090:	f043 0320 	orrmi.w	r3, r3, #32
 800f094:	6023      	strmi	r3, [r4, #0]
 800f096:	b91e      	cbnz	r6, 800f0a0 <_printf_i+0x198>
 800f098:	6823      	ldr	r3, [r4, #0]
 800f09a:	f023 0320 	bic.w	r3, r3, #32
 800f09e:	6023      	str	r3, [r4, #0]
 800f0a0:	2310      	movs	r3, #16
 800f0a2:	e7af      	b.n	800f004 <_printf_i+0xfc>
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	f043 0320 	orr.w	r3, r3, #32
 800f0aa:	6023      	str	r3, [r4, #0]
 800f0ac:	2378      	movs	r3, #120	; 0x78
 800f0ae:	4828      	ldr	r0, [pc, #160]	; (800f150 <_printf_i+0x248>)
 800f0b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0b4:	e7e3      	b.n	800f07e <_printf_i+0x176>
 800f0b6:	0659      	lsls	r1, r3, #25
 800f0b8:	bf48      	it	mi
 800f0ba:	b2b6      	uxthmi	r6, r6
 800f0bc:	e7e6      	b.n	800f08c <_printf_i+0x184>
 800f0be:	4615      	mov	r5, r2
 800f0c0:	e7bb      	b.n	800f03a <_printf_i+0x132>
 800f0c2:	682b      	ldr	r3, [r5, #0]
 800f0c4:	6826      	ldr	r6, [r4, #0]
 800f0c6:	1d18      	adds	r0, r3, #4
 800f0c8:	6961      	ldr	r1, [r4, #20]
 800f0ca:	6028      	str	r0, [r5, #0]
 800f0cc:	0635      	lsls	r5, r6, #24
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	d501      	bpl.n	800f0d6 <_printf_i+0x1ce>
 800f0d2:	6019      	str	r1, [r3, #0]
 800f0d4:	e002      	b.n	800f0dc <_printf_i+0x1d4>
 800f0d6:	0670      	lsls	r0, r6, #25
 800f0d8:	d5fb      	bpl.n	800f0d2 <_printf_i+0x1ca>
 800f0da:	8019      	strh	r1, [r3, #0]
 800f0dc:	2300      	movs	r3, #0
 800f0de:	4615      	mov	r5, r2
 800f0e0:	6123      	str	r3, [r4, #16]
 800f0e2:	e7ba      	b.n	800f05a <_printf_i+0x152>
 800f0e4:	682b      	ldr	r3, [r5, #0]
 800f0e6:	2100      	movs	r1, #0
 800f0e8:	1d1a      	adds	r2, r3, #4
 800f0ea:	602a      	str	r2, [r5, #0]
 800f0ec:	681d      	ldr	r5, [r3, #0]
 800f0ee:	6862      	ldr	r2, [r4, #4]
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	f000 feeb 	bl	800fecc <memchr>
 800f0f6:	b108      	cbz	r0, 800f0fc <_printf_i+0x1f4>
 800f0f8:	1b40      	subs	r0, r0, r5
 800f0fa:	6060      	str	r0, [r4, #4]
 800f0fc:	6863      	ldr	r3, [r4, #4]
 800f0fe:	6123      	str	r3, [r4, #16]
 800f100:	2300      	movs	r3, #0
 800f102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f106:	e7a8      	b.n	800f05a <_printf_i+0x152>
 800f108:	462a      	mov	r2, r5
 800f10a:	4649      	mov	r1, r9
 800f10c:	4640      	mov	r0, r8
 800f10e:	6923      	ldr	r3, [r4, #16]
 800f110:	47d0      	blx	sl
 800f112:	3001      	adds	r0, #1
 800f114:	d0ab      	beq.n	800f06e <_printf_i+0x166>
 800f116:	6823      	ldr	r3, [r4, #0]
 800f118:	079b      	lsls	r3, r3, #30
 800f11a:	d413      	bmi.n	800f144 <_printf_i+0x23c>
 800f11c:	68e0      	ldr	r0, [r4, #12]
 800f11e:	9b03      	ldr	r3, [sp, #12]
 800f120:	4298      	cmp	r0, r3
 800f122:	bfb8      	it	lt
 800f124:	4618      	movlt	r0, r3
 800f126:	e7a4      	b.n	800f072 <_printf_i+0x16a>
 800f128:	2301      	movs	r3, #1
 800f12a:	4632      	mov	r2, r6
 800f12c:	4649      	mov	r1, r9
 800f12e:	4640      	mov	r0, r8
 800f130:	47d0      	blx	sl
 800f132:	3001      	adds	r0, #1
 800f134:	d09b      	beq.n	800f06e <_printf_i+0x166>
 800f136:	3501      	adds	r5, #1
 800f138:	68e3      	ldr	r3, [r4, #12]
 800f13a:	9903      	ldr	r1, [sp, #12]
 800f13c:	1a5b      	subs	r3, r3, r1
 800f13e:	42ab      	cmp	r3, r5
 800f140:	dcf2      	bgt.n	800f128 <_printf_i+0x220>
 800f142:	e7eb      	b.n	800f11c <_printf_i+0x214>
 800f144:	2500      	movs	r5, #0
 800f146:	f104 0619 	add.w	r6, r4, #25
 800f14a:	e7f5      	b.n	800f138 <_printf_i+0x230>
 800f14c:	08011e2a 	.word	0x08011e2a
 800f150:	08011e3b 	.word	0x08011e3b

0800f154 <siprintf>:
 800f154:	b40e      	push	{r1, r2, r3}
 800f156:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f15a:	b500      	push	{lr}
 800f15c:	b09c      	sub	sp, #112	; 0x70
 800f15e:	ab1d      	add	r3, sp, #116	; 0x74
 800f160:	9002      	str	r0, [sp, #8]
 800f162:	9006      	str	r0, [sp, #24]
 800f164:	9107      	str	r1, [sp, #28]
 800f166:	9104      	str	r1, [sp, #16]
 800f168:	4808      	ldr	r0, [pc, #32]	; (800f18c <siprintf+0x38>)
 800f16a:	4909      	ldr	r1, [pc, #36]	; (800f190 <siprintf+0x3c>)
 800f16c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f170:	9105      	str	r1, [sp, #20]
 800f172:	6800      	ldr	r0, [r0, #0]
 800f174:	a902      	add	r1, sp, #8
 800f176:	9301      	str	r3, [sp, #4]
 800f178:	f001 fb84 	bl	8010884 <_svfiprintf_r>
 800f17c:	2200      	movs	r2, #0
 800f17e:	9b02      	ldr	r3, [sp, #8]
 800f180:	701a      	strb	r2, [r3, #0]
 800f182:	b01c      	add	sp, #112	; 0x70
 800f184:	f85d eb04 	ldr.w	lr, [sp], #4
 800f188:	b003      	add	sp, #12
 800f18a:	4770      	bx	lr
 800f18c:	20000070 	.word	0x20000070
 800f190:	ffff0208 	.word	0xffff0208

0800f194 <strncpy>:
 800f194:	4603      	mov	r3, r0
 800f196:	b510      	push	{r4, lr}
 800f198:	3901      	subs	r1, #1
 800f19a:	b132      	cbz	r2, 800f1aa <strncpy+0x16>
 800f19c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f1a0:	3a01      	subs	r2, #1
 800f1a2:	f803 4b01 	strb.w	r4, [r3], #1
 800f1a6:	2c00      	cmp	r4, #0
 800f1a8:	d1f7      	bne.n	800f19a <strncpy+0x6>
 800f1aa:	2100      	movs	r1, #0
 800f1ac:	441a      	add	r2, r3
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d100      	bne.n	800f1b4 <strncpy+0x20>
 800f1b2:	bd10      	pop	{r4, pc}
 800f1b4:	f803 1b01 	strb.w	r1, [r3], #1
 800f1b8:	e7f9      	b.n	800f1ae <strncpy+0x1a>

0800f1ba <quorem>:
 800f1ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1be:	6903      	ldr	r3, [r0, #16]
 800f1c0:	690c      	ldr	r4, [r1, #16]
 800f1c2:	4607      	mov	r7, r0
 800f1c4:	42a3      	cmp	r3, r4
 800f1c6:	f2c0 8082 	blt.w	800f2ce <quorem+0x114>
 800f1ca:	3c01      	subs	r4, #1
 800f1cc:	f100 0514 	add.w	r5, r0, #20
 800f1d0:	f101 0814 	add.w	r8, r1, #20
 800f1d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f1d8:	9301      	str	r3, [sp, #4]
 800f1da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f1de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800f1ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f1ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f1f2:	d331      	bcc.n	800f258 <quorem+0x9e>
 800f1f4:	f04f 0e00 	mov.w	lr, #0
 800f1f8:	4640      	mov	r0, r8
 800f1fa:	46ac      	mov	ip, r5
 800f1fc:	46f2      	mov	sl, lr
 800f1fe:	f850 2b04 	ldr.w	r2, [r0], #4
 800f202:	b293      	uxth	r3, r2
 800f204:	fb06 e303 	mla	r3, r6, r3, lr
 800f208:	0c12      	lsrs	r2, r2, #16
 800f20a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f20e:	b29b      	uxth	r3, r3
 800f210:	fb06 e202 	mla	r2, r6, r2, lr
 800f214:	ebaa 0303 	sub.w	r3, sl, r3
 800f218:	f8dc a000 	ldr.w	sl, [ip]
 800f21c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f220:	fa1f fa8a 	uxth.w	sl, sl
 800f224:	4453      	add	r3, sl
 800f226:	f8dc a000 	ldr.w	sl, [ip]
 800f22a:	b292      	uxth	r2, r2
 800f22c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f234:	b29b      	uxth	r3, r3
 800f236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f23a:	4581      	cmp	r9, r0
 800f23c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f240:	f84c 3b04 	str.w	r3, [ip], #4
 800f244:	d2db      	bcs.n	800f1fe <quorem+0x44>
 800f246:	f855 300b 	ldr.w	r3, [r5, fp]
 800f24a:	b92b      	cbnz	r3, 800f258 <quorem+0x9e>
 800f24c:	9b01      	ldr	r3, [sp, #4]
 800f24e:	3b04      	subs	r3, #4
 800f250:	429d      	cmp	r5, r3
 800f252:	461a      	mov	r2, r3
 800f254:	d32f      	bcc.n	800f2b6 <quorem+0xfc>
 800f256:	613c      	str	r4, [r7, #16]
 800f258:	4638      	mov	r0, r7
 800f25a:	f001 f8c3 	bl	80103e4 <__mcmp>
 800f25e:	2800      	cmp	r0, #0
 800f260:	db25      	blt.n	800f2ae <quorem+0xf4>
 800f262:	4628      	mov	r0, r5
 800f264:	f04f 0c00 	mov.w	ip, #0
 800f268:	3601      	adds	r6, #1
 800f26a:	f858 1b04 	ldr.w	r1, [r8], #4
 800f26e:	f8d0 e000 	ldr.w	lr, [r0]
 800f272:	b28b      	uxth	r3, r1
 800f274:	ebac 0303 	sub.w	r3, ip, r3
 800f278:	fa1f f28e 	uxth.w	r2, lr
 800f27c:	4413      	add	r3, r2
 800f27e:	0c0a      	lsrs	r2, r1, #16
 800f280:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f288:	b29b      	uxth	r3, r3
 800f28a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f28e:	45c1      	cmp	r9, r8
 800f290:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f294:	f840 3b04 	str.w	r3, [r0], #4
 800f298:	d2e7      	bcs.n	800f26a <quorem+0xb0>
 800f29a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f29e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f2a2:	b922      	cbnz	r2, 800f2ae <quorem+0xf4>
 800f2a4:	3b04      	subs	r3, #4
 800f2a6:	429d      	cmp	r5, r3
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	d30a      	bcc.n	800f2c2 <quorem+0x108>
 800f2ac:	613c      	str	r4, [r7, #16]
 800f2ae:	4630      	mov	r0, r6
 800f2b0:	b003      	add	sp, #12
 800f2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b6:	6812      	ldr	r2, [r2, #0]
 800f2b8:	3b04      	subs	r3, #4
 800f2ba:	2a00      	cmp	r2, #0
 800f2bc:	d1cb      	bne.n	800f256 <quorem+0x9c>
 800f2be:	3c01      	subs	r4, #1
 800f2c0:	e7c6      	b.n	800f250 <quorem+0x96>
 800f2c2:	6812      	ldr	r2, [r2, #0]
 800f2c4:	3b04      	subs	r3, #4
 800f2c6:	2a00      	cmp	r2, #0
 800f2c8:	d1f0      	bne.n	800f2ac <quorem+0xf2>
 800f2ca:	3c01      	subs	r4, #1
 800f2cc:	e7eb      	b.n	800f2a6 <quorem+0xec>
 800f2ce:	2000      	movs	r0, #0
 800f2d0:	e7ee      	b.n	800f2b0 <quorem+0xf6>
 800f2d2:	0000      	movs	r0, r0
 800f2d4:	0000      	movs	r0, r0
	...

0800f2d8 <_dtoa_r>:
 800f2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2dc:	4616      	mov	r6, r2
 800f2de:	461f      	mov	r7, r3
 800f2e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f2e2:	b099      	sub	sp, #100	; 0x64
 800f2e4:	4605      	mov	r5, r0
 800f2e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f2ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800f2ee:	b974      	cbnz	r4, 800f30e <_dtoa_r+0x36>
 800f2f0:	2010      	movs	r0, #16
 800f2f2:	f000 fde3 	bl	800febc <malloc>
 800f2f6:	4602      	mov	r2, r0
 800f2f8:	6268      	str	r0, [r5, #36]	; 0x24
 800f2fa:	b920      	cbnz	r0, 800f306 <_dtoa_r+0x2e>
 800f2fc:	21ea      	movs	r1, #234	; 0xea
 800f2fe:	4ba8      	ldr	r3, [pc, #672]	; (800f5a0 <_dtoa_r+0x2c8>)
 800f300:	48a8      	ldr	r0, [pc, #672]	; (800f5a4 <_dtoa_r+0x2cc>)
 800f302:	f001 fbcf 	bl	8010aa4 <__assert_func>
 800f306:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f30a:	6004      	str	r4, [r0, #0]
 800f30c:	60c4      	str	r4, [r0, #12]
 800f30e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f310:	6819      	ldr	r1, [r3, #0]
 800f312:	b151      	cbz	r1, 800f32a <_dtoa_r+0x52>
 800f314:	685a      	ldr	r2, [r3, #4]
 800f316:	2301      	movs	r3, #1
 800f318:	4093      	lsls	r3, r2
 800f31a:	604a      	str	r2, [r1, #4]
 800f31c:	608b      	str	r3, [r1, #8]
 800f31e:	4628      	mov	r0, r5
 800f320:	f000 fe22 	bl	800ff68 <_Bfree>
 800f324:	2200      	movs	r2, #0
 800f326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f328:	601a      	str	r2, [r3, #0]
 800f32a:	1e3b      	subs	r3, r7, #0
 800f32c:	bfaf      	iteee	ge
 800f32e:	2300      	movge	r3, #0
 800f330:	2201      	movlt	r2, #1
 800f332:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f336:	9305      	strlt	r3, [sp, #20]
 800f338:	bfa8      	it	ge
 800f33a:	f8c8 3000 	strge.w	r3, [r8]
 800f33e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f342:	4b99      	ldr	r3, [pc, #612]	; (800f5a8 <_dtoa_r+0x2d0>)
 800f344:	bfb8      	it	lt
 800f346:	f8c8 2000 	strlt.w	r2, [r8]
 800f34a:	ea33 0309 	bics.w	r3, r3, r9
 800f34e:	d119      	bne.n	800f384 <_dtoa_r+0xac>
 800f350:	f242 730f 	movw	r3, #9999	; 0x270f
 800f354:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f356:	6013      	str	r3, [r2, #0]
 800f358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f35c:	4333      	orrs	r3, r6
 800f35e:	f000 857f 	beq.w	800fe60 <_dtoa_r+0xb88>
 800f362:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f364:	b953      	cbnz	r3, 800f37c <_dtoa_r+0xa4>
 800f366:	4b91      	ldr	r3, [pc, #580]	; (800f5ac <_dtoa_r+0x2d4>)
 800f368:	e022      	b.n	800f3b0 <_dtoa_r+0xd8>
 800f36a:	4b91      	ldr	r3, [pc, #580]	; (800f5b0 <_dtoa_r+0x2d8>)
 800f36c:	9303      	str	r3, [sp, #12]
 800f36e:	3308      	adds	r3, #8
 800f370:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f372:	6013      	str	r3, [r2, #0]
 800f374:	9803      	ldr	r0, [sp, #12]
 800f376:	b019      	add	sp, #100	; 0x64
 800f378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37c:	4b8b      	ldr	r3, [pc, #556]	; (800f5ac <_dtoa_r+0x2d4>)
 800f37e:	9303      	str	r3, [sp, #12]
 800f380:	3303      	adds	r3, #3
 800f382:	e7f5      	b.n	800f370 <_dtoa_r+0x98>
 800f384:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f388:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800f38c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f390:	2200      	movs	r2, #0
 800f392:	2300      	movs	r3, #0
 800f394:	f7f1 fb74 	bl	8000a80 <__aeabi_dcmpeq>
 800f398:	4680      	mov	r8, r0
 800f39a:	b158      	cbz	r0, 800f3b4 <_dtoa_r+0xdc>
 800f39c:	2301      	movs	r3, #1
 800f39e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f3a0:	6013      	str	r3, [r2, #0]
 800f3a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	f000 8558 	beq.w	800fe5a <_dtoa_r+0xb82>
 800f3aa:	4882      	ldr	r0, [pc, #520]	; (800f5b4 <_dtoa_r+0x2dc>)
 800f3ac:	6018      	str	r0, [r3, #0]
 800f3ae:	1e43      	subs	r3, r0, #1
 800f3b0:	9303      	str	r3, [sp, #12]
 800f3b2:	e7df      	b.n	800f374 <_dtoa_r+0x9c>
 800f3b4:	ab16      	add	r3, sp, #88	; 0x58
 800f3b6:	9301      	str	r3, [sp, #4]
 800f3b8:	ab17      	add	r3, sp, #92	; 0x5c
 800f3ba:	9300      	str	r3, [sp, #0]
 800f3bc:	4628      	mov	r0, r5
 800f3be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f3c2:	f001 f8b7 	bl	8010534 <__d2b>
 800f3c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f3ca:	4683      	mov	fp, r0
 800f3cc:	2c00      	cmp	r4, #0
 800f3ce:	d07f      	beq.n	800f4d0 <_dtoa_r+0x1f8>
 800f3d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f3d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f3da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f3de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800f3e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f3e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	4b72      	ldr	r3, [pc, #456]	; (800f5b8 <_dtoa_r+0x2e0>)
 800f3ee:	f7f0 ff27 	bl	8000240 <__aeabi_dsub>
 800f3f2:	a365      	add	r3, pc, #404	; (adr r3, 800f588 <_dtoa_r+0x2b0>)
 800f3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f8:	f7f1 f8da 	bl	80005b0 <__aeabi_dmul>
 800f3fc:	a364      	add	r3, pc, #400	; (adr r3, 800f590 <_dtoa_r+0x2b8>)
 800f3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f402:	f7f0 ff1f 	bl	8000244 <__adddf3>
 800f406:	4606      	mov	r6, r0
 800f408:	4620      	mov	r0, r4
 800f40a:	460f      	mov	r7, r1
 800f40c:	f7f1 f866 	bl	80004dc <__aeabi_i2d>
 800f410:	a361      	add	r3, pc, #388	; (adr r3, 800f598 <_dtoa_r+0x2c0>)
 800f412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f416:	f7f1 f8cb 	bl	80005b0 <__aeabi_dmul>
 800f41a:	4602      	mov	r2, r0
 800f41c:	460b      	mov	r3, r1
 800f41e:	4630      	mov	r0, r6
 800f420:	4639      	mov	r1, r7
 800f422:	f7f0 ff0f 	bl	8000244 <__adddf3>
 800f426:	4606      	mov	r6, r0
 800f428:	460f      	mov	r7, r1
 800f42a:	f7f1 fb71 	bl	8000b10 <__aeabi_d2iz>
 800f42e:	2200      	movs	r2, #0
 800f430:	4682      	mov	sl, r0
 800f432:	2300      	movs	r3, #0
 800f434:	4630      	mov	r0, r6
 800f436:	4639      	mov	r1, r7
 800f438:	f7f1 fb2c 	bl	8000a94 <__aeabi_dcmplt>
 800f43c:	b148      	cbz	r0, 800f452 <_dtoa_r+0x17a>
 800f43e:	4650      	mov	r0, sl
 800f440:	f7f1 f84c 	bl	80004dc <__aeabi_i2d>
 800f444:	4632      	mov	r2, r6
 800f446:	463b      	mov	r3, r7
 800f448:	f7f1 fb1a 	bl	8000a80 <__aeabi_dcmpeq>
 800f44c:	b908      	cbnz	r0, 800f452 <_dtoa_r+0x17a>
 800f44e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f452:	f1ba 0f16 	cmp.w	sl, #22
 800f456:	d858      	bhi.n	800f50a <_dtoa_r+0x232>
 800f458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f45c:	4b57      	ldr	r3, [pc, #348]	; (800f5bc <_dtoa_r+0x2e4>)
 800f45e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f466:	f7f1 fb15 	bl	8000a94 <__aeabi_dcmplt>
 800f46a:	2800      	cmp	r0, #0
 800f46c:	d04f      	beq.n	800f50e <_dtoa_r+0x236>
 800f46e:	2300      	movs	r3, #0
 800f470:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f474:	930f      	str	r3, [sp, #60]	; 0x3c
 800f476:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f478:	1b1c      	subs	r4, r3, r4
 800f47a:	1e63      	subs	r3, r4, #1
 800f47c:	9309      	str	r3, [sp, #36]	; 0x24
 800f47e:	bf49      	itett	mi
 800f480:	f1c4 0301 	rsbmi	r3, r4, #1
 800f484:	2300      	movpl	r3, #0
 800f486:	9306      	strmi	r3, [sp, #24]
 800f488:	2300      	movmi	r3, #0
 800f48a:	bf54      	ite	pl
 800f48c:	9306      	strpl	r3, [sp, #24]
 800f48e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800f490:	f1ba 0f00 	cmp.w	sl, #0
 800f494:	db3d      	blt.n	800f512 <_dtoa_r+0x23a>
 800f496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f498:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f49c:	4453      	add	r3, sl
 800f49e:	9309      	str	r3, [sp, #36]	; 0x24
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	930a      	str	r3, [sp, #40]	; 0x28
 800f4a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f4a6:	2b09      	cmp	r3, #9
 800f4a8:	f200 808c 	bhi.w	800f5c4 <_dtoa_r+0x2ec>
 800f4ac:	2b05      	cmp	r3, #5
 800f4ae:	bfc4      	itt	gt
 800f4b0:	3b04      	subgt	r3, #4
 800f4b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800f4b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f4b6:	bfc8      	it	gt
 800f4b8:	2400      	movgt	r4, #0
 800f4ba:	f1a3 0302 	sub.w	r3, r3, #2
 800f4be:	bfd8      	it	le
 800f4c0:	2401      	movle	r4, #1
 800f4c2:	2b03      	cmp	r3, #3
 800f4c4:	f200 808a 	bhi.w	800f5dc <_dtoa_r+0x304>
 800f4c8:	e8df f003 	tbb	[pc, r3]
 800f4cc:	5b4d4f2d 	.word	0x5b4d4f2d
 800f4d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800f4d4:	441c      	add	r4, r3
 800f4d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800f4da:	2b20      	cmp	r3, #32
 800f4dc:	bfc3      	ittte	gt
 800f4de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f4e2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800f4e6:	fa09 f303 	lslgt.w	r3, r9, r3
 800f4ea:	f1c3 0320 	rsble	r3, r3, #32
 800f4ee:	bfc6      	itte	gt
 800f4f0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f4f4:	4318      	orrgt	r0, r3
 800f4f6:	fa06 f003 	lslle.w	r0, r6, r3
 800f4fa:	f7f0 ffdf 	bl	80004bc <__aeabi_ui2d>
 800f4fe:	2301      	movs	r3, #1
 800f500:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f504:	3c01      	subs	r4, #1
 800f506:	9313      	str	r3, [sp, #76]	; 0x4c
 800f508:	e76f      	b.n	800f3ea <_dtoa_r+0x112>
 800f50a:	2301      	movs	r3, #1
 800f50c:	e7b2      	b.n	800f474 <_dtoa_r+0x19c>
 800f50e:	900f      	str	r0, [sp, #60]	; 0x3c
 800f510:	e7b1      	b.n	800f476 <_dtoa_r+0x19e>
 800f512:	9b06      	ldr	r3, [sp, #24]
 800f514:	eba3 030a 	sub.w	r3, r3, sl
 800f518:	9306      	str	r3, [sp, #24]
 800f51a:	f1ca 0300 	rsb	r3, sl, #0
 800f51e:	930a      	str	r3, [sp, #40]	; 0x28
 800f520:	2300      	movs	r3, #0
 800f522:	930e      	str	r3, [sp, #56]	; 0x38
 800f524:	e7be      	b.n	800f4a4 <_dtoa_r+0x1cc>
 800f526:	2300      	movs	r3, #0
 800f528:	930b      	str	r3, [sp, #44]	; 0x2c
 800f52a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	dc58      	bgt.n	800f5e2 <_dtoa_r+0x30a>
 800f530:	f04f 0901 	mov.w	r9, #1
 800f534:	464b      	mov	r3, r9
 800f536:	f8cd 9020 	str.w	r9, [sp, #32]
 800f53a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800f53e:	2200      	movs	r2, #0
 800f540:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800f542:	6042      	str	r2, [r0, #4]
 800f544:	2204      	movs	r2, #4
 800f546:	f102 0614 	add.w	r6, r2, #20
 800f54a:	429e      	cmp	r6, r3
 800f54c:	6841      	ldr	r1, [r0, #4]
 800f54e:	d94e      	bls.n	800f5ee <_dtoa_r+0x316>
 800f550:	4628      	mov	r0, r5
 800f552:	f000 fcc9 	bl	800fee8 <_Balloc>
 800f556:	9003      	str	r0, [sp, #12]
 800f558:	2800      	cmp	r0, #0
 800f55a:	d14c      	bne.n	800f5f6 <_dtoa_r+0x31e>
 800f55c:	4602      	mov	r2, r0
 800f55e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f562:	4b17      	ldr	r3, [pc, #92]	; (800f5c0 <_dtoa_r+0x2e8>)
 800f564:	e6cc      	b.n	800f300 <_dtoa_r+0x28>
 800f566:	2301      	movs	r3, #1
 800f568:	e7de      	b.n	800f528 <_dtoa_r+0x250>
 800f56a:	2300      	movs	r3, #0
 800f56c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f56e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f570:	eb0a 0903 	add.w	r9, sl, r3
 800f574:	f109 0301 	add.w	r3, r9, #1
 800f578:	2b01      	cmp	r3, #1
 800f57a:	9308      	str	r3, [sp, #32]
 800f57c:	bfb8      	it	lt
 800f57e:	2301      	movlt	r3, #1
 800f580:	e7dd      	b.n	800f53e <_dtoa_r+0x266>
 800f582:	2301      	movs	r3, #1
 800f584:	e7f2      	b.n	800f56c <_dtoa_r+0x294>
 800f586:	bf00      	nop
 800f588:	636f4361 	.word	0x636f4361
 800f58c:	3fd287a7 	.word	0x3fd287a7
 800f590:	8b60c8b3 	.word	0x8b60c8b3
 800f594:	3fc68a28 	.word	0x3fc68a28
 800f598:	509f79fb 	.word	0x509f79fb
 800f59c:	3fd34413 	.word	0x3fd34413
 800f5a0:	08011e59 	.word	0x08011e59
 800f5a4:	08011e70 	.word	0x08011e70
 800f5a8:	7ff00000 	.word	0x7ff00000
 800f5ac:	08011e55 	.word	0x08011e55
 800f5b0:	08011e4c 	.word	0x08011e4c
 800f5b4:	08011e29 	.word	0x08011e29
 800f5b8:	3ff80000 	.word	0x3ff80000
 800f5bc:	08011f60 	.word	0x08011f60
 800f5c0:	08011ecb 	.word	0x08011ecb
 800f5c4:	2401      	movs	r4, #1
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	940b      	str	r4, [sp, #44]	; 0x2c
 800f5ca:	9322      	str	r3, [sp, #136]	; 0x88
 800f5cc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	2312      	movs	r3, #18
 800f5d4:	f8cd 9020 	str.w	r9, [sp, #32]
 800f5d8:	9223      	str	r2, [sp, #140]	; 0x8c
 800f5da:	e7b0      	b.n	800f53e <_dtoa_r+0x266>
 800f5dc:	2301      	movs	r3, #1
 800f5de:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5e0:	e7f4      	b.n	800f5cc <_dtoa_r+0x2f4>
 800f5e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800f5e6:	464b      	mov	r3, r9
 800f5e8:	f8cd 9020 	str.w	r9, [sp, #32]
 800f5ec:	e7a7      	b.n	800f53e <_dtoa_r+0x266>
 800f5ee:	3101      	adds	r1, #1
 800f5f0:	6041      	str	r1, [r0, #4]
 800f5f2:	0052      	lsls	r2, r2, #1
 800f5f4:	e7a7      	b.n	800f546 <_dtoa_r+0x26e>
 800f5f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f5f8:	9a03      	ldr	r2, [sp, #12]
 800f5fa:	601a      	str	r2, [r3, #0]
 800f5fc:	9b08      	ldr	r3, [sp, #32]
 800f5fe:	2b0e      	cmp	r3, #14
 800f600:	f200 80a8 	bhi.w	800f754 <_dtoa_r+0x47c>
 800f604:	2c00      	cmp	r4, #0
 800f606:	f000 80a5 	beq.w	800f754 <_dtoa_r+0x47c>
 800f60a:	f1ba 0f00 	cmp.w	sl, #0
 800f60e:	dd34      	ble.n	800f67a <_dtoa_r+0x3a2>
 800f610:	4a9a      	ldr	r2, [pc, #616]	; (800f87c <_dtoa_r+0x5a4>)
 800f612:	f00a 030f 	and.w	r3, sl, #15
 800f616:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f61a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f61e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f622:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f626:	ea4f 142a 	mov.w	r4, sl, asr #4
 800f62a:	d016      	beq.n	800f65a <_dtoa_r+0x382>
 800f62c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f630:	4b93      	ldr	r3, [pc, #588]	; (800f880 <_dtoa_r+0x5a8>)
 800f632:	2703      	movs	r7, #3
 800f634:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f638:	f7f1 f8e4 	bl	8000804 <__aeabi_ddiv>
 800f63c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f640:	f004 040f 	and.w	r4, r4, #15
 800f644:	4e8e      	ldr	r6, [pc, #568]	; (800f880 <_dtoa_r+0x5a8>)
 800f646:	b954      	cbnz	r4, 800f65e <_dtoa_r+0x386>
 800f648:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f64c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f650:	f7f1 f8d8 	bl	8000804 <__aeabi_ddiv>
 800f654:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f658:	e029      	b.n	800f6ae <_dtoa_r+0x3d6>
 800f65a:	2702      	movs	r7, #2
 800f65c:	e7f2      	b.n	800f644 <_dtoa_r+0x36c>
 800f65e:	07e1      	lsls	r1, r4, #31
 800f660:	d508      	bpl.n	800f674 <_dtoa_r+0x39c>
 800f662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f666:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f66a:	f7f0 ffa1 	bl	80005b0 <__aeabi_dmul>
 800f66e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f672:	3701      	adds	r7, #1
 800f674:	1064      	asrs	r4, r4, #1
 800f676:	3608      	adds	r6, #8
 800f678:	e7e5      	b.n	800f646 <_dtoa_r+0x36e>
 800f67a:	f000 80a5 	beq.w	800f7c8 <_dtoa_r+0x4f0>
 800f67e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f682:	f1ca 0400 	rsb	r4, sl, #0
 800f686:	4b7d      	ldr	r3, [pc, #500]	; (800f87c <_dtoa_r+0x5a4>)
 800f688:	f004 020f 	and.w	r2, r4, #15
 800f68c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f694:	f7f0 ff8c 	bl	80005b0 <__aeabi_dmul>
 800f698:	2702      	movs	r7, #2
 800f69a:	2300      	movs	r3, #0
 800f69c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6a0:	4e77      	ldr	r6, [pc, #476]	; (800f880 <_dtoa_r+0x5a8>)
 800f6a2:	1124      	asrs	r4, r4, #4
 800f6a4:	2c00      	cmp	r4, #0
 800f6a6:	f040 8084 	bne.w	800f7b2 <_dtoa_r+0x4da>
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d1d2      	bne.n	800f654 <_dtoa_r+0x37c>
 800f6ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	f000 808b 	beq.w	800f7cc <_dtoa_r+0x4f4>
 800f6b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f6ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800f6be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	4b6f      	ldr	r3, [pc, #444]	; (800f884 <_dtoa_r+0x5ac>)
 800f6c6:	f7f1 f9e5 	bl	8000a94 <__aeabi_dcmplt>
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	d07e      	beq.n	800f7cc <_dtoa_r+0x4f4>
 800f6ce:	9b08      	ldr	r3, [sp, #32]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d07b      	beq.n	800f7cc <_dtoa_r+0x4f4>
 800f6d4:	f1b9 0f00 	cmp.w	r9, #0
 800f6d8:	dd38      	ble.n	800f74c <_dtoa_r+0x474>
 800f6da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f6de:	2200      	movs	r2, #0
 800f6e0:	4b69      	ldr	r3, [pc, #420]	; (800f888 <_dtoa_r+0x5b0>)
 800f6e2:	f7f0 ff65 	bl	80005b0 <__aeabi_dmul>
 800f6e6:	464c      	mov	r4, r9
 800f6e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6ec:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800f6f0:	3701      	adds	r7, #1
 800f6f2:	4638      	mov	r0, r7
 800f6f4:	f7f0 fef2 	bl	80004dc <__aeabi_i2d>
 800f6f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6fc:	f7f0 ff58 	bl	80005b0 <__aeabi_dmul>
 800f700:	2200      	movs	r2, #0
 800f702:	4b62      	ldr	r3, [pc, #392]	; (800f88c <_dtoa_r+0x5b4>)
 800f704:	f7f0 fd9e 	bl	8000244 <__adddf3>
 800f708:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f70c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f710:	9611      	str	r6, [sp, #68]	; 0x44
 800f712:	2c00      	cmp	r4, #0
 800f714:	d15d      	bne.n	800f7d2 <_dtoa_r+0x4fa>
 800f716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f71a:	2200      	movs	r2, #0
 800f71c:	4b5c      	ldr	r3, [pc, #368]	; (800f890 <_dtoa_r+0x5b8>)
 800f71e:	f7f0 fd8f 	bl	8000240 <__aeabi_dsub>
 800f722:	4602      	mov	r2, r0
 800f724:	460b      	mov	r3, r1
 800f726:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f72a:	4633      	mov	r3, r6
 800f72c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f72e:	f7f1 f9cf 	bl	8000ad0 <__aeabi_dcmpgt>
 800f732:	2800      	cmp	r0, #0
 800f734:	f040 829c 	bne.w	800fc70 <_dtoa_r+0x998>
 800f738:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f73c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f73e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f742:	f7f1 f9a7 	bl	8000a94 <__aeabi_dcmplt>
 800f746:	2800      	cmp	r0, #0
 800f748:	f040 8290 	bne.w	800fc6c <_dtoa_r+0x994>
 800f74c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800f750:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f756:	2b00      	cmp	r3, #0
 800f758:	f2c0 8152 	blt.w	800fa00 <_dtoa_r+0x728>
 800f75c:	f1ba 0f0e 	cmp.w	sl, #14
 800f760:	f300 814e 	bgt.w	800fa00 <_dtoa_r+0x728>
 800f764:	4b45      	ldr	r3, [pc, #276]	; (800f87c <_dtoa_r+0x5a4>)
 800f766:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f76a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f76e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800f772:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f774:	2b00      	cmp	r3, #0
 800f776:	f280 80db 	bge.w	800f930 <_dtoa_r+0x658>
 800f77a:	9b08      	ldr	r3, [sp, #32]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	f300 80d7 	bgt.w	800f930 <_dtoa_r+0x658>
 800f782:	f040 8272 	bne.w	800fc6a <_dtoa_r+0x992>
 800f786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f78a:	2200      	movs	r2, #0
 800f78c:	4b40      	ldr	r3, [pc, #256]	; (800f890 <_dtoa_r+0x5b8>)
 800f78e:	f7f0 ff0f 	bl	80005b0 <__aeabi_dmul>
 800f792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f796:	f7f1 f991 	bl	8000abc <__aeabi_dcmpge>
 800f79a:	9c08      	ldr	r4, [sp, #32]
 800f79c:	4626      	mov	r6, r4
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	f040 8248 	bne.w	800fc34 <_dtoa_r+0x95c>
 800f7a4:	2331      	movs	r3, #49	; 0x31
 800f7a6:	9f03      	ldr	r7, [sp, #12]
 800f7a8:	f10a 0a01 	add.w	sl, sl, #1
 800f7ac:	f807 3b01 	strb.w	r3, [r7], #1
 800f7b0:	e244      	b.n	800fc3c <_dtoa_r+0x964>
 800f7b2:	07e2      	lsls	r2, r4, #31
 800f7b4:	d505      	bpl.n	800f7c2 <_dtoa_r+0x4ea>
 800f7b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f7ba:	f7f0 fef9 	bl	80005b0 <__aeabi_dmul>
 800f7be:	2301      	movs	r3, #1
 800f7c0:	3701      	adds	r7, #1
 800f7c2:	1064      	asrs	r4, r4, #1
 800f7c4:	3608      	adds	r6, #8
 800f7c6:	e76d      	b.n	800f6a4 <_dtoa_r+0x3cc>
 800f7c8:	2702      	movs	r7, #2
 800f7ca:	e770      	b.n	800f6ae <_dtoa_r+0x3d6>
 800f7cc:	46d0      	mov	r8, sl
 800f7ce:	9c08      	ldr	r4, [sp, #32]
 800f7d0:	e78f      	b.n	800f6f2 <_dtoa_r+0x41a>
 800f7d2:	9903      	ldr	r1, [sp, #12]
 800f7d4:	4b29      	ldr	r3, [pc, #164]	; (800f87c <_dtoa_r+0x5a4>)
 800f7d6:	4421      	add	r1, r4
 800f7d8:	9112      	str	r1, [sp, #72]	; 0x48
 800f7da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f7e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f7e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f7e8:	2900      	cmp	r1, #0
 800f7ea:	d055      	beq.n	800f898 <_dtoa_r+0x5c0>
 800f7ec:	2000      	movs	r0, #0
 800f7ee:	4929      	ldr	r1, [pc, #164]	; (800f894 <_dtoa_r+0x5bc>)
 800f7f0:	f7f1 f808 	bl	8000804 <__aeabi_ddiv>
 800f7f4:	463b      	mov	r3, r7
 800f7f6:	4632      	mov	r2, r6
 800f7f8:	f7f0 fd22 	bl	8000240 <__aeabi_dsub>
 800f7fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f800:	9f03      	ldr	r7, [sp, #12]
 800f802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f806:	f7f1 f983 	bl	8000b10 <__aeabi_d2iz>
 800f80a:	4604      	mov	r4, r0
 800f80c:	f7f0 fe66 	bl	80004dc <__aeabi_i2d>
 800f810:	4602      	mov	r2, r0
 800f812:	460b      	mov	r3, r1
 800f814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f818:	f7f0 fd12 	bl	8000240 <__aeabi_dsub>
 800f81c:	4602      	mov	r2, r0
 800f81e:	460b      	mov	r3, r1
 800f820:	3430      	adds	r4, #48	; 0x30
 800f822:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f826:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f82a:	f807 4b01 	strb.w	r4, [r7], #1
 800f82e:	f7f1 f931 	bl	8000a94 <__aeabi_dcmplt>
 800f832:	2800      	cmp	r0, #0
 800f834:	d174      	bne.n	800f920 <_dtoa_r+0x648>
 800f836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f83a:	2000      	movs	r0, #0
 800f83c:	4911      	ldr	r1, [pc, #68]	; (800f884 <_dtoa_r+0x5ac>)
 800f83e:	f7f0 fcff 	bl	8000240 <__aeabi_dsub>
 800f842:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f846:	f7f1 f925 	bl	8000a94 <__aeabi_dcmplt>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	f040 80b7 	bne.w	800f9be <_dtoa_r+0x6e6>
 800f850:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f852:	429f      	cmp	r7, r3
 800f854:	f43f af7a 	beq.w	800f74c <_dtoa_r+0x474>
 800f858:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f85c:	2200      	movs	r2, #0
 800f85e:	4b0a      	ldr	r3, [pc, #40]	; (800f888 <_dtoa_r+0x5b0>)
 800f860:	f7f0 fea6 	bl	80005b0 <__aeabi_dmul>
 800f864:	2200      	movs	r2, #0
 800f866:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f86a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f86e:	4b06      	ldr	r3, [pc, #24]	; (800f888 <_dtoa_r+0x5b0>)
 800f870:	f7f0 fe9e 	bl	80005b0 <__aeabi_dmul>
 800f874:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f878:	e7c3      	b.n	800f802 <_dtoa_r+0x52a>
 800f87a:	bf00      	nop
 800f87c:	08011f60 	.word	0x08011f60
 800f880:	08011f38 	.word	0x08011f38
 800f884:	3ff00000 	.word	0x3ff00000
 800f888:	40240000 	.word	0x40240000
 800f88c:	401c0000 	.word	0x401c0000
 800f890:	40140000 	.word	0x40140000
 800f894:	3fe00000 	.word	0x3fe00000
 800f898:	4630      	mov	r0, r6
 800f89a:	4639      	mov	r1, r7
 800f89c:	f7f0 fe88 	bl	80005b0 <__aeabi_dmul>
 800f8a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f8a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f8a6:	9c03      	ldr	r4, [sp, #12]
 800f8a8:	9314      	str	r3, [sp, #80]	; 0x50
 800f8aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8ae:	f7f1 f92f 	bl	8000b10 <__aeabi_d2iz>
 800f8b2:	9015      	str	r0, [sp, #84]	; 0x54
 800f8b4:	f7f0 fe12 	bl	80004dc <__aeabi_i2d>
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8c0:	f7f0 fcbe 	bl	8000240 <__aeabi_dsub>
 800f8c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8c6:	4606      	mov	r6, r0
 800f8c8:	3330      	adds	r3, #48	; 0x30
 800f8ca:	f804 3b01 	strb.w	r3, [r4], #1
 800f8ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f8d0:	460f      	mov	r7, r1
 800f8d2:	429c      	cmp	r4, r3
 800f8d4:	f04f 0200 	mov.w	r2, #0
 800f8d8:	d124      	bne.n	800f924 <_dtoa_r+0x64c>
 800f8da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f8de:	4bb0      	ldr	r3, [pc, #704]	; (800fba0 <_dtoa_r+0x8c8>)
 800f8e0:	f7f0 fcb0 	bl	8000244 <__adddf3>
 800f8e4:	4602      	mov	r2, r0
 800f8e6:	460b      	mov	r3, r1
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	4639      	mov	r1, r7
 800f8ec:	f7f1 f8f0 	bl	8000ad0 <__aeabi_dcmpgt>
 800f8f0:	2800      	cmp	r0, #0
 800f8f2:	d163      	bne.n	800f9bc <_dtoa_r+0x6e4>
 800f8f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	49a9      	ldr	r1, [pc, #676]	; (800fba0 <_dtoa_r+0x8c8>)
 800f8fc:	f7f0 fca0 	bl	8000240 <__aeabi_dsub>
 800f900:	4602      	mov	r2, r0
 800f902:	460b      	mov	r3, r1
 800f904:	4630      	mov	r0, r6
 800f906:	4639      	mov	r1, r7
 800f908:	f7f1 f8c4 	bl	8000a94 <__aeabi_dcmplt>
 800f90c:	2800      	cmp	r0, #0
 800f90e:	f43f af1d 	beq.w	800f74c <_dtoa_r+0x474>
 800f912:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f914:	1e7b      	subs	r3, r7, #1
 800f916:	9314      	str	r3, [sp, #80]	; 0x50
 800f918:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f91c:	2b30      	cmp	r3, #48	; 0x30
 800f91e:	d0f8      	beq.n	800f912 <_dtoa_r+0x63a>
 800f920:	46c2      	mov	sl, r8
 800f922:	e03b      	b.n	800f99c <_dtoa_r+0x6c4>
 800f924:	4b9f      	ldr	r3, [pc, #636]	; (800fba4 <_dtoa_r+0x8cc>)
 800f926:	f7f0 fe43 	bl	80005b0 <__aeabi_dmul>
 800f92a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f92e:	e7bc      	b.n	800f8aa <_dtoa_r+0x5d2>
 800f930:	9f03      	ldr	r7, [sp, #12]
 800f932:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f936:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f93a:	4640      	mov	r0, r8
 800f93c:	4649      	mov	r1, r9
 800f93e:	f7f0 ff61 	bl	8000804 <__aeabi_ddiv>
 800f942:	f7f1 f8e5 	bl	8000b10 <__aeabi_d2iz>
 800f946:	4604      	mov	r4, r0
 800f948:	f7f0 fdc8 	bl	80004dc <__aeabi_i2d>
 800f94c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f950:	f7f0 fe2e 	bl	80005b0 <__aeabi_dmul>
 800f954:	4602      	mov	r2, r0
 800f956:	460b      	mov	r3, r1
 800f958:	4640      	mov	r0, r8
 800f95a:	4649      	mov	r1, r9
 800f95c:	f7f0 fc70 	bl	8000240 <__aeabi_dsub>
 800f960:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f964:	f807 6b01 	strb.w	r6, [r7], #1
 800f968:	9e03      	ldr	r6, [sp, #12]
 800f96a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f96e:	1bbe      	subs	r6, r7, r6
 800f970:	45b4      	cmp	ip, r6
 800f972:	4602      	mov	r2, r0
 800f974:	460b      	mov	r3, r1
 800f976:	d136      	bne.n	800f9e6 <_dtoa_r+0x70e>
 800f978:	f7f0 fc64 	bl	8000244 <__adddf3>
 800f97c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f980:	4680      	mov	r8, r0
 800f982:	4689      	mov	r9, r1
 800f984:	f7f1 f8a4 	bl	8000ad0 <__aeabi_dcmpgt>
 800f988:	bb58      	cbnz	r0, 800f9e2 <_dtoa_r+0x70a>
 800f98a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f98e:	4640      	mov	r0, r8
 800f990:	4649      	mov	r1, r9
 800f992:	f7f1 f875 	bl	8000a80 <__aeabi_dcmpeq>
 800f996:	b108      	cbz	r0, 800f99c <_dtoa_r+0x6c4>
 800f998:	07e1      	lsls	r1, r4, #31
 800f99a:	d422      	bmi.n	800f9e2 <_dtoa_r+0x70a>
 800f99c:	4628      	mov	r0, r5
 800f99e:	4659      	mov	r1, fp
 800f9a0:	f000 fae2 	bl	800ff68 <_Bfree>
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	703b      	strb	r3, [r7, #0]
 800f9a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f9aa:	f10a 0001 	add.w	r0, sl, #1
 800f9ae:	6018      	str	r0, [r3, #0]
 800f9b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	f43f acde 	beq.w	800f374 <_dtoa_r+0x9c>
 800f9b8:	601f      	str	r7, [r3, #0]
 800f9ba:	e4db      	b.n	800f374 <_dtoa_r+0x9c>
 800f9bc:	4627      	mov	r7, r4
 800f9be:	463b      	mov	r3, r7
 800f9c0:	461f      	mov	r7, r3
 800f9c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9c6:	2a39      	cmp	r2, #57	; 0x39
 800f9c8:	d107      	bne.n	800f9da <_dtoa_r+0x702>
 800f9ca:	9a03      	ldr	r2, [sp, #12]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d1f7      	bne.n	800f9c0 <_dtoa_r+0x6e8>
 800f9d0:	2230      	movs	r2, #48	; 0x30
 800f9d2:	9903      	ldr	r1, [sp, #12]
 800f9d4:	f108 0801 	add.w	r8, r8, #1
 800f9d8:	700a      	strb	r2, [r1, #0]
 800f9da:	781a      	ldrb	r2, [r3, #0]
 800f9dc:	3201      	adds	r2, #1
 800f9de:	701a      	strb	r2, [r3, #0]
 800f9e0:	e79e      	b.n	800f920 <_dtoa_r+0x648>
 800f9e2:	46d0      	mov	r8, sl
 800f9e4:	e7eb      	b.n	800f9be <_dtoa_r+0x6e6>
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	4b6e      	ldr	r3, [pc, #440]	; (800fba4 <_dtoa_r+0x8cc>)
 800f9ea:	f7f0 fde1 	bl	80005b0 <__aeabi_dmul>
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	4680      	mov	r8, r0
 800f9f4:	4689      	mov	r9, r1
 800f9f6:	f7f1 f843 	bl	8000a80 <__aeabi_dcmpeq>
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	d09b      	beq.n	800f936 <_dtoa_r+0x65e>
 800f9fe:	e7cd      	b.n	800f99c <_dtoa_r+0x6c4>
 800fa00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa02:	2a00      	cmp	r2, #0
 800fa04:	f000 80d0 	beq.w	800fba8 <_dtoa_r+0x8d0>
 800fa08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fa0a:	2a01      	cmp	r2, #1
 800fa0c:	f300 80ae 	bgt.w	800fb6c <_dtoa_r+0x894>
 800fa10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fa12:	2a00      	cmp	r2, #0
 800fa14:	f000 80a6 	beq.w	800fb64 <_dtoa_r+0x88c>
 800fa18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fa1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fa1e:	9f06      	ldr	r7, [sp, #24]
 800fa20:	9a06      	ldr	r2, [sp, #24]
 800fa22:	2101      	movs	r1, #1
 800fa24:	441a      	add	r2, r3
 800fa26:	9206      	str	r2, [sp, #24]
 800fa28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	441a      	add	r2, r3
 800fa2e:	9209      	str	r2, [sp, #36]	; 0x24
 800fa30:	f000 fb50 	bl	80100d4 <__i2b>
 800fa34:	4606      	mov	r6, r0
 800fa36:	2f00      	cmp	r7, #0
 800fa38:	dd0c      	ble.n	800fa54 <_dtoa_r+0x77c>
 800fa3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	dd09      	ble.n	800fa54 <_dtoa_r+0x77c>
 800fa40:	42bb      	cmp	r3, r7
 800fa42:	bfa8      	it	ge
 800fa44:	463b      	movge	r3, r7
 800fa46:	9a06      	ldr	r2, [sp, #24]
 800fa48:	1aff      	subs	r7, r7, r3
 800fa4a:	1ad2      	subs	r2, r2, r3
 800fa4c:	9206      	str	r2, [sp, #24]
 800fa4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa50:	1ad3      	subs	r3, r2, r3
 800fa52:	9309      	str	r3, [sp, #36]	; 0x24
 800fa54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa56:	b1f3      	cbz	r3, 800fa96 <_dtoa_r+0x7be>
 800fa58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	f000 80a8 	beq.w	800fbb0 <_dtoa_r+0x8d8>
 800fa60:	2c00      	cmp	r4, #0
 800fa62:	dd10      	ble.n	800fa86 <_dtoa_r+0x7ae>
 800fa64:	4631      	mov	r1, r6
 800fa66:	4622      	mov	r2, r4
 800fa68:	4628      	mov	r0, r5
 800fa6a:	f000 fbf1 	bl	8010250 <__pow5mult>
 800fa6e:	465a      	mov	r2, fp
 800fa70:	4601      	mov	r1, r0
 800fa72:	4606      	mov	r6, r0
 800fa74:	4628      	mov	r0, r5
 800fa76:	f000 fb43 	bl	8010100 <__multiply>
 800fa7a:	4680      	mov	r8, r0
 800fa7c:	4659      	mov	r1, fp
 800fa7e:	4628      	mov	r0, r5
 800fa80:	f000 fa72 	bl	800ff68 <_Bfree>
 800fa84:	46c3      	mov	fp, r8
 800fa86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa88:	1b1a      	subs	r2, r3, r4
 800fa8a:	d004      	beq.n	800fa96 <_dtoa_r+0x7be>
 800fa8c:	4659      	mov	r1, fp
 800fa8e:	4628      	mov	r0, r5
 800fa90:	f000 fbde 	bl	8010250 <__pow5mult>
 800fa94:	4683      	mov	fp, r0
 800fa96:	2101      	movs	r1, #1
 800fa98:	4628      	mov	r0, r5
 800fa9a:	f000 fb1b 	bl	80100d4 <__i2b>
 800fa9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800faa0:	4604      	mov	r4, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	f340 8086 	ble.w	800fbb4 <_dtoa_r+0x8dc>
 800faa8:	461a      	mov	r2, r3
 800faaa:	4601      	mov	r1, r0
 800faac:	4628      	mov	r0, r5
 800faae:	f000 fbcf 	bl	8010250 <__pow5mult>
 800fab2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fab4:	4604      	mov	r4, r0
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	dd7f      	ble.n	800fbba <_dtoa_r+0x8e2>
 800faba:	f04f 0800 	mov.w	r8, #0
 800fabe:	6923      	ldr	r3, [r4, #16]
 800fac0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fac4:	6918      	ldr	r0, [r3, #16]
 800fac6:	f000 fab7 	bl	8010038 <__hi0bits>
 800faca:	f1c0 0020 	rsb	r0, r0, #32
 800face:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fad0:	4418      	add	r0, r3
 800fad2:	f010 001f 	ands.w	r0, r0, #31
 800fad6:	f000 8092 	beq.w	800fbfe <_dtoa_r+0x926>
 800fada:	f1c0 0320 	rsb	r3, r0, #32
 800fade:	2b04      	cmp	r3, #4
 800fae0:	f340 808a 	ble.w	800fbf8 <_dtoa_r+0x920>
 800fae4:	f1c0 001c 	rsb	r0, r0, #28
 800fae8:	9b06      	ldr	r3, [sp, #24]
 800faea:	4407      	add	r7, r0
 800faec:	4403      	add	r3, r0
 800faee:	9306      	str	r3, [sp, #24]
 800faf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faf2:	4403      	add	r3, r0
 800faf4:	9309      	str	r3, [sp, #36]	; 0x24
 800faf6:	9b06      	ldr	r3, [sp, #24]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	dd05      	ble.n	800fb08 <_dtoa_r+0x830>
 800fafc:	4659      	mov	r1, fp
 800fafe:	461a      	mov	r2, r3
 800fb00:	4628      	mov	r0, r5
 800fb02:	f000 fbff 	bl	8010304 <__lshift>
 800fb06:	4683      	mov	fp, r0
 800fb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	dd05      	ble.n	800fb1a <_dtoa_r+0x842>
 800fb0e:	4621      	mov	r1, r4
 800fb10:	461a      	mov	r2, r3
 800fb12:	4628      	mov	r0, r5
 800fb14:	f000 fbf6 	bl	8010304 <__lshift>
 800fb18:	4604      	mov	r4, r0
 800fb1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d070      	beq.n	800fc02 <_dtoa_r+0x92a>
 800fb20:	4621      	mov	r1, r4
 800fb22:	4658      	mov	r0, fp
 800fb24:	f000 fc5e 	bl	80103e4 <__mcmp>
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	da6a      	bge.n	800fc02 <_dtoa_r+0x92a>
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	4659      	mov	r1, fp
 800fb30:	220a      	movs	r2, #10
 800fb32:	4628      	mov	r0, r5
 800fb34:	f000 fa3a 	bl	800ffac <__multadd>
 800fb38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb3a:	4683      	mov	fp, r0
 800fb3c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	f000 8194 	beq.w	800fe6e <_dtoa_r+0xb96>
 800fb46:	4631      	mov	r1, r6
 800fb48:	2300      	movs	r3, #0
 800fb4a:	220a      	movs	r2, #10
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	f000 fa2d 	bl	800ffac <__multadd>
 800fb52:	f1b9 0f00 	cmp.w	r9, #0
 800fb56:	4606      	mov	r6, r0
 800fb58:	f300 8093 	bgt.w	800fc82 <_dtoa_r+0x9aa>
 800fb5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fb5e:	2b02      	cmp	r3, #2
 800fb60:	dc57      	bgt.n	800fc12 <_dtoa_r+0x93a>
 800fb62:	e08e      	b.n	800fc82 <_dtoa_r+0x9aa>
 800fb64:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fb66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fb6a:	e757      	b.n	800fa1c <_dtoa_r+0x744>
 800fb6c:	9b08      	ldr	r3, [sp, #32]
 800fb6e:	1e5c      	subs	r4, r3, #1
 800fb70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb72:	42a3      	cmp	r3, r4
 800fb74:	bfb7      	itett	lt
 800fb76:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800fb78:	1b1c      	subge	r4, r3, r4
 800fb7a:	1ae2      	sublt	r2, r4, r3
 800fb7c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fb7e:	bfbe      	ittt	lt
 800fb80:	940a      	strlt	r4, [sp, #40]	; 0x28
 800fb82:	189b      	addlt	r3, r3, r2
 800fb84:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fb86:	9b08      	ldr	r3, [sp, #32]
 800fb88:	bfb8      	it	lt
 800fb8a:	2400      	movlt	r4, #0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	bfbb      	ittet	lt
 800fb90:	9b06      	ldrlt	r3, [sp, #24]
 800fb92:	9a08      	ldrlt	r2, [sp, #32]
 800fb94:	9f06      	ldrge	r7, [sp, #24]
 800fb96:	1a9f      	sublt	r7, r3, r2
 800fb98:	bfac      	ite	ge
 800fb9a:	9b08      	ldrge	r3, [sp, #32]
 800fb9c:	2300      	movlt	r3, #0
 800fb9e:	e73f      	b.n	800fa20 <_dtoa_r+0x748>
 800fba0:	3fe00000 	.word	0x3fe00000
 800fba4:	40240000 	.word	0x40240000
 800fba8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fbaa:	9f06      	ldr	r7, [sp, #24]
 800fbac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800fbae:	e742      	b.n	800fa36 <_dtoa_r+0x75e>
 800fbb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbb2:	e76b      	b.n	800fa8c <_dtoa_r+0x7b4>
 800fbb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	dc19      	bgt.n	800fbee <_dtoa_r+0x916>
 800fbba:	9b04      	ldr	r3, [sp, #16]
 800fbbc:	b9bb      	cbnz	r3, 800fbee <_dtoa_r+0x916>
 800fbbe:	9b05      	ldr	r3, [sp, #20]
 800fbc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fbc4:	b99b      	cbnz	r3, 800fbee <_dtoa_r+0x916>
 800fbc6:	9b05      	ldr	r3, [sp, #20]
 800fbc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fbcc:	0d1b      	lsrs	r3, r3, #20
 800fbce:	051b      	lsls	r3, r3, #20
 800fbd0:	b183      	cbz	r3, 800fbf4 <_dtoa_r+0x91c>
 800fbd2:	f04f 0801 	mov.w	r8, #1
 800fbd6:	9b06      	ldr	r3, [sp, #24]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	9306      	str	r3, [sp, #24]
 800fbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbde:	3301      	adds	r3, #1
 800fbe0:	9309      	str	r3, [sp, #36]	; 0x24
 800fbe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	f47f af6a 	bne.w	800fabe <_dtoa_r+0x7e6>
 800fbea:	2001      	movs	r0, #1
 800fbec:	e76f      	b.n	800face <_dtoa_r+0x7f6>
 800fbee:	f04f 0800 	mov.w	r8, #0
 800fbf2:	e7f6      	b.n	800fbe2 <_dtoa_r+0x90a>
 800fbf4:	4698      	mov	r8, r3
 800fbf6:	e7f4      	b.n	800fbe2 <_dtoa_r+0x90a>
 800fbf8:	f43f af7d 	beq.w	800faf6 <_dtoa_r+0x81e>
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	301c      	adds	r0, #28
 800fc00:	e772      	b.n	800fae8 <_dtoa_r+0x810>
 800fc02:	9b08      	ldr	r3, [sp, #32]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	dc36      	bgt.n	800fc76 <_dtoa_r+0x99e>
 800fc08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fc0a:	2b02      	cmp	r3, #2
 800fc0c:	dd33      	ble.n	800fc76 <_dtoa_r+0x99e>
 800fc0e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc12:	f1b9 0f00 	cmp.w	r9, #0
 800fc16:	d10d      	bne.n	800fc34 <_dtoa_r+0x95c>
 800fc18:	4621      	mov	r1, r4
 800fc1a:	464b      	mov	r3, r9
 800fc1c:	2205      	movs	r2, #5
 800fc1e:	4628      	mov	r0, r5
 800fc20:	f000 f9c4 	bl	800ffac <__multadd>
 800fc24:	4601      	mov	r1, r0
 800fc26:	4604      	mov	r4, r0
 800fc28:	4658      	mov	r0, fp
 800fc2a:	f000 fbdb 	bl	80103e4 <__mcmp>
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	f73f adb8 	bgt.w	800f7a4 <_dtoa_r+0x4cc>
 800fc34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fc36:	9f03      	ldr	r7, [sp, #12]
 800fc38:	ea6f 0a03 	mvn.w	sl, r3
 800fc3c:	f04f 0800 	mov.w	r8, #0
 800fc40:	4621      	mov	r1, r4
 800fc42:	4628      	mov	r0, r5
 800fc44:	f000 f990 	bl	800ff68 <_Bfree>
 800fc48:	2e00      	cmp	r6, #0
 800fc4a:	f43f aea7 	beq.w	800f99c <_dtoa_r+0x6c4>
 800fc4e:	f1b8 0f00 	cmp.w	r8, #0
 800fc52:	d005      	beq.n	800fc60 <_dtoa_r+0x988>
 800fc54:	45b0      	cmp	r8, r6
 800fc56:	d003      	beq.n	800fc60 <_dtoa_r+0x988>
 800fc58:	4641      	mov	r1, r8
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f000 f984 	bl	800ff68 <_Bfree>
 800fc60:	4631      	mov	r1, r6
 800fc62:	4628      	mov	r0, r5
 800fc64:	f000 f980 	bl	800ff68 <_Bfree>
 800fc68:	e698      	b.n	800f99c <_dtoa_r+0x6c4>
 800fc6a:	2400      	movs	r4, #0
 800fc6c:	4626      	mov	r6, r4
 800fc6e:	e7e1      	b.n	800fc34 <_dtoa_r+0x95c>
 800fc70:	46c2      	mov	sl, r8
 800fc72:	4626      	mov	r6, r4
 800fc74:	e596      	b.n	800f7a4 <_dtoa_r+0x4cc>
 800fc76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	f000 80fd 	beq.w	800fe7c <_dtoa_r+0xba4>
 800fc82:	2f00      	cmp	r7, #0
 800fc84:	dd05      	ble.n	800fc92 <_dtoa_r+0x9ba>
 800fc86:	4631      	mov	r1, r6
 800fc88:	463a      	mov	r2, r7
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	f000 fb3a 	bl	8010304 <__lshift>
 800fc90:	4606      	mov	r6, r0
 800fc92:	f1b8 0f00 	cmp.w	r8, #0
 800fc96:	d05c      	beq.n	800fd52 <_dtoa_r+0xa7a>
 800fc98:	4628      	mov	r0, r5
 800fc9a:	6871      	ldr	r1, [r6, #4]
 800fc9c:	f000 f924 	bl	800fee8 <_Balloc>
 800fca0:	4607      	mov	r7, r0
 800fca2:	b928      	cbnz	r0, 800fcb0 <_dtoa_r+0x9d8>
 800fca4:	4602      	mov	r2, r0
 800fca6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fcaa:	4b7f      	ldr	r3, [pc, #508]	; (800fea8 <_dtoa_r+0xbd0>)
 800fcac:	f7ff bb28 	b.w	800f300 <_dtoa_r+0x28>
 800fcb0:	6932      	ldr	r2, [r6, #16]
 800fcb2:	f106 010c 	add.w	r1, r6, #12
 800fcb6:	3202      	adds	r2, #2
 800fcb8:	0092      	lsls	r2, r2, #2
 800fcba:	300c      	adds	r0, #12
 800fcbc:	f7fe fdd4 	bl	800e868 <memcpy>
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	4639      	mov	r1, r7
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	f000 fb1d 	bl	8010304 <__lshift>
 800fcca:	46b0      	mov	r8, r6
 800fccc:	4606      	mov	r6, r0
 800fcce:	9b03      	ldr	r3, [sp, #12]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	9308      	str	r3, [sp, #32]
 800fcd4:	9b03      	ldr	r3, [sp, #12]
 800fcd6:	444b      	add	r3, r9
 800fcd8:	930a      	str	r3, [sp, #40]	; 0x28
 800fcda:	9b04      	ldr	r3, [sp, #16]
 800fcdc:	f003 0301 	and.w	r3, r3, #1
 800fce0:	9309      	str	r3, [sp, #36]	; 0x24
 800fce2:	9b08      	ldr	r3, [sp, #32]
 800fce4:	4621      	mov	r1, r4
 800fce6:	3b01      	subs	r3, #1
 800fce8:	4658      	mov	r0, fp
 800fcea:	9304      	str	r3, [sp, #16]
 800fcec:	f7ff fa65 	bl	800f1ba <quorem>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	4641      	mov	r1, r8
 800fcf4:	3330      	adds	r3, #48	; 0x30
 800fcf6:	9006      	str	r0, [sp, #24]
 800fcf8:	4658      	mov	r0, fp
 800fcfa:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcfc:	f000 fb72 	bl	80103e4 <__mcmp>
 800fd00:	4632      	mov	r2, r6
 800fd02:	4681      	mov	r9, r0
 800fd04:	4621      	mov	r1, r4
 800fd06:	4628      	mov	r0, r5
 800fd08:	f000 fb88 	bl	801041c <__mdiff>
 800fd0c:	68c2      	ldr	r2, [r0, #12]
 800fd0e:	4607      	mov	r7, r0
 800fd10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd12:	bb02      	cbnz	r2, 800fd56 <_dtoa_r+0xa7e>
 800fd14:	4601      	mov	r1, r0
 800fd16:	4658      	mov	r0, fp
 800fd18:	f000 fb64 	bl	80103e4 <__mcmp>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd20:	4639      	mov	r1, r7
 800fd22:	4628      	mov	r0, r5
 800fd24:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800fd28:	f000 f91e 	bl	800ff68 <_Bfree>
 800fd2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd30:	9f08      	ldr	r7, [sp, #32]
 800fd32:	ea43 0102 	orr.w	r1, r3, r2
 800fd36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd38:	430b      	orrs	r3, r1
 800fd3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd3c:	d10d      	bne.n	800fd5a <_dtoa_r+0xa82>
 800fd3e:	2b39      	cmp	r3, #57	; 0x39
 800fd40:	d029      	beq.n	800fd96 <_dtoa_r+0xabe>
 800fd42:	f1b9 0f00 	cmp.w	r9, #0
 800fd46:	dd01      	ble.n	800fd4c <_dtoa_r+0xa74>
 800fd48:	9b06      	ldr	r3, [sp, #24]
 800fd4a:	3331      	adds	r3, #49	; 0x31
 800fd4c:	9a04      	ldr	r2, [sp, #16]
 800fd4e:	7013      	strb	r3, [r2, #0]
 800fd50:	e776      	b.n	800fc40 <_dtoa_r+0x968>
 800fd52:	4630      	mov	r0, r6
 800fd54:	e7b9      	b.n	800fcca <_dtoa_r+0x9f2>
 800fd56:	2201      	movs	r2, #1
 800fd58:	e7e2      	b.n	800fd20 <_dtoa_r+0xa48>
 800fd5a:	f1b9 0f00 	cmp.w	r9, #0
 800fd5e:	db06      	blt.n	800fd6e <_dtoa_r+0xa96>
 800fd60:	9922      	ldr	r1, [sp, #136]	; 0x88
 800fd62:	ea41 0909 	orr.w	r9, r1, r9
 800fd66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd68:	ea59 0101 	orrs.w	r1, r9, r1
 800fd6c:	d120      	bne.n	800fdb0 <_dtoa_r+0xad8>
 800fd6e:	2a00      	cmp	r2, #0
 800fd70:	ddec      	ble.n	800fd4c <_dtoa_r+0xa74>
 800fd72:	4659      	mov	r1, fp
 800fd74:	2201      	movs	r2, #1
 800fd76:	4628      	mov	r0, r5
 800fd78:	9308      	str	r3, [sp, #32]
 800fd7a:	f000 fac3 	bl	8010304 <__lshift>
 800fd7e:	4621      	mov	r1, r4
 800fd80:	4683      	mov	fp, r0
 800fd82:	f000 fb2f 	bl	80103e4 <__mcmp>
 800fd86:	2800      	cmp	r0, #0
 800fd88:	9b08      	ldr	r3, [sp, #32]
 800fd8a:	dc02      	bgt.n	800fd92 <_dtoa_r+0xaba>
 800fd8c:	d1de      	bne.n	800fd4c <_dtoa_r+0xa74>
 800fd8e:	07da      	lsls	r2, r3, #31
 800fd90:	d5dc      	bpl.n	800fd4c <_dtoa_r+0xa74>
 800fd92:	2b39      	cmp	r3, #57	; 0x39
 800fd94:	d1d8      	bne.n	800fd48 <_dtoa_r+0xa70>
 800fd96:	2339      	movs	r3, #57	; 0x39
 800fd98:	9a04      	ldr	r2, [sp, #16]
 800fd9a:	7013      	strb	r3, [r2, #0]
 800fd9c:	463b      	mov	r3, r7
 800fd9e:	461f      	mov	r7, r3
 800fda0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800fda4:	3b01      	subs	r3, #1
 800fda6:	2a39      	cmp	r2, #57	; 0x39
 800fda8:	d050      	beq.n	800fe4c <_dtoa_r+0xb74>
 800fdaa:	3201      	adds	r2, #1
 800fdac:	701a      	strb	r2, [r3, #0]
 800fdae:	e747      	b.n	800fc40 <_dtoa_r+0x968>
 800fdb0:	2a00      	cmp	r2, #0
 800fdb2:	dd03      	ble.n	800fdbc <_dtoa_r+0xae4>
 800fdb4:	2b39      	cmp	r3, #57	; 0x39
 800fdb6:	d0ee      	beq.n	800fd96 <_dtoa_r+0xabe>
 800fdb8:	3301      	adds	r3, #1
 800fdba:	e7c7      	b.n	800fd4c <_dtoa_r+0xa74>
 800fdbc:	9a08      	ldr	r2, [sp, #32]
 800fdbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fdc0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fdc4:	428a      	cmp	r2, r1
 800fdc6:	d02a      	beq.n	800fe1e <_dtoa_r+0xb46>
 800fdc8:	4659      	mov	r1, fp
 800fdca:	2300      	movs	r3, #0
 800fdcc:	220a      	movs	r2, #10
 800fdce:	4628      	mov	r0, r5
 800fdd0:	f000 f8ec 	bl	800ffac <__multadd>
 800fdd4:	45b0      	cmp	r8, r6
 800fdd6:	4683      	mov	fp, r0
 800fdd8:	f04f 0300 	mov.w	r3, #0
 800fddc:	f04f 020a 	mov.w	r2, #10
 800fde0:	4641      	mov	r1, r8
 800fde2:	4628      	mov	r0, r5
 800fde4:	d107      	bne.n	800fdf6 <_dtoa_r+0xb1e>
 800fde6:	f000 f8e1 	bl	800ffac <__multadd>
 800fdea:	4680      	mov	r8, r0
 800fdec:	4606      	mov	r6, r0
 800fdee:	9b08      	ldr	r3, [sp, #32]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	9308      	str	r3, [sp, #32]
 800fdf4:	e775      	b.n	800fce2 <_dtoa_r+0xa0a>
 800fdf6:	f000 f8d9 	bl	800ffac <__multadd>
 800fdfa:	4631      	mov	r1, r6
 800fdfc:	4680      	mov	r8, r0
 800fdfe:	2300      	movs	r3, #0
 800fe00:	220a      	movs	r2, #10
 800fe02:	4628      	mov	r0, r5
 800fe04:	f000 f8d2 	bl	800ffac <__multadd>
 800fe08:	4606      	mov	r6, r0
 800fe0a:	e7f0      	b.n	800fdee <_dtoa_r+0xb16>
 800fe0c:	f1b9 0f00 	cmp.w	r9, #0
 800fe10:	bfcc      	ite	gt
 800fe12:	464f      	movgt	r7, r9
 800fe14:	2701      	movle	r7, #1
 800fe16:	f04f 0800 	mov.w	r8, #0
 800fe1a:	9a03      	ldr	r2, [sp, #12]
 800fe1c:	4417      	add	r7, r2
 800fe1e:	4659      	mov	r1, fp
 800fe20:	2201      	movs	r2, #1
 800fe22:	4628      	mov	r0, r5
 800fe24:	9308      	str	r3, [sp, #32]
 800fe26:	f000 fa6d 	bl	8010304 <__lshift>
 800fe2a:	4621      	mov	r1, r4
 800fe2c:	4683      	mov	fp, r0
 800fe2e:	f000 fad9 	bl	80103e4 <__mcmp>
 800fe32:	2800      	cmp	r0, #0
 800fe34:	dcb2      	bgt.n	800fd9c <_dtoa_r+0xac4>
 800fe36:	d102      	bne.n	800fe3e <_dtoa_r+0xb66>
 800fe38:	9b08      	ldr	r3, [sp, #32]
 800fe3a:	07db      	lsls	r3, r3, #31
 800fe3c:	d4ae      	bmi.n	800fd9c <_dtoa_r+0xac4>
 800fe3e:	463b      	mov	r3, r7
 800fe40:	461f      	mov	r7, r3
 800fe42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe46:	2a30      	cmp	r2, #48	; 0x30
 800fe48:	d0fa      	beq.n	800fe40 <_dtoa_r+0xb68>
 800fe4a:	e6f9      	b.n	800fc40 <_dtoa_r+0x968>
 800fe4c:	9a03      	ldr	r2, [sp, #12]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d1a5      	bne.n	800fd9e <_dtoa_r+0xac6>
 800fe52:	2331      	movs	r3, #49	; 0x31
 800fe54:	f10a 0a01 	add.w	sl, sl, #1
 800fe58:	e779      	b.n	800fd4e <_dtoa_r+0xa76>
 800fe5a:	4b14      	ldr	r3, [pc, #80]	; (800feac <_dtoa_r+0xbd4>)
 800fe5c:	f7ff baa8 	b.w	800f3b0 <_dtoa_r+0xd8>
 800fe60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f47f aa81 	bne.w	800f36a <_dtoa_r+0x92>
 800fe68:	4b11      	ldr	r3, [pc, #68]	; (800feb0 <_dtoa_r+0xbd8>)
 800fe6a:	f7ff baa1 	b.w	800f3b0 <_dtoa_r+0xd8>
 800fe6e:	f1b9 0f00 	cmp.w	r9, #0
 800fe72:	dc03      	bgt.n	800fe7c <_dtoa_r+0xba4>
 800fe74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	f73f aecb 	bgt.w	800fc12 <_dtoa_r+0x93a>
 800fe7c:	9f03      	ldr	r7, [sp, #12]
 800fe7e:	4621      	mov	r1, r4
 800fe80:	4658      	mov	r0, fp
 800fe82:	f7ff f99a 	bl	800f1ba <quorem>
 800fe86:	9a03      	ldr	r2, [sp, #12]
 800fe88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fe8c:	f807 3b01 	strb.w	r3, [r7], #1
 800fe90:	1aba      	subs	r2, r7, r2
 800fe92:	4591      	cmp	r9, r2
 800fe94:	ddba      	ble.n	800fe0c <_dtoa_r+0xb34>
 800fe96:	4659      	mov	r1, fp
 800fe98:	2300      	movs	r3, #0
 800fe9a:	220a      	movs	r2, #10
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	f000 f885 	bl	800ffac <__multadd>
 800fea2:	4683      	mov	fp, r0
 800fea4:	e7eb      	b.n	800fe7e <_dtoa_r+0xba6>
 800fea6:	bf00      	nop
 800fea8:	08011ecb 	.word	0x08011ecb
 800feac:	08011e28 	.word	0x08011e28
 800feb0:	08011e4c 	.word	0x08011e4c

0800feb4 <_localeconv_r>:
 800feb4:	4800      	ldr	r0, [pc, #0]	; (800feb8 <_localeconv_r+0x4>)
 800feb6:	4770      	bx	lr
 800feb8:	200001c4 	.word	0x200001c4

0800febc <malloc>:
 800febc:	4b02      	ldr	r3, [pc, #8]	; (800fec8 <malloc+0xc>)
 800febe:	4601      	mov	r1, r0
 800fec0:	6818      	ldr	r0, [r3, #0]
 800fec2:	f000 bc0f 	b.w	80106e4 <_malloc_r>
 800fec6:	bf00      	nop
 800fec8:	20000070 	.word	0x20000070

0800fecc <memchr>:
 800fecc:	4603      	mov	r3, r0
 800fece:	b510      	push	{r4, lr}
 800fed0:	b2c9      	uxtb	r1, r1
 800fed2:	4402      	add	r2, r0
 800fed4:	4293      	cmp	r3, r2
 800fed6:	4618      	mov	r0, r3
 800fed8:	d101      	bne.n	800fede <memchr+0x12>
 800feda:	2000      	movs	r0, #0
 800fedc:	e003      	b.n	800fee6 <memchr+0x1a>
 800fede:	7804      	ldrb	r4, [r0, #0]
 800fee0:	3301      	adds	r3, #1
 800fee2:	428c      	cmp	r4, r1
 800fee4:	d1f6      	bne.n	800fed4 <memchr+0x8>
 800fee6:	bd10      	pop	{r4, pc}

0800fee8 <_Balloc>:
 800fee8:	b570      	push	{r4, r5, r6, lr}
 800feea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800feec:	4604      	mov	r4, r0
 800feee:	460d      	mov	r5, r1
 800fef0:	b976      	cbnz	r6, 800ff10 <_Balloc+0x28>
 800fef2:	2010      	movs	r0, #16
 800fef4:	f7ff ffe2 	bl	800febc <malloc>
 800fef8:	4602      	mov	r2, r0
 800fefa:	6260      	str	r0, [r4, #36]	; 0x24
 800fefc:	b920      	cbnz	r0, 800ff08 <_Balloc+0x20>
 800fefe:	2166      	movs	r1, #102	; 0x66
 800ff00:	4b17      	ldr	r3, [pc, #92]	; (800ff60 <_Balloc+0x78>)
 800ff02:	4818      	ldr	r0, [pc, #96]	; (800ff64 <_Balloc+0x7c>)
 800ff04:	f000 fdce 	bl	8010aa4 <__assert_func>
 800ff08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff0c:	6006      	str	r6, [r0, #0]
 800ff0e:	60c6      	str	r6, [r0, #12]
 800ff10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ff12:	68f3      	ldr	r3, [r6, #12]
 800ff14:	b183      	cbz	r3, 800ff38 <_Balloc+0x50>
 800ff16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff1e:	b9b8      	cbnz	r0, 800ff50 <_Balloc+0x68>
 800ff20:	2101      	movs	r1, #1
 800ff22:	fa01 f605 	lsl.w	r6, r1, r5
 800ff26:	1d72      	adds	r2, r6, #5
 800ff28:	4620      	mov	r0, r4
 800ff2a:	0092      	lsls	r2, r2, #2
 800ff2c:	f000 fb5e 	bl	80105ec <_calloc_r>
 800ff30:	b160      	cbz	r0, 800ff4c <_Balloc+0x64>
 800ff32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff36:	e00e      	b.n	800ff56 <_Balloc+0x6e>
 800ff38:	2221      	movs	r2, #33	; 0x21
 800ff3a:	2104      	movs	r1, #4
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f000 fb55 	bl	80105ec <_calloc_r>
 800ff42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff44:	60f0      	str	r0, [r6, #12]
 800ff46:	68db      	ldr	r3, [r3, #12]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d1e4      	bne.n	800ff16 <_Balloc+0x2e>
 800ff4c:	2000      	movs	r0, #0
 800ff4e:	bd70      	pop	{r4, r5, r6, pc}
 800ff50:	6802      	ldr	r2, [r0, #0]
 800ff52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff56:	2300      	movs	r3, #0
 800ff58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ff5c:	e7f7      	b.n	800ff4e <_Balloc+0x66>
 800ff5e:	bf00      	nop
 800ff60:	08011e59 	.word	0x08011e59
 800ff64:	08011edc 	.word	0x08011edc

0800ff68 <_Bfree>:
 800ff68:	b570      	push	{r4, r5, r6, lr}
 800ff6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ff6c:	4605      	mov	r5, r0
 800ff6e:	460c      	mov	r4, r1
 800ff70:	b976      	cbnz	r6, 800ff90 <_Bfree+0x28>
 800ff72:	2010      	movs	r0, #16
 800ff74:	f7ff ffa2 	bl	800febc <malloc>
 800ff78:	4602      	mov	r2, r0
 800ff7a:	6268      	str	r0, [r5, #36]	; 0x24
 800ff7c:	b920      	cbnz	r0, 800ff88 <_Bfree+0x20>
 800ff7e:	218a      	movs	r1, #138	; 0x8a
 800ff80:	4b08      	ldr	r3, [pc, #32]	; (800ffa4 <_Bfree+0x3c>)
 800ff82:	4809      	ldr	r0, [pc, #36]	; (800ffa8 <_Bfree+0x40>)
 800ff84:	f000 fd8e 	bl	8010aa4 <__assert_func>
 800ff88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff8c:	6006      	str	r6, [r0, #0]
 800ff8e:	60c6      	str	r6, [r0, #12]
 800ff90:	b13c      	cbz	r4, 800ffa2 <_Bfree+0x3a>
 800ff92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ff94:	6862      	ldr	r2, [r4, #4]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ff9c:	6021      	str	r1, [r4, #0]
 800ff9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ffa2:	bd70      	pop	{r4, r5, r6, pc}
 800ffa4:	08011e59 	.word	0x08011e59
 800ffa8:	08011edc 	.word	0x08011edc

0800ffac <__multadd>:
 800ffac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb0:	4607      	mov	r7, r0
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	461e      	mov	r6, r3
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	690d      	ldr	r5, [r1, #16]
 800ffba:	f101 0c14 	add.w	ip, r1, #20
 800ffbe:	f8dc 3000 	ldr.w	r3, [ip]
 800ffc2:	3001      	adds	r0, #1
 800ffc4:	b299      	uxth	r1, r3
 800ffc6:	fb02 6101 	mla	r1, r2, r1, r6
 800ffca:	0c1e      	lsrs	r6, r3, #16
 800ffcc:	0c0b      	lsrs	r3, r1, #16
 800ffce:	fb02 3306 	mla	r3, r2, r6, r3
 800ffd2:	b289      	uxth	r1, r1
 800ffd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ffd8:	4285      	cmp	r5, r0
 800ffda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ffde:	f84c 1b04 	str.w	r1, [ip], #4
 800ffe2:	dcec      	bgt.n	800ffbe <__multadd+0x12>
 800ffe4:	b30e      	cbz	r6, 801002a <__multadd+0x7e>
 800ffe6:	68a3      	ldr	r3, [r4, #8]
 800ffe8:	42ab      	cmp	r3, r5
 800ffea:	dc19      	bgt.n	8010020 <__multadd+0x74>
 800ffec:	6861      	ldr	r1, [r4, #4]
 800ffee:	4638      	mov	r0, r7
 800fff0:	3101      	adds	r1, #1
 800fff2:	f7ff ff79 	bl	800fee8 <_Balloc>
 800fff6:	4680      	mov	r8, r0
 800fff8:	b928      	cbnz	r0, 8010006 <__multadd+0x5a>
 800fffa:	4602      	mov	r2, r0
 800fffc:	21b5      	movs	r1, #181	; 0xb5
 800fffe:	4b0c      	ldr	r3, [pc, #48]	; (8010030 <__multadd+0x84>)
 8010000:	480c      	ldr	r0, [pc, #48]	; (8010034 <__multadd+0x88>)
 8010002:	f000 fd4f 	bl	8010aa4 <__assert_func>
 8010006:	6922      	ldr	r2, [r4, #16]
 8010008:	f104 010c 	add.w	r1, r4, #12
 801000c:	3202      	adds	r2, #2
 801000e:	0092      	lsls	r2, r2, #2
 8010010:	300c      	adds	r0, #12
 8010012:	f7fe fc29 	bl	800e868 <memcpy>
 8010016:	4621      	mov	r1, r4
 8010018:	4638      	mov	r0, r7
 801001a:	f7ff ffa5 	bl	800ff68 <_Bfree>
 801001e:	4644      	mov	r4, r8
 8010020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010024:	3501      	adds	r5, #1
 8010026:	615e      	str	r6, [r3, #20]
 8010028:	6125      	str	r5, [r4, #16]
 801002a:	4620      	mov	r0, r4
 801002c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010030:	08011ecb 	.word	0x08011ecb
 8010034:	08011edc 	.word	0x08011edc

08010038 <__hi0bits>:
 8010038:	0c02      	lsrs	r2, r0, #16
 801003a:	0412      	lsls	r2, r2, #16
 801003c:	4603      	mov	r3, r0
 801003e:	b9ca      	cbnz	r2, 8010074 <__hi0bits+0x3c>
 8010040:	0403      	lsls	r3, r0, #16
 8010042:	2010      	movs	r0, #16
 8010044:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010048:	bf04      	itt	eq
 801004a:	021b      	lsleq	r3, r3, #8
 801004c:	3008      	addeq	r0, #8
 801004e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010052:	bf04      	itt	eq
 8010054:	011b      	lsleq	r3, r3, #4
 8010056:	3004      	addeq	r0, #4
 8010058:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801005c:	bf04      	itt	eq
 801005e:	009b      	lsleq	r3, r3, #2
 8010060:	3002      	addeq	r0, #2
 8010062:	2b00      	cmp	r3, #0
 8010064:	db05      	blt.n	8010072 <__hi0bits+0x3a>
 8010066:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801006a:	f100 0001 	add.w	r0, r0, #1
 801006e:	bf08      	it	eq
 8010070:	2020      	moveq	r0, #32
 8010072:	4770      	bx	lr
 8010074:	2000      	movs	r0, #0
 8010076:	e7e5      	b.n	8010044 <__hi0bits+0xc>

08010078 <__lo0bits>:
 8010078:	6803      	ldr	r3, [r0, #0]
 801007a:	4602      	mov	r2, r0
 801007c:	f013 0007 	ands.w	r0, r3, #7
 8010080:	d00b      	beq.n	801009a <__lo0bits+0x22>
 8010082:	07d9      	lsls	r1, r3, #31
 8010084:	d421      	bmi.n	80100ca <__lo0bits+0x52>
 8010086:	0798      	lsls	r0, r3, #30
 8010088:	bf49      	itett	mi
 801008a:	085b      	lsrmi	r3, r3, #1
 801008c:	089b      	lsrpl	r3, r3, #2
 801008e:	2001      	movmi	r0, #1
 8010090:	6013      	strmi	r3, [r2, #0]
 8010092:	bf5c      	itt	pl
 8010094:	2002      	movpl	r0, #2
 8010096:	6013      	strpl	r3, [r2, #0]
 8010098:	4770      	bx	lr
 801009a:	b299      	uxth	r1, r3
 801009c:	b909      	cbnz	r1, 80100a2 <__lo0bits+0x2a>
 801009e:	2010      	movs	r0, #16
 80100a0:	0c1b      	lsrs	r3, r3, #16
 80100a2:	b2d9      	uxtb	r1, r3
 80100a4:	b909      	cbnz	r1, 80100aa <__lo0bits+0x32>
 80100a6:	3008      	adds	r0, #8
 80100a8:	0a1b      	lsrs	r3, r3, #8
 80100aa:	0719      	lsls	r1, r3, #28
 80100ac:	bf04      	itt	eq
 80100ae:	091b      	lsreq	r3, r3, #4
 80100b0:	3004      	addeq	r0, #4
 80100b2:	0799      	lsls	r1, r3, #30
 80100b4:	bf04      	itt	eq
 80100b6:	089b      	lsreq	r3, r3, #2
 80100b8:	3002      	addeq	r0, #2
 80100ba:	07d9      	lsls	r1, r3, #31
 80100bc:	d403      	bmi.n	80100c6 <__lo0bits+0x4e>
 80100be:	085b      	lsrs	r3, r3, #1
 80100c0:	f100 0001 	add.w	r0, r0, #1
 80100c4:	d003      	beq.n	80100ce <__lo0bits+0x56>
 80100c6:	6013      	str	r3, [r2, #0]
 80100c8:	4770      	bx	lr
 80100ca:	2000      	movs	r0, #0
 80100cc:	4770      	bx	lr
 80100ce:	2020      	movs	r0, #32
 80100d0:	4770      	bx	lr
	...

080100d4 <__i2b>:
 80100d4:	b510      	push	{r4, lr}
 80100d6:	460c      	mov	r4, r1
 80100d8:	2101      	movs	r1, #1
 80100da:	f7ff ff05 	bl	800fee8 <_Balloc>
 80100de:	4602      	mov	r2, r0
 80100e0:	b928      	cbnz	r0, 80100ee <__i2b+0x1a>
 80100e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80100e6:	4b04      	ldr	r3, [pc, #16]	; (80100f8 <__i2b+0x24>)
 80100e8:	4804      	ldr	r0, [pc, #16]	; (80100fc <__i2b+0x28>)
 80100ea:	f000 fcdb 	bl	8010aa4 <__assert_func>
 80100ee:	2301      	movs	r3, #1
 80100f0:	6144      	str	r4, [r0, #20]
 80100f2:	6103      	str	r3, [r0, #16]
 80100f4:	bd10      	pop	{r4, pc}
 80100f6:	bf00      	nop
 80100f8:	08011ecb 	.word	0x08011ecb
 80100fc:	08011edc 	.word	0x08011edc

08010100 <__multiply>:
 8010100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010104:	4691      	mov	r9, r2
 8010106:	690a      	ldr	r2, [r1, #16]
 8010108:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801010c:	460c      	mov	r4, r1
 801010e:	429a      	cmp	r2, r3
 8010110:	bfbe      	ittt	lt
 8010112:	460b      	movlt	r3, r1
 8010114:	464c      	movlt	r4, r9
 8010116:	4699      	movlt	r9, r3
 8010118:	6927      	ldr	r7, [r4, #16]
 801011a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801011e:	68a3      	ldr	r3, [r4, #8]
 8010120:	6861      	ldr	r1, [r4, #4]
 8010122:	eb07 060a 	add.w	r6, r7, sl
 8010126:	42b3      	cmp	r3, r6
 8010128:	b085      	sub	sp, #20
 801012a:	bfb8      	it	lt
 801012c:	3101      	addlt	r1, #1
 801012e:	f7ff fedb 	bl	800fee8 <_Balloc>
 8010132:	b930      	cbnz	r0, 8010142 <__multiply+0x42>
 8010134:	4602      	mov	r2, r0
 8010136:	f240 115d 	movw	r1, #349	; 0x15d
 801013a:	4b43      	ldr	r3, [pc, #268]	; (8010248 <__multiply+0x148>)
 801013c:	4843      	ldr	r0, [pc, #268]	; (801024c <__multiply+0x14c>)
 801013e:	f000 fcb1 	bl	8010aa4 <__assert_func>
 8010142:	f100 0514 	add.w	r5, r0, #20
 8010146:	462b      	mov	r3, r5
 8010148:	2200      	movs	r2, #0
 801014a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801014e:	4543      	cmp	r3, r8
 8010150:	d321      	bcc.n	8010196 <__multiply+0x96>
 8010152:	f104 0314 	add.w	r3, r4, #20
 8010156:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801015a:	f109 0314 	add.w	r3, r9, #20
 801015e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010162:	9202      	str	r2, [sp, #8]
 8010164:	1b3a      	subs	r2, r7, r4
 8010166:	3a15      	subs	r2, #21
 8010168:	f022 0203 	bic.w	r2, r2, #3
 801016c:	3204      	adds	r2, #4
 801016e:	f104 0115 	add.w	r1, r4, #21
 8010172:	428f      	cmp	r7, r1
 8010174:	bf38      	it	cc
 8010176:	2204      	movcc	r2, #4
 8010178:	9201      	str	r2, [sp, #4]
 801017a:	9a02      	ldr	r2, [sp, #8]
 801017c:	9303      	str	r3, [sp, #12]
 801017e:	429a      	cmp	r2, r3
 8010180:	d80c      	bhi.n	801019c <__multiply+0x9c>
 8010182:	2e00      	cmp	r6, #0
 8010184:	dd03      	ble.n	801018e <__multiply+0x8e>
 8010186:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801018a:	2b00      	cmp	r3, #0
 801018c:	d059      	beq.n	8010242 <__multiply+0x142>
 801018e:	6106      	str	r6, [r0, #16]
 8010190:	b005      	add	sp, #20
 8010192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010196:	f843 2b04 	str.w	r2, [r3], #4
 801019a:	e7d8      	b.n	801014e <__multiply+0x4e>
 801019c:	f8b3 a000 	ldrh.w	sl, [r3]
 80101a0:	f1ba 0f00 	cmp.w	sl, #0
 80101a4:	d023      	beq.n	80101ee <__multiply+0xee>
 80101a6:	46a9      	mov	r9, r5
 80101a8:	f04f 0c00 	mov.w	ip, #0
 80101ac:	f104 0e14 	add.w	lr, r4, #20
 80101b0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80101b4:	f8d9 1000 	ldr.w	r1, [r9]
 80101b8:	fa1f fb82 	uxth.w	fp, r2
 80101bc:	b289      	uxth	r1, r1
 80101be:	fb0a 110b 	mla	r1, sl, fp, r1
 80101c2:	4461      	add	r1, ip
 80101c4:	f8d9 c000 	ldr.w	ip, [r9]
 80101c8:	0c12      	lsrs	r2, r2, #16
 80101ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80101ce:	fb0a c202 	mla	r2, sl, r2, ip
 80101d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80101d6:	b289      	uxth	r1, r1
 80101d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80101dc:	4577      	cmp	r7, lr
 80101de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80101e2:	f849 1b04 	str.w	r1, [r9], #4
 80101e6:	d8e3      	bhi.n	80101b0 <__multiply+0xb0>
 80101e8:	9a01      	ldr	r2, [sp, #4]
 80101ea:	f845 c002 	str.w	ip, [r5, r2]
 80101ee:	9a03      	ldr	r2, [sp, #12]
 80101f0:	3304      	adds	r3, #4
 80101f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80101f6:	f1b9 0f00 	cmp.w	r9, #0
 80101fa:	d020      	beq.n	801023e <__multiply+0x13e>
 80101fc:	46ae      	mov	lr, r5
 80101fe:	f04f 0a00 	mov.w	sl, #0
 8010202:	6829      	ldr	r1, [r5, #0]
 8010204:	f104 0c14 	add.w	ip, r4, #20
 8010208:	f8bc b000 	ldrh.w	fp, [ip]
 801020c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010210:	b289      	uxth	r1, r1
 8010212:	fb09 220b 	mla	r2, r9, fp, r2
 8010216:	4492      	add	sl, r2
 8010218:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801021c:	f84e 1b04 	str.w	r1, [lr], #4
 8010220:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010224:	f8be 1000 	ldrh.w	r1, [lr]
 8010228:	0c12      	lsrs	r2, r2, #16
 801022a:	fb09 1102 	mla	r1, r9, r2, r1
 801022e:	4567      	cmp	r7, ip
 8010230:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010234:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010238:	d8e6      	bhi.n	8010208 <__multiply+0x108>
 801023a:	9a01      	ldr	r2, [sp, #4]
 801023c:	50a9      	str	r1, [r5, r2]
 801023e:	3504      	adds	r5, #4
 8010240:	e79b      	b.n	801017a <__multiply+0x7a>
 8010242:	3e01      	subs	r6, #1
 8010244:	e79d      	b.n	8010182 <__multiply+0x82>
 8010246:	bf00      	nop
 8010248:	08011ecb 	.word	0x08011ecb
 801024c:	08011edc 	.word	0x08011edc

08010250 <__pow5mult>:
 8010250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010254:	4615      	mov	r5, r2
 8010256:	f012 0203 	ands.w	r2, r2, #3
 801025a:	4606      	mov	r6, r0
 801025c:	460f      	mov	r7, r1
 801025e:	d007      	beq.n	8010270 <__pow5mult+0x20>
 8010260:	4c25      	ldr	r4, [pc, #148]	; (80102f8 <__pow5mult+0xa8>)
 8010262:	3a01      	subs	r2, #1
 8010264:	2300      	movs	r3, #0
 8010266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801026a:	f7ff fe9f 	bl	800ffac <__multadd>
 801026e:	4607      	mov	r7, r0
 8010270:	10ad      	asrs	r5, r5, #2
 8010272:	d03d      	beq.n	80102f0 <__pow5mult+0xa0>
 8010274:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010276:	b97c      	cbnz	r4, 8010298 <__pow5mult+0x48>
 8010278:	2010      	movs	r0, #16
 801027a:	f7ff fe1f 	bl	800febc <malloc>
 801027e:	4602      	mov	r2, r0
 8010280:	6270      	str	r0, [r6, #36]	; 0x24
 8010282:	b928      	cbnz	r0, 8010290 <__pow5mult+0x40>
 8010284:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010288:	4b1c      	ldr	r3, [pc, #112]	; (80102fc <__pow5mult+0xac>)
 801028a:	481d      	ldr	r0, [pc, #116]	; (8010300 <__pow5mult+0xb0>)
 801028c:	f000 fc0a 	bl	8010aa4 <__assert_func>
 8010290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010294:	6004      	str	r4, [r0, #0]
 8010296:	60c4      	str	r4, [r0, #12]
 8010298:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801029c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80102a0:	b94c      	cbnz	r4, 80102b6 <__pow5mult+0x66>
 80102a2:	f240 2171 	movw	r1, #625	; 0x271
 80102a6:	4630      	mov	r0, r6
 80102a8:	f7ff ff14 	bl	80100d4 <__i2b>
 80102ac:	2300      	movs	r3, #0
 80102ae:	4604      	mov	r4, r0
 80102b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80102b4:	6003      	str	r3, [r0, #0]
 80102b6:	f04f 0900 	mov.w	r9, #0
 80102ba:	07eb      	lsls	r3, r5, #31
 80102bc:	d50a      	bpl.n	80102d4 <__pow5mult+0x84>
 80102be:	4639      	mov	r1, r7
 80102c0:	4622      	mov	r2, r4
 80102c2:	4630      	mov	r0, r6
 80102c4:	f7ff ff1c 	bl	8010100 <__multiply>
 80102c8:	4680      	mov	r8, r0
 80102ca:	4639      	mov	r1, r7
 80102cc:	4630      	mov	r0, r6
 80102ce:	f7ff fe4b 	bl	800ff68 <_Bfree>
 80102d2:	4647      	mov	r7, r8
 80102d4:	106d      	asrs	r5, r5, #1
 80102d6:	d00b      	beq.n	80102f0 <__pow5mult+0xa0>
 80102d8:	6820      	ldr	r0, [r4, #0]
 80102da:	b938      	cbnz	r0, 80102ec <__pow5mult+0x9c>
 80102dc:	4622      	mov	r2, r4
 80102de:	4621      	mov	r1, r4
 80102e0:	4630      	mov	r0, r6
 80102e2:	f7ff ff0d 	bl	8010100 <__multiply>
 80102e6:	6020      	str	r0, [r4, #0]
 80102e8:	f8c0 9000 	str.w	r9, [r0]
 80102ec:	4604      	mov	r4, r0
 80102ee:	e7e4      	b.n	80102ba <__pow5mult+0x6a>
 80102f0:	4638      	mov	r0, r7
 80102f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102f6:	bf00      	nop
 80102f8:	08012028 	.word	0x08012028
 80102fc:	08011e59 	.word	0x08011e59
 8010300:	08011edc 	.word	0x08011edc

08010304 <__lshift>:
 8010304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010308:	460c      	mov	r4, r1
 801030a:	4607      	mov	r7, r0
 801030c:	4691      	mov	r9, r2
 801030e:	6923      	ldr	r3, [r4, #16]
 8010310:	6849      	ldr	r1, [r1, #4]
 8010312:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010316:	68a3      	ldr	r3, [r4, #8]
 8010318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801031c:	f108 0601 	add.w	r6, r8, #1
 8010320:	42b3      	cmp	r3, r6
 8010322:	db0b      	blt.n	801033c <__lshift+0x38>
 8010324:	4638      	mov	r0, r7
 8010326:	f7ff fddf 	bl	800fee8 <_Balloc>
 801032a:	4605      	mov	r5, r0
 801032c:	b948      	cbnz	r0, 8010342 <__lshift+0x3e>
 801032e:	4602      	mov	r2, r0
 8010330:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010334:	4b29      	ldr	r3, [pc, #164]	; (80103dc <__lshift+0xd8>)
 8010336:	482a      	ldr	r0, [pc, #168]	; (80103e0 <__lshift+0xdc>)
 8010338:	f000 fbb4 	bl	8010aa4 <__assert_func>
 801033c:	3101      	adds	r1, #1
 801033e:	005b      	lsls	r3, r3, #1
 8010340:	e7ee      	b.n	8010320 <__lshift+0x1c>
 8010342:	2300      	movs	r3, #0
 8010344:	f100 0114 	add.w	r1, r0, #20
 8010348:	f100 0210 	add.w	r2, r0, #16
 801034c:	4618      	mov	r0, r3
 801034e:	4553      	cmp	r3, sl
 8010350:	db37      	blt.n	80103c2 <__lshift+0xbe>
 8010352:	6920      	ldr	r0, [r4, #16]
 8010354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010358:	f104 0314 	add.w	r3, r4, #20
 801035c:	f019 091f 	ands.w	r9, r9, #31
 8010360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010364:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010368:	d02f      	beq.n	80103ca <__lshift+0xc6>
 801036a:	468a      	mov	sl, r1
 801036c:	f04f 0c00 	mov.w	ip, #0
 8010370:	f1c9 0e20 	rsb	lr, r9, #32
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	fa02 f209 	lsl.w	r2, r2, r9
 801037a:	ea42 020c 	orr.w	r2, r2, ip
 801037e:	f84a 2b04 	str.w	r2, [sl], #4
 8010382:	f853 2b04 	ldr.w	r2, [r3], #4
 8010386:	4298      	cmp	r0, r3
 8010388:	fa22 fc0e 	lsr.w	ip, r2, lr
 801038c:	d8f2      	bhi.n	8010374 <__lshift+0x70>
 801038e:	1b03      	subs	r3, r0, r4
 8010390:	3b15      	subs	r3, #21
 8010392:	f023 0303 	bic.w	r3, r3, #3
 8010396:	3304      	adds	r3, #4
 8010398:	f104 0215 	add.w	r2, r4, #21
 801039c:	4290      	cmp	r0, r2
 801039e:	bf38      	it	cc
 80103a0:	2304      	movcc	r3, #4
 80103a2:	f841 c003 	str.w	ip, [r1, r3]
 80103a6:	f1bc 0f00 	cmp.w	ip, #0
 80103aa:	d001      	beq.n	80103b0 <__lshift+0xac>
 80103ac:	f108 0602 	add.w	r6, r8, #2
 80103b0:	3e01      	subs	r6, #1
 80103b2:	4638      	mov	r0, r7
 80103b4:	4621      	mov	r1, r4
 80103b6:	612e      	str	r6, [r5, #16]
 80103b8:	f7ff fdd6 	bl	800ff68 <_Bfree>
 80103bc:	4628      	mov	r0, r5
 80103be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80103c6:	3301      	adds	r3, #1
 80103c8:	e7c1      	b.n	801034e <__lshift+0x4a>
 80103ca:	3904      	subs	r1, #4
 80103cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80103d0:	4298      	cmp	r0, r3
 80103d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80103d6:	d8f9      	bhi.n	80103cc <__lshift+0xc8>
 80103d8:	e7ea      	b.n	80103b0 <__lshift+0xac>
 80103da:	bf00      	nop
 80103dc:	08011ecb 	.word	0x08011ecb
 80103e0:	08011edc 	.word	0x08011edc

080103e4 <__mcmp>:
 80103e4:	4603      	mov	r3, r0
 80103e6:	690a      	ldr	r2, [r1, #16]
 80103e8:	6900      	ldr	r0, [r0, #16]
 80103ea:	b530      	push	{r4, r5, lr}
 80103ec:	1a80      	subs	r0, r0, r2
 80103ee:	d10d      	bne.n	801040c <__mcmp+0x28>
 80103f0:	3314      	adds	r3, #20
 80103f2:	3114      	adds	r1, #20
 80103f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80103f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80103fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010400:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010404:	4295      	cmp	r5, r2
 8010406:	d002      	beq.n	801040e <__mcmp+0x2a>
 8010408:	d304      	bcc.n	8010414 <__mcmp+0x30>
 801040a:	2001      	movs	r0, #1
 801040c:	bd30      	pop	{r4, r5, pc}
 801040e:	42a3      	cmp	r3, r4
 8010410:	d3f4      	bcc.n	80103fc <__mcmp+0x18>
 8010412:	e7fb      	b.n	801040c <__mcmp+0x28>
 8010414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010418:	e7f8      	b.n	801040c <__mcmp+0x28>
	...

0801041c <__mdiff>:
 801041c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010420:	460d      	mov	r5, r1
 8010422:	4607      	mov	r7, r0
 8010424:	4611      	mov	r1, r2
 8010426:	4628      	mov	r0, r5
 8010428:	4614      	mov	r4, r2
 801042a:	f7ff ffdb 	bl	80103e4 <__mcmp>
 801042e:	1e06      	subs	r6, r0, #0
 8010430:	d111      	bne.n	8010456 <__mdiff+0x3a>
 8010432:	4631      	mov	r1, r6
 8010434:	4638      	mov	r0, r7
 8010436:	f7ff fd57 	bl	800fee8 <_Balloc>
 801043a:	4602      	mov	r2, r0
 801043c:	b928      	cbnz	r0, 801044a <__mdiff+0x2e>
 801043e:	f240 2132 	movw	r1, #562	; 0x232
 8010442:	4b3a      	ldr	r3, [pc, #232]	; (801052c <__mdiff+0x110>)
 8010444:	483a      	ldr	r0, [pc, #232]	; (8010530 <__mdiff+0x114>)
 8010446:	f000 fb2d 	bl	8010aa4 <__assert_func>
 801044a:	2301      	movs	r3, #1
 801044c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010450:	4610      	mov	r0, r2
 8010452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010456:	bfa4      	itt	ge
 8010458:	4623      	movge	r3, r4
 801045a:	462c      	movge	r4, r5
 801045c:	4638      	mov	r0, r7
 801045e:	6861      	ldr	r1, [r4, #4]
 8010460:	bfa6      	itte	ge
 8010462:	461d      	movge	r5, r3
 8010464:	2600      	movge	r6, #0
 8010466:	2601      	movlt	r6, #1
 8010468:	f7ff fd3e 	bl	800fee8 <_Balloc>
 801046c:	4602      	mov	r2, r0
 801046e:	b918      	cbnz	r0, 8010478 <__mdiff+0x5c>
 8010470:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010474:	4b2d      	ldr	r3, [pc, #180]	; (801052c <__mdiff+0x110>)
 8010476:	e7e5      	b.n	8010444 <__mdiff+0x28>
 8010478:	f102 0814 	add.w	r8, r2, #20
 801047c:	46c2      	mov	sl, r8
 801047e:	f04f 0c00 	mov.w	ip, #0
 8010482:	6927      	ldr	r7, [r4, #16]
 8010484:	60c6      	str	r6, [r0, #12]
 8010486:	692e      	ldr	r6, [r5, #16]
 8010488:	f104 0014 	add.w	r0, r4, #20
 801048c:	f105 0914 	add.w	r9, r5, #20
 8010490:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8010494:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010498:	3410      	adds	r4, #16
 801049a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801049e:	f859 3b04 	ldr.w	r3, [r9], #4
 80104a2:	fa1f f18b 	uxth.w	r1, fp
 80104a6:	448c      	add	ip, r1
 80104a8:	b299      	uxth	r1, r3
 80104aa:	0c1b      	lsrs	r3, r3, #16
 80104ac:	ebac 0101 	sub.w	r1, ip, r1
 80104b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80104b4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80104b8:	b289      	uxth	r1, r1
 80104ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80104be:	454e      	cmp	r6, r9
 80104c0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80104c4:	f84a 3b04 	str.w	r3, [sl], #4
 80104c8:	d8e7      	bhi.n	801049a <__mdiff+0x7e>
 80104ca:	1b73      	subs	r3, r6, r5
 80104cc:	3b15      	subs	r3, #21
 80104ce:	f023 0303 	bic.w	r3, r3, #3
 80104d2:	3515      	adds	r5, #21
 80104d4:	3304      	adds	r3, #4
 80104d6:	42ae      	cmp	r6, r5
 80104d8:	bf38      	it	cc
 80104da:	2304      	movcc	r3, #4
 80104dc:	4418      	add	r0, r3
 80104de:	4443      	add	r3, r8
 80104e0:	461e      	mov	r6, r3
 80104e2:	4605      	mov	r5, r0
 80104e4:	4575      	cmp	r5, lr
 80104e6:	d30e      	bcc.n	8010506 <__mdiff+0xea>
 80104e8:	f10e 0103 	add.w	r1, lr, #3
 80104ec:	1a09      	subs	r1, r1, r0
 80104ee:	f021 0103 	bic.w	r1, r1, #3
 80104f2:	3803      	subs	r0, #3
 80104f4:	4586      	cmp	lr, r0
 80104f6:	bf38      	it	cc
 80104f8:	2100      	movcc	r1, #0
 80104fa:	4419      	add	r1, r3
 80104fc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8010500:	b18b      	cbz	r3, 8010526 <__mdiff+0x10a>
 8010502:	6117      	str	r7, [r2, #16]
 8010504:	e7a4      	b.n	8010450 <__mdiff+0x34>
 8010506:	f855 8b04 	ldr.w	r8, [r5], #4
 801050a:	fa1f f188 	uxth.w	r1, r8
 801050e:	4461      	add	r1, ip
 8010510:	140c      	asrs	r4, r1, #16
 8010512:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010516:	b289      	uxth	r1, r1
 8010518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801051c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8010520:	f846 1b04 	str.w	r1, [r6], #4
 8010524:	e7de      	b.n	80104e4 <__mdiff+0xc8>
 8010526:	3f01      	subs	r7, #1
 8010528:	e7e8      	b.n	80104fc <__mdiff+0xe0>
 801052a:	bf00      	nop
 801052c:	08011ecb 	.word	0x08011ecb
 8010530:	08011edc 	.word	0x08011edc

08010534 <__d2b>:
 8010534:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010538:	2101      	movs	r1, #1
 801053a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801053e:	4690      	mov	r8, r2
 8010540:	461d      	mov	r5, r3
 8010542:	f7ff fcd1 	bl	800fee8 <_Balloc>
 8010546:	4604      	mov	r4, r0
 8010548:	b930      	cbnz	r0, 8010558 <__d2b+0x24>
 801054a:	4602      	mov	r2, r0
 801054c:	f240 310a 	movw	r1, #778	; 0x30a
 8010550:	4b24      	ldr	r3, [pc, #144]	; (80105e4 <__d2b+0xb0>)
 8010552:	4825      	ldr	r0, [pc, #148]	; (80105e8 <__d2b+0xb4>)
 8010554:	f000 faa6 	bl	8010aa4 <__assert_func>
 8010558:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801055c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8010560:	bb2d      	cbnz	r5, 80105ae <__d2b+0x7a>
 8010562:	9301      	str	r3, [sp, #4]
 8010564:	f1b8 0300 	subs.w	r3, r8, #0
 8010568:	d026      	beq.n	80105b8 <__d2b+0x84>
 801056a:	4668      	mov	r0, sp
 801056c:	9300      	str	r3, [sp, #0]
 801056e:	f7ff fd83 	bl	8010078 <__lo0bits>
 8010572:	9900      	ldr	r1, [sp, #0]
 8010574:	b1f0      	cbz	r0, 80105b4 <__d2b+0x80>
 8010576:	9a01      	ldr	r2, [sp, #4]
 8010578:	f1c0 0320 	rsb	r3, r0, #32
 801057c:	fa02 f303 	lsl.w	r3, r2, r3
 8010580:	430b      	orrs	r3, r1
 8010582:	40c2      	lsrs	r2, r0
 8010584:	6163      	str	r3, [r4, #20]
 8010586:	9201      	str	r2, [sp, #4]
 8010588:	9b01      	ldr	r3, [sp, #4]
 801058a:	2b00      	cmp	r3, #0
 801058c:	bf14      	ite	ne
 801058e:	2102      	movne	r1, #2
 8010590:	2101      	moveq	r1, #1
 8010592:	61a3      	str	r3, [r4, #24]
 8010594:	6121      	str	r1, [r4, #16]
 8010596:	b1c5      	cbz	r5, 80105ca <__d2b+0x96>
 8010598:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801059c:	4405      	add	r5, r0
 801059e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80105a2:	603d      	str	r5, [r7, #0]
 80105a4:	6030      	str	r0, [r6, #0]
 80105a6:	4620      	mov	r0, r4
 80105a8:	b002      	add	sp, #8
 80105aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105b2:	e7d6      	b.n	8010562 <__d2b+0x2e>
 80105b4:	6161      	str	r1, [r4, #20]
 80105b6:	e7e7      	b.n	8010588 <__d2b+0x54>
 80105b8:	a801      	add	r0, sp, #4
 80105ba:	f7ff fd5d 	bl	8010078 <__lo0bits>
 80105be:	2101      	movs	r1, #1
 80105c0:	9b01      	ldr	r3, [sp, #4]
 80105c2:	6121      	str	r1, [r4, #16]
 80105c4:	6163      	str	r3, [r4, #20]
 80105c6:	3020      	adds	r0, #32
 80105c8:	e7e5      	b.n	8010596 <__d2b+0x62>
 80105ca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80105ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80105d2:	6038      	str	r0, [r7, #0]
 80105d4:	6918      	ldr	r0, [r3, #16]
 80105d6:	f7ff fd2f 	bl	8010038 <__hi0bits>
 80105da:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80105de:	6031      	str	r1, [r6, #0]
 80105e0:	e7e1      	b.n	80105a6 <__d2b+0x72>
 80105e2:	bf00      	nop
 80105e4:	08011ecb 	.word	0x08011ecb
 80105e8:	08011edc 	.word	0x08011edc

080105ec <_calloc_r>:
 80105ec:	b570      	push	{r4, r5, r6, lr}
 80105ee:	fba1 5402 	umull	r5, r4, r1, r2
 80105f2:	b934      	cbnz	r4, 8010602 <_calloc_r+0x16>
 80105f4:	4629      	mov	r1, r5
 80105f6:	f000 f875 	bl	80106e4 <_malloc_r>
 80105fa:	4606      	mov	r6, r0
 80105fc:	b928      	cbnz	r0, 801060a <_calloc_r+0x1e>
 80105fe:	4630      	mov	r0, r6
 8010600:	bd70      	pop	{r4, r5, r6, pc}
 8010602:	220c      	movs	r2, #12
 8010604:	2600      	movs	r6, #0
 8010606:	6002      	str	r2, [r0, #0]
 8010608:	e7f9      	b.n	80105fe <_calloc_r+0x12>
 801060a:	462a      	mov	r2, r5
 801060c:	4621      	mov	r1, r4
 801060e:	f7fe f939 	bl	800e884 <memset>
 8010612:	e7f4      	b.n	80105fe <_calloc_r+0x12>

08010614 <_free_r>:
 8010614:	b538      	push	{r3, r4, r5, lr}
 8010616:	4605      	mov	r5, r0
 8010618:	2900      	cmp	r1, #0
 801061a:	d040      	beq.n	801069e <_free_r+0x8a>
 801061c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010620:	1f0c      	subs	r4, r1, #4
 8010622:	2b00      	cmp	r3, #0
 8010624:	bfb8      	it	lt
 8010626:	18e4      	addlt	r4, r4, r3
 8010628:	f000 fa98 	bl	8010b5c <__malloc_lock>
 801062c:	4a1c      	ldr	r2, [pc, #112]	; (80106a0 <_free_r+0x8c>)
 801062e:	6813      	ldr	r3, [r2, #0]
 8010630:	b933      	cbnz	r3, 8010640 <_free_r+0x2c>
 8010632:	6063      	str	r3, [r4, #4]
 8010634:	6014      	str	r4, [r2, #0]
 8010636:	4628      	mov	r0, r5
 8010638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801063c:	f000 ba94 	b.w	8010b68 <__malloc_unlock>
 8010640:	42a3      	cmp	r3, r4
 8010642:	d908      	bls.n	8010656 <_free_r+0x42>
 8010644:	6820      	ldr	r0, [r4, #0]
 8010646:	1821      	adds	r1, r4, r0
 8010648:	428b      	cmp	r3, r1
 801064a:	bf01      	itttt	eq
 801064c:	6819      	ldreq	r1, [r3, #0]
 801064e:	685b      	ldreq	r3, [r3, #4]
 8010650:	1809      	addeq	r1, r1, r0
 8010652:	6021      	streq	r1, [r4, #0]
 8010654:	e7ed      	b.n	8010632 <_free_r+0x1e>
 8010656:	461a      	mov	r2, r3
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	b10b      	cbz	r3, 8010660 <_free_r+0x4c>
 801065c:	42a3      	cmp	r3, r4
 801065e:	d9fa      	bls.n	8010656 <_free_r+0x42>
 8010660:	6811      	ldr	r1, [r2, #0]
 8010662:	1850      	adds	r0, r2, r1
 8010664:	42a0      	cmp	r0, r4
 8010666:	d10b      	bne.n	8010680 <_free_r+0x6c>
 8010668:	6820      	ldr	r0, [r4, #0]
 801066a:	4401      	add	r1, r0
 801066c:	1850      	adds	r0, r2, r1
 801066e:	4283      	cmp	r3, r0
 8010670:	6011      	str	r1, [r2, #0]
 8010672:	d1e0      	bne.n	8010636 <_free_r+0x22>
 8010674:	6818      	ldr	r0, [r3, #0]
 8010676:	685b      	ldr	r3, [r3, #4]
 8010678:	4401      	add	r1, r0
 801067a:	6011      	str	r1, [r2, #0]
 801067c:	6053      	str	r3, [r2, #4]
 801067e:	e7da      	b.n	8010636 <_free_r+0x22>
 8010680:	d902      	bls.n	8010688 <_free_r+0x74>
 8010682:	230c      	movs	r3, #12
 8010684:	602b      	str	r3, [r5, #0]
 8010686:	e7d6      	b.n	8010636 <_free_r+0x22>
 8010688:	6820      	ldr	r0, [r4, #0]
 801068a:	1821      	adds	r1, r4, r0
 801068c:	428b      	cmp	r3, r1
 801068e:	bf01      	itttt	eq
 8010690:	6819      	ldreq	r1, [r3, #0]
 8010692:	685b      	ldreq	r3, [r3, #4]
 8010694:	1809      	addeq	r1, r1, r0
 8010696:	6021      	streq	r1, [r4, #0]
 8010698:	6063      	str	r3, [r4, #4]
 801069a:	6054      	str	r4, [r2, #4]
 801069c:	e7cb      	b.n	8010636 <_free_r+0x22>
 801069e:	bd38      	pop	{r3, r4, r5, pc}
 80106a0:	20000288 	.word	0x20000288

080106a4 <sbrk_aligned>:
 80106a4:	b570      	push	{r4, r5, r6, lr}
 80106a6:	4e0e      	ldr	r6, [pc, #56]	; (80106e0 <sbrk_aligned+0x3c>)
 80106a8:	460c      	mov	r4, r1
 80106aa:	6831      	ldr	r1, [r6, #0]
 80106ac:	4605      	mov	r5, r0
 80106ae:	b911      	cbnz	r1, 80106b6 <sbrk_aligned+0x12>
 80106b0:	f000 f9e8 	bl	8010a84 <_sbrk_r>
 80106b4:	6030      	str	r0, [r6, #0]
 80106b6:	4621      	mov	r1, r4
 80106b8:	4628      	mov	r0, r5
 80106ba:	f000 f9e3 	bl	8010a84 <_sbrk_r>
 80106be:	1c43      	adds	r3, r0, #1
 80106c0:	d00a      	beq.n	80106d8 <sbrk_aligned+0x34>
 80106c2:	1cc4      	adds	r4, r0, #3
 80106c4:	f024 0403 	bic.w	r4, r4, #3
 80106c8:	42a0      	cmp	r0, r4
 80106ca:	d007      	beq.n	80106dc <sbrk_aligned+0x38>
 80106cc:	1a21      	subs	r1, r4, r0
 80106ce:	4628      	mov	r0, r5
 80106d0:	f000 f9d8 	bl	8010a84 <_sbrk_r>
 80106d4:	3001      	adds	r0, #1
 80106d6:	d101      	bne.n	80106dc <sbrk_aligned+0x38>
 80106d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80106dc:	4620      	mov	r0, r4
 80106de:	bd70      	pop	{r4, r5, r6, pc}
 80106e0:	2000028c 	.word	0x2000028c

080106e4 <_malloc_r>:
 80106e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106e8:	1ccd      	adds	r5, r1, #3
 80106ea:	f025 0503 	bic.w	r5, r5, #3
 80106ee:	3508      	adds	r5, #8
 80106f0:	2d0c      	cmp	r5, #12
 80106f2:	bf38      	it	cc
 80106f4:	250c      	movcc	r5, #12
 80106f6:	2d00      	cmp	r5, #0
 80106f8:	4607      	mov	r7, r0
 80106fa:	db01      	blt.n	8010700 <_malloc_r+0x1c>
 80106fc:	42a9      	cmp	r1, r5
 80106fe:	d905      	bls.n	801070c <_malloc_r+0x28>
 8010700:	230c      	movs	r3, #12
 8010702:	2600      	movs	r6, #0
 8010704:	603b      	str	r3, [r7, #0]
 8010706:	4630      	mov	r0, r6
 8010708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801070c:	4e2e      	ldr	r6, [pc, #184]	; (80107c8 <_malloc_r+0xe4>)
 801070e:	f000 fa25 	bl	8010b5c <__malloc_lock>
 8010712:	6833      	ldr	r3, [r6, #0]
 8010714:	461c      	mov	r4, r3
 8010716:	bb34      	cbnz	r4, 8010766 <_malloc_r+0x82>
 8010718:	4629      	mov	r1, r5
 801071a:	4638      	mov	r0, r7
 801071c:	f7ff ffc2 	bl	80106a4 <sbrk_aligned>
 8010720:	1c43      	adds	r3, r0, #1
 8010722:	4604      	mov	r4, r0
 8010724:	d14d      	bne.n	80107c2 <_malloc_r+0xde>
 8010726:	6834      	ldr	r4, [r6, #0]
 8010728:	4626      	mov	r6, r4
 801072a:	2e00      	cmp	r6, #0
 801072c:	d140      	bne.n	80107b0 <_malloc_r+0xcc>
 801072e:	6823      	ldr	r3, [r4, #0]
 8010730:	4631      	mov	r1, r6
 8010732:	4638      	mov	r0, r7
 8010734:	eb04 0803 	add.w	r8, r4, r3
 8010738:	f000 f9a4 	bl	8010a84 <_sbrk_r>
 801073c:	4580      	cmp	r8, r0
 801073e:	d13a      	bne.n	80107b6 <_malloc_r+0xd2>
 8010740:	6821      	ldr	r1, [r4, #0]
 8010742:	3503      	adds	r5, #3
 8010744:	1a6d      	subs	r5, r5, r1
 8010746:	f025 0503 	bic.w	r5, r5, #3
 801074a:	3508      	adds	r5, #8
 801074c:	2d0c      	cmp	r5, #12
 801074e:	bf38      	it	cc
 8010750:	250c      	movcc	r5, #12
 8010752:	4638      	mov	r0, r7
 8010754:	4629      	mov	r1, r5
 8010756:	f7ff ffa5 	bl	80106a4 <sbrk_aligned>
 801075a:	3001      	adds	r0, #1
 801075c:	d02b      	beq.n	80107b6 <_malloc_r+0xd2>
 801075e:	6823      	ldr	r3, [r4, #0]
 8010760:	442b      	add	r3, r5
 8010762:	6023      	str	r3, [r4, #0]
 8010764:	e00e      	b.n	8010784 <_malloc_r+0xa0>
 8010766:	6822      	ldr	r2, [r4, #0]
 8010768:	1b52      	subs	r2, r2, r5
 801076a:	d41e      	bmi.n	80107aa <_malloc_r+0xc6>
 801076c:	2a0b      	cmp	r2, #11
 801076e:	d916      	bls.n	801079e <_malloc_r+0xba>
 8010770:	1961      	adds	r1, r4, r5
 8010772:	42a3      	cmp	r3, r4
 8010774:	6025      	str	r5, [r4, #0]
 8010776:	bf18      	it	ne
 8010778:	6059      	strne	r1, [r3, #4]
 801077a:	6863      	ldr	r3, [r4, #4]
 801077c:	bf08      	it	eq
 801077e:	6031      	streq	r1, [r6, #0]
 8010780:	5162      	str	r2, [r4, r5]
 8010782:	604b      	str	r3, [r1, #4]
 8010784:	4638      	mov	r0, r7
 8010786:	f104 060b 	add.w	r6, r4, #11
 801078a:	f000 f9ed 	bl	8010b68 <__malloc_unlock>
 801078e:	f026 0607 	bic.w	r6, r6, #7
 8010792:	1d23      	adds	r3, r4, #4
 8010794:	1af2      	subs	r2, r6, r3
 8010796:	d0b6      	beq.n	8010706 <_malloc_r+0x22>
 8010798:	1b9b      	subs	r3, r3, r6
 801079a:	50a3      	str	r3, [r4, r2]
 801079c:	e7b3      	b.n	8010706 <_malloc_r+0x22>
 801079e:	6862      	ldr	r2, [r4, #4]
 80107a0:	42a3      	cmp	r3, r4
 80107a2:	bf0c      	ite	eq
 80107a4:	6032      	streq	r2, [r6, #0]
 80107a6:	605a      	strne	r2, [r3, #4]
 80107a8:	e7ec      	b.n	8010784 <_malloc_r+0xa0>
 80107aa:	4623      	mov	r3, r4
 80107ac:	6864      	ldr	r4, [r4, #4]
 80107ae:	e7b2      	b.n	8010716 <_malloc_r+0x32>
 80107b0:	4634      	mov	r4, r6
 80107b2:	6876      	ldr	r6, [r6, #4]
 80107b4:	e7b9      	b.n	801072a <_malloc_r+0x46>
 80107b6:	230c      	movs	r3, #12
 80107b8:	4638      	mov	r0, r7
 80107ba:	603b      	str	r3, [r7, #0]
 80107bc:	f000 f9d4 	bl	8010b68 <__malloc_unlock>
 80107c0:	e7a1      	b.n	8010706 <_malloc_r+0x22>
 80107c2:	6025      	str	r5, [r4, #0]
 80107c4:	e7de      	b.n	8010784 <_malloc_r+0xa0>
 80107c6:	bf00      	nop
 80107c8:	20000288 	.word	0x20000288

080107cc <__ssputs_r>:
 80107cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107d0:	688e      	ldr	r6, [r1, #8]
 80107d2:	4682      	mov	sl, r0
 80107d4:	429e      	cmp	r6, r3
 80107d6:	460c      	mov	r4, r1
 80107d8:	4690      	mov	r8, r2
 80107da:	461f      	mov	r7, r3
 80107dc:	d838      	bhi.n	8010850 <__ssputs_r+0x84>
 80107de:	898a      	ldrh	r2, [r1, #12]
 80107e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80107e4:	d032      	beq.n	801084c <__ssputs_r+0x80>
 80107e6:	6825      	ldr	r5, [r4, #0]
 80107e8:	6909      	ldr	r1, [r1, #16]
 80107ea:	3301      	adds	r3, #1
 80107ec:	eba5 0901 	sub.w	r9, r5, r1
 80107f0:	6965      	ldr	r5, [r4, #20]
 80107f2:	444b      	add	r3, r9
 80107f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80107f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80107fc:	106d      	asrs	r5, r5, #1
 80107fe:	429d      	cmp	r5, r3
 8010800:	bf38      	it	cc
 8010802:	461d      	movcc	r5, r3
 8010804:	0553      	lsls	r3, r2, #21
 8010806:	d531      	bpl.n	801086c <__ssputs_r+0xa0>
 8010808:	4629      	mov	r1, r5
 801080a:	f7ff ff6b 	bl	80106e4 <_malloc_r>
 801080e:	4606      	mov	r6, r0
 8010810:	b950      	cbnz	r0, 8010828 <__ssputs_r+0x5c>
 8010812:	230c      	movs	r3, #12
 8010814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010818:	f8ca 3000 	str.w	r3, [sl]
 801081c:	89a3      	ldrh	r3, [r4, #12]
 801081e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010822:	81a3      	strh	r3, [r4, #12]
 8010824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010828:	464a      	mov	r2, r9
 801082a:	6921      	ldr	r1, [r4, #16]
 801082c:	f7fe f81c 	bl	800e868 <memcpy>
 8010830:	89a3      	ldrh	r3, [r4, #12]
 8010832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801083a:	81a3      	strh	r3, [r4, #12]
 801083c:	6126      	str	r6, [r4, #16]
 801083e:	444e      	add	r6, r9
 8010840:	6026      	str	r6, [r4, #0]
 8010842:	463e      	mov	r6, r7
 8010844:	6165      	str	r5, [r4, #20]
 8010846:	eba5 0509 	sub.w	r5, r5, r9
 801084a:	60a5      	str	r5, [r4, #8]
 801084c:	42be      	cmp	r6, r7
 801084e:	d900      	bls.n	8010852 <__ssputs_r+0x86>
 8010850:	463e      	mov	r6, r7
 8010852:	4632      	mov	r2, r6
 8010854:	4641      	mov	r1, r8
 8010856:	6820      	ldr	r0, [r4, #0]
 8010858:	f000 f966 	bl	8010b28 <memmove>
 801085c:	68a3      	ldr	r3, [r4, #8]
 801085e:	2000      	movs	r0, #0
 8010860:	1b9b      	subs	r3, r3, r6
 8010862:	60a3      	str	r3, [r4, #8]
 8010864:	6823      	ldr	r3, [r4, #0]
 8010866:	4433      	add	r3, r6
 8010868:	6023      	str	r3, [r4, #0]
 801086a:	e7db      	b.n	8010824 <__ssputs_r+0x58>
 801086c:	462a      	mov	r2, r5
 801086e:	f000 f981 	bl	8010b74 <_realloc_r>
 8010872:	4606      	mov	r6, r0
 8010874:	2800      	cmp	r0, #0
 8010876:	d1e1      	bne.n	801083c <__ssputs_r+0x70>
 8010878:	4650      	mov	r0, sl
 801087a:	6921      	ldr	r1, [r4, #16]
 801087c:	f7ff feca 	bl	8010614 <_free_r>
 8010880:	e7c7      	b.n	8010812 <__ssputs_r+0x46>
	...

08010884 <_svfiprintf_r>:
 8010884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010888:	4698      	mov	r8, r3
 801088a:	898b      	ldrh	r3, [r1, #12]
 801088c:	4607      	mov	r7, r0
 801088e:	061b      	lsls	r3, r3, #24
 8010890:	460d      	mov	r5, r1
 8010892:	4614      	mov	r4, r2
 8010894:	b09d      	sub	sp, #116	; 0x74
 8010896:	d50e      	bpl.n	80108b6 <_svfiprintf_r+0x32>
 8010898:	690b      	ldr	r3, [r1, #16]
 801089a:	b963      	cbnz	r3, 80108b6 <_svfiprintf_r+0x32>
 801089c:	2140      	movs	r1, #64	; 0x40
 801089e:	f7ff ff21 	bl	80106e4 <_malloc_r>
 80108a2:	6028      	str	r0, [r5, #0]
 80108a4:	6128      	str	r0, [r5, #16]
 80108a6:	b920      	cbnz	r0, 80108b2 <_svfiprintf_r+0x2e>
 80108a8:	230c      	movs	r3, #12
 80108aa:	603b      	str	r3, [r7, #0]
 80108ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108b0:	e0d1      	b.n	8010a56 <_svfiprintf_r+0x1d2>
 80108b2:	2340      	movs	r3, #64	; 0x40
 80108b4:	616b      	str	r3, [r5, #20]
 80108b6:	2300      	movs	r3, #0
 80108b8:	9309      	str	r3, [sp, #36]	; 0x24
 80108ba:	2320      	movs	r3, #32
 80108bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108c0:	2330      	movs	r3, #48	; 0x30
 80108c2:	f04f 0901 	mov.w	r9, #1
 80108c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80108ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010a70 <_svfiprintf_r+0x1ec>
 80108ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108d2:	4623      	mov	r3, r4
 80108d4:	469a      	mov	sl, r3
 80108d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108da:	b10a      	cbz	r2, 80108e0 <_svfiprintf_r+0x5c>
 80108dc:	2a25      	cmp	r2, #37	; 0x25
 80108de:	d1f9      	bne.n	80108d4 <_svfiprintf_r+0x50>
 80108e0:	ebba 0b04 	subs.w	fp, sl, r4
 80108e4:	d00b      	beq.n	80108fe <_svfiprintf_r+0x7a>
 80108e6:	465b      	mov	r3, fp
 80108e8:	4622      	mov	r2, r4
 80108ea:	4629      	mov	r1, r5
 80108ec:	4638      	mov	r0, r7
 80108ee:	f7ff ff6d 	bl	80107cc <__ssputs_r>
 80108f2:	3001      	adds	r0, #1
 80108f4:	f000 80aa 	beq.w	8010a4c <_svfiprintf_r+0x1c8>
 80108f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108fa:	445a      	add	r2, fp
 80108fc:	9209      	str	r2, [sp, #36]	; 0x24
 80108fe:	f89a 3000 	ldrb.w	r3, [sl]
 8010902:	2b00      	cmp	r3, #0
 8010904:	f000 80a2 	beq.w	8010a4c <_svfiprintf_r+0x1c8>
 8010908:	2300      	movs	r3, #0
 801090a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801090e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010912:	f10a 0a01 	add.w	sl, sl, #1
 8010916:	9304      	str	r3, [sp, #16]
 8010918:	9307      	str	r3, [sp, #28]
 801091a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801091e:	931a      	str	r3, [sp, #104]	; 0x68
 8010920:	4654      	mov	r4, sl
 8010922:	2205      	movs	r2, #5
 8010924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010928:	4851      	ldr	r0, [pc, #324]	; (8010a70 <_svfiprintf_r+0x1ec>)
 801092a:	f7ff facf 	bl	800fecc <memchr>
 801092e:	9a04      	ldr	r2, [sp, #16]
 8010930:	b9d8      	cbnz	r0, 801096a <_svfiprintf_r+0xe6>
 8010932:	06d0      	lsls	r0, r2, #27
 8010934:	bf44      	itt	mi
 8010936:	2320      	movmi	r3, #32
 8010938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801093c:	0711      	lsls	r1, r2, #28
 801093e:	bf44      	itt	mi
 8010940:	232b      	movmi	r3, #43	; 0x2b
 8010942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010946:	f89a 3000 	ldrb.w	r3, [sl]
 801094a:	2b2a      	cmp	r3, #42	; 0x2a
 801094c:	d015      	beq.n	801097a <_svfiprintf_r+0xf6>
 801094e:	4654      	mov	r4, sl
 8010950:	2000      	movs	r0, #0
 8010952:	f04f 0c0a 	mov.w	ip, #10
 8010956:	9a07      	ldr	r2, [sp, #28]
 8010958:	4621      	mov	r1, r4
 801095a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801095e:	3b30      	subs	r3, #48	; 0x30
 8010960:	2b09      	cmp	r3, #9
 8010962:	d94e      	bls.n	8010a02 <_svfiprintf_r+0x17e>
 8010964:	b1b0      	cbz	r0, 8010994 <_svfiprintf_r+0x110>
 8010966:	9207      	str	r2, [sp, #28]
 8010968:	e014      	b.n	8010994 <_svfiprintf_r+0x110>
 801096a:	eba0 0308 	sub.w	r3, r0, r8
 801096e:	fa09 f303 	lsl.w	r3, r9, r3
 8010972:	4313      	orrs	r3, r2
 8010974:	46a2      	mov	sl, r4
 8010976:	9304      	str	r3, [sp, #16]
 8010978:	e7d2      	b.n	8010920 <_svfiprintf_r+0x9c>
 801097a:	9b03      	ldr	r3, [sp, #12]
 801097c:	1d19      	adds	r1, r3, #4
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	9103      	str	r1, [sp, #12]
 8010982:	2b00      	cmp	r3, #0
 8010984:	bfbb      	ittet	lt
 8010986:	425b      	neglt	r3, r3
 8010988:	f042 0202 	orrlt.w	r2, r2, #2
 801098c:	9307      	strge	r3, [sp, #28]
 801098e:	9307      	strlt	r3, [sp, #28]
 8010990:	bfb8      	it	lt
 8010992:	9204      	strlt	r2, [sp, #16]
 8010994:	7823      	ldrb	r3, [r4, #0]
 8010996:	2b2e      	cmp	r3, #46	; 0x2e
 8010998:	d10c      	bne.n	80109b4 <_svfiprintf_r+0x130>
 801099a:	7863      	ldrb	r3, [r4, #1]
 801099c:	2b2a      	cmp	r3, #42	; 0x2a
 801099e:	d135      	bne.n	8010a0c <_svfiprintf_r+0x188>
 80109a0:	9b03      	ldr	r3, [sp, #12]
 80109a2:	3402      	adds	r4, #2
 80109a4:	1d1a      	adds	r2, r3, #4
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	9203      	str	r2, [sp, #12]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	bfb8      	it	lt
 80109ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80109b2:	9305      	str	r3, [sp, #20]
 80109b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8010a74 <_svfiprintf_r+0x1f0>
 80109b8:	2203      	movs	r2, #3
 80109ba:	4650      	mov	r0, sl
 80109bc:	7821      	ldrb	r1, [r4, #0]
 80109be:	f7ff fa85 	bl	800fecc <memchr>
 80109c2:	b140      	cbz	r0, 80109d6 <_svfiprintf_r+0x152>
 80109c4:	2340      	movs	r3, #64	; 0x40
 80109c6:	eba0 000a 	sub.w	r0, r0, sl
 80109ca:	fa03 f000 	lsl.w	r0, r3, r0
 80109ce:	9b04      	ldr	r3, [sp, #16]
 80109d0:	3401      	adds	r4, #1
 80109d2:	4303      	orrs	r3, r0
 80109d4:	9304      	str	r3, [sp, #16]
 80109d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109da:	2206      	movs	r2, #6
 80109dc:	4826      	ldr	r0, [pc, #152]	; (8010a78 <_svfiprintf_r+0x1f4>)
 80109de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80109e2:	f7ff fa73 	bl	800fecc <memchr>
 80109e6:	2800      	cmp	r0, #0
 80109e8:	d038      	beq.n	8010a5c <_svfiprintf_r+0x1d8>
 80109ea:	4b24      	ldr	r3, [pc, #144]	; (8010a7c <_svfiprintf_r+0x1f8>)
 80109ec:	bb1b      	cbnz	r3, 8010a36 <_svfiprintf_r+0x1b2>
 80109ee:	9b03      	ldr	r3, [sp, #12]
 80109f0:	3307      	adds	r3, #7
 80109f2:	f023 0307 	bic.w	r3, r3, #7
 80109f6:	3308      	adds	r3, #8
 80109f8:	9303      	str	r3, [sp, #12]
 80109fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109fc:	4433      	add	r3, r6
 80109fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010a00:	e767      	b.n	80108d2 <_svfiprintf_r+0x4e>
 8010a02:	460c      	mov	r4, r1
 8010a04:	2001      	movs	r0, #1
 8010a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a0a:	e7a5      	b.n	8010958 <_svfiprintf_r+0xd4>
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	f04f 0c0a 	mov.w	ip, #10
 8010a12:	4619      	mov	r1, r3
 8010a14:	3401      	adds	r4, #1
 8010a16:	9305      	str	r3, [sp, #20]
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a1e:	3a30      	subs	r2, #48	; 0x30
 8010a20:	2a09      	cmp	r2, #9
 8010a22:	d903      	bls.n	8010a2c <_svfiprintf_r+0x1a8>
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d0c5      	beq.n	80109b4 <_svfiprintf_r+0x130>
 8010a28:	9105      	str	r1, [sp, #20]
 8010a2a:	e7c3      	b.n	80109b4 <_svfiprintf_r+0x130>
 8010a2c:	4604      	mov	r4, r0
 8010a2e:	2301      	movs	r3, #1
 8010a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a34:	e7f0      	b.n	8010a18 <_svfiprintf_r+0x194>
 8010a36:	ab03      	add	r3, sp, #12
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	462a      	mov	r2, r5
 8010a3c:	4638      	mov	r0, r7
 8010a3e:	4b10      	ldr	r3, [pc, #64]	; (8010a80 <_svfiprintf_r+0x1fc>)
 8010a40:	a904      	add	r1, sp, #16
 8010a42:	f7fd ffc5 	bl	800e9d0 <_printf_float>
 8010a46:	1c42      	adds	r2, r0, #1
 8010a48:	4606      	mov	r6, r0
 8010a4a:	d1d6      	bne.n	80109fa <_svfiprintf_r+0x176>
 8010a4c:	89ab      	ldrh	r3, [r5, #12]
 8010a4e:	065b      	lsls	r3, r3, #25
 8010a50:	f53f af2c 	bmi.w	80108ac <_svfiprintf_r+0x28>
 8010a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a56:	b01d      	add	sp, #116	; 0x74
 8010a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a5c:	ab03      	add	r3, sp, #12
 8010a5e:	9300      	str	r3, [sp, #0]
 8010a60:	462a      	mov	r2, r5
 8010a62:	4638      	mov	r0, r7
 8010a64:	4b06      	ldr	r3, [pc, #24]	; (8010a80 <_svfiprintf_r+0x1fc>)
 8010a66:	a904      	add	r1, sp, #16
 8010a68:	f7fe fa4e 	bl	800ef08 <_printf_i>
 8010a6c:	e7eb      	b.n	8010a46 <_svfiprintf_r+0x1c2>
 8010a6e:	bf00      	nop
 8010a70:	08012034 	.word	0x08012034
 8010a74:	0801203a 	.word	0x0801203a
 8010a78:	0801203e 	.word	0x0801203e
 8010a7c:	0800e9d1 	.word	0x0800e9d1
 8010a80:	080107cd 	.word	0x080107cd

08010a84 <_sbrk_r>:
 8010a84:	b538      	push	{r3, r4, r5, lr}
 8010a86:	2300      	movs	r3, #0
 8010a88:	4d05      	ldr	r5, [pc, #20]	; (8010aa0 <_sbrk_r+0x1c>)
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	4608      	mov	r0, r1
 8010a8e:	602b      	str	r3, [r5, #0]
 8010a90:	f7f2 fc20 	bl	80032d4 <_sbrk>
 8010a94:	1c43      	adds	r3, r0, #1
 8010a96:	d102      	bne.n	8010a9e <_sbrk_r+0x1a>
 8010a98:	682b      	ldr	r3, [r5, #0]
 8010a9a:	b103      	cbz	r3, 8010a9e <_sbrk_r+0x1a>
 8010a9c:	6023      	str	r3, [r4, #0]
 8010a9e:	bd38      	pop	{r3, r4, r5, pc}
 8010aa0:	20000290 	.word	0x20000290

08010aa4 <__assert_func>:
 8010aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010aa6:	4614      	mov	r4, r2
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	4b09      	ldr	r3, [pc, #36]	; (8010ad0 <__assert_func+0x2c>)
 8010aac:	4605      	mov	r5, r0
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	68d8      	ldr	r0, [r3, #12]
 8010ab2:	b14c      	cbz	r4, 8010ac8 <__assert_func+0x24>
 8010ab4:	4b07      	ldr	r3, [pc, #28]	; (8010ad4 <__assert_func+0x30>)
 8010ab6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010aba:	9100      	str	r1, [sp, #0]
 8010abc:	462b      	mov	r3, r5
 8010abe:	4906      	ldr	r1, [pc, #24]	; (8010ad8 <__assert_func+0x34>)
 8010ac0:	f000 f80e 	bl	8010ae0 <fiprintf>
 8010ac4:	f000 faaa 	bl	801101c <abort>
 8010ac8:	4b04      	ldr	r3, [pc, #16]	; (8010adc <__assert_func+0x38>)
 8010aca:	461c      	mov	r4, r3
 8010acc:	e7f3      	b.n	8010ab6 <__assert_func+0x12>
 8010ace:	bf00      	nop
 8010ad0:	20000070 	.word	0x20000070
 8010ad4:	08012045 	.word	0x08012045
 8010ad8:	08012052 	.word	0x08012052
 8010adc:	08012080 	.word	0x08012080

08010ae0 <fiprintf>:
 8010ae0:	b40e      	push	{r1, r2, r3}
 8010ae2:	b503      	push	{r0, r1, lr}
 8010ae4:	4601      	mov	r1, r0
 8010ae6:	ab03      	add	r3, sp, #12
 8010ae8:	4805      	ldr	r0, [pc, #20]	; (8010b00 <fiprintf+0x20>)
 8010aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aee:	6800      	ldr	r0, [r0, #0]
 8010af0:	9301      	str	r3, [sp, #4]
 8010af2:	f000 f895 	bl	8010c20 <_vfiprintf_r>
 8010af6:	b002      	add	sp, #8
 8010af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010afc:	b003      	add	sp, #12
 8010afe:	4770      	bx	lr
 8010b00:	20000070 	.word	0x20000070

08010b04 <__ascii_mbtowc>:
 8010b04:	b082      	sub	sp, #8
 8010b06:	b901      	cbnz	r1, 8010b0a <__ascii_mbtowc+0x6>
 8010b08:	a901      	add	r1, sp, #4
 8010b0a:	b142      	cbz	r2, 8010b1e <__ascii_mbtowc+0x1a>
 8010b0c:	b14b      	cbz	r3, 8010b22 <__ascii_mbtowc+0x1e>
 8010b0e:	7813      	ldrb	r3, [r2, #0]
 8010b10:	600b      	str	r3, [r1, #0]
 8010b12:	7812      	ldrb	r2, [r2, #0]
 8010b14:	1e10      	subs	r0, r2, #0
 8010b16:	bf18      	it	ne
 8010b18:	2001      	movne	r0, #1
 8010b1a:	b002      	add	sp, #8
 8010b1c:	4770      	bx	lr
 8010b1e:	4610      	mov	r0, r2
 8010b20:	e7fb      	b.n	8010b1a <__ascii_mbtowc+0x16>
 8010b22:	f06f 0001 	mvn.w	r0, #1
 8010b26:	e7f8      	b.n	8010b1a <__ascii_mbtowc+0x16>

08010b28 <memmove>:
 8010b28:	4288      	cmp	r0, r1
 8010b2a:	b510      	push	{r4, lr}
 8010b2c:	eb01 0402 	add.w	r4, r1, r2
 8010b30:	d902      	bls.n	8010b38 <memmove+0x10>
 8010b32:	4284      	cmp	r4, r0
 8010b34:	4623      	mov	r3, r4
 8010b36:	d807      	bhi.n	8010b48 <memmove+0x20>
 8010b38:	1e43      	subs	r3, r0, #1
 8010b3a:	42a1      	cmp	r1, r4
 8010b3c:	d008      	beq.n	8010b50 <memmove+0x28>
 8010b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b46:	e7f8      	b.n	8010b3a <memmove+0x12>
 8010b48:	4601      	mov	r1, r0
 8010b4a:	4402      	add	r2, r0
 8010b4c:	428a      	cmp	r2, r1
 8010b4e:	d100      	bne.n	8010b52 <memmove+0x2a>
 8010b50:	bd10      	pop	{r4, pc}
 8010b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b5a:	e7f7      	b.n	8010b4c <memmove+0x24>

08010b5c <__malloc_lock>:
 8010b5c:	4801      	ldr	r0, [pc, #4]	; (8010b64 <__malloc_lock+0x8>)
 8010b5e:	f000 bc19 	b.w	8011394 <__retarget_lock_acquire_recursive>
 8010b62:	bf00      	nop
 8010b64:	20000294 	.word	0x20000294

08010b68 <__malloc_unlock>:
 8010b68:	4801      	ldr	r0, [pc, #4]	; (8010b70 <__malloc_unlock+0x8>)
 8010b6a:	f000 bc14 	b.w	8011396 <__retarget_lock_release_recursive>
 8010b6e:	bf00      	nop
 8010b70:	20000294 	.word	0x20000294

08010b74 <_realloc_r>:
 8010b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b78:	4680      	mov	r8, r0
 8010b7a:	4614      	mov	r4, r2
 8010b7c:	460e      	mov	r6, r1
 8010b7e:	b921      	cbnz	r1, 8010b8a <_realloc_r+0x16>
 8010b80:	4611      	mov	r1, r2
 8010b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b86:	f7ff bdad 	b.w	80106e4 <_malloc_r>
 8010b8a:	b92a      	cbnz	r2, 8010b98 <_realloc_r+0x24>
 8010b8c:	f7ff fd42 	bl	8010614 <_free_r>
 8010b90:	4625      	mov	r5, r4
 8010b92:	4628      	mov	r0, r5
 8010b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b98:	f000 fc64 	bl	8011464 <_malloc_usable_size_r>
 8010b9c:	4284      	cmp	r4, r0
 8010b9e:	4607      	mov	r7, r0
 8010ba0:	d802      	bhi.n	8010ba8 <_realloc_r+0x34>
 8010ba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010ba6:	d812      	bhi.n	8010bce <_realloc_r+0x5a>
 8010ba8:	4621      	mov	r1, r4
 8010baa:	4640      	mov	r0, r8
 8010bac:	f7ff fd9a 	bl	80106e4 <_malloc_r>
 8010bb0:	4605      	mov	r5, r0
 8010bb2:	2800      	cmp	r0, #0
 8010bb4:	d0ed      	beq.n	8010b92 <_realloc_r+0x1e>
 8010bb6:	42bc      	cmp	r4, r7
 8010bb8:	4622      	mov	r2, r4
 8010bba:	4631      	mov	r1, r6
 8010bbc:	bf28      	it	cs
 8010bbe:	463a      	movcs	r2, r7
 8010bc0:	f7fd fe52 	bl	800e868 <memcpy>
 8010bc4:	4631      	mov	r1, r6
 8010bc6:	4640      	mov	r0, r8
 8010bc8:	f7ff fd24 	bl	8010614 <_free_r>
 8010bcc:	e7e1      	b.n	8010b92 <_realloc_r+0x1e>
 8010bce:	4635      	mov	r5, r6
 8010bd0:	e7df      	b.n	8010b92 <_realloc_r+0x1e>

08010bd2 <__sfputc_r>:
 8010bd2:	6893      	ldr	r3, [r2, #8]
 8010bd4:	b410      	push	{r4}
 8010bd6:	3b01      	subs	r3, #1
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	6093      	str	r3, [r2, #8]
 8010bdc:	da07      	bge.n	8010bee <__sfputc_r+0x1c>
 8010bde:	6994      	ldr	r4, [r2, #24]
 8010be0:	42a3      	cmp	r3, r4
 8010be2:	db01      	blt.n	8010be8 <__sfputc_r+0x16>
 8010be4:	290a      	cmp	r1, #10
 8010be6:	d102      	bne.n	8010bee <__sfputc_r+0x1c>
 8010be8:	bc10      	pop	{r4}
 8010bea:	f000 b949 	b.w	8010e80 <__swbuf_r>
 8010bee:	6813      	ldr	r3, [r2, #0]
 8010bf0:	1c58      	adds	r0, r3, #1
 8010bf2:	6010      	str	r0, [r2, #0]
 8010bf4:	7019      	strb	r1, [r3, #0]
 8010bf6:	4608      	mov	r0, r1
 8010bf8:	bc10      	pop	{r4}
 8010bfa:	4770      	bx	lr

08010bfc <__sfputs_r>:
 8010bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bfe:	4606      	mov	r6, r0
 8010c00:	460f      	mov	r7, r1
 8010c02:	4614      	mov	r4, r2
 8010c04:	18d5      	adds	r5, r2, r3
 8010c06:	42ac      	cmp	r4, r5
 8010c08:	d101      	bne.n	8010c0e <__sfputs_r+0x12>
 8010c0a:	2000      	movs	r0, #0
 8010c0c:	e007      	b.n	8010c1e <__sfputs_r+0x22>
 8010c0e:	463a      	mov	r2, r7
 8010c10:	4630      	mov	r0, r6
 8010c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c16:	f7ff ffdc 	bl	8010bd2 <__sfputc_r>
 8010c1a:	1c43      	adds	r3, r0, #1
 8010c1c:	d1f3      	bne.n	8010c06 <__sfputs_r+0xa>
 8010c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010c20 <_vfiprintf_r>:
 8010c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c24:	460d      	mov	r5, r1
 8010c26:	4614      	mov	r4, r2
 8010c28:	4698      	mov	r8, r3
 8010c2a:	4606      	mov	r6, r0
 8010c2c:	b09d      	sub	sp, #116	; 0x74
 8010c2e:	b118      	cbz	r0, 8010c38 <_vfiprintf_r+0x18>
 8010c30:	6983      	ldr	r3, [r0, #24]
 8010c32:	b90b      	cbnz	r3, 8010c38 <_vfiprintf_r+0x18>
 8010c34:	f000 fb10 	bl	8011258 <__sinit>
 8010c38:	4b89      	ldr	r3, [pc, #548]	; (8010e60 <_vfiprintf_r+0x240>)
 8010c3a:	429d      	cmp	r5, r3
 8010c3c:	d11b      	bne.n	8010c76 <_vfiprintf_r+0x56>
 8010c3e:	6875      	ldr	r5, [r6, #4]
 8010c40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c42:	07d9      	lsls	r1, r3, #31
 8010c44:	d405      	bmi.n	8010c52 <_vfiprintf_r+0x32>
 8010c46:	89ab      	ldrh	r3, [r5, #12]
 8010c48:	059a      	lsls	r2, r3, #22
 8010c4a:	d402      	bmi.n	8010c52 <_vfiprintf_r+0x32>
 8010c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c4e:	f000 fba1 	bl	8011394 <__retarget_lock_acquire_recursive>
 8010c52:	89ab      	ldrh	r3, [r5, #12]
 8010c54:	071b      	lsls	r3, r3, #28
 8010c56:	d501      	bpl.n	8010c5c <_vfiprintf_r+0x3c>
 8010c58:	692b      	ldr	r3, [r5, #16]
 8010c5a:	b9eb      	cbnz	r3, 8010c98 <_vfiprintf_r+0x78>
 8010c5c:	4629      	mov	r1, r5
 8010c5e:	4630      	mov	r0, r6
 8010c60:	f000 f96e 	bl	8010f40 <__swsetup_r>
 8010c64:	b1c0      	cbz	r0, 8010c98 <_vfiprintf_r+0x78>
 8010c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c68:	07dc      	lsls	r4, r3, #31
 8010c6a:	d50e      	bpl.n	8010c8a <_vfiprintf_r+0x6a>
 8010c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c70:	b01d      	add	sp, #116	; 0x74
 8010c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c76:	4b7b      	ldr	r3, [pc, #492]	; (8010e64 <_vfiprintf_r+0x244>)
 8010c78:	429d      	cmp	r5, r3
 8010c7a:	d101      	bne.n	8010c80 <_vfiprintf_r+0x60>
 8010c7c:	68b5      	ldr	r5, [r6, #8]
 8010c7e:	e7df      	b.n	8010c40 <_vfiprintf_r+0x20>
 8010c80:	4b79      	ldr	r3, [pc, #484]	; (8010e68 <_vfiprintf_r+0x248>)
 8010c82:	429d      	cmp	r5, r3
 8010c84:	bf08      	it	eq
 8010c86:	68f5      	ldreq	r5, [r6, #12]
 8010c88:	e7da      	b.n	8010c40 <_vfiprintf_r+0x20>
 8010c8a:	89ab      	ldrh	r3, [r5, #12]
 8010c8c:	0598      	lsls	r0, r3, #22
 8010c8e:	d4ed      	bmi.n	8010c6c <_vfiprintf_r+0x4c>
 8010c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c92:	f000 fb80 	bl	8011396 <__retarget_lock_release_recursive>
 8010c96:	e7e9      	b.n	8010c6c <_vfiprintf_r+0x4c>
 8010c98:	2300      	movs	r3, #0
 8010c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8010c9c:	2320      	movs	r3, #32
 8010c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ca2:	2330      	movs	r3, #48	; 0x30
 8010ca4:	f04f 0901 	mov.w	r9, #1
 8010ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8010e6c <_vfiprintf_r+0x24c>
 8010cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010cb4:	4623      	mov	r3, r4
 8010cb6:	469a      	mov	sl, r3
 8010cb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cbc:	b10a      	cbz	r2, 8010cc2 <_vfiprintf_r+0xa2>
 8010cbe:	2a25      	cmp	r2, #37	; 0x25
 8010cc0:	d1f9      	bne.n	8010cb6 <_vfiprintf_r+0x96>
 8010cc2:	ebba 0b04 	subs.w	fp, sl, r4
 8010cc6:	d00b      	beq.n	8010ce0 <_vfiprintf_r+0xc0>
 8010cc8:	465b      	mov	r3, fp
 8010cca:	4622      	mov	r2, r4
 8010ccc:	4629      	mov	r1, r5
 8010cce:	4630      	mov	r0, r6
 8010cd0:	f7ff ff94 	bl	8010bfc <__sfputs_r>
 8010cd4:	3001      	adds	r0, #1
 8010cd6:	f000 80aa 	beq.w	8010e2e <_vfiprintf_r+0x20e>
 8010cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cdc:	445a      	add	r2, fp
 8010cde:	9209      	str	r2, [sp, #36]	; 0x24
 8010ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f000 80a2 	beq.w	8010e2e <_vfiprintf_r+0x20e>
 8010cea:	2300      	movs	r3, #0
 8010cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cf4:	f10a 0a01 	add.w	sl, sl, #1
 8010cf8:	9304      	str	r3, [sp, #16]
 8010cfa:	9307      	str	r3, [sp, #28]
 8010cfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d00:	931a      	str	r3, [sp, #104]	; 0x68
 8010d02:	4654      	mov	r4, sl
 8010d04:	2205      	movs	r2, #5
 8010d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d0a:	4858      	ldr	r0, [pc, #352]	; (8010e6c <_vfiprintf_r+0x24c>)
 8010d0c:	f7ff f8de 	bl	800fecc <memchr>
 8010d10:	9a04      	ldr	r2, [sp, #16]
 8010d12:	b9d8      	cbnz	r0, 8010d4c <_vfiprintf_r+0x12c>
 8010d14:	06d1      	lsls	r1, r2, #27
 8010d16:	bf44      	itt	mi
 8010d18:	2320      	movmi	r3, #32
 8010d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d1e:	0713      	lsls	r3, r2, #28
 8010d20:	bf44      	itt	mi
 8010d22:	232b      	movmi	r3, #43	; 0x2b
 8010d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d28:	f89a 3000 	ldrb.w	r3, [sl]
 8010d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8010d2e:	d015      	beq.n	8010d5c <_vfiprintf_r+0x13c>
 8010d30:	4654      	mov	r4, sl
 8010d32:	2000      	movs	r0, #0
 8010d34:	f04f 0c0a 	mov.w	ip, #10
 8010d38:	9a07      	ldr	r2, [sp, #28]
 8010d3a:	4621      	mov	r1, r4
 8010d3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d40:	3b30      	subs	r3, #48	; 0x30
 8010d42:	2b09      	cmp	r3, #9
 8010d44:	d94e      	bls.n	8010de4 <_vfiprintf_r+0x1c4>
 8010d46:	b1b0      	cbz	r0, 8010d76 <_vfiprintf_r+0x156>
 8010d48:	9207      	str	r2, [sp, #28]
 8010d4a:	e014      	b.n	8010d76 <_vfiprintf_r+0x156>
 8010d4c:	eba0 0308 	sub.w	r3, r0, r8
 8010d50:	fa09 f303 	lsl.w	r3, r9, r3
 8010d54:	4313      	orrs	r3, r2
 8010d56:	46a2      	mov	sl, r4
 8010d58:	9304      	str	r3, [sp, #16]
 8010d5a:	e7d2      	b.n	8010d02 <_vfiprintf_r+0xe2>
 8010d5c:	9b03      	ldr	r3, [sp, #12]
 8010d5e:	1d19      	adds	r1, r3, #4
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	9103      	str	r1, [sp, #12]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	bfbb      	ittet	lt
 8010d68:	425b      	neglt	r3, r3
 8010d6a:	f042 0202 	orrlt.w	r2, r2, #2
 8010d6e:	9307      	strge	r3, [sp, #28]
 8010d70:	9307      	strlt	r3, [sp, #28]
 8010d72:	bfb8      	it	lt
 8010d74:	9204      	strlt	r2, [sp, #16]
 8010d76:	7823      	ldrb	r3, [r4, #0]
 8010d78:	2b2e      	cmp	r3, #46	; 0x2e
 8010d7a:	d10c      	bne.n	8010d96 <_vfiprintf_r+0x176>
 8010d7c:	7863      	ldrb	r3, [r4, #1]
 8010d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8010d80:	d135      	bne.n	8010dee <_vfiprintf_r+0x1ce>
 8010d82:	9b03      	ldr	r3, [sp, #12]
 8010d84:	3402      	adds	r4, #2
 8010d86:	1d1a      	adds	r2, r3, #4
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	9203      	str	r2, [sp, #12]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	bfb8      	it	lt
 8010d90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010d94:	9305      	str	r3, [sp, #20]
 8010d96:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8010e70 <_vfiprintf_r+0x250>
 8010d9a:	2203      	movs	r2, #3
 8010d9c:	4650      	mov	r0, sl
 8010d9e:	7821      	ldrb	r1, [r4, #0]
 8010da0:	f7ff f894 	bl	800fecc <memchr>
 8010da4:	b140      	cbz	r0, 8010db8 <_vfiprintf_r+0x198>
 8010da6:	2340      	movs	r3, #64	; 0x40
 8010da8:	eba0 000a 	sub.w	r0, r0, sl
 8010dac:	fa03 f000 	lsl.w	r0, r3, r0
 8010db0:	9b04      	ldr	r3, [sp, #16]
 8010db2:	3401      	adds	r4, #1
 8010db4:	4303      	orrs	r3, r0
 8010db6:	9304      	str	r3, [sp, #16]
 8010db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dbc:	2206      	movs	r2, #6
 8010dbe:	482d      	ldr	r0, [pc, #180]	; (8010e74 <_vfiprintf_r+0x254>)
 8010dc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010dc4:	f7ff f882 	bl	800fecc <memchr>
 8010dc8:	2800      	cmp	r0, #0
 8010dca:	d03f      	beq.n	8010e4c <_vfiprintf_r+0x22c>
 8010dcc:	4b2a      	ldr	r3, [pc, #168]	; (8010e78 <_vfiprintf_r+0x258>)
 8010dce:	bb1b      	cbnz	r3, 8010e18 <_vfiprintf_r+0x1f8>
 8010dd0:	9b03      	ldr	r3, [sp, #12]
 8010dd2:	3307      	adds	r3, #7
 8010dd4:	f023 0307 	bic.w	r3, r3, #7
 8010dd8:	3308      	adds	r3, #8
 8010dda:	9303      	str	r3, [sp, #12]
 8010ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dde:	443b      	add	r3, r7
 8010de0:	9309      	str	r3, [sp, #36]	; 0x24
 8010de2:	e767      	b.n	8010cb4 <_vfiprintf_r+0x94>
 8010de4:	460c      	mov	r4, r1
 8010de6:	2001      	movs	r0, #1
 8010de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dec:	e7a5      	b.n	8010d3a <_vfiprintf_r+0x11a>
 8010dee:	2300      	movs	r3, #0
 8010df0:	f04f 0c0a 	mov.w	ip, #10
 8010df4:	4619      	mov	r1, r3
 8010df6:	3401      	adds	r4, #1
 8010df8:	9305      	str	r3, [sp, #20]
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e00:	3a30      	subs	r2, #48	; 0x30
 8010e02:	2a09      	cmp	r2, #9
 8010e04:	d903      	bls.n	8010e0e <_vfiprintf_r+0x1ee>
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d0c5      	beq.n	8010d96 <_vfiprintf_r+0x176>
 8010e0a:	9105      	str	r1, [sp, #20]
 8010e0c:	e7c3      	b.n	8010d96 <_vfiprintf_r+0x176>
 8010e0e:	4604      	mov	r4, r0
 8010e10:	2301      	movs	r3, #1
 8010e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e16:	e7f0      	b.n	8010dfa <_vfiprintf_r+0x1da>
 8010e18:	ab03      	add	r3, sp, #12
 8010e1a:	9300      	str	r3, [sp, #0]
 8010e1c:	462a      	mov	r2, r5
 8010e1e:	4630      	mov	r0, r6
 8010e20:	4b16      	ldr	r3, [pc, #88]	; (8010e7c <_vfiprintf_r+0x25c>)
 8010e22:	a904      	add	r1, sp, #16
 8010e24:	f7fd fdd4 	bl	800e9d0 <_printf_float>
 8010e28:	4607      	mov	r7, r0
 8010e2a:	1c78      	adds	r0, r7, #1
 8010e2c:	d1d6      	bne.n	8010ddc <_vfiprintf_r+0x1bc>
 8010e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e30:	07d9      	lsls	r1, r3, #31
 8010e32:	d405      	bmi.n	8010e40 <_vfiprintf_r+0x220>
 8010e34:	89ab      	ldrh	r3, [r5, #12]
 8010e36:	059a      	lsls	r2, r3, #22
 8010e38:	d402      	bmi.n	8010e40 <_vfiprintf_r+0x220>
 8010e3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e3c:	f000 faab 	bl	8011396 <__retarget_lock_release_recursive>
 8010e40:	89ab      	ldrh	r3, [r5, #12]
 8010e42:	065b      	lsls	r3, r3, #25
 8010e44:	f53f af12 	bmi.w	8010c6c <_vfiprintf_r+0x4c>
 8010e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e4a:	e711      	b.n	8010c70 <_vfiprintf_r+0x50>
 8010e4c:	ab03      	add	r3, sp, #12
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	462a      	mov	r2, r5
 8010e52:	4630      	mov	r0, r6
 8010e54:	4b09      	ldr	r3, [pc, #36]	; (8010e7c <_vfiprintf_r+0x25c>)
 8010e56:	a904      	add	r1, sp, #16
 8010e58:	f7fe f856 	bl	800ef08 <_printf_i>
 8010e5c:	e7e4      	b.n	8010e28 <_vfiprintf_r+0x208>
 8010e5e:	bf00      	nop
 8010e60:	080121ac 	.word	0x080121ac
 8010e64:	080121cc 	.word	0x080121cc
 8010e68:	0801218c 	.word	0x0801218c
 8010e6c:	08012034 	.word	0x08012034
 8010e70:	0801203a 	.word	0x0801203a
 8010e74:	0801203e 	.word	0x0801203e
 8010e78:	0800e9d1 	.word	0x0800e9d1
 8010e7c:	08010bfd 	.word	0x08010bfd

08010e80 <__swbuf_r>:
 8010e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e82:	460e      	mov	r6, r1
 8010e84:	4614      	mov	r4, r2
 8010e86:	4605      	mov	r5, r0
 8010e88:	b118      	cbz	r0, 8010e92 <__swbuf_r+0x12>
 8010e8a:	6983      	ldr	r3, [r0, #24]
 8010e8c:	b90b      	cbnz	r3, 8010e92 <__swbuf_r+0x12>
 8010e8e:	f000 f9e3 	bl	8011258 <__sinit>
 8010e92:	4b21      	ldr	r3, [pc, #132]	; (8010f18 <__swbuf_r+0x98>)
 8010e94:	429c      	cmp	r4, r3
 8010e96:	d12b      	bne.n	8010ef0 <__swbuf_r+0x70>
 8010e98:	686c      	ldr	r4, [r5, #4]
 8010e9a:	69a3      	ldr	r3, [r4, #24]
 8010e9c:	60a3      	str	r3, [r4, #8]
 8010e9e:	89a3      	ldrh	r3, [r4, #12]
 8010ea0:	071a      	lsls	r2, r3, #28
 8010ea2:	d52f      	bpl.n	8010f04 <__swbuf_r+0x84>
 8010ea4:	6923      	ldr	r3, [r4, #16]
 8010ea6:	b36b      	cbz	r3, 8010f04 <__swbuf_r+0x84>
 8010ea8:	6923      	ldr	r3, [r4, #16]
 8010eaa:	6820      	ldr	r0, [r4, #0]
 8010eac:	b2f6      	uxtb	r6, r6
 8010eae:	1ac0      	subs	r0, r0, r3
 8010eb0:	6963      	ldr	r3, [r4, #20]
 8010eb2:	4637      	mov	r7, r6
 8010eb4:	4283      	cmp	r3, r0
 8010eb6:	dc04      	bgt.n	8010ec2 <__swbuf_r+0x42>
 8010eb8:	4621      	mov	r1, r4
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f000 f938 	bl	8011130 <_fflush_r>
 8010ec0:	bb30      	cbnz	r0, 8010f10 <__swbuf_r+0x90>
 8010ec2:	68a3      	ldr	r3, [r4, #8]
 8010ec4:	3001      	adds	r0, #1
 8010ec6:	3b01      	subs	r3, #1
 8010ec8:	60a3      	str	r3, [r4, #8]
 8010eca:	6823      	ldr	r3, [r4, #0]
 8010ecc:	1c5a      	adds	r2, r3, #1
 8010ece:	6022      	str	r2, [r4, #0]
 8010ed0:	701e      	strb	r6, [r3, #0]
 8010ed2:	6963      	ldr	r3, [r4, #20]
 8010ed4:	4283      	cmp	r3, r0
 8010ed6:	d004      	beq.n	8010ee2 <__swbuf_r+0x62>
 8010ed8:	89a3      	ldrh	r3, [r4, #12]
 8010eda:	07db      	lsls	r3, r3, #31
 8010edc:	d506      	bpl.n	8010eec <__swbuf_r+0x6c>
 8010ede:	2e0a      	cmp	r6, #10
 8010ee0:	d104      	bne.n	8010eec <__swbuf_r+0x6c>
 8010ee2:	4621      	mov	r1, r4
 8010ee4:	4628      	mov	r0, r5
 8010ee6:	f000 f923 	bl	8011130 <_fflush_r>
 8010eea:	b988      	cbnz	r0, 8010f10 <__swbuf_r+0x90>
 8010eec:	4638      	mov	r0, r7
 8010eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ef0:	4b0a      	ldr	r3, [pc, #40]	; (8010f1c <__swbuf_r+0x9c>)
 8010ef2:	429c      	cmp	r4, r3
 8010ef4:	d101      	bne.n	8010efa <__swbuf_r+0x7a>
 8010ef6:	68ac      	ldr	r4, [r5, #8]
 8010ef8:	e7cf      	b.n	8010e9a <__swbuf_r+0x1a>
 8010efa:	4b09      	ldr	r3, [pc, #36]	; (8010f20 <__swbuf_r+0xa0>)
 8010efc:	429c      	cmp	r4, r3
 8010efe:	bf08      	it	eq
 8010f00:	68ec      	ldreq	r4, [r5, #12]
 8010f02:	e7ca      	b.n	8010e9a <__swbuf_r+0x1a>
 8010f04:	4621      	mov	r1, r4
 8010f06:	4628      	mov	r0, r5
 8010f08:	f000 f81a 	bl	8010f40 <__swsetup_r>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	d0cb      	beq.n	8010ea8 <__swbuf_r+0x28>
 8010f10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010f14:	e7ea      	b.n	8010eec <__swbuf_r+0x6c>
 8010f16:	bf00      	nop
 8010f18:	080121ac 	.word	0x080121ac
 8010f1c:	080121cc 	.word	0x080121cc
 8010f20:	0801218c 	.word	0x0801218c

08010f24 <__ascii_wctomb>:
 8010f24:	4603      	mov	r3, r0
 8010f26:	4608      	mov	r0, r1
 8010f28:	b141      	cbz	r1, 8010f3c <__ascii_wctomb+0x18>
 8010f2a:	2aff      	cmp	r2, #255	; 0xff
 8010f2c:	d904      	bls.n	8010f38 <__ascii_wctomb+0x14>
 8010f2e:	228a      	movs	r2, #138	; 0x8a
 8010f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f34:	601a      	str	r2, [r3, #0]
 8010f36:	4770      	bx	lr
 8010f38:	2001      	movs	r0, #1
 8010f3a:	700a      	strb	r2, [r1, #0]
 8010f3c:	4770      	bx	lr
	...

08010f40 <__swsetup_r>:
 8010f40:	4b32      	ldr	r3, [pc, #200]	; (801100c <__swsetup_r+0xcc>)
 8010f42:	b570      	push	{r4, r5, r6, lr}
 8010f44:	681d      	ldr	r5, [r3, #0]
 8010f46:	4606      	mov	r6, r0
 8010f48:	460c      	mov	r4, r1
 8010f4a:	b125      	cbz	r5, 8010f56 <__swsetup_r+0x16>
 8010f4c:	69ab      	ldr	r3, [r5, #24]
 8010f4e:	b913      	cbnz	r3, 8010f56 <__swsetup_r+0x16>
 8010f50:	4628      	mov	r0, r5
 8010f52:	f000 f981 	bl	8011258 <__sinit>
 8010f56:	4b2e      	ldr	r3, [pc, #184]	; (8011010 <__swsetup_r+0xd0>)
 8010f58:	429c      	cmp	r4, r3
 8010f5a:	d10f      	bne.n	8010f7c <__swsetup_r+0x3c>
 8010f5c:	686c      	ldr	r4, [r5, #4]
 8010f5e:	89a3      	ldrh	r3, [r4, #12]
 8010f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f64:	0719      	lsls	r1, r3, #28
 8010f66:	d42c      	bmi.n	8010fc2 <__swsetup_r+0x82>
 8010f68:	06dd      	lsls	r5, r3, #27
 8010f6a:	d411      	bmi.n	8010f90 <__swsetup_r+0x50>
 8010f6c:	2309      	movs	r3, #9
 8010f6e:	6033      	str	r3, [r6, #0]
 8010f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f78:	81a3      	strh	r3, [r4, #12]
 8010f7a:	e03e      	b.n	8010ffa <__swsetup_r+0xba>
 8010f7c:	4b25      	ldr	r3, [pc, #148]	; (8011014 <__swsetup_r+0xd4>)
 8010f7e:	429c      	cmp	r4, r3
 8010f80:	d101      	bne.n	8010f86 <__swsetup_r+0x46>
 8010f82:	68ac      	ldr	r4, [r5, #8]
 8010f84:	e7eb      	b.n	8010f5e <__swsetup_r+0x1e>
 8010f86:	4b24      	ldr	r3, [pc, #144]	; (8011018 <__swsetup_r+0xd8>)
 8010f88:	429c      	cmp	r4, r3
 8010f8a:	bf08      	it	eq
 8010f8c:	68ec      	ldreq	r4, [r5, #12]
 8010f8e:	e7e6      	b.n	8010f5e <__swsetup_r+0x1e>
 8010f90:	0758      	lsls	r0, r3, #29
 8010f92:	d512      	bpl.n	8010fba <__swsetup_r+0x7a>
 8010f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f96:	b141      	cbz	r1, 8010faa <__swsetup_r+0x6a>
 8010f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f9c:	4299      	cmp	r1, r3
 8010f9e:	d002      	beq.n	8010fa6 <__swsetup_r+0x66>
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	f7ff fb37 	bl	8010614 <_free_r>
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8010faa:	89a3      	ldrh	r3, [r4, #12]
 8010fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010fb0:	81a3      	strh	r3, [r4, #12]
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	6063      	str	r3, [r4, #4]
 8010fb6:	6923      	ldr	r3, [r4, #16]
 8010fb8:	6023      	str	r3, [r4, #0]
 8010fba:	89a3      	ldrh	r3, [r4, #12]
 8010fbc:	f043 0308 	orr.w	r3, r3, #8
 8010fc0:	81a3      	strh	r3, [r4, #12]
 8010fc2:	6923      	ldr	r3, [r4, #16]
 8010fc4:	b94b      	cbnz	r3, 8010fda <__swsetup_r+0x9a>
 8010fc6:	89a3      	ldrh	r3, [r4, #12]
 8010fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fd0:	d003      	beq.n	8010fda <__swsetup_r+0x9a>
 8010fd2:	4621      	mov	r1, r4
 8010fd4:	4630      	mov	r0, r6
 8010fd6:	f000 fa05 	bl	80113e4 <__smakebuf_r>
 8010fda:	89a0      	ldrh	r0, [r4, #12]
 8010fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010fe0:	f010 0301 	ands.w	r3, r0, #1
 8010fe4:	d00a      	beq.n	8010ffc <__swsetup_r+0xbc>
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	60a3      	str	r3, [r4, #8]
 8010fea:	6963      	ldr	r3, [r4, #20]
 8010fec:	425b      	negs	r3, r3
 8010fee:	61a3      	str	r3, [r4, #24]
 8010ff0:	6923      	ldr	r3, [r4, #16]
 8010ff2:	b943      	cbnz	r3, 8011006 <__swsetup_r+0xc6>
 8010ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010ff8:	d1ba      	bne.n	8010f70 <__swsetup_r+0x30>
 8010ffa:	bd70      	pop	{r4, r5, r6, pc}
 8010ffc:	0781      	lsls	r1, r0, #30
 8010ffe:	bf58      	it	pl
 8011000:	6963      	ldrpl	r3, [r4, #20]
 8011002:	60a3      	str	r3, [r4, #8]
 8011004:	e7f4      	b.n	8010ff0 <__swsetup_r+0xb0>
 8011006:	2000      	movs	r0, #0
 8011008:	e7f7      	b.n	8010ffa <__swsetup_r+0xba>
 801100a:	bf00      	nop
 801100c:	20000070 	.word	0x20000070
 8011010:	080121ac 	.word	0x080121ac
 8011014:	080121cc 	.word	0x080121cc
 8011018:	0801218c 	.word	0x0801218c

0801101c <abort>:
 801101c:	2006      	movs	r0, #6
 801101e:	b508      	push	{r3, lr}
 8011020:	f000 fa50 	bl	80114c4 <raise>
 8011024:	2001      	movs	r0, #1
 8011026:	f7f2 f8e2 	bl	80031ee <_exit>
	...

0801102c <__sflush_r>:
 801102c:	898a      	ldrh	r2, [r1, #12]
 801102e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011030:	4605      	mov	r5, r0
 8011032:	0710      	lsls	r0, r2, #28
 8011034:	460c      	mov	r4, r1
 8011036:	d457      	bmi.n	80110e8 <__sflush_r+0xbc>
 8011038:	684b      	ldr	r3, [r1, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	dc04      	bgt.n	8011048 <__sflush_r+0x1c>
 801103e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011040:	2b00      	cmp	r3, #0
 8011042:	dc01      	bgt.n	8011048 <__sflush_r+0x1c>
 8011044:	2000      	movs	r0, #0
 8011046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801104a:	2e00      	cmp	r6, #0
 801104c:	d0fa      	beq.n	8011044 <__sflush_r+0x18>
 801104e:	2300      	movs	r3, #0
 8011050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011054:	682f      	ldr	r7, [r5, #0]
 8011056:	602b      	str	r3, [r5, #0]
 8011058:	d032      	beq.n	80110c0 <__sflush_r+0x94>
 801105a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801105c:	89a3      	ldrh	r3, [r4, #12]
 801105e:	075a      	lsls	r2, r3, #29
 8011060:	d505      	bpl.n	801106e <__sflush_r+0x42>
 8011062:	6863      	ldr	r3, [r4, #4]
 8011064:	1ac0      	subs	r0, r0, r3
 8011066:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011068:	b10b      	cbz	r3, 801106e <__sflush_r+0x42>
 801106a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801106c:	1ac0      	subs	r0, r0, r3
 801106e:	2300      	movs	r3, #0
 8011070:	4602      	mov	r2, r0
 8011072:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011074:	4628      	mov	r0, r5
 8011076:	6a21      	ldr	r1, [r4, #32]
 8011078:	47b0      	blx	r6
 801107a:	1c43      	adds	r3, r0, #1
 801107c:	89a3      	ldrh	r3, [r4, #12]
 801107e:	d106      	bne.n	801108e <__sflush_r+0x62>
 8011080:	6829      	ldr	r1, [r5, #0]
 8011082:	291d      	cmp	r1, #29
 8011084:	d82c      	bhi.n	80110e0 <__sflush_r+0xb4>
 8011086:	4a29      	ldr	r2, [pc, #164]	; (801112c <__sflush_r+0x100>)
 8011088:	40ca      	lsrs	r2, r1
 801108a:	07d6      	lsls	r6, r2, #31
 801108c:	d528      	bpl.n	80110e0 <__sflush_r+0xb4>
 801108e:	2200      	movs	r2, #0
 8011090:	6062      	str	r2, [r4, #4]
 8011092:	6922      	ldr	r2, [r4, #16]
 8011094:	04d9      	lsls	r1, r3, #19
 8011096:	6022      	str	r2, [r4, #0]
 8011098:	d504      	bpl.n	80110a4 <__sflush_r+0x78>
 801109a:	1c42      	adds	r2, r0, #1
 801109c:	d101      	bne.n	80110a2 <__sflush_r+0x76>
 801109e:	682b      	ldr	r3, [r5, #0]
 80110a0:	b903      	cbnz	r3, 80110a4 <__sflush_r+0x78>
 80110a2:	6560      	str	r0, [r4, #84]	; 0x54
 80110a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110a6:	602f      	str	r7, [r5, #0]
 80110a8:	2900      	cmp	r1, #0
 80110aa:	d0cb      	beq.n	8011044 <__sflush_r+0x18>
 80110ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110b0:	4299      	cmp	r1, r3
 80110b2:	d002      	beq.n	80110ba <__sflush_r+0x8e>
 80110b4:	4628      	mov	r0, r5
 80110b6:	f7ff faad 	bl	8010614 <_free_r>
 80110ba:	2000      	movs	r0, #0
 80110bc:	6360      	str	r0, [r4, #52]	; 0x34
 80110be:	e7c2      	b.n	8011046 <__sflush_r+0x1a>
 80110c0:	6a21      	ldr	r1, [r4, #32]
 80110c2:	2301      	movs	r3, #1
 80110c4:	4628      	mov	r0, r5
 80110c6:	47b0      	blx	r6
 80110c8:	1c41      	adds	r1, r0, #1
 80110ca:	d1c7      	bne.n	801105c <__sflush_r+0x30>
 80110cc:	682b      	ldr	r3, [r5, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d0c4      	beq.n	801105c <__sflush_r+0x30>
 80110d2:	2b1d      	cmp	r3, #29
 80110d4:	d001      	beq.n	80110da <__sflush_r+0xae>
 80110d6:	2b16      	cmp	r3, #22
 80110d8:	d101      	bne.n	80110de <__sflush_r+0xb2>
 80110da:	602f      	str	r7, [r5, #0]
 80110dc:	e7b2      	b.n	8011044 <__sflush_r+0x18>
 80110de:	89a3      	ldrh	r3, [r4, #12]
 80110e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110e4:	81a3      	strh	r3, [r4, #12]
 80110e6:	e7ae      	b.n	8011046 <__sflush_r+0x1a>
 80110e8:	690f      	ldr	r7, [r1, #16]
 80110ea:	2f00      	cmp	r7, #0
 80110ec:	d0aa      	beq.n	8011044 <__sflush_r+0x18>
 80110ee:	0793      	lsls	r3, r2, #30
 80110f0:	bf18      	it	ne
 80110f2:	2300      	movne	r3, #0
 80110f4:	680e      	ldr	r6, [r1, #0]
 80110f6:	bf08      	it	eq
 80110f8:	694b      	ldreq	r3, [r1, #20]
 80110fa:	1bf6      	subs	r6, r6, r7
 80110fc:	600f      	str	r7, [r1, #0]
 80110fe:	608b      	str	r3, [r1, #8]
 8011100:	2e00      	cmp	r6, #0
 8011102:	dd9f      	ble.n	8011044 <__sflush_r+0x18>
 8011104:	4633      	mov	r3, r6
 8011106:	463a      	mov	r2, r7
 8011108:	4628      	mov	r0, r5
 801110a:	6a21      	ldr	r1, [r4, #32]
 801110c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8011110:	47e0      	blx	ip
 8011112:	2800      	cmp	r0, #0
 8011114:	dc06      	bgt.n	8011124 <__sflush_r+0xf8>
 8011116:	89a3      	ldrh	r3, [r4, #12]
 8011118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801111c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011120:	81a3      	strh	r3, [r4, #12]
 8011122:	e790      	b.n	8011046 <__sflush_r+0x1a>
 8011124:	4407      	add	r7, r0
 8011126:	1a36      	subs	r6, r6, r0
 8011128:	e7ea      	b.n	8011100 <__sflush_r+0xd4>
 801112a:	bf00      	nop
 801112c:	20400001 	.word	0x20400001

08011130 <_fflush_r>:
 8011130:	b538      	push	{r3, r4, r5, lr}
 8011132:	690b      	ldr	r3, [r1, #16]
 8011134:	4605      	mov	r5, r0
 8011136:	460c      	mov	r4, r1
 8011138:	b913      	cbnz	r3, 8011140 <_fflush_r+0x10>
 801113a:	2500      	movs	r5, #0
 801113c:	4628      	mov	r0, r5
 801113e:	bd38      	pop	{r3, r4, r5, pc}
 8011140:	b118      	cbz	r0, 801114a <_fflush_r+0x1a>
 8011142:	6983      	ldr	r3, [r0, #24]
 8011144:	b90b      	cbnz	r3, 801114a <_fflush_r+0x1a>
 8011146:	f000 f887 	bl	8011258 <__sinit>
 801114a:	4b14      	ldr	r3, [pc, #80]	; (801119c <_fflush_r+0x6c>)
 801114c:	429c      	cmp	r4, r3
 801114e:	d11b      	bne.n	8011188 <_fflush_r+0x58>
 8011150:	686c      	ldr	r4, [r5, #4]
 8011152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d0ef      	beq.n	801113a <_fflush_r+0xa>
 801115a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801115c:	07d0      	lsls	r0, r2, #31
 801115e:	d404      	bmi.n	801116a <_fflush_r+0x3a>
 8011160:	0599      	lsls	r1, r3, #22
 8011162:	d402      	bmi.n	801116a <_fflush_r+0x3a>
 8011164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011166:	f000 f915 	bl	8011394 <__retarget_lock_acquire_recursive>
 801116a:	4628      	mov	r0, r5
 801116c:	4621      	mov	r1, r4
 801116e:	f7ff ff5d 	bl	801102c <__sflush_r>
 8011172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011174:	4605      	mov	r5, r0
 8011176:	07da      	lsls	r2, r3, #31
 8011178:	d4e0      	bmi.n	801113c <_fflush_r+0xc>
 801117a:	89a3      	ldrh	r3, [r4, #12]
 801117c:	059b      	lsls	r3, r3, #22
 801117e:	d4dd      	bmi.n	801113c <_fflush_r+0xc>
 8011180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011182:	f000 f908 	bl	8011396 <__retarget_lock_release_recursive>
 8011186:	e7d9      	b.n	801113c <_fflush_r+0xc>
 8011188:	4b05      	ldr	r3, [pc, #20]	; (80111a0 <_fflush_r+0x70>)
 801118a:	429c      	cmp	r4, r3
 801118c:	d101      	bne.n	8011192 <_fflush_r+0x62>
 801118e:	68ac      	ldr	r4, [r5, #8]
 8011190:	e7df      	b.n	8011152 <_fflush_r+0x22>
 8011192:	4b04      	ldr	r3, [pc, #16]	; (80111a4 <_fflush_r+0x74>)
 8011194:	429c      	cmp	r4, r3
 8011196:	bf08      	it	eq
 8011198:	68ec      	ldreq	r4, [r5, #12]
 801119a:	e7da      	b.n	8011152 <_fflush_r+0x22>
 801119c:	080121ac 	.word	0x080121ac
 80111a0:	080121cc 	.word	0x080121cc
 80111a4:	0801218c 	.word	0x0801218c

080111a8 <std>:
 80111a8:	2300      	movs	r3, #0
 80111aa:	b510      	push	{r4, lr}
 80111ac:	4604      	mov	r4, r0
 80111ae:	e9c0 3300 	strd	r3, r3, [r0]
 80111b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80111b6:	6083      	str	r3, [r0, #8]
 80111b8:	8181      	strh	r1, [r0, #12]
 80111ba:	6643      	str	r3, [r0, #100]	; 0x64
 80111bc:	81c2      	strh	r2, [r0, #14]
 80111be:	6183      	str	r3, [r0, #24]
 80111c0:	4619      	mov	r1, r3
 80111c2:	2208      	movs	r2, #8
 80111c4:	305c      	adds	r0, #92	; 0x5c
 80111c6:	f7fd fb5d 	bl	800e884 <memset>
 80111ca:	4b05      	ldr	r3, [pc, #20]	; (80111e0 <std+0x38>)
 80111cc:	6224      	str	r4, [r4, #32]
 80111ce:	6263      	str	r3, [r4, #36]	; 0x24
 80111d0:	4b04      	ldr	r3, [pc, #16]	; (80111e4 <std+0x3c>)
 80111d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80111d4:	4b04      	ldr	r3, [pc, #16]	; (80111e8 <std+0x40>)
 80111d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80111d8:	4b04      	ldr	r3, [pc, #16]	; (80111ec <std+0x44>)
 80111da:	6323      	str	r3, [r4, #48]	; 0x30
 80111dc:	bd10      	pop	{r4, pc}
 80111de:	bf00      	nop
 80111e0:	080114fd 	.word	0x080114fd
 80111e4:	0801151f 	.word	0x0801151f
 80111e8:	08011557 	.word	0x08011557
 80111ec:	0801157b 	.word	0x0801157b

080111f0 <_cleanup_r>:
 80111f0:	4901      	ldr	r1, [pc, #4]	; (80111f8 <_cleanup_r+0x8>)
 80111f2:	f000 b8af 	b.w	8011354 <_fwalk_reent>
 80111f6:	bf00      	nop
 80111f8:	08011131 	.word	0x08011131

080111fc <__sfmoreglue>:
 80111fc:	2268      	movs	r2, #104	; 0x68
 80111fe:	b570      	push	{r4, r5, r6, lr}
 8011200:	1e4d      	subs	r5, r1, #1
 8011202:	4355      	muls	r5, r2
 8011204:	460e      	mov	r6, r1
 8011206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801120a:	f7ff fa6b 	bl	80106e4 <_malloc_r>
 801120e:	4604      	mov	r4, r0
 8011210:	b140      	cbz	r0, 8011224 <__sfmoreglue+0x28>
 8011212:	2100      	movs	r1, #0
 8011214:	e9c0 1600 	strd	r1, r6, [r0]
 8011218:	300c      	adds	r0, #12
 801121a:	60a0      	str	r0, [r4, #8]
 801121c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011220:	f7fd fb30 	bl	800e884 <memset>
 8011224:	4620      	mov	r0, r4
 8011226:	bd70      	pop	{r4, r5, r6, pc}

08011228 <__sfp_lock_acquire>:
 8011228:	4801      	ldr	r0, [pc, #4]	; (8011230 <__sfp_lock_acquire+0x8>)
 801122a:	f000 b8b3 	b.w	8011394 <__retarget_lock_acquire_recursive>
 801122e:	bf00      	nop
 8011230:	20000295 	.word	0x20000295

08011234 <__sfp_lock_release>:
 8011234:	4801      	ldr	r0, [pc, #4]	; (801123c <__sfp_lock_release+0x8>)
 8011236:	f000 b8ae 	b.w	8011396 <__retarget_lock_release_recursive>
 801123a:	bf00      	nop
 801123c:	20000295 	.word	0x20000295

08011240 <__sinit_lock_acquire>:
 8011240:	4801      	ldr	r0, [pc, #4]	; (8011248 <__sinit_lock_acquire+0x8>)
 8011242:	f000 b8a7 	b.w	8011394 <__retarget_lock_acquire_recursive>
 8011246:	bf00      	nop
 8011248:	20000296 	.word	0x20000296

0801124c <__sinit_lock_release>:
 801124c:	4801      	ldr	r0, [pc, #4]	; (8011254 <__sinit_lock_release+0x8>)
 801124e:	f000 b8a2 	b.w	8011396 <__retarget_lock_release_recursive>
 8011252:	bf00      	nop
 8011254:	20000296 	.word	0x20000296

08011258 <__sinit>:
 8011258:	b510      	push	{r4, lr}
 801125a:	4604      	mov	r4, r0
 801125c:	f7ff fff0 	bl	8011240 <__sinit_lock_acquire>
 8011260:	69a3      	ldr	r3, [r4, #24]
 8011262:	b11b      	cbz	r3, 801126c <__sinit+0x14>
 8011264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011268:	f7ff bff0 	b.w	801124c <__sinit_lock_release>
 801126c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011270:	6523      	str	r3, [r4, #80]	; 0x50
 8011272:	4b13      	ldr	r3, [pc, #76]	; (80112c0 <__sinit+0x68>)
 8011274:	4a13      	ldr	r2, [pc, #76]	; (80112c4 <__sinit+0x6c>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	62a2      	str	r2, [r4, #40]	; 0x28
 801127a:	42a3      	cmp	r3, r4
 801127c:	bf08      	it	eq
 801127e:	2301      	moveq	r3, #1
 8011280:	4620      	mov	r0, r4
 8011282:	bf08      	it	eq
 8011284:	61a3      	streq	r3, [r4, #24]
 8011286:	f000 f81f 	bl	80112c8 <__sfp>
 801128a:	6060      	str	r0, [r4, #4]
 801128c:	4620      	mov	r0, r4
 801128e:	f000 f81b 	bl	80112c8 <__sfp>
 8011292:	60a0      	str	r0, [r4, #8]
 8011294:	4620      	mov	r0, r4
 8011296:	f000 f817 	bl	80112c8 <__sfp>
 801129a:	2200      	movs	r2, #0
 801129c:	2104      	movs	r1, #4
 801129e:	60e0      	str	r0, [r4, #12]
 80112a0:	6860      	ldr	r0, [r4, #4]
 80112a2:	f7ff ff81 	bl	80111a8 <std>
 80112a6:	2201      	movs	r2, #1
 80112a8:	2109      	movs	r1, #9
 80112aa:	68a0      	ldr	r0, [r4, #8]
 80112ac:	f7ff ff7c 	bl	80111a8 <std>
 80112b0:	2202      	movs	r2, #2
 80112b2:	2112      	movs	r1, #18
 80112b4:	68e0      	ldr	r0, [r4, #12]
 80112b6:	f7ff ff77 	bl	80111a8 <std>
 80112ba:	2301      	movs	r3, #1
 80112bc:	61a3      	str	r3, [r4, #24]
 80112be:	e7d1      	b.n	8011264 <__sinit+0xc>
 80112c0:	08011e14 	.word	0x08011e14
 80112c4:	080111f1 	.word	0x080111f1

080112c8 <__sfp>:
 80112c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ca:	4607      	mov	r7, r0
 80112cc:	f7ff ffac 	bl	8011228 <__sfp_lock_acquire>
 80112d0:	4b1e      	ldr	r3, [pc, #120]	; (801134c <__sfp+0x84>)
 80112d2:	681e      	ldr	r6, [r3, #0]
 80112d4:	69b3      	ldr	r3, [r6, #24]
 80112d6:	b913      	cbnz	r3, 80112de <__sfp+0x16>
 80112d8:	4630      	mov	r0, r6
 80112da:	f7ff ffbd 	bl	8011258 <__sinit>
 80112de:	3648      	adds	r6, #72	; 0x48
 80112e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80112e4:	3b01      	subs	r3, #1
 80112e6:	d503      	bpl.n	80112f0 <__sfp+0x28>
 80112e8:	6833      	ldr	r3, [r6, #0]
 80112ea:	b30b      	cbz	r3, 8011330 <__sfp+0x68>
 80112ec:	6836      	ldr	r6, [r6, #0]
 80112ee:	e7f7      	b.n	80112e0 <__sfp+0x18>
 80112f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80112f4:	b9d5      	cbnz	r5, 801132c <__sfp+0x64>
 80112f6:	4b16      	ldr	r3, [pc, #88]	; (8011350 <__sfp+0x88>)
 80112f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80112fc:	60e3      	str	r3, [r4, #12]
 80112fe:	6665      	str	r5, [r4, #100]	; 0x64
 8011300:	f000 f847 	bl	8011392 <__retarget_lock_init_recursive>
 8011304:	f7ff ff96 	bl	8011234 <__sfp_lock_release>
 8011308:	2208      	movs	r2, #8
 801130a:	4629      	mov	r1, r5
 801130c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011310:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011314:	6025      	str	r5, [r4, #0]
 8011316:	61a5      	str	r5, [r4, #24]
 8011318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801131c:	f7fd fab2 	bl	800e884 <memset>
 8011320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011328:	4620      	mov	r0, r4
 801132a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801132c:	3468      	adds	r4, #104	; 0x68
 801132e:	e7d9      	b.n	80112e4 <__sfp+0x1c>
 8011330:	2104      	movs	r1, #4
 8011332:	4638      	mov	r0, r7
 8011334:	f7ff ff62 	bl	80111fc <__sfmoreglue>
 8011338:	4604      	mov	r4, r0
 801133a:	6030      	str	r0, [r6, #0]
 801133c:	2800      	cmp	r0, #0
 801133e:	d1d5      	bne.n	80112ec <__sfp+0x24>
 8011340:	f7ff ff78 	bl	8011234 <__sfp_lock_release>
 8011344:	230c      	movs	r3, #12
 8011346:	603b      	str	r3, [r7, #0]
 8011348:	e7ee      	b.n	8011328 <__sfp+0x60>
 801134a:	bf00      	nop
 801134c:	08011e14 	.word	0x08011e14
 8011350:	ffff0001 	.word	0xffff0001

08011354 <_fwalk_reent>:
 8011354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011358:	4606      	mov	r6, r0
 801135a:	4688      	mov	r8, r1
 801135c:	2700      	movs	r7, #0
 801135e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011366:	f1b9 0901 	subs.w	r9, r9, #1
 801136a:	d505      	bpl.n	8011378 <_fwalk_reent+0x24>
 801136c:	6824      	ldr	r4, [r4, #0]
 801136e:	2c00      	cmp	r4, #0
 8011370:	d1f7      	bne.n	8011362 <_fwalk_reent+0xe>
 8011372:	4638      	mov	r0, r7
 8011374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011378:	89ab      	ldrh	r3, [r5, #12]
 801137a:	2b01      	cmp	r3, #1
 801137c:	d907      	bls.n	801138e <_fwalk_reent+0x3a>
 801137e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011382:	3301      	adds	r3, #1
 8011384:	d003      	beq.n	801138e <_fwalk_reent+0x3a>
 8011386:	4629      	mov	r1, r5
 8011388:	4630      	mov	r0, r6
 801138a:	47c0      	blx	r8
 801138c:	4307      	orrs	r7, r0
 801138e:	3568      	adds	r5, #104	; 0x68
 8011390:	e7e9      	b.n	8011366 <_fwalk_reent+0x12>

08011392 <__retarget_lock_init_recursive>:
 8011392:	4770      	bx	lr

08011394 <__retarget_lock_acquire_recursive>:
 8011394:	4770      	bx	lr

08011396 <__retarget_lock_release_recursive>:
 8011396:	4770      	bx	lr

08011398 <__swhatbuf_r>:
 8011398:	b570      	push	{r4, r5, r6, lr}
 801139a:	460e      	mov	r6, r1
 801139c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113a0:	4614      	mov	r4, r2
 80113a2:	2900      	cmp	r1, #0
 80113a4:	461d      	mov	r5, r3
 80113a6:	b096      	sub	sp, #88	; 0x58
 80113a8:	da08      	bge.n	80113bc <__swhatbuf_r+0x24>
 80113aa:	2200      	movs	r2, #0
 80113ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80113b0:	602a      	str	r2, [r5, #0]
 80113b2:	061a      	lsls	r2, r3, #24
 80113b4:	d410      	bmi.n	80113d8 <__swhatbuf_r+0x40>
 80113b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113ba:	e00e      	b.n	80113da <__swhatbuf_r+0x42>
 80113bc:	466a      	mov	r2, sp
 80113be:	f000 f903 	bl	80115c8 <_fstat_r>
 80113c2:	2800      	cmp	r0, #0
 80113c4:	dbf1      	blt.n	80113aa <__swhatbuf_r+0x12>
 80113c6:	9a01      	ldr	r2, [sp, #4]
 80113c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80113cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80113d0:	425a      	negs	r2, r3
 80113d2:	415a      	adcs	r2, r3
 80113d4:	602a      	str	r2, [r5, #0]
 80113d6:	e7ee      	b.n	80113b6 <__swhatbuf_r+0x1e>
 80113d8:	2340      	movs	r3, #64	; 0x40
 80113da:	2000      	movs	r0, #0
 80113dc:	6023      	str	r3, [r4, #0]
 80113de:	b016      	add	sp, #88	; 0x58
 80113e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080113e4 <__smakebuf_r>:
 80113e4:	898b      	ldrh	r3, [r1, #12]
 80113e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113e8:	079d      	lsls	r5, r3, #30
 80113ea:	4606      	mov	r6, r0
 80113ec:	460c      	mov	r4, r1
 80113ee:	d507      	bpl.n	8011400 <__smakebuf_r+0x1c>
 80113f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113f4:	6023      	str	r3, [r4, #0]
 80113f6:	6123      	str	r3, [r4, #16]
 80113f8:	2301      	movs	r3, #1
 80113fa:	6163      	str	r3, [r4, #20]
 80113fc:	b002      	add	sp, #8
 80113fe:	bd70      	pop	{r4, r5, r6, pc}
 8011400:	466a      	mov	r2, sp
 8011402:	ab01      	add	r3, sp, #4
 8011404:	f7ff ffc8 	bl	8011398 <__swhatbuf_r>
 8011408:	9900      	ldr	r1, [sp, #0]
 801140a:	4605      	mov	r5, r0
 801140c:	4630      	mov	r0, r6
 801140e:	f7ff f969 	bl	80106e4 <_malloc_r>
 8011412:	b948      	cbnz	r0, 8011428 <__smakebuf_r+0x44>
 8011414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011418:	059a      	lsls	r2, r3, #22
 801141a:	d4ef      	bmi.n	80113fc <__smakebuf_r+0x18>
 801141c:	f023 0303 	bic.w	r3, r3, #3
 8011420:	f043 0302 	orr.w	r3, r3, #2
 8011424:	81a3      	strh	r3, [r4, #12]
 8011426:	e7e3      	b.n	80113f0 <__smakebuf_r+0xc>
 8011428:	4b0d      	ldr	r3, [pc, #52]	; (8011460 <__smakebuf_r+0x7c>)
 801142a:	62b3      	str	r3, [r6, #40]	; 0x28
 801142c:	89a3      	ldrh	r3, [r4, #12]
 801142e:	6020      	str	r0, [r4, #0]
 8011430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011434:	81a3      	strh	r3, [r4, #12]
 8011436:	9b00      	ldr	r3, [sp, #0]
 8011438:	6120      	str	r0, [r4, #16]
 801143a:	6163      	str	r3, [r4, #20]
 801143c:	9b01      	ldr	r3, [sp, #4]
 801143e:	b15b      	cbz	r3, 8011458 <__smakebuf_r+0x74>
 8011440:	4630      	mov	r0, r6
 8011442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011446:	f000 f8d1 	bl	80115ec <_isatty_r>
 801144a:	b128      	cbz	r0, 8011458 <__smakebuf_r+0x74>
 801144c:	89a3      	ldrh	r3, [r4, #12]
 801144e:	f023 0303 	bic.w	r3, r3, #3
 8011452:	f043 0301 	orr.w	r3, r3, #1
 8011456:	81a3      	strh	r3, [r4, #12]
 8011458:	89a0      	ldrh	r0, [r4, #12]
 801145a:	4305      	orrs	r5, r0
 801145c:	81a5      	strh	r5, [r4, #12]
 801145e:	e7cd      	b.n	80113fc <__smakebuf_r+0x18>
 8011460:	080111f1 	.word	0x080111f1

08011464 <_malloc_usable_size_r>:
 8011464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011468:	1f18      	subs	r0, r3, #4
 801146a:	2b00      	cmp	r3, #0
 801146c:	bfbc      	itt	lt
 801146e:	580b      	ldrlt	r3, [r1, r0]
 8011470:	18c0      	addlt	r0, r0, r3
 8011472:	4770      	bx	lr

08011474 <_raise_r>:
 8011474:	291f      	cmp	r1, #31
 8011476:	b538      	push	{r3, r4, r5, lr}
 8011478:	4604      	mov	r4, r0
 801147a:	460d      	mov	r5, r1
 801147c:	d904      	bls.n	8011488 <_raise_r+0x14>
 801147e:	2316      	movs	r3, #22
 8011480:	6003      	str	r3, [r0, #0]
 8011482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011486:	bd38      	pop	{r3, r4, r5, pc}
 8011488:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801148a:	b112      	cbz	r2, 8011492 <_raise_r+0x1e>
 801148c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011490:	b94b      	cbnz	r3, 80114a6 <_raise_r+0x32>
 8011492:	4620      	mov	r0, r4
 8011494:	f000 f830 	bl	80114f8 <_getpid_r>
 8011498:	462a      	mov	r2, r5
 801149a:	4601      	mov	r1, r0
 801149c:	4620      	mov	r0, r4
 801149e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114a2:	f000 b817 	b.w	80114d4 <_kill_r>
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d00a      	beq.n	80114c0 <_raise_r+0x4c>
 80114aa:	1c59      	adds	r1, r3, #1
 80114ac:	d103      	bne.n	80114b6 <_raise_r+0x42>
 80114ae:	2316      	movs	r3, #22
 80114b0:	6003      	str	r3, [r0, #0]
 80114b2:	2001      	movs	r0, #1
 80114b4:	e7e7      	b.n	8011486 <_raise_r+0x12>
 80114b6:	2400      	movs	r4, #0
 80114b8:	4628      	mov	r0, r5
 80114ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80114be:	4798      	blx	r3
 80114c0:	2000      	movs	r0, #0
 80114c2:	e7e0      	b.n	8011486 <_raise_r+0x12>

080114c4 <raise>:
 80114c4:	4b02      	ldr	r3, [pc, #8]	; (80114d0 <raise+0xc>)
 80114c6:	4601      	mov	r1, r0
 80114c8:	6818      	ldr	r0, [r3, #0]
 80114ca:	f7ff bfd3 	b.w	8011474 <_raise_r>
 80114ce:	bf00      	nop
 80114d0:	20000070 	.word	0x20000070

080114d4 <_kill_r>:
 80114d4:	b538      	push	{r3, r4, r5, lr}
 80114d6:	2300      	movs	r3, #0
 80114d8:	4d06      	ldr	r5, [pc, #24]	; (80114f4 <_kill_r+0x20>)
 80114da:	4604      	mov	r4, r0
 80114dc:	4608      	mov	r0, r1
 80114de:	4611      	mov	r1, r2
 80114e0:	602b      	str	r3, [r5, #0]
 80114e2:	f7f1 fe74 	bl	80031ce <_kill>
 80114e6:	1c43      	adds	r3, r0, #1
 80114e8:	d102      	bne.n	80114f0 <_kill_r+0x1c>
 80114ea:	682b      	ldr	r3, [r5, #0]
 80114ec:	b103      	cbz	r3, 80114f0 <_kill_r+0x1c>
 80114ee:	6023      	str	r3, [r4, #0]
 80114f0:	bd38      	pop	{r3, r4, r5, pc}
 80114f2:	bf00      	nop
 80114f4:	20000290 	.word	0x20000290

080114f8 <_getpid_r>:
 80114f8:	f7f1 be62 	b.w	80031c0 <_getpid>

080114fc <__sread>:
 80114fc:	b510      	push	{r4, lr}
 80114fe:	460c      	mov	r4, r1
 8011500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011504:	f000 f894 	bl	8011630 <_read_r>
 8011508:	2800      	cmp	r0, #0
 801150a:	bfab      	itete	ge
 801150c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801150e:	89a3      	ldrhlt	r3, [r4, #12]
 8011510:	181b      	addge	r3, r3, r0
 8011512:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011516:	bfac      	ite	ge
 8011518:	6563      	strge	r3, [r4, #84]	; 0x54
 801151a:	81a3      	strhlt	r3, [r4, #12]
 801151c:	bd10      	pop	{r4, pc}

0801151e <__swrite>:
 801151e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011522:	461f      	mov	r7, r3
 8011524:	898b      	ldrh	r3, [r1, #12]
 8011526:	4605      	mov	r5, r0
 8011528:	05db      	lsls	r3, r3, #23
 801152a:	460c      	mov	r4, r1
 801152c:	4616      	mov	r6, r2
 801152e:	d505      	bpl.n	801153c <__swrite+0x1e>
 8011530:	2302      	movs	r3, #2
 8011532:	2200      	movs	r2, #0
 8011534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011538:	f000 f868 	bl	801160c <_lseek_r>
 801153c:	89a3      	ldrh	r3, [r4, #12]
 801153e:	4632      	mov	r2, r6
 8011540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011544:	81a3      	strh	r3, [r4, #12]
 8011546:	4628      	mov	r0, r5
 8011548:	463b      	mov	r3, r7
 801154a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801154e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011552:	f000 b817 	b.w	8011584 <_write_r>

08011556 <__sseek>:
 8011556:	b510      	push	{r4, lr}
 8011558:	460c      	mov	r4, r1
 801155a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801155e:	f000 f855 	bl	801160c <_lseek_r>
 8011562:	1c43      	adds	r3, r0, #1
 8011564:	89a3      	ldrh	r3, [r4, #12]
 8011566:	bf15      	itete	ne
 8011568:	6560      	strne	r0, [r4, #84]	; 0x54
 801156a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801156e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011572:	81a3      	strheq	r3, [r4, #12]
 8011574:	bf18      	it	ne
 8011576:	81a3      	strhne	r3, [r4, #12]
 8011578:	bd10      	pop	{r4, pc}

0801157a <__sclose>:
 801157a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801157e:	f000 b813 	b.w	80115a8 <_close_r>
	...

08011584 <_write_r>:
 8011584:	b538      	push	{r3, r4, r5, lr}
 8011586:	4604      	mov	r4, r0
 8011588:	4608      	mov	r0, r1
 801158a:	4611      	mov	r1, r2
 801158c:	2200      	movs	r2, #0
 801158e:	4d05      	ldr	r5, [pc, #20]	; (80115a4 <_write_r+0x20>)
 8011590:	602a      	str	r2, [r5, #0]
 8011592:	461a      	mov	r2, r3
 8011594:	f7f1 fe52 	bl	800323c <_write>
 8011598:	1c43      	adds	r3, r0, #1
 801159a:	d102      	bne.n	80115a2 <_write_r+0x1e>
 801159c:	682b      	ldr	r3, [r5, #0]
 801159e:	b103      	cbz	r3, 80115a2 <_write_r+0x1e>
 80115a0:	6023      	str	r3, [r4, #0]
 80115a2:	bd38      	pop	{r3, r4, r5, pc}
 80115a4:	20000290 	.word	0x20000290

080115a8 <_close_r>:
 80115a8:	b538      	push	{r3, r4, r5, lr}
 80115aa:	2300      	movs	r3, #0
 80115ac:	4d05      	ldr	r5, [pc, #20]	; (80115c4 <_close_r+0x1c>)
 80115ae:	4604      	mov	r4, r0
 80115b0:	4608      	mov	r0, r1
 80115b2:	602b      	str	r3, [r5, #0]
 80115b4:	f7f1 fe5e 	bl	8003274 <_close>
 80115b8:	1c43      	adds	r3, r0, #1
 80115ba:	d102      	bne.n	80115c2 <_close_r+0x1a>
 80115bc:	682b      	ldr	r3, [r5, #0]
 80115be:	b103      	cbz	r3, 80115c2 <_close_r+0x1a>
 80115c0:	6023      	str	r3, [r4, #0]
 80115c2:	bd38      	pop	{r3, r4, r5, pc}
 80115c4:	20000290 	.word	0x20000290

080115c8 <_fstat_r>:
 80115c8:	b538      	push	{r3, r4, r5, lr}
 80115ca:	2300      	movs	r3, #0
 80115cc:	4d06      	ldr	r5, [pc, #24]	; (80115e8 <_fstat_r+0x20>)
 80115ce:	4604      	mov	r4, r0
 80115d0:	4608      	mov	r0, r1
 80115d2:	4611      	mov	r1, r2
 80115d4:	602b      	str	r3, [r5, #0]
 80115d6:	f7f1 fe58 	bl	800328a <_fstat>
 80115da:	1c43      	adds	r3, r0, #1
 80115dc:	d102      	bne.n	80115e4 <_fstat_r+0x1c>
 80115de:	682b      	ldr	r3, [r5, #0]
 80115e0:	b103      	cbz	r3, 80115e4 <_fstat_r+0x1c>
 80115e2:	6023      	str	r3, [r4, #0]
 80115e4:	bd38      	pop	{r3, r4, r5, pc}
 80115e6:	bf00      	nop
 80115e8:	20000290 	.word	0x20000290

080115ec <_isatty_r>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	2300      	movs	r3, #0
 80115f0:	4d05      	ldr	r5, [pc, #20]	; (8011608 <_isatty_r+0x1c>)
 80115f2:	4604      	mov	r4, r0
 80115f4:	4608      	mov	r0, r1
 80115f6:	602b      	str	r3, [r5, #0]
 80115f8:	f7f1 fe56 	bl	80032a8 <_isatty>
 80115fc:	1c43      	adds	r3, r0, #1
 80115fe:	d102      	bne.n	8011606 <_isatty_r+0x1a>
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	b103      	cbz	r3, 8011606 <_isatty_r+0x1a>
 8011604:	6023      	str	r3, [r4, #0]
 8011606:	bd38      	pop	{r3, r4, r5, pc}
 8011608:	20000290 	.word	0x20000290

0801160c <_lseek_r>:
 801160c:	b538      	push	{r3, r4, r5, lr}
 801160e:	4604      	mov	r4, r0
 8011610:	4608      	mov	r0, r1
 8011612:	4611      	mov	r1, r2
 8011614:	2200      	movs	r2, #0
 8011616:	4d05      	ldr	r5, [pc, #20]	; (801162c <_lseek_r+0x20>)
 8011618:	602a      	str	r2, [r5, #0]
 801161a:	461a      	mov	r2, r3
 801161c:	f7f1 fe4e 	bl	80032bc <_lseek>
 8011620:	1c43      	adds	r3, r0, #1
 8011622:	d102      	bne.n	801162a <_lseek_r+0x1e>
 8011624:	682b      	ldr	r3, [r5, #0]
 8011626:	b103      	cbz	r3, 801162a <_lseek_r+0x1e>
 8011628:	6023      	str	r3, [r4, #0]
 801162a:	bd38      	pop	{r3, r4, r5, pc}
 801162c:	20000290 	.word	0x20000290

08011630 <_read_r>:
 8011630:	b538      	push	{r3, r4, r5, lr}
 8011632:	4604      	mov	r4, r0
 8011634:	4608      	mov	r0, r1
 8011636:	4611      	mov	r1, r2
 8011638:	2200      	movs	r2, #0
 801163a:	4d05      	ldr	r5, [pc, #20]	; (8011650 <_read_r+0x20>)
 801163c:	602a      	str	r2, [r5, #0]
 801163e:	461a      	mov	r2, r3
 8011640:	f7f1 fddf 	bl	8003202 <_read>
 8011644:	1c43      	adds	r3, r0, #1
 8011646:	d102      	bne.n	801164e <_read_r+0x1e>
 8011648:	682b      	ldr	r3, [r5, #0]
 801164a:	b103      	cbz	r3, 801164e <_read_r+0x1e>
 801164c:	6023      	str	r3, [r4, #0]
 801164e:	bd38      	pop	{r3, r4, r5, pc}
 8011650:	20000290 	.word	0x20000290

08011654 <_init>:
 8011654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011656:	bf00      	nop
 8011658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801165a:	bc08      	pop	{r3}
 801165c:	469e      	mov	lr, r3
 801165e:	4770      	bx	lr

08011660 <_fini>:
 8011660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011662:	bf00      	nop
 8011664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011666:	bc08      	pop	{r3}
 8011668:	469e      	mov	lr, r3
 801166a:	4770      	bx	lr
