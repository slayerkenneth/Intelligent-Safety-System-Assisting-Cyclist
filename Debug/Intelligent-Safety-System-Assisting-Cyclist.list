
Intelligent-Safety-System-Assisting-Cyclist.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9b4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b1c  0800aba0  0800aba0  0001aba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6bc  0800b6bc  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800b6bc  0800b6bc  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b6bc  0800b6bc  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6bc  0800b6bc  0001b6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6c0  0800b6c0  0001b6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800b6c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000210  0800b8d4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  0800b8d4  0002078c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cd8  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ded  00000000  00000000  00033f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00036d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  00037f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7a8  00000000  00000000  00039040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016713  00000000  00000000  000557e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f79a  00000000  00000000  0006befb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b695  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f98  00000000  00000000  0010b6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000210 	.word	0x20000210
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ab84 	.word	0x0800ab84

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000214 	.word	0x20000214
 8000224:	0800ab84 	.word	0x0800ab84

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <CountRPM>:
static uint16_t firstDetected;
static uint16_t newDetected;
static float time_diff;

void CountRPM(uint16_t counter)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
	static uint8_t flip = 0;

	if (flip != HAL_GPIO_ReadPin(A3144_Port, A3144_PIN))
 80011f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f6:	4821      	ldr	r0, [pc, #132]	; (800127c <CountRPM+0x94>)
 80011f8:	f003 fa18 	bl	800462c <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <CountRPM+0x98>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d034      	beq.n	8001272 <CountRPM+0x8a>
	{
		flip = HAL_GPIO_ReadPin(A3144_Port, A3144_PIN);
 8001208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120c:	481b      	ldr	r0, [pc, #108]	; (800127c <CountRPM+0x94>)
 800120e:	f003 fa0d 	bl	800462c <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <CountRPM+0x98>)
 8001218:	701a      	strb	r2, [r3, #0]
		rotCount++;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <CountRPM+0x9c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a18      	ldr	r2, [pc, #96]	; (8001284 <CountRPM+0x9c>)
 8001222:	6013      	str	r3, [r2, #0]

		if (rotCount == 1){
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <CountRPM+0x9c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d103      	bne.n	8001234 <CountRPM+0x4c>
			firstDetected = counter;
 800122c:	4a16      	ldr	r2, [pc, #88]	; (8001288 <CountRPM+0xa0>)
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	8013      	strh	r3, [r2, #0]
			rotSpeed = time_diff / 1000 ;

			rotCount = 0; //reset
		}
	}
}
 8001232:	e01e      	b.n	8001272 <CountRPM+0x8a>
			newDetected = counter;
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <CountRPM+0xa4>)
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	8013      	strh	r3, [r2, #0]
			time_diff = abs(newDetected - firstDetected);
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <CountRPM+0xa4>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <CountRPM+0xa0>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	bfb8      	it	lt
 800124a:	425b      	neglt	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fdb1 	bl	8000db4 <__aeabi_i2f>
 8001252:	4603      	mov	r3, r0
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <CountRPM+0xa8>)
 8001256:	6013      	str	r3, [r2, #0]
			rotSpeed = time_diff / 1000 ;
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <CountRPM+0xa8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	490d      	ldr	r1, [pc, #52]	; (8001294 <CountRPM+0xac>)
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff feb0 	bl	8000fc4 <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <CountRPM+0xb0>)
 800126a:	601a      	str	r2, [r3, #0]
			rotCount = 0; //reset
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <CountRPM+0x9c>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40010c00 	.word	0x40010c00
 8001280:	2000023c 	.word	0x2000023c
 8001284:	20000230 	.word	0x20000230
 8001288:	20000234 	.word	0x20000234
 800128c:	20000236 	.word	0x20000236
 8001290:	20000238 	.word	0x20000238
 8001294:	447a0000 	.word	0x447a0000
 8001298:	2000022c 	.word	0x2000022c
 800129c:	00000000 	.word	0x00000000

080012a0 <GetRotationSpeed>:

float GetRotationSpeed(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
//	static float beforeSpeed = 0;
	static int clear = 0;
	clear++;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <GetRotationSpeed+0x60>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <GetRotationSpeed+0x60>)
 80012ac:	6013      	str	r3, [r2, #0]
//
	if (clear == Time_Out_Period) //Time-out: stopped rotation => reset
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <GetRotationSpeed+0x60>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d115      	bne.n	80012e2 <GetRotationSpeed+0x42>
	{
		clear = 0;
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <GetRotationSpeed+0x60>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
		rotSpeed *= 1.45;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <GetRotationSpeed+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f91d 	bl	8000500 <__aeabi_f2d>
 80012c6:	a30c      	add	r3, pc, #48	; (adr r3, 80012f8 <GetRotationSpeed+0x58>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff f970 	bl	80005b0 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fc62 	bl	8000ba0 <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <GetRotationSpeed+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]
//
//		beforeSpeed = rotSpeed;
//		rotSpeed = 0;
//	}

	return 30 / rotSpeed;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <GetRotationSpeed+0x64>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <GetRotationSpeed+0x68>)
 80012ea:	f7ff fe6b 	bl	8000fc4 <__aeabi_fdiv>
 80012ee:	4603      	mov	r3, r0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	f3af 8000 	nop.w
 80012f8:	33333333 	.word	0x33333333
 80012fc:	3ff73333 	.word	0x3ff73333
 8001300:	20000240 	.word	0x20000240
 8001304:	2000022c 	.word	0x2000022c
 8001308:	41f00000 	.word	0x41f00000

0800130c <a3144_Init>:

void a3144_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <a3144_Init+0x10>)
 8001312:	f004 fe5d 	bl	8005fd0 <HAL_TIM_Base_Start_IT>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000029c 	.word	0x2000029c

08001320 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)   // Interrupt Call
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	static uint16_t counter_for_1s = 0;


	if (htim == &htim3)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d10a      	bne.n	8001346 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		CountRPM(counter_for_1s);
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff57 	bl	80011e8 <CountRPM>
		counter_for_1s++;
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001344:	801a      	strh	r2, [r3, #0]
	}
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000029c 	.word	0x2000029c
 8001354:	20000244 	.word	0x20000244

08001358 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	e002      	b.n	8001368 <Delay+0x10>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3b01      	subs	r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f9      	bne.n	8001362 <Delay+0xa>
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <LCD_INIT>:

void LCD_INIT ( void )
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001380:	2001      	movs	r0, #1
 8001382:	f000 f829 	bl	80013d8 <LCD_BackLed_Control>
	LCD_Rst();
 8001386:	f000 f80f 	bl	80013a8 <LCD_Rst>
	LCD_REG_Config();
 800138a:	f000 f85f 	bl	800144c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800138e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001398:	22f0      	movs	r2, #240	; 0xf0
 800139a:	2100      	movs	r1, #0
 800139c:	2000      	movs	r0, #0
 800139e:	f000 f9e6 	bl	800176e <LCD_Clear>
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <LCD_Rst>:


void LCD_Rst ( void )
{			
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2102      	movs	r1, #2
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <LCD_Rst+0x28>)
 80013b2:	f003 f952 	bl	800465a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <LCD_Rst+0x2c>)
 80013b8:	f7ff ffce 	bl	8001358 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2102      	movs	r1, #2
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <LCD_Rst+0x28>)
 80013c2:	f003 f94a 	bl	800465a <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <LCD_Rst+0x2c>)
 80013c8:	f7ff ffc6 	bl	8001358 <Delay>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40011800 	.word	0x40011800
 80013d4:	0002bffc 	.word	0x0002bffc

080013d8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <LCD_BackLed_Control+0x34>)
 80013f0:	f003 f933 	bl	800465a <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80013f4:	e005      	b.n	8001402 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <LCD_BackLed_Control+0x34>)
 80013fe:	f003 f92c 	bl	800465a <HAL_GPIO_WritePin>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40011400 	.word	0x40011400

08001410 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800141a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	8013      	strh	r3, [r2, #0]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <LCD_Write_Data+0x1c>)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	8013      	strh	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	60020000 	.word	0x60020000

0800144c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001450:	20cf      	movs	r0, #207	; 0xcf
 8001452:	f7ff ffdd 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff ffe8 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800145c:	2081      	movs	r0, #129	; 0x81
 800145e:	f7ff ffe5 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001462:	2030      	movs	r0, #48	; 0x30
 8001464:	f7ff ffe2 	bl	800142c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001468:	20ed      	movs	r0, #237	; 0xed
 800146a:	f7ff ffd1 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800146e:	2064      	movs	r0, #100	; 0x64
 8001470:	f7ff ffdc 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001474:	2003      	movs	r0, #3
 8001476:	f7ff ffd9 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800147a:	2012      	movs	r0, #18
 800147c:	f7ff ffd6 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001480:	2081      	movs	r0, #129	; 0x81
 8001482:	f7ff ffd3 	bl	800142c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001486:	20e8      	movs	r0, #232	; 0xe8
 8001488:	f7ff ffc2 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800148c:	2085      	movs	r0, #133	; 0x85
 800148e:	f7ff ffcd 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001492:	2010      	movs	r0, #16
 8001494:	f7ff ffca 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001498:	2078      	movs	r0, #120	; 0x78
 800149a:	f7ff ffc7 	bl	800142c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800149e:	20cb      	movs	r0, #203	; 0xcb
 80014a0:	f7ff ffb6 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80014a4:	2039      	movs	r0, #57	; 0x39
 80014a6:	f7ff ffc1 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80014aa:	202c      	movs	r0, #44	; 0x2c
 80014ac:	f7ff ffbe 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff ffbb 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80014b6:	2034      	movs	r0, #52	; 0x34
 80014b8:	f7ff ffb8 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80014bc:	2002      	movs	r0, #2
 80014be:	f7ff ffb5 	bl	800142c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80014c2:	20f7      	movs	r0, #247	; 0xf7
 80014c4:	f7ff ffa4 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80014c8:	2020      	movs	r0, #32
 80014ca:	f7ff ffaf 	bl	800142c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80014ce:	20ea      	movs	r0, #234	; 0xea
 80014d0:	f7ff ff9e 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff ffa9 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff ffa6 	bl	800142c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80014e0:	20b1      	movs	r0, #177	; 0xb1
 80014e2:	f7ff ff95 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff ffa0 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80014ec:	201b      	movs	r0, #27
 80014ee:	f7ff ff9d 	bl	800142c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80014f2:	20b6      	movs	r0, #182	; 0xb6
 80014f4:	f7ff ff8c 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80014f8:	200a      	movs	r0, #10
 80014fa:	f7ff ff97 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80014fe:	20a2      	movs	r0, #162	; 0xa2
 8001500:	f7ff ff94 	bl	800142c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001504:	20c0      	movs	r0, #192	; 0xc0
 8001506:	f7ff ff83 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800150a:	2035      	movs	r0, #53	; 0x35
 800150c:	f7ff ff8e 	bl	800142c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001510:	20c1      	movs	r0, #193	; 0xc1
 8001512:	f7ff ff7d 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001516:	2011      	movs	r0, #17
 8001518:	f7ff ff88 	bl	800142c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800151c:	20c5      	movs	r0, #197	; 0xc5
 800151e:	f7ff ff77 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001522:	2045      	movs	r0, #69	; 0x45
 8001524:	f7ff ff82 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001528:	2045      	movs	r0, #69	; 0x45
 800152a:	f7ff ff7f 	bl	800142c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800152e:	20c7      	movs	r0, #199	; 0xc7
 8001530:	f7ff ff6e 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001534:	20a2      	movs	r0, #162	; 0xa2
 8001536:	f7ff ff79 	bl	800142c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800153a:	20f2      	movs	r0, #242	; 0xf2
 800153c:	f7ff ff68 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff ff73 	bl	800142c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001546:	2026      	movs	r0, #38	; 0x26
 8001548:	f7ff ff62 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff ff6d 	bl	800142c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001552:	20e0      	movs	r0, #224	; 0xe0
 8001554:	f7ff ff5c 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001558:	200f      	movs	r0, #15
 800155a:	f7ff ff67 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800155e:	2026      	movs	r0, #38	; 0x26
 8001560:	f7ff ff64 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001564:	2024      	movs	r0, #36	; 0x24
 8001566:	f7ff ff61 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800156a:	200b      	movs	r0, #11
 800156c:	f7ff ff5e 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001570:	200e      	movs	r0, #14
 8001572:	f7ff ff5b 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001576:	2009      	movs	r0, #9
 8001578:	f7ff ff58 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800157c:	2054      	movs	r0, #84	; 0x54
 800157e:	f7ff ff55 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001582:	20a8      	movs	r0, #168	; 0xa8
 8001584:	f7ff ff52 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001588:	2046      	movs	r0, #70	; 0x46
 800158a:	f7ff ff4f 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800158e:	200c      	movs	r0, #12
 8001590:	f7ff ff4c 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001594:	2017      	movs	r0, #23
 8001596:	f7ff ff49 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800159a:	2009      	movs	r0, #9
 800159c:	f7ff ff46 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80015a0:	200f      	movs	r0, #15
 80015a2:	f7ff ff43 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80015a6:	2007      	movs	r0, #7
 80015a8:	f7ff ff40 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff ff3d 	bl	800142c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80015b2:	20e1      	movs	r0, #225	; 0xe1
 80015b4:	f7ff ff2c 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff ff37 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80015be:	2019      	movs	r0, #25
 80015c0:	f7ff ff34 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80015c4:	201b      	movs	r0, #27
 80015c6:	f7ff ff31 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80015ca:	2004      	movs	r0, #4
 80015cc:	f7ff ff2e 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80015d0:	2010      	movs	r0, #16
 80015d2:	f7ff ff2b 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80015d6:	2007      	movs	r0, #7
 80015d8:	f7ff ff28 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80015dc:	202a      	movs	r0, #42	; 0x2a
 80015de:	f7ff ff25 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80015e2:	2047      	movs	r0, #71	; 0x47
 80015e4:	f7ff ff22 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80015e8:	2039      	movs	r0, #57	; 0x39
 80015ea:	f7ff ff1f 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80015ee:	2003      	movs	r0, #3
 80015f0:	f7ff ff1c 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80015f4:	2006      	movs	r0, #6
 80015f6:	f7ff ff19 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80015fa:	2006      	movs	r0, #6
 80015fc:	f7ff ff16 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001600:	2030      	movs	r0, #48	; 0x30
 8001602:	f7ff ff13 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001606:	2038      	movs	r0, #56	; 0x38
 8001608:	f7ff ff10 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800160c:	200f      	movs	r0, #15
 800160e:	f7ff ff0d 	bl	800142c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001612:	2036      	movs	r0, #54	; 0x36
 8001614:	f7ff fefc 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001618:	20c8      	movs	r0, #200	; 0xc8
 800161a:	f7ff ff07 	bl	800142c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800161e:	202a      	movs	r0, #42	; 0x2a
 8001620:	f7ff fef6 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff ff01 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fefe 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fefb 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001636:	20ef      	movs	r0, #239	; 0xef
 8001638:	f7ff fef8 	bl	800142c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800163c:	202b      	movs	r0, #43	; 0x2b
 800163e:	f7ff fee7 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff fef2 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff feef 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff feec 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001654:	203f      	movs	r0, #63	; 0x3f
 8001656:	f7ff fee9 	bl	800142c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800165a:	203a      	movs	r0, #58	; 0x3a
 800165c:	f7ff fed8 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001660:	2055      	movs	r0, #85	; 0x55
 8001662:	f7ff fee3 	bl	800142c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001666:	2011      	movs	r0, #17
 8001668:	f7ff fed2 	bl	8001410 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <LCD_REG_Config+0x230>)
 800166e:	f7ff fe73 	bl	8001358 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001672:	2029      	movs	r0, #41	; 0x29
 8001674:	f7ff fecc 	bl	8001410 <LCD_Write_Cmd>
	
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	0002bffc 	.word	0x0002bffc

08001680 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4604      	mov	r4, r0
 8001688:	4608      	mov	r0, r1
 800168a:	4611      	mov	r1, r2
 800168c:	461a      	mov	r2, r3
 800168e:	4623      	mov	r3, r4
 8001690:	80fb      	strh	r3, [r7, #6]
 8001692:	4603      	mov	r3, r0
 8001694:	80bb      	strh	r3, [r7, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	807b      	strh	r3, [r7, #2]
 800169a:	4613      	mov	r3, r2
 800169c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800169e:	202a      	movs	r0, #42	; 0x2a
 80016a0:	f7ff feb6 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff febe 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff feb8 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80016bc:	88fa      	ldrh	r2, [r7, #6]
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	4413      	add	r3, r2
 80016c2:	3b01      	subs	r3, #1
 80016c4:	121b      	asrs	r3, r3, #8
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff feaf 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80016ce:	88fa      	ldrh	r2, [r7, #6]
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	4413      	add	r3, r2
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fea4 	bl	800142c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80016e4:	202b      	movs	r0, #43	; 0x2b
 80016e6:	f7ff fe93 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80016ea:	88bb      	ldrh	r3, [r7, #4]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fe9b 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80016f6:	88bb      	ldrh	r3, [r7, #4]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fe95 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001702:	88ba      	ldrh	r2, [r7, #4]
 8001704:	883b      	ldrh	r3, [r7, #0]
 8001706:	4413      	add	r3, r2
 8001708:	3b01      	subs	r3, #1
 800170a:	121b      	asrs	r3, r3, #8
 800170c:	b29b      	uxth	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fe8c 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001714:	88ba      	ldrh	r2, [r7, #4]
 8001716:	883b      	ldrh	r3, [r7, #0]
 8001718:	4413      	add	r3, r2
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	b29b      	uxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fe81 	bl	800142c <LCD_Write_Data>
	
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}

08001732 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001742:	202c      	movs	r0, #44	; 0x2c
 8001744:	f7ff fe64 	bl	8001410 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	e006      	b.n	800175c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fe6b 	bl	800142c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3301      	adds	r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	d3f4      	bcc.n	800174e <LCD_FillColor+0x1c>
		
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800176e:	b590      	push	{r4, r7, lr}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	4604      	mov	r4, r0
 8001776:	4608      	mov	r0, r1
 8001778:	4611      	mov	r1, r2
 800177a:	461a      	mov	r2, r3
 800177c:	4623      	mov	r3, r4
 800177e:	80fb      	strh	r3, [r7, #6]
 8001780:	4603      	mov	r3, r0
 8001782:	80bb      	strh	r3, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800178c:	883b      	ldrh	r3, [r7, #0]
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	88b9      	ldrh	r1, [r7, #4]
 8001792:	88f8      	ldrh	r0, [r7, #6]
 8001794:	f7ff ff74 	bl	8001680 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	883a      	ldrh	r2, [r7, #0]
 800179c:	fb02 f303 	mul.w	r3, r2, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	8b3b      	ldrh	r3, [r7, #24]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f7ff ffc3 	bl	8001732 <LCD_FillColor>
	
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}

080017b4 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
 80017be:	460b      	mov	r3, r1
 80017c0:	80bb      	strh	r3, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	3b20      	subs	r3, #32
 80017ca:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80017cc:	88b9      	ldrh	r1, [r7, #4]
 80017ce:	88f8      	ldrh	r0, [r7, #6]
 80017d0:	2310      	movs	r3, #16
 80017d2:	2208      	movs	r2, #8
 80017d4:	f7ff ff54 	bl	8001680 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80017d8:	202c      	movs	r0, #44	; 0x2c
 80017da:	f7ff fe19 	bl	8001410 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80017de:	2300      	movs	r3, #0
 80017e0:	73bb      	strb	r3, [r7, #14]
 80017e2:	e023      	b.n	800182c <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80017e4:	7b3a      	ldrb	r2, [r7, #12]
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	4914      	ldr	r1, [pc, #80]	; (800183c <LCD_DrawChar+0x88>)
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	440a      	add	r2, r1
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80017f4:	2300      	movs	r3, #0
 80017f6:	737b      	strb	r3, [r7, #13]
 80017f8:	e012      	b.n	8001820 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001804:	201f      	movs	r0, #31
 8001806:	f7ff fe11 	bl	800142c <LCD_Write_Data>
 800180a:	e003      	b.n	8001814 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 800180c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001810:	f7ff fe0c 	bl	800142c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800181a:	7b7b      	ldrb	r3, [r7, #13]
 800181c:	3301      	adds	r3, #1
 800181e:	737b      	strb	r3, [r7, #13]
 8001820:	7b7b      	ldrb	r3, [r7, #13]
 8001822:	2b07      	cmp	r3, #7
 8001824:	d9e9      	bls.n	80017fa <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	3301      	adds	r3, #1
 800182a:	73bb      	strb	r3, [r7, #14]
 800182c:	7bbb      	ldrb	r3, [r7, #14]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	d9d8      	bls.n	80017e4 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	0800acdc 	.word	0x0800acdc

08001840 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	603a      	str	r2, [r7, #0]
 800184a:	80fb      	strh	r3, [r7, #6]
 800184c:	460b      	mov	r3, r1
 800184e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001850:	e01c      	b.n	800188c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2be8      	cmp	r3, #232	; 0xe8
 8001856:	d904      	bls.n	8001862 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001858:	2300      	movs	r3, #0
 800185a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	3310      	adds	r3, #16
 8001860:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001862:	88bb      	ldrh	r3, [r7, #4]
 8001864:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001868:	d903      	bls.n	8001872 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800186a:	2300      	movs	r3, #0
 800186c:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800186e:	2300      	movs	r3, #0
 8001870:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	88b9      	ldrh	r1, [r7, #4]
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff9a 	bl	80017b4 <LCD_DrawChar>
		
		pStr ++;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	3308      	adds	r3, #8
 800188a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1de      	bne.n	8001852 <LCD_DrawString+0x12>
		
	}
	
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <LCD_DrawChar_Color>:
{	

}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4604      	mov	r4, r0
 80018a8:	4608      	mov	r0, r1
 80018aa:	4611      	mov	r1, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	80fb      	strh	r3, [r7, #6]
 80018b2:	4603      	mov	r3, r0
 80018b4:	80bb      	strh	r3, [r7, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70fb      	strb	r3, [r7, #3]
 80018ba:	4613      	mov	r3, r2
 80018bc:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	3b20      	subs	r3, #32
 80018c2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80018c4:	88b9      	ldrh	r1, [r7, #4]
 80018c6:	88f8      	ldrh	r0, [r7, #6]
 80018c8:	2310      	movs	r3, #16
 80018ca:	2208      	movs	r2, #8
 80018cc:	f7ff fed8 	bl	8001680 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80018d0:	202c      	movs	r0, #44	; 0x2c
 80018d2:	f7ff fd9d 	bl	8001410 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80018d6:	2300      	movs	r3, #0
 80018d8:	73bb      	strb	r3, [r7, #14]
 80018da:	e024      	b.n	8001926 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80018dc:	7b3a      	ldrb	r2, [r7, #12]
 80018de:	7bbb      	ldrb	r3, [r7, #14]
 80018e0:	4915      	ldr	r1, [pc, #84]	; (8001938 <LCD_DrawChar_Color+0x98>)
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	440a      	add	r2, r1
 80018e6:	4413      	add	r3, r2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80018ec:	2300      	movs	r3, #0
 80018ee:	737b      	strb	r3, [r7, #13]
 80018f0:	e013      	b.n	800191a <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80018fc:	8c3b      	ldrh	r3, [r7, #32]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fd94 	bl	800142c <LCD_Write_Data>
 8001904:	e003      	b.n	800190e <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 8001906:	883b      	ldrh	r3, [r7, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fd8f 	bl	800142c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001914:	7b7b      	ldrb	r3, [r7, #13]
 8001916:	3301      	adds	r3, #1
 8001918:	737b      	strb	r3, [r7, #13]
 800191a:	7b7b      	ldrb	r3, [r7, #13]
 800191c:	2b07      	cmp	r3, #7
 800191e:	d9e8      	bls.n	80018f2 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	3301      	adds	r3, #1
 8001924:	73bb      	strb	r3, [r7, #14]
 8001926:	7bbb      	ldrb	r3, [r7, #14]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d9d7      	bls.n	80018dc <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}
 8001936:	bf00      	nop
 8001938:	0800acdc 	.word	0x0800acdc

0800193c <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af02      	add	r7, sp, #8
 8001942:	4603      	mov	r3, r0
 8001944:	460a      	mov	r2, r1
 8001946:	80fb      	strh	r3, [r7, #6]
 8001948:	4613      	mov	r3, r2
 800194a:	80bb      	strh	r3, [r7, #4]
  LCD_Clear ( usX - 10, usY, 20, 1, RED);
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	3b0a      	subs	r3, #10
 8001950:	b298      	uxth	r0, r3
 8001952:	88b9      	ldrh	r1, [r7, #4]
 8001954:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	2214      	movs	r2, #20
 800195e:	f7ff ff06 	bl	800176e <LCD_Clear>
  LCD_Clear ( usX, usY - 10, 1, 20, RED);
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	3b0a      	subs	r3, #10
 8001966:	b299      	uxth	r1, r3
 8001968:	88f8      	ldrh	r0, [r7, #6]
 800196a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2314      	movs	r3, #20
 8001972:	2201      	movs	r2, #1
 8001974:	f7ff fefb 	bl	800176e <LCD_Clear>
	
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b087      	sub	sp, #28
 8001984:	af02      	add	r7, sp, #8
 8001986:	60ba      	str	r2, [r7, #8]
 8001988:	461a      	mov	r2, r3
 800198a:	4603      	mov	r3, r0
 800198c:	81fb      	strh	r3, [r7, #14]
 800198e:	460b      	mov	r3, r1
 8001990:	81bb      	strh	r3, [r7, #12]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001996:	e01f      	b.n	80019d8 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001998:	89fb      	ldrh	r3, [r7, #14]
 800199a:	2be8      	cmp	r3, #232	; 0xe8
 800199c:	d904      	bls.n	80019a8 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800199e:	2300      	movs	r3, #0
 80019a0:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 80019a2:	89bb      	ldrh	r3, [r7, #12]
 80019a4:	3310      	adds	r3, #16
 80019a6:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80019a8:	89bb      	ldrh	r3, [r7, #12]
 80019aa:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80019ae:	d903      	bls.n	80019b8 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80019b0:	2300      	movs	r3, #0
 80019b2:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	88fc      	ldrh	r4, [r7, #6]
 80019be:	89b9      	ldrh	r1, [r7, #12]
 80019c0:	89f8      	ldrh	r0, [r7, #14]
 80019c2:	8c3b      	ldrh	r3, [r7, #32]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	4623      	mov	r3, r4
 80019c8:	f7ff ff6a 	bl	80018a0 <LCD_DrawChar_Color>
		
		pStr ++;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	3301      	adds	r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 80019d2:	89fb      	ldrh	r3, [r7, #14]
 80019d4:	3308      	adds	r3, #8
 80019d6:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1db      	bne.n	8001998 <LCD_DrawString_Color+0x18>
		
	}
	
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd90      	pop	{r4, r7, pc}
	...

080019ec <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	f200 80a0 	bhi.w	8001b40 <LCD_GramScan+0x154>
 8001a00:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <LCD_GramScan+0x1c>)
 8001a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a06:	bf00      	nop
 8001a08:	08001a19 	.word	0x08001a19
 8001a0c:	08001a63 	.word	0x08001a63
 8001a10:	08001aad 	.word	0x08001aad
 8001a14:	08001af7 	.word	0x08001af7

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001a18:	2036      	movs	r0, #54	; 0x36
 8001a1a:	f7ff fcf9 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 8001a1e:	20c8      	movs	r0, #200	; 0xc8
 8001a20:	f7ff fd04 	bl	800142c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001a24:	202a      	movs	r0, #42	; 0x2a
 8001a26:	f7ff fcf3 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff fcfe 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fcfb 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff fcf8 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 8001a3c:	20ef      	movs	r0, #239	; 0xef
 8001a3e:	f7ff fcf5 	bl	800142c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001a42:	202b      	movs	r0, #43	; 0x2b
 8001a44:	f7ff fce4 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fcef 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff fcec 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7ff fce9 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 8001a5a:	203f      	movs	r0, #63	; 0x3f
 8001a5c:	f7ff fce6 	bl	800142c <LCD_Write_Data>
					
		  break;
 8001a60:	e06e      	b.n	8001b40 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001a62:	2036      	movs	r0, #54	; 0x36
 8001a64:	f7ff fcd4 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 8001a68:	2068      	movs	r0, #104	; 0x68
 8001a6a:	f7ff fcdf 	bl	800142c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001a6e:	202a      	movs	r0, #42	; 0x2a
 8001a70:	f7ff fcce 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff fcd9 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fcd6 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff fcd3 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001a86:	203f      	movs	r0, #63	; 0x3f
 8001a88:	f7ff fcd0 	bl	800142c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001a8c:	202b      	movs	r0, #43	; 0x2b
 8001a8e:	f7ff fcbf 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fcca 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff fcc7 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff fcc4 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8001aa4:	20ef      	movs	r0, #239	; 0xef
 8001aa6:	f7ff fcc1 	bl	800142c <LCD_Write_Data>
		
		  break;
 8001aaa:	e049      	b.n	8001b40 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8001aac:	2036      	movs	r0, #54	; 0x36
 8001aae:	f7ff fcaf 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 8001ab2:	2028      	movs	r0, #40	; 0x28
 8001ab4:	f7ff fcba 	bl	800142c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001ab8:	202a      	movs	r0, #42	; 0x2a
 8001aba:	f7ff fca9 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fcb4 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fcb1 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff fcae 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001ad0:	203f      	movs	r0, #63	; 0x3f
 8001ad2:	f7ff fcab 	bl	800142c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001ad6:	202b      	movs	r0, #43	; 0x2b
 8001ad8:	f7ff fc9a 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff fca5 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fca2 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff fc9f 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 8001aee:	20ef      	movs	r0, #239	; 0xef
 8001af0:	f7ff fc9c 	bl	800142c <LCD_Write_Data>
		  
		  break;
 8001af4:	e024      	b.n	8001b40 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001af6:	2036      	movs	r0, #54	; 0x36
 8001af8:	f7ff fc8a 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 8001afc:	2048      	movs	r0, #72	; 0x48
 8001afe:	f7ff fc95 	bl	800142c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001b02:	202a      	movs	r0, #42	; 0x2a
 8001b04:	f7ff fc84 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff fc8f 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff fc8c 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff fc89 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 8001b1a:	20ef      	movs	r0, #239	; 0xef
 8001b1c:	f7ff fc86 	bl	800142c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001b20:	202b      	movs	r0, #43	; 0x2b
 8001b22:	f7ff fc75 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff fc80 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff fc7d 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001b32:	2001      	movs	r0, #1
 8001b34:	f7ff fc7a 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8001b38:	203f      	movs	r0, #63	; 0x3f
 8001b3a:	f7ff fc77 	bl	800142c <LCD_Write_Data>
		
	    break;
 8001b3e:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8001b40:	202c      	movs	r0, #44	; 0x2c
 8001b42:	f7ff fc65 	bl	8001410 <LCD_Write_Cmd>
	
	
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b094      	sub	sp, #80	; 0x50
 8001b54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b56:	f001 fdf9 	bl	800374c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b5a:	f000 f9f5 	bl	8001f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b5e:	f000 fb73 	bl	8002248 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001b62:	f000 fc09 	bl	8002378 <MX_FSMC_Init>
  MX_DMA_Init();
 8001b66:	f000 fb51 	bl	800220c <MX_DMA_Init>
  MX_I2C2_Init();
 8001b6a:	f000 fa33 	bl	8001fd4 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001b6e:	f000 fa5f 	bl	8002030 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b72:	f000 fafd 	bl	8002170 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Set_LED(0, 255, 255, 0);
 8001b76:	2300      	movs	r3, #0
 8001b78:	22ff      	movs	r2, #255	; 0xff
 8001b7a:	21ff      	movs	r1, #255	; 0xff
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f000 fef1 	bl	8002964 <Set_LED>
  WS2812_Send();
 8001b82:	f000 ff1b 	bl	80029bc <WS2812_Send>

  MPU6050_Initialize(&hi2c2);
 8001b86:	4896      	ldr	r0, [pc, #600]	; (8001de0 <main+0x290>)
 8001b88:	f005 fd64 	bl	8007654 <MPU6050_Initialize>
  MPU6050_SetScaleAccelRange(&hi2c2, MPU6050_ACCEL_RANGE_8_G);
 8001b8c:	2110      	movs	r1, #16
 8001b8e:	4894      	ldr	r0, [pc, #592]	; (8001de0 <main+0x290>)
 8001b90:	f005 fdbe 	bl	8007710 <MPU6050_SetScaleAccelRange>
  MPU6050_SetScaleGyroRange(&hi2c2, MPU6050_GYRO_RANGE_2000_DEG);
 8001b94:	2118      	movs	r1, #24
 8001b96:	4892      	ldr	r0, [pc, #584]	; (8001de0 <main+0x290>)
 8001b98:	f005 fdd6 	bl	8007748 <MPU6050_SetScaleGyroRange>

  macXPT2046_CS_DISABLE();
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba2:	4890      	ldr	r0, [pc, #576]	; (8001de4 <main+0x294>)
 8001ba4:	f002 fd59 	bl	800465a <HAL_GPIO_WritePin>
//  __HAL_RCC_I2C2_CLK_DISABLE();
//  __HAL_RCC_FSMC_CLK_ENABLE();

  LCD_INIT();
 8001ba8:	f7ff fbe7 	bl	800137a <LCD_INIT>

  LCD_Clear (50, 80, 140, 70, RED);
 8001bac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2346      	movs	r3, #70	; 0x46
 8001bb4:	228c      	movs	r2, #140	; 0x8c
 8001bb6:	2150      	movs	r1, #80	; 0x50
 8001bb8:	2032      	movs	r0, #50	; 0x32
 8001bba:	f7ff fdd8 	bl	800176e <LCD_Clear>
  LCD_DrawString(65, 105, "SmartBike DEMO");
 8001bbe:	4a8a      	ldr	r2, [pc, #552]	; (8001de8 <main+0x298>)
 8001bc0:	2169      	movs	r1, #105	; 0x69
 8001bc2:	2041      	movs	r0, #65	; 0x41
 8001bc4:	f7ff fe3c 	bl	8001840 <LCD_DrawString>
  HAL_Delay(1000);
 8001bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bcc:	f001 fe20 	bl	8003810 <HAL_Delay>

  while( ! XPT2046_Touch_Calibrate () );
 8001bd0:	bf00      	nop
 8001bd2:	f001 facd 	bl	8003170 <XPT2046_Touch_Calibrate>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0fa      	beq.n	8001bd2 <main+0x82>

  LCD_GramScan ( 1 );
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff ff05 	bl	80019ec <LCD_GramScan>
  LCD_Clear ( 0, 0, 240, 320, WHITE );
 8001be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bec:	22f0      	movs	r2, #240	; 0xf0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff fdbc 	bl	800176e <LCD_Clear>
  LCD_Clear ( 90,  230,  60, 60, BLUE	);
 8001bf6:	231f      	movs	r3, #31
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	233c      	movs	r3, #60	; 0x3c
 8001bfc:	223c      	movs	r2, #60	; 0x3c
 8001bfe:	21e6      	movs	r1, #230	; 0xe6
 8001c00:	205a      	movs	r0, #90	; 0x5a
 8001c02:	f7ff fdb4 	bl	800176e <LCD_Clear>
  LCD_Clear ( 30,  230,  60, 60,  YELLOW);
 8001c06:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	233c      	movs	r3, #60	; 0x3c
 8001c0e:	223c      	movs	r2, #60	; 0x3c
 8001c10:	21e6      	movs	r1, #230	; 0xe6
 8001c12:	201e      	movs	r0, #30
 8001c14:	f7ff fdab 	bl	800176e <LCD_Clear>
  LCD_Clear ( 150,  230,  60, 60, YELLOW);
 8001c18:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	233c      	movs	r3, #60	; 0x3c
 8001c20:	223c      	movs	r2, #60	; 0x3c
 8001c22:	21e6      	movs	r1, #230	; 0xe6
 8001c24:	2096      	movs	r0, #150	; 0x96
 8001c26:	f7ff fda2 	bl	800176e <LCD_Clear>
  char buf[9];
//  char text[10];
  float Ax, Ay, Az, Gx, Gy, Gz;

  strType_XPT2046_Coordinate touchCoordinate[4];
  int touchFlag = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	647b      	str	r3, [r7, #68]	; 0x44
  int SafetyStatus = 0;	// 0: Save, 1: Caution, 2: Response needed, 3: Danger
 8001c2e:	2300      	movs	r3, #0
 8001c30:	643b      	str	r3, [r7, #64]	; 0x40


  /*
   * Init of RPM Counter with timer and A3144 Hall effect sensor
   * */
  a3144_Init();
 8001c32:	f7ff fb6b 	bl	800130c <a3144_Init>
  float rotSpeed = 0;
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  float tempSpeed = 0;
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	63bb      	str	r3, [r7, #56]	; 0x38
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  MPU6050_Read_DeviceID(&hi2c2);
	  MPU6050_Read_Gyro(&hi2c2);
 8001c42:	4867      	ldr	r0, [pc, #412]	; (8001de0 <main+0x290>)
 8001c44:	f005 ff14 	bl	8007a70 <MPU6050_Read_Gyro>
	  MPU6050_Read_Accel(&hi2c2);
 8001c48:	4865      	ldr	r0, [pc, #404]	; (8001de0 <main+0x290>)
 8001c4a:	f005 fd99 	bl	8007780 <MPU6050_Read_Accel>
//	  MPU6050_Read_Temp(&hi2c2);
//	  HAL_Delay(500);

	  Ax = MPU6050_Ax;
 8001c4e:	4b67      	ldr	r3, [pc, #412]	; (8001dec <main+0x29c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
	  Ay = MPU6050_Ay;
 8001c54:	4b66      	ldr	r3, [pc, #408]	; (8001df0 <main+0x2a0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
	  Az = MPU6050_Az;
 8001c5a:	4b66      	ldr	r3, [pc, #408]	; (8001df4 <main+0x2a4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

	  Gx = MPU6050_Gx;
 8001c60:	4b65      	ldr	r3, [pc, #404]	; (8001df8 <main+0x2a8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
	  Gy = MPU6050_Gy;
 8001c66:	4b65      	ldr	r3, [pc, #404]	; (8001dfc <main+0x2ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
	  Gz = MPU6050_Gz;
 8001c6c:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <main+0x2b0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	623b      	str	r3, [r7, #32]

	  sprintf(buf, "Ax: %0.2f", Ax);
 8001c72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c74:	f7fe fc44 	bl	8000500 <__aeabi_f2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	f107 0014 	add.w	r0, r7, #20
 8001c80:	4960      	ldr	r1, [pc, #384]	; (8001e04 <main+0x2b4>)
 8001c82:	f006 fd13 	bl	80086ac <siprintf>
	  LCD_DrawString(20, 20, buf);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	2114      	movs	r1, #20
 8001c8e:	2014      	movs	r0, #20
 8001c90:	f7ff fdd6 	bl	8001840 <LCD_DrawString>

	  sprintf(buf, "Ay: %0.2f", Ay);
 8001c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c96:	f7fe fc33 	bl	8000500 <__aeabi_f2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	f107 0014 	add.w	r0, r7, #20
 8001ca2:	4959      	ldr	r1, [pc, #356]	; (8001e08 <main+0x2b8>)
 8001ca4:	f006 fd02 	bl	80086ac <siprintf>
	  LCD_DrawString(20, 40, buf);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	461a      	mov	r2, r3
 8001cae:	2128      	movs	r1, #40	; 0x28
 8001cb0:	2014      	movs	r0, #20
 8001cb2:	f7ff fdc5 	bl	8001840 <LCD_DrawString>

	  sprintf(buf, "Az: %0.2f", Az);
 8001cb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cb8:	f7fe fc22 	bl	8000500 <__aeabi_f2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	f107 0014 	add.w	r0, r7, #20
 8001cc4:	4951      	ldr	r1, [pc, #324]	; (8001e0c <main+0x2bc>)
 8001cc6:	f006 fcf1 	bl	80086ac <siprintf>
	  LCD_DrawString(20, 60, buf);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	461a      	mov	r2, r3
 8001cd0:	213c      	movs	r1, #60	; 0x3c
 8001cd2:	2014      	movs	r0, #20
 8001cd4:	f7ff fdb4 	bl	8001840 <LCD_DrawString>

	  sprintf(buf, "Gx: %0.2f", Gx);
 8001cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cda:	f7fe fc11 	bl	8000500 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	f107 0014 	add.w	r0, r7, #20
 8001ce6:	494a      	ldr	r1, [pc, #296]	; (8001e10 <main+0x2c0>)
 8001ce8:	f006 fce0 	bl	80086ac <siprintf>
	  LCD_DrawString(20, 80, buf);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2150      	movs	r1, #80	; 0x50
 8001cf4:	2014      	movs	r0, #20
 8001cf6:	f7ff fda3 	bl	8001840 <LCD_DrawString>

	  sprintf(buf, "Gy: %0.2f", Gy);
 8001cfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cfc:	f7fe fc00 	bl	8000500 <__aeabi_f2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	f107 0014 	add.w	r0, r7, #20
 8001d08:	4942      	ldr	r1, [pc, #264]	; (8001e14 <main+0x2c4>)
 8001d0a:	f006 fccf 	bl	80086ac <siprintf>
	  LCD_DrawString(20, 100, buf);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	461a      	mov	r2, r3
 8001d14:	2164      	movs	r1, #100	; 0x64
 8001d16:	2014      	movs	r0, #20
 8001d18:	f7ff fd92 	bl	8001840 <LCD_DrawString>

	  sprintf(buf, "Gz: %0.2f", Gz);
 8001d1c:	6a38      	ldr	r0, [r7, #32]
 8001d1e:	f7fe fbef 	bl	8000500 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	f107 0014 	add.w	r0, r7, #20
 8001d2a:	493b      	ldr	r1, [pc, #236]	; (8001e18 <main+0x2c8>)
 8001d2c:	f006 fcbe 	bl	80086ac <siprintf>
	  LCD_DrawString(20, 120, buf);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	461a      	mov	r2, r3
 8001d36:	2178      	movs	r1, #120	; 0x78
 8001d38:	2014      	movs	r0, #20
 8001d3a:	f7ff fd81 	bl	8001840 <LCD_DrawString>

	  if (Ay < -0.55){
 8001d3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d40:	f7fe fbde 	bl	8000500 <__aeabi_f2d>
 8001d44:	a322      	add	r3, pc, #136	; (adr r3, 8001dd0 <main+0x280>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	f7fe fea3 	bl	8000a94 <__aeabi_dcmplt>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <main+0x210>
		  LCD_DrawString(80, 140, "Pitch Down");
 8001d54:	4a31      	ldr	r2, [pc, #196]	; (8001e1c <main+0x2cc>)
 8001d56:	218c      	movs	r1, #140	; 0x8c
 8001d58:	2050      	movs	r0, #80	; 0x50
 8001d5a:	f7ff fd71 	bl	8001840 <LCD_DrawString>
 8001d5e:	e015      	b.n	8001d8c <main+0x23c>
	  } else if (Ay > 0.55){
 8001d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d62:	f7fe fbcd 	bl	8000500 <__aeabi_f2d>
 8001d66:	a31c      	add	r3, pc, #112	; (adr r3, 8001dd8 <main+0x288>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f7fe feb0 	bl	8000ad0 <__aeabi_dcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <main+0x232>
		  LCD_DrawString(80, 140, " Pitch up ");
 8001d76:	4a2a      	ldr	r2, [pc, #168]	; (8001e20 <main+0x2d0>)
 8001d78:	218c      	movs	r1, #140	; 0x8c
 8001d7a:	2050      	movs	r0, #80	; 0x50
 8001d7c:	f7ff fd60 	bl	8001840 <LCD_DrawString>
 8001d80:	e004      	b.n	8001d8c <main+0x23c>
	  } else{
		  LCD_DrawString(80, 140, "No Pitch  ");
 8001d82:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <main+0x2d4>)
 8001d84:	218c      	movs	r1, #140	; 0x8c
 8001d86:	2050      	movs	r0, #80	; 0x50
 8001d88:	f7ff fd5a 	bl	8001840 <LCD_DrawString>
	  }

	  if (Ax < -0.55){
 8001d8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d8e:	f7fe fbb7 	bl	8000500 <__aeabi_f2d>
 8001d92:	a30f      	add	r3, pc, #60	; (adr r3, 8001dd0 <main+0x280>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fe7c 	bl	8000a94 <__aeabi_dcmplt>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <main+0x25e>
		  LCD_DrawString(90, 160, " Right ");
 8001da2:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <main+0x2d8>)
 8001da4:	21a0      	movs	r1, #160	; 0xa0
 8001da6:	205a      	movs	r0, #90	; 0x5a
 8001da8:	f7ff fd4a 	bl	8001840 <LCD_DrawString>
 8001dac:	e045      	b.n	8001e3a <main+0x2ea>
	  } else if (Ax > 0.55){
 8001dae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001db0:	f7fe fba6 	bl	8000500 <__aeabi_f2d>
 8001db4:	a308      	add	r3, pc, #32	; (adr r3, 8001dd8 <main+0x288>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fe89 	bl	8000ad0 <__aeabi_dcmpgt>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d035      	beq.n	8001e30 <main+0x2e0>
		  LCD_DrawString(90, 160, " Left ");
 8001dc4:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <main+0x2dc>)
 8001dc6:	21a0      	movs	r1, #160	; 0xa0
 8001dc8:	205a      	movs	r0, #90	; 0x5a
 8001dca:	f7ff fd39 	bl	8001840 <LCD_DrawString>
 8001dce:	e034      	b.n	8001e3a <main+0x2ea>
 8001dd0:	9999999a 	.word	0x9999999a
 8001dd4:	bfe19999 	.word	0xbfe19999
 8001dd8:	9999999a 	.word	0x9999999a
 8001ddc:	3fe19999 	.word	0x3fe19999
 8001de0:	20000360 	.word	0x20000360
 8001de4:	40011400 	.word	0x40011400
 8001de8:	0800aba0 	.word	0x0800aba0
 8001dec:	20000290 	.word	0x20000290
 8001df0:	20000278 	.word	0x20000278
 8001df4:	20000264 	.word	0x20000264
 8001df8:	2000026c 	.word	0x2000026c
 8001dfc:	2000027c 	.word	0x2000027c
 8001e00:	20000294 	.word	0x20000294
 8001e04:	0800abb0 	.word	0x0800abb0
 8001e08:	0800abbc 	.word	0x0800abbc
 8001e0c:	0800abc8 	.word	0x0800abc8
 8001e10:	0800abd4 	.word	0x0800abd4
 8001e14:	0800abe0 	.word	0x0800abe0
 8001e18:	0800abec 	.word	0x0800abec
 8001e1c:	0800abf8 	.word	0x0800abf8
 8001e20:	0800ac04 	.word	0x0800ac04
 8001e24:	0800ac10 	.word	0x0800ac10
 8001e28:	0800ac1c 	.word	0x0800ac1c
 8001e2c:	0800ac24 	.word	0x0800ac24
	  }	else{
		  LCD_DrawString(90, 160, " Still ");
 8001e30:	4a3e      	ldr	r2, [pc, #248]	; (8001f2c <main+0x3dc>)
 8001e32:	21a0      	movs	r1, #160	; 0xa0
 8001e34:	205a      	movs	r0, #90	; 0x5a
 8001e36:	f7ff fd03 	bl	8001840 <LCD_DrawString>
	  }

	  if (Az < 0) {
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e40:	f7ff f9aa 	bl	8001198 <__aeabi_fcmplt>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <main+0x310>
		  LCD_DrawString_Color(90, 180, " Crash?? ", RED, BLACK);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e52:	4a37      	ldr	r2, [pc, #220]	; (8001f30 <main+0x3e0>)
 8001e54:	21b4      	movs	r1, #180	; 0xb4
 8001e56:	205a      	movs	r0, #90	; 0x5a
 8001e58:	f7ff fd92 	bl	8001980 <LCD_DrawString_Color>
		  SafetyStatus = 2;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	643b      	str	r3, [r7, #64]	; 0x40
	  }


	  HAL_Delay(200);
 8001e60:	20c8      	movs	r0, #200	; 0xc8
 8001e62:	f001 fcd5 	bl	8003810 <HAL_Delay>

	  if ( touchFlag == 0 )
 8001e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d144      	bne.n	8001ef6 <main+0x3a6>
	  {
		  if ( XPT2046_Get_TouchedPoint ( & touchCoordinate, & strXPT2046_TouchPara ) )
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	4931      	ldr	r1, [pc, #196]	; (8001f34 <main+0x3e4>)
 8001e70:	4618      	mov	r0, r3
 8001e72:	f001 fbbd 	bl	80035f0 <XPT2046_Get_TouchedPoint>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d039      	beq.n	8001ef0 <main+0x3a0>
		  {
			  if ( ( touchCoordinate->y > 232 ) && ( touchCoordinate->y < 282 ) )
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	2be8      	cmp	r3, #232	; 0xe8
 8001e80:	d936      	bls.n	8001ef0 <main+0x3a0>
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8001e88:	d232      	bcs.n	8001ef0 <main+0x3a0>
			  {
				  if ( ( touchCoordinate->x > 95 ) && ( touchCoordinate->x < 145 ) )
 8001e8a:	88bb      	ldrh	r3, [r7, #4]
 8001e8c:	2b5f      	cmp	r3, #95	; 0x5f
 8001e8e:	d91b      	bls.n	8001ec8 <main+0x378>
 8001e90:	88bb      	ldrh	r3, [r7, #4]
 8001e92:	2b90      	cmp	r3, #144	; 0x90
 8001e94:	d818      	bhi.n	8001ec8 <main+0x378>
				  {
					  LCD_DrawString(71, 200, "     Reset    ");
 8001e96:	4a28      	ldr	r2, [pc, #160]	; (8001f38 <main+0x3e8>)
 8001e98:	21c8      	movs	r1, #200	; 0xc8
 8001e9a:	2047      	movs	r0, #71	; 0x47
 8001e9c:	f7ff fcd0 	bl	8001840 <LCD_DrawString>
					  SafetyStatus = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	643b      	str	r3, [r7, #64]	; 0x40
					  LCD_Clear(90, 180, 90, 20, WHITE);
 8001ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2314      	movs	r3, #20
 8001eac:	225a      	movs	r2, #90	; 0x5a
 8001eae:	21b4      	movs	r1, #180	; 0xb4
 8001eb0:	205a      	movs	r0, #90	; 0x5a
 8001eb2:	f7ff fc5c 	bl	800176e <LCD_Clear>
					  LCD_Clear(70, 200, 90, 20, WHITE);
 8001eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2314      	movs	r3, #20
 8001ebe:	225a      	movs	r2, #90	; 0x5a
 8001ec0:	21c8      	movs	r1, #200	; 0xc8
 8001ec2:	2046      	movs	r0, #70	; 0x46
 8001ec4:	f7ff fc53 	bl	800176e <LCD_Clear>
				  }

				  if (touchCoordinate->x < 90)
 8001ec8:	88bb      	ldrh	r3, [r7, #4]
 8001eca:	2b59      	cmp	r3, #89	; 0x59
 8001ecc:	d806      	bhi.n	8001edc <main+0x38c>
				  {
					  SafetyStatus = 1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	643b      	str	r3, [r7, #64]	; 0x40
					  LCD_DrawString(71, 200, "Turning Left! ");
 8001ed2:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <main+0x3ec>)
 8001ed4:	21c8      	movs	r1, #200	; 0xc8
 8001ed6:	2047      	movs	r0, #71	; 0x47
 8001ed8:	f7ff fcb2 	bl	8001840 <LCD_DrawString>
				  }

				  if (touchCoordinate->x > 150)
 8001edc:	88bb      	ldrh	r3, [r7, #4]
 8001ede:	2b96      	cmp	r3, #150	; 0x96
 8001ee0:	d906      	bls.n	8001ef0 <main+0x3a0>
				  {
					  SafetyStatus = 1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	643b      	str	r3, [r7, #64]	; 0x40
					  LCD_DrawString(71, 200, "Turning Right!");
 8001ee6:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <main+0x3f0>)
 8001ee8:	21c8      	movs	r1, #200	; 0xc8
 8001eea:	2047      	movs	r0, #71	; 0x47
 8001eec:	f7ff fca8 	bl	8001840 <LCD_DrawString>
				  }
			  }

		  }
		  touchFlag = 1;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef4:	e001      	b.n	8001efa <main+0x3aa>
	  }
	  else {
//		  LCD_DrawString(70, 200, "..............");
		  touchFlag = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	647b      	str	r3, [r7, #68]	; 0x44
	  }
	  HAL_Delay(50);
 8001efa:	2032      	movs	r0, #50	; 0x32
 8001efc:	f001 fc88 	bl	8003810 <HAL_Delay>



	  rotSpeed = GetRotationSpeed();
 8001f00:	f7ff f9ce 	bl	80012a0 <GetRotationSpeed>
 8001f04:	63f8      	str	r0, [r7, #60]	; 0x3c
	  sprintf(buf, "RotSpeed: %0.2f", rotSpeed);
 8001f06:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f08:	f7fe fafa 	bl	8000500 <__aeabi_f2d>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	f107 0014 	add.w	r0, r7, #20
 8001f14:	490b      	ldr	r1, [pc, #44]	; (8001f44 <main+0x3f4>)
 8001f16:	f006 fbc9 	bl	80086ac <siprintf>
	  LCD_DrawString(30, 0, buf);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2100      	movs	r1, #0
 8001f22:	201e      	movs	r0, #30
 8001f24:	f7ff fc8c 	bl	8001840 <LCD_DrawString>
	  MPU6050_Read_Gyro(&hi2c2);
 8001f28:	e68b      	b.n	8001c42 <main+0xf2>
 8001f2a:	bf00      	nop
 8001f2c:	0800ac2c 	.word	0x0800ac2c
 8001f30:	0800ac34 	.word	0x0800ac34
 8001f34:	20000008 	.word	0x20000008
 8001f38:	0800ac40 	.word	0x0800ac40
 8001f3c:	0800ac50 	.word	0x0800ac50
 8001f40:	0800ac60 	.word	0x0800ac60
 8001f44:	0800ac70 	.word	0x0800ac70

08001f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b090      	sub	sp, #64	; 0x40
 8001f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f4e:	f107 0318 	add.w	r3, r7, #24
 8001f52:	2228      	movs	r2, #40	; 0x28
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f005 ff40 	bl	8007ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f86:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f8c:	f107 0318 	add.w	r3, r7, #24
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 fb7b 	bl	800568c <HAL_RCC_OscConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f9c:	f000 fa6a 	bl	8002474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2102      	movs	r1, #2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fde7 	bl	8005b90 <HAL_RCC_ClockConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001fc8:	f000 fa54 	bl	8002474 <Error_Handler>
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3740      	adds	r7, #64	; 0x40
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <MX_I2C2_Init+0x50>)
 8001fda:	4a13      	ldr	r2, [pc, #76]	; (8002028 <MX_I2C2_Init+0x54>)
 8001fdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <MX_I2C2_Init+0x50>)
 8001fe0:	4a12      	ldr	r2, [pc, #72]	; (800202c <MX_I2C2_Init+0x58>)
 8001fe2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <MX_I2C2_Init+0x50>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <MX_I2C2_Init+0x50>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <MX_I2C2_Init+0x50>)
 8001ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ff6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <MX_I2C2_Init+0x50>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MX_I2C2_Init+0x50>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <MX_I2C2_Init+0x50>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <MX_I2C2_Init+0x50>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002010:	4804      	ldr	r0, [pc, #16]	; (8002024 <MX_I2C2_Init+0x50>)
 8002012:	f002 fb3b 	bl	800468c <HAL_I2C_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800201c:	f000 fa2a 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000360 	.word	0x20000360
 8002028:	40005800 	.word	0x40005800
 800202c:	000186a0 	.word	0x000186a0

08002030 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b096      	sub	sp, #88	; 0x58
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
 800205c:	611a      	str	r2, [r3, #16]
 800205e:	615a      	str	r2, [r3, #20]
 8002060:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2220      	movs	r2, #32
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f005 feb7 	bl	8007ddc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800206e:	4b3e      	ldr	r3, [pc, #248]	; (8002168 <MX_TIM1_Init+0x138>)
 8002070:	4a3e      	ldr	r2, [pc, #248]	; (800216c <MX_TIM1_Init+0x13c>)
 8002072:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002074:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <MX_TIM1_Init+0x138>)
 8002076:	2200      	movs	r2, #0
 8002078:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <MX_TIM1_Init+0x138>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72-1;
 8002080:	4b39      	ldr	r3, [pc, #228]	; (8002168 <MX_TIM1_Init+0x138>)
 8002082:	2247      	movs	r2, #71	; 0x47
 8002084:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002086:	4b38      	ldr	r3, [pc, #224]	; (8002168 <MX_TIM1_Init+0x138>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800208c:	4b36      	ldr	r3, [pc, #216]	; (8002168 <MX_TIM1_Init+0x138>)
 800208e:	2200      	movs	r2, #0
 8002090:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002092:	4b35      	ldr	r3, [pc, #212]	; (8002168 <MX_TIM1_Init+0x138>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002098:	4833      	ldr	r0, [pc, #204]	; (8002168 <MX_TIM1_Init+0x138>)
 800209a:	f003 ff4a 	bl	8005f32 <HAL_TIM_Base_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80020a4:	f000 f9e6 	bl	8002474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020b2:	4619      	mov	r1, r3
 80020b4:	482c      	ldr	r0, [pc, #176]	; (8002168 <MX_TIM1_Init+0x138>)
 80020b6:	f004 fc85 	bl	80069c4 <HAL_TIM_ConfigClockSource>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80020c0:	f000 f9d8 	bl	8002474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020c4:	4828      	ldr	r0, [pc, #160]	; (8002168 <MX_TIM1_Init+0x138>)
 80020c6:	f003 ffe3 	bl	8006090 <HAL_TIM_PWM_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80020d0:	f000 f9d0 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020e0:	4619      	mov	r1, r3
 80020e2:	4821      	ldr	r0, [pc, #132]	; (8002168 <MX_TIM1_Init+0x138>)
 80020e4:	f005 f910 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80020ee:	f000 f9c1 	bl	8002474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f2:	2360      	movs	r3, #96	; 0x60
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020fe:	2300      	movs	r3, #0
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800210e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002112:	2200      	movs	r2, #0
 8002114:	4619      	mov	r1, r3
 8002116:	4814      	ldr	r0, [pc, #80]	; (8002168 <MX_TIM1_Init+0x138>)
 8002118:	f004 fb96 	bl	8006848 <HAL_TIM_PWM_ConfigChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002122:	f000 f9a7 	bl	8002474 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800213a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800213e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	4619      	mov	r1, r3
 8002148:	4807      	ldr	r0, [pc, #28]	; (8002168 <MX_TIM1_Init+0x138>)
 800214a:	f005 f949 	bl	80073e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002154:	f000 f98e 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002158:	4803      	ldr	r0, [pc, #12]	; (8002168 <MX_TIM1_Init+0x138>)
 800215a:	f000 fa69 	bl	8002630 <HAL_TIM_MspPostInit>

}
 800215e:	bf00      	nop
 8002160:	3758      	adds	r7, #88	; 0x58
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000740 	.word	0x20000740
 800216c:	40012c00 	.word	0x40012c00

08002170 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002184:	463b      	mov	r3, r7
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <MX_TIM3_Init+0x94>)
 800218e:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <MX_TIM3_Init+0x98>)
 8002190:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <MX_TIM3_Init+0x94>)
 8002194:	2247      	movs	r2, #71	; 0x47
 8002196:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <MX_TIM3_Init+0x94>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <MX_TIM3_Init+0x94>)
 80021a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a6:	4b17      	ldr	r3, [pc, #92]	; (8002204 <MX_TIM3_Init+0x94>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <MX_TIM3_Init+0x94>)
 80021ae:	2280      	movs	r2, #128	; 0x80
 80021b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021b2:	4814      	ldr	r0, [pc, #80]	; (8002204 <MX_TIM3_Init+0x94>)
 80021b4:	f003 febd 	bl	8005f32 <HAL_TIM_Base_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80021be:	f000 f959 	bl	8002474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021c8:	f107 0308 	add.w	r3, r7, #8
 80021cc:	4619      	mov	r1, r3
 80021ce:	480d      	ldr	r0, [pc, #52]	; (8002204 <MX_TIM3_Init+0x94>)
 80021d0:	f004 fbf8 	bl	80069c4 <HAL_TIM_ConfigClockSource>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80021da:	f000 f94b 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021e6:	463b      	mov	r3, r7
 80021e8:	4619      	mov	r1, r3
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <MX_TIM3_Init+0x94>)
 80021ec:	f005 f88c 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80021f6:	f000 f93d 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000029c 	.word	0x2000029c
 8002208:	40000400 	.word	0x40000400

0800220c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_DMA_Init+0x38>)
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <MX_DMA_Init+0x38>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6153      	str	r3, [r2, #20]
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_DMA_Init+0x38>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	200c      	movs	r0, #12
 8002230:	f001 fbe9 	bl	8003a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002234:	200c      	movs	r0, #12
 8002236:	f001 fc02 	bl	8003a3e <HAL_NVIC_EnableIRQ>

}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000

08002248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224e:	f107 0318 	add.w	r3, r7, #24
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800225c:	4b42      	ldr	r3, [pc, #264]	; (8002368 <MX_GPIO_Init+0x120>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a41      	ldr	r2, [pc, #260]	; (8002368 <MX_GPIO_Init+0x120>)
 8002262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <MX_GPIO_Init+0x120>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002274:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <MX_GPIO_Init+0x120>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <MX_GPIO_Init+0x120>)
 800227a:	f043 0310 	orr.w	r3, r3, #16
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <MX_GPIO_Init+0x120>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228c:	4b36      	ldr	r3, [pc, #216]	; (8002368 <MX_GPIO_Init+0x120>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4a35      	ldr	r2, [pc, #212]	; (8002368 <MX_GPIO_Init+0x120>)
 8002292:	f043 0308 	orr.w	r3, r3, #8
 8002296:	6193      	str	r3, [r2, #24]
 8002298:	4b33      	ldr	r3, [pc, #204]	; (8002368 <MX_GPIO_Init+0x120>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a4:	4b30      	ldr	r3, [pc, #192]	; (8002368 <MX_GPIO_Init+0x120>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	4a2f      	ldr	r2, [pc, #188]	; (8002368 <MX_GPIO_Init+0x120>)
 80022aa:	f043 0320 	orr.w	r3, r3, #32
 80022ae:	6193      	str	r3, [r2, #24]
 80022b0:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <MX_GPIO_Init+0x120>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022bc:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <MX_GPIO_Init+0x120>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4a29      	ldr	r2, [pc, #164]	; (8002368 <MX_GPIO_Init+0x120>)
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <MX_GPIO_Init+0x120>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XPT2046_SPI_MOSI_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2106      	movs	r1, #6
 80022d8:	4824      	ldr	r0, [pc, #144]	; (800236c <MX_GPIO_Init+0x124>)
 80022da:	f002 f9be 	bl	800465a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin|XPT2046_SPI_CS_Pin, GPIO_PIN_RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80022e4:	4822      	ldr	r0, [pc, #136]	; (8002370 <MX_GPIO_Init+0x128>)
 80022e6:	f002 f9b8 	bl	800465a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XPT2046_SPI_CLK_GPIO_Port, XPT2046_SPI_CLK_Pin, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	2101      	movs	r1, #1
 80022ee:	481f      	ldr	r0, [pc, #124]	; (800236c <MX_GPIO_Init+0x124>)
 80022f0:	f002 f9b3 	bl	800465a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : XPT2046_SPI_MOSI_Pin XPT2046_SPI_CLK_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = XPT2046_SPI_MOSI_Pin|XPT2046_SPI_CLK_Pin|LCD_RST_Pin;
 80022f4:	2307      	movs	r3, #7
 80022f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f8:	2301      	movs	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	4619      	mov	r1, r3
 800230a:	4818      	ldr	r0, [pc, #96]	; (800236c <MX_GPIO_Init+0x124>)
 800230c:	f001 fffa 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pin : XPT2046_SPI_MISO_Pin */
  GPIO_InitStruct.Pin = XPT2046_SPI_MISO_Pin;
 8002310:	2308      	movs	r3, #8
 8002312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002318:	2301      	movs	r3, #1
 800231a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(XPT2046_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 0318 	add.w	r3, r7, #24
 8002320:	4619      	mov	r1, r3
 8002322:	4812      	ldr	r0, [pc, #72]	; (800236c <MX_GPIO_Init+0x124>)
 8002324:	f001 ffee 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3144_Pin */
  GPIO_InitStruct.Pin = A3144_Pin;
 8002328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800232c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A3144_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 0318 	add.w	r3, r7, #24
 800233a:	4619      	mov	r1, r3
 800233c:	480d      	ldr	r0, [pc, #52]	; (8002374 <MX_GPIO_Init+0x12c>)
 800233e:	f001 ffe1 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin XPT2046_SPI_CS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|XPT2046_SPI_CS_Pin;
 8002342:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002354:	f107 0318 	add.w	r3, r7, #24
 8002358:	4619      	mov	r1, r3
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_GPIO_Init+0x128>)
 800235c:	f001 ffd2 	bl	8004304 <HAL_GPIO_Init>

}
 8002360:	bf00      	nop
 8002362:	3728      	adds	r7, #40	; 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	40011800 	.word	0x40011800
 8002370:	40011400 	.word	0x40011400
 8002374:	40010c00 	.word	0x40010c00

08002378 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08e      	sub	sp, #56	; 0x38
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	615a      	str	r2, [r3, #20]
 8002390:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8002392:	463b      	mov	r3, r7
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
 80023a0:	615a      	str	r2, [r3, #20]
 80023a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80023a4:	4b30      	ldr	r3, [pc, #192]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023a6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80023aa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80023ac:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023ae:	4a2f      	ldr	r2, [pc, #188]	; (800246c <MX_FSMC_Init+0xf4>)
 80023b0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80023b2:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80023c4:	4b28      	ldr	r3, [pc, #160]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023c6:	2210      	movs	r2, #16
 80023c8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80023ca:	4b27      	ldr	r3, [pc, #156]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80023d0:	4b25      	ldr	r3, [pc, #148]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80023d6:	4b24      	ldr	r3, [pc, #144]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80023dc:	4b22      	ldr	r3, [pc, #136]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <MX_FSMC_Init+0xf0>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <MX_FSMC_Init+0xf0>)
 8002400:	2200      	movs	r2, #0
 8002402:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8002408:	230f      	movs	r3, #15
 800240a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 26;
 800240c:	231a      	movs	r3, #26
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8002414:	2310      	movs	r3, #16
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8002418:	2311      	movs	r3, #17
 800241a:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800241c:	2300      	movs	r3, #0
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8002424:	230f      	movs	r3, #15
 8002426:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 1;
 8002428:	2301      	movs	r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8002430:	2310      	movs	r3, #16
 8002432:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8002434:	2311      	movs	r3, #17
 8002436:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800243c:	463a      	mov	r2, r7
 800243e:	f107 031c 	add.w	r3, r7, #28
 8002442:	4619      	mov	r1, r3
 8002444:	4808      	ldr	r0, [pc, #32]	; (8002468 <MX_FSMC_Init+0xf0>)
 8002446:	f003 fd27 	bl	8005e98 <HAL_SRAM_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8002450:	f000 f810 	bl	8002474 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_FSMC_Init+0xf8>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	4a05      	ldr	r2, [pc, #20]	; (8002470 <MX_FSMC_Init+0xf8>)
 800245a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002460:	bf00      	nop
 8002462:	3738      	adds	r7, #56	; 0x38
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200003f0 	.word	0x200003f0
 800246c:	a0000104 	.word	0xa0000104
 8002470:	40010000 	.word	0x40010000

08002474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002478:	b672      	cpsid	i
}
 800247a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800247c:	e7fe      	b.n	800247c <Error_Handler+0x8>
	...

08002480 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_MspInit+0x5c>)
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	4a14      	ldr	r2, [pc, #80]	; (80024dc <HAL_MspInit+0x5c>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6193      	str	r3, [r2, #24]
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_MspInit+0x5c>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <HAL_MspInit+0x5c>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <HAL_MspInit+0x5c>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a8:	61d3      	str	r3, [r2, #28]
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <HAL_MspInit+0x5c>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_MspInit+0x60>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <HAL_MspInit+0x60>)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010000 	.word	0x40010000

080024e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a16      	ldr	r2, [pc, #88]	; (8002558 <HAL_I2C_MspInit+0x74>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d124      	bne.n	800254e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_I2C_MspInit+0x78>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <HAL_I2C_MspInit+0x78>)
 800250a:	f043 0308 	orr.w	r3, r3, #8
 800250e:	6193      	str	r3, [r2, #24]
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_I2C_MspInit+0x78>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800251c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002520:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002522:	2312      	movs	r3, #18
 8002524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252a:	f107 0310 	add.w	r3, r7, #16
 800252e:	4619      	mov	r1, r3
 8002530:	480b      	ldr	r0, [pc, #44]	; (8002560 <HAL_I2C_MspInit+0x7c>)
 8002532:	f001 fee7 	bl	8004304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_I2C_MspInit+0x78>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_I2C_MspInit+0x78>)
 800253c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002540:	61d3      	str	r3, [r2, #28]
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_I2C_MspInit+0x78>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800254e:	bf00      	nop
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40005800 	.word	0x40005800
 800255c:	40021000 	.word	0x40021000
 8002560:	40010c00 	.word	0x40010c00

08002564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2a      	ldr	r2, [pc, #168]	; (800261c <HAL_TIM_Base_MspInit+0xb8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d134      	bne.n	80025e0 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002576:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <HAL_TIM_Base_MspInit+0xbc>)
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	4a29      	ldr	r2, [pc, #164]	; (8002620 <HAL_TIM_Base_MspInit+0xbc>)
 800257c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002580:	6193      	str	r3, [r2, #24]
 8002582:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_TIM_Base_MspInit+0xbc>)
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_TIM_Base_MspInit+0xc0>)
 8002590:	4a25      	ldr	r2, [pc, #148]	; (8002628 <HAL_TIM_Base_MspInit+0xc4>)
 8002592:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_TIM_Base_MspInit+0xc0>)
 8002596:	2210      	movs	r2, #16
 8002598:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_TIM_Base_MspInit+0xc0>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80025a0:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_TIM_Base_MspInit+0xc0>)
 80025a2:	2280      	movs	r2, #128	; 0x80
 80025a4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_TIM_Base_MspInit+0xc0>)
 80025a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ac:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_TIM_Base_MspInit+0xc0>)
 80025b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_TIM_Base_MspInit+0xc0>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_TIM_Base_MspInit+0xc0>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80025c2:	4818      	ldr	r0, [pc, #96]	; (8002624 <HAL_TIM_Base_MspInit+0xc0>)
 80025c4:	f001 fa56 	bl	8003a74 <HAL_DMA_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80025ce:	f7ff ff51 	bl	8002474 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a13      	ldr	r2, [pc, #76]	; (8002624 <HAL_TIM_Base_MspInit+0xc0>)
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_TIM_Base_MspInit+0xc0>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025de:	e018      	b.n	8002612 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a11      	ldr	r2, [pc, #68]	; (800262c <HAL_TIM_Base_MspInit+0xc8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d113      	bne.n	8002612 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <HAL_TIM_Base_MspInit+0xbc>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <HAL_TIM_Base_MspInit+0xbc>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	61d3      	str	r3, [r2, #28]
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_TIM_Base_MspInit+0xbc>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	201d      	movs	r0, #29
 8002608:	f001 f9fd 	bl	8003a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800260c:	201d      	movs	r0, #29
 800260e:	f001 fa16 	bl	8003a3e <HAL_NVIC_EnableIRQ>
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40012c00 	.word	0x40012c00
 8002620:	40021000 	.word	0x40021000
 8002624:	200002e4 	.word	0x200002e4
 8002628:	4002001c 	.word	0x4002001c
 800262c:	40000400 	.word	0x40000400

08002630 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0310 	add.w	r3, r7, #16
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a10      	ldr	r2, [pc, #64]	; (800268c <HAL_TIM_MspPostInit+0x5c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d118      	bne.n	8002682 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <HAL_TIM_MspPostInit+0x60>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <HAL_TIM_MspPostInit+0x60>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6193      	str	r3, [r2, #24]
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_TIM_MspPostInit+0x60>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800266c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002672:	2302      	movs	r3, #2
 8002674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	4619      	mov	r1, r3
 800267c:	4805      	ldr	r0, [pc, #20]	; (8002694 <HAL_TIM_MspPostInit+0x64>)
 800267e:	f001 fe41 	bl	8004304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002682:	bf00      	nop
 8002684:	3720      	adds	r7, #32
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40021000 	.word	0x40021000
 8002694:	40010800 	.word	0x40010800

08002698 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800269e:	f107 0308 	add.w	r3, r7, #8
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <HAL_FSMC_MspInit+0x78>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d129      	bne.n	8002708 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_FSMC_MspInit+0x78>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_FSMC_MspInit+0x7c>)
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	4a15      	ldr	r2, [pc, #84]	; (8002714 <HAL_FSMC_MspInit+0x7c>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c4:	6153      	str	r3, [r2, #20]
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <HAL_FSMC_MspInit+0x7c>)
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80026d2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80026d6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026dc:	2303      	movs	r3, #3
 80026de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026e0:	f107 0308 	add.w	r3, r7, #8
 80026e4:	4619      	mov	r1, r3
 80026e6:	480c      	ldr	r0, [pc, #48]	; (8002718 <HAL_FSMC_MspInit+0x80>)
 80026e8:	f001 fe0c 	bl	8004304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80026ec:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80026f0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026fa:	f107 0308 	add.w	r3, r7, #8
 80026fe:	4619      	mov	r1, r3
 8002700:	4806      	ldr	r0, [pc, #24]	; (800271c <HAL_FSMC_MspInit+0x84>)
 8002702:	f001 fdff 	bl	8004304 <HAL_GPIO_Init>
 8002706:	e000      	b.n	800270a <HAL_FSMC_MspInit+0x72>
    return;
 8002708:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000248 	.word	0x20000248
 8002714:	40021000 	.word	0x40021000
 8002718:	40011800 	.word	0x40011800
 800271c:	40011400 	.word	0x40011400

08002720 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002728:	f7ff ffb6 	bl	8002698 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002744:	e7fe      	b.n	8002744 <HardFault_Handler+0x4>

08002746 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274a:	e7fe      	b.n	800274a <MemManage_Handler+0x4>

0800274c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <BusFault_Handler+0x4>

08002752 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <UsageFault_Handler+0x4>

08002758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002780:	f001 f82a 	bl	80037d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}

08002788 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <DMA1_Channel2_IRQHandler+0x10>)
 800278e:	f001 fb4f 	bl	8003e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200002e4 	.word	0x200002e4

0800279c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <TIM3_IRQHandler+0x10>)
 80027a2:	f003 ff49 	bl	8006638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2000029c 	.word	0x2000029c

080027b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
	return 1;
 80027b4:	2301      	movs	r3, #1
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <_kill>:

int _kill(int pid, int sig)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027c8:	f005 fad0 	bl	8007d6c <__errno>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2216      	movs	r2, #22
 80027d0:	601a      	str	r2, [r3, #0]
	return -1;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_exit>:

void _exit (int status)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ffe7 	bl	80027be <_kill>
	while (1) {}		/* Make sure we hang here */
 80027f0:	e7fe      	b.n	80027f0 <_exit+0x12>

080027f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e00a      	b.n	800281a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002804:	f3af 8000 	nop.w
 8002808:	4601      	mov	r1, r0
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	60ba      	str	r2, [r7, #8]
 8002810:	b2ca      	uxtb	r2, r1
 8002812:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3301      	adds	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	429a      	cmp	r2, r3
 8002820:	dbf0      	blt.n	8002804 <_read+0x12>
	}

return len;
 8002822:	687b      	ldr	r3, [r7, #4]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	e009      	b.n	8002852 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	60ba      	str	r2, [r7, #8]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3301      	adds	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	429a      	cmp	r2, r3
 8002858:	dbf1      	blt.n	800283e <_write+0x12>
	}
	return len;
 800285a:	687b      	ldr	r3, [r7, #4]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_close>:

int _close(int file)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	return -1;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800288a:	605a      	str	r2, [r3, #4]
	return 0;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <_isatty>:

int _isatty(int file)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	return 1;
 80028a0:	2301      	movs	r3, #1
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
	return 0;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028cc:	4a14      	ldr	r2, [pc, #80]	; (8002920 <_sbrk+0x5c>)
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <_sbrk+0x60>)
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <_sbrk+0x64>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <_sbrk+0x64>)
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <_sbrk+0x68>)
 80028e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <_sbrk+0x64>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d207      	bcs.n	8002904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f4:	f005 fa3a 	bl	8007d6c <__errno>
 80028f8:	4603      	mov	r3, r0
 80028fa:	220c      	movs	r2, #12
 80028fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002902:	e009      	b.n	8002918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <_sbrk+0x64>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <_sbrk+0x64>)
 8002914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20010000 	.word	0x20010000
 8002924:	00000400 	.word	0x00000400
 8002928:	2000024c 	.word	0x2000024c
 800292c:	20000790 	.word	0x20000790

08002930 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <HAL_TIM_PWM_PulseFinishedCallback>:
#include "ws2812.h"

TIM_HandleTypeDef htim1;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8002944:	2100      	movs	r1, #0
 8002946:	4805      	ldr	r0, [pc, #20]	; (800295c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8002948:	f003 fdac 	bl	80064a4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000740 	.word	0x20000740
 8002960:	200003b4 	.word	0x200003b4

08002964 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	b2d9      	uxtb	r1, r3
 8002976:	4a10      	ldr	r2, [pc, #64]	; (80029b8 <Set_LED+0x54>)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	b2d9      	uxtb	r1, r3
 8002982:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <Set_LED+0x54>)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	460a      	mov	r2, r1
 800298c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	b2d9      	uxtb	r1, r3
 8002992:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <Set_LED+0x54>)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	460a      	mov	r2, r1
 800299c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2d9      	uxtb	r1, r3
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <Set_LED+0x54>)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	460a      	mov	r2, r1
 80029ac:	70da      	strb	r2, [r3, #3]
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	20000328 	.word	0x20000328

080029bc <WS2812_Send>:
#endif

}

void WS2812_Send (void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	e036      	b.n	8002a3a <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80029cc:	4a2e      	ldr	r2, [pc, #184]	; (8002a88 <WS2812_Send+0xcc>)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	785b      	ldrb	r3, [r3, #1]
 80029d6:	041a      	lsls	r2, r3, #16
 80029d8:	492b      	ldr	r1, [pc, #172]	; (8002a88 <WS2812_Send+0xcc>)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	789b      	ldrb	r3, [r3, #2]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	431a      	orrs	r2, r3
 80029e6:	4928      	ldr	r1, [pc, #160]	; (8002a88 <WS2812_Send+0xcc>)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	78db      	ldrb	r3, [r3, #3]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80029f4:	2317      	movs	r3, #23
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e019      	b.n	8002a2e <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80029fa:	2201      	movs	r2, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8002a0c:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <WS2812_Send+0xd0>)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	213c      	movs	r1, #60	; 0x3c
 8002a12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002a16:	e004      	b.n	8002a22 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8002a18:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <WS2812_Send+0xd0>)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	211e      	movs	r1, #30
 8002a1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3301      	adds	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	dae2      	bge.n	80029fa <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	3301      	adds	r3, #1
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b0d      	cmp	r3, #13
 8002a3e:	ddc5      	ble.n	80029cc <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	e00a      	b.n	8002a5c <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8002a46:	4a11      	ldr	r2, [pc, #68]	; (8002a8c <WS2812_Send+0xd0>)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3301      	adds	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b31      	cmp	r3, #49	; 0x31
 8002a60:	ddf1      	ble.n	8002a46 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <WS2812_Send+0xd0>)
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4809      	ldr	r0, [pc, #36]	; (8002a90 <WS2812_Send+0xd4>)
 8002a6c:	f003 fb68 	bl	8006140 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8002a70:	bf00      	nop
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <WS2812_Send+0xd8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0fb      	beq.n	8002a72 <WS2812_Send+0xb6>
	datasentflag = 0;
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <WS2812_Send+0xd8>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
}
 8002a80:	bf00      	nop
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200003b8 	.word	0x200003b8
 8002a8c:	20000438 	.word	0x20000438
 8002a90:	20000740 	.word	0x20000740
 8002a94:	200003b4 	.word	0x200003b4

08002a98 <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e00a      	b.n	8002abc <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 8002aa6:	230c      	movs	r3, #12
 8002aa8:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 8002aaa:	bf00      	nop
 8002aac:	7afb      	ldrb	r3, [r7, #11]
 8002aae:	1e5a      	subs	r2, r3, #1
 8002ab0:	72fa      	strb	r2, [r7, #11]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1fa      	bne.n	8002aac <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3f0      	bcc.n	8002aa6 <XPT2046_DelayUS+0xe>

	}
	
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 8002ada:	2200      	movs	r2, #0
 8002adc:	2104      	movs	r1, #4
 8002ade:	481d      	ldr	r0, [pc, #116]	; (8002b54 <XPT2046_WriteCMD+0x84>)
 8002ae0:	f001 fdbb 	bl	800465a <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	481a      	ldr	r0, [pc, #104]	; (8002b54 <XPT2046_WriteCMD+0x84>)
 8002aea:	f001 fdb6 	bl	800465a <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 8002aee:	2300      	movs	r3, #0
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	e027      	b.n	8002b44 <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002af4:	79fa      	ldrb	r2, [r7, #7]
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	f1c3 0307 	rsb	r3, r3, #7
 8002afc:	fa42 f303 	asr.w	r3, r2, r3
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <XPT2046_WriteCMD+0x44>
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	4811      	ldr	r0, [pc, #68]	; (8002b54 <XPT2046_WriteCMD+0x84>)
 8002b0e:	f001 fda4 	bl	800465a <HAL_GPIO_WritePin>
 8002b12:	e004      	b.n	8002b1e <XPT2046_WriteCMD+0x4e>
 8002b14:	2200      	movs	r2, #0
 8002b16:	2104      	movs	r1, #4
 8002b18:	480e      	ldr	r0, [pc, #56]	; (8002b54 <XPT2046_WriteCMD+0x84>)
 8002b1a:	f001 fd9e 	bl	800465a <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 8002b1e:	2005      	movs	r0, #5
 8002b20:	f7ff ffba 	bl	8002a98 <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 8002b24:	2201      	movs	r2, #1
 8002b26:	2101      	movs	r1, #1
 8002b28:	480a      	ldr	r0, [pc, #40]	; (8002b54 <XPT2046_WriteCMD+0x84>)
 8002b2a:	f001 fd96 	bl	800465a <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 8002b2e:	2005      	movs	r0, #5
 8002b30:	f7ff ffb2 	bl	8002a98 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8002b34:	2200      	movs	r2, #0
 8002b36:	2101      	movs	r1, #1
 8002b38:	4806      	ldr	r0, [pc, #24]	; (8002b54 <XPT2046_WriteCMD+0x84>)
 8002b3a:	f001 fd8e 	bl	800465a <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	3301      	adds	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b07      	cmp	r3, #7
 8002b48:	d9d4      	bls.n	8002af4 <XPT2046_WriteCMD+0x24>
	}
	
}
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40011800 	.word	0x40011800

08002b58 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 8002b62:	2200      	movs	r2, #0
 8002b64:	2104      	movs	r1, #4
 8002b66:	4819      	ldr	r0, [pc, #100]	; (8002bcc <XPT2046_ReadCMD+0x74>)
 8002b68:	f001 fd77 	bl	800465a <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2101      	movs	r1, #1
 8002b70:	4816      	ldr	r0, [pc, #88]	; (8002bcc <XPT2046_ReadCMD+0x74>)
 8002b72:	f001 fd72 	bl	800465a <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 8002b76:	2300      	movs	r3, #0
 8002b78:	71fb      	strb	r3, [r7, #7]
 8002b7a:	e01e      	b.n	8002bba <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4812      	ldr	r0, [pc, #72]	; (8002bcc <XPT2046_ReadCMD+0x74>)
 8002b82:	f001 fd6a 	bl	800465a <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 8002b86:	2108      	movs	r1, #8
 8002b88:	4810      	ldr	r0, [pc, #64]	; (8002bcc <XPT2046_ReadCMD+0x74>)
 8002b8a:	f001 fd4f 	bl	800462c <HAL_GPIO_ReadPin>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f1c3 030b 	rsb	r3, r3, #11
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	b21a      	sxth	r2, r3
 8002ba0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 8002baa:	2201      	movs	r2, #1
 8002bac:	2101      	movs	r1, #1
 8002bae:	4807      	ldr	r0, [pc, #28]	; (8002bcc <XPT2046_ReadCMD+0x74>)
 8002bb0:	f001 fd53 	bl	800465a <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	71fb      	strb	r3, [r7, #7]
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	2b0b      	cmp	r3, #11
 8002bbe:	d9dd      	bls.n	8002b7c <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 8002bc0:	88bb      	ldrh	r3, [r7, #4]

}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40011800 	.word	0x40011800

08002bd0 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff77 	bl	8002ad0 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 8002be2:	f7ff ffb9 	bl	8002b58 <XPT2046_ReadCMD>
 8002be6:	4603      	mov	r3, r0
	
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 8002bfa:	2090      	movs	r0, #144	; 0x90
 8002bfc:	f7ff ffe8 	bl	8002bd0 <XPT2046_ReadAdc>
 8002c00:	4603      	mov	r3, r0
 8002c02:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 8002c04:	2001      	movs	r0, #1
 8002c06:	f7ff ff47 	bl	8002a98 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 8002c0a:	20d0      	movs	r0, #208	; 0xd0
 8002c0c:	f7ff ffe0 	bl	8002bd0 <XPT2046_ReadAdc>
 8002c10:	4603      	mov	r3, r0
 8002c12:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	89fa      	ldrh	r2, [r7, #14]
 8002c18:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	89ba      	ldrh	r2, [r7, #12]
 8002c1e:	801a      	strh	r2, [r3, #0]
	
	
}
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b092      	sub	sp, #72	; 0x48
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 8002c36:	f107 0308 	add.w	r3, r7, #8
 8002c3a:	2228      	movs	r2, #40	; 0x28
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f005 f8cc 	bl	8007ddc <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 8002c44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c48:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ffce 	bl	8002bf0 <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 8002c54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c58:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	3348      	adds	r3, #72	; 0x48
 8002c60:	443b      	add	r3, r7
 8002c62:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 8002c66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c6a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8002c6e:	330a      	adds	r3, #10
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	3348      	adds	r3, #72	; 0x48
 8002c74:	443b      	add	r3, r7
 8002c76:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 8002c7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 8002c84:	2110      	movs	r1, #16
 8002c86:	4871      	ldr	r0, [pc, #452]	; (8002e4c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8002c88:	f001 fcd0 	bl	800462c <HAL_GPIO_ReadPin>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d103      	bne.n	8002c9a <XPT2046_ReadAdc_Smooth_XY+0x72>
 8002c92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c96:	2b09      	cmp	r3, #9
 8002c98:	d9d4      	bls.n	8002c44 <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 8002c9a:	2110      	movs	r1, #16
 8002c9c:	486b      	ldr	r0, [pc, #428]	; (8002e4c <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8002c9e:	f001 fcc5 	bl	800462c <HAL_GPIO_ReadPin>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 8002ca8:	4b69      	ldr	r3, [pc, #420]	; (8002e50 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 8002cae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cb2:	2b0a      	cmp	r3, #10
 8002cb4:	f040 80c4 	bne.w	8002e40 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8002cb8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002cbc:	643b      	str	r3, [r7, #64]	; 0x40
 8002cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 8002cc2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
		
		for ( i = 1; i < 10; i ++ )
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002cd2:	e02b      	b.n	8002d2c <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 8002cd4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	3348      	adds	r3, #72	; 0x48
 8002cdc:	443b      	add	r3, r7
 8002cde:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	dd08      	ble.n	8002cfc <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8002cea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	3348      	adds	r3, #72	; 0x48
 8002cf2:	443b      	add	r3, r7
 8002cf4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8002cfa:	e012      	b.n	8002d22 <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8002cfc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	3348      	adds	r3, #72	; 0x48
 8002d04:	443b      	add	r3, r7
 8002d06:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	da07      	bge.n	8002d22 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 8002d12:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	3348      	adds	r3, #72	; 0x48
 8002d1a:	443b      	add	r3, r7
 8002d1c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 8002d22:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d26:	3301      	adds	r3, #1
 8002d28:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002d2c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d30:	2b09      	cmp	r3, #9
 8002d32:	d9cf      	bls.n	8002cd4 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 8002d34:	2301      	movs	r3, #1
 8002d36:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002d3a:	e02f      	b.n	8002d9c <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 8002d3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d40:	330a      	adds	r3, #10
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	3348      	adds	r3, #72	; 0x48
 8002d46:	443b      	add	r3, r7
 8002d48:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d50:	4293      	cmp	r3, r2
 8002d52:	dd09      	ble.n	8002d68 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 8002d54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d58:	330a      	adds	r3, #10
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	3348      	adds	r3, #72	; 0x48
 8002d5e:	443b      	add	r3, r7
 8002d60:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d66:	e014      	b.n	8002d92 <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 8002d68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d6c:	330a      	adds	r3, #10
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	3348      	adds	r3, #72	; 0x48
 8002d72:	443b      	add	r3, r7
 8002d74:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	da08      	bge.n	8002d92 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 8002d80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d84:	330a      	adds	r3, #10
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	3348      	adds	r3, #72	; 0x48
 8002d8a:	443b      	add	r3, r7
 8002d8c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 8002d92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d96:	3301      	adds	r3, #1
 8002d98:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002d9c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d9cb      	bls.n	8002d3c <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8002da4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002da8:	461a      	mov	r2, r3
 8002daa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dae:	4413      	add	r3, r2
 8002db0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002db4:	4413      	add	r3, r2
 8002db6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002dc0:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8002dc2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8002dc6:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8002dc8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002dde:	441a      	add	r2, r3
 8002de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de2:	1ad2      	subs	r2, r2, r3
 8002de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8002df0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002df4:	461a      	mov	r2, r3
 8002df6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002e00:	4413      	add	r3, r2
 8002e02:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002e06:	4413      	add	r3, r2
 8002e08:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002e0c:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8002e0e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8002e12:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8002e14:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8002e18:	4413      	add	r3, r2
 8002e1a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8002e1e:	4413      	add	r3, r2
 8002e20:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8002e24:	4413      	add	r3, r2
 8002e26:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8002e2a:	441a      	add	r2, r3
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2e:	1ad2      	subs	r2, r2, r3
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 8002e40:	2300      	movs	r3, #0
	
	
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3748      	adds	r7, #72	; 0x48
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40011800 	.word	0x40011800
 8002e50:	20000250 	.word	0x20000250

08002e54 <XPT2046_Calculate_CalibrationFactor>:
#endif



static uint8_t XPT2046_Calculate_CalibrationFactor ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_Coordinate * pScreenSample, strType_XPT2046_Calibration * pCalibrationFactor )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]


	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	3204      	adds	r2, #4
 8002e76:	8852      	ldrh	r2, [r2, #2]
 8002e78:	4611      	mov	r1, r2
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	8852      	ldrh	r2, [r2, #2]
 8002e80:	1a8a      	subs	r2, r1, r2
 8002e82:	fb03 f202 	mul.w	r2, r3, r2
									                 ( ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	3308      	adds	r3, #8
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	1acb      	subs	r3, r1, r3
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	8849      	ldrh	r1, [r1, #2]
 8002e9a:	4608      	mov	r0, r1
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	3108      	adds	r1, #8
 8002ea0:	8849      	ldrh	r1, [r1, #2]
 8002ea2:	1a41      	subs	r1, r0, r1
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fb16 	bl	80004dc <__aeabi_i2d>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	
	
	if (  pCalibrationFactor -> Divider == 0  )
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	f7fd fdda 	bl	8000a80 <__aeabi_dcmpeq>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]
 8002ed6:	e145      	b.n	8003164 <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3308      	adds	r3, #8
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	3204      	adds	r2, #4
 8002eea:	8852      	ldrh	r2, [r2, #2]
 8002eec:	4611      	mov	r1, r2
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	3208      	adds	r2, #8
 8002ef2:	8852      	ldrh	r2, [r2, #2]
 8002ef4:	1a8a      	subs	r2, r1, r2
 8002ef6:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) );
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3304      	adds	r3, #4
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	4619      	mov	r1, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3308      	adds	r3, #8
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	1acb      	subs	r3, r1, r3
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	8849      	ldrh	r1, [r1, #2]
 8002f0e:	4608      	mov	r0, r1
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	3108      	adds	r1, #8
 8002f14:	8849      	ldrh	r1, [r1, #2]
 8002f16:	1a41      	subs	r1, r0, r1
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fadc 	bl	80004dc <__aeabi_i2d>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	e9c1 2300 	strd	r2, r3, [r1]
		
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	3308      	adds	r3, #8
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	3204      	adds	r2, #4
 8002f40:	8812      	ldrh	r2, [r2, #0]
 8002f42:	4611      	mov	r1, r2
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	3208      	adds	r2, #8
 8002f48:	8812      	ldrh	r2, [r2, #0]
 8002f4a:	1a8a      	subs	r2, r1, r2
 8002f4c:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) );
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3308      	adds	r3, #8
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	1acb      	subs	r3, r1, r3
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	3104      	adds	r1, #4
 8002f62:	8809      	ldrh	r1, [r1, #0]
 8002f64:	4608      	mov	r0, r1
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	3108      	adds	r1, #8
 8002f6a:	8809      	ldrh	r1, [r1, #0]
 8002f6c:	1a41      	subs	r1, r0, r1
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd fab1 	bl	80004dc <__aeabi_i2d>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	e9c1 2302 	strd	r2, r3, [r1, #8]
		
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	3308      	adds	r3, #8
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	fb03 f202 	mul.w	r2, r3, r2
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	8852      	ldrh	r2, [r2, #2]
 8002fae:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3308      	adds	r3, #8
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	fb03 f101 	mul.w	r1, r3, r1
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	fb00 f303 	mul.w	r3, r0, r3
 8002fd2:	1acb      	subs	r3, r1, r3
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	3104      	adds	r1, #4
 8002fd8:	8849      	ldrh	r1, [r1, #2]
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 8002fde:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .x - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .x ) * pScreenSample [ 2 ] .y ;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	fb03 f101 	mul.w	r1, r3, r1
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	fb00 f303 	mul.w	r3, r0, r3
 8003000:	1acb      	subs	r3, r1, r3
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	3108      	adds	r1, #8
 8003006:	8849      	ldrh	r1, [r1, #2]
 8003008:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 800300c:	4413      	add	r3, r2
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fa64 	bl	80004dc <__aeabi_i2d>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	885b      	ldrh	r3, [r3, #2]
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3308      	adds	r3, #8
 8003028:	885b      	ldrh	r3, [r3, #2]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	3204      	adds	r2, #4
 8003030:	8852      	ldrh	r2, [r2, #2]
 8003032:	4611      	mov	r1, r2
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	3208      	adds	r2, #8
 8003038:	8852      	ldrh	r2, [r2, #2]
 800303a:	1a8a      	subs	r2, r1, r2
 800303c:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3304      	adds	r3, #4
 8003044:	885b      	ldrh	r3, [r3, #2]
 8003046:	4619      	mov	r1, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3308      	adds	r3, #8
 800304c:	885b      	ldrh	r3, [r3, #2]
 800304e:	1acb      	subs	r3, r1, r3
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	8849      	ldrh	r1, [r1, #2]
 8003054:	4608      	mov	r0, r1
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	3108      	adds	r1, #8
 800305a:	8849      	ldrh	r1, [r1, #2]
 800305c:	1a41      	subs	r1, r0, r1
 800305e:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	4618      	mov	r0, r3
 8003066:	f7fd fa39 	bl	80004dc <__aeabi_i2d>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	e9c1 2306 	strd	r2, r3, [r1, #24]
		
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	3308      	adds	r3, #8
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	3204      	adds	r2, #4
 8003086:	8852      	ldrh	r2, [r2, #2]
 8003088:	4611      	mov	r1, r2
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	3208      	adds	r2, #8
 800308e:	8852      	ldrh	r2, [r2, #2]
 8003090:	1a8a      	subs	r2, r1, r2
 8003092:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) ) ;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	885b      	ldrh	r3, [r3, #2]
 800309a:	4619      	mov	r1, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3308      	adds	r3, #8
 80030a0:	885b      	ldrh	r3, [r3, #2]
 80030a2:	1acb      	subs	r3, r1, r3
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	3104      	adds	r1, #4
 80030a8:	8809      	ldrh	r1, [r1, #0]
 80030aa:	4608      	mov	r0, r1
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	3108      	adds	r1, #8
 80030b0:	8809      	ldrh	r1, [r1, #0]
 80030b2:	1a41      	subs	r1, r0, r1
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fa0e 	bl	80004dc <__aeabi_i2d>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	e9c1 2308 	strd	r2, r3, [r1, #32]
		

		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3308      	adds	r3, #8
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3304      	adds	r3, #4
 80030d6:	885b      	ldrh	r3, [r3, #2]
 80030d8:	fb03 f202 	mul.w	r2, r3, r2
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	3304      	adds	r3, #4
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	4619      	mov	r1, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3308      	adds	r3, #8
 80030e8:	885b      	ldrh	r3, [r3, #2]
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	8852      	ldrh	r2, [r2, #2]
 80030f4:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3308      	adds	r3, #8
 8003102:	885b      	ldrh	r3, [r3, #2]
 8003104:	fb03 f101 	mul.w	r1, r3, r1
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	3308      	adds	r3, #8
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	885b      	ldrh	r3, [r3, #2]
 8003114:	fb00 f303 	mul.w	r3, r0, r3
 8003118:	1acb      	subs	r3, r1, r3
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	3104      	adds	r1, #4
 800311e:	8849      	ldrh	r1, [r1, #2]
 8003120:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8003124:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .y - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .y ) * pScreenSample [ 2 ] .y;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	3304      	adds	r3, #4
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	885b      	ldrh	r3, [r3, #2]
 8003132:	fb03 f101 	mul.w	r1, r3, r1
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3304      	adds	r3, #4
 8003140:	885b      	ldrh	r3, [r3, #2]
 8003142:	fb00 f303 	mul.w	r3, r0, r3
 8003146:	1acb      	subs	r3, r1, r3
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	3108      	adds	r1, #8
 800314c:	8849      	ldrh	r1, [r1, #2]
 800314e:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 8003152:	4413      	add	r3, r2
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd f9c1 	bl	80004dc <__aeabi_i2d>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			
	}
	
	
	return ucRet;
 8003164:	7dfb      	ldrb	r3, [r7, #23]
	
	
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <XPT2046_Touch_Calibrate>:



uint8_t XPT2046_Touch_Calibrate ( void )
{
 8003170:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003174:	b0a0      	sub	sp, #128	; 0x80
 8003176:	af02      	add	r7, sp, #8
		uint8_t i;
		
		char cStr [ 10 ];
		
    uint16_t usScreenWidth, usScreenHeigth;
		uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800317e:	2300      	movs	r3, #0
 8003180:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8003184:	2300      	movs	r3, #0
 8003186:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800318a:	2300      	movs	r3, #0
 800318c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		
	  char * pStr = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	66bb      	str	r3, [r7, #104]	; 0x68
	  
	  strType_XPT2046_Calibration CalibrationFactor;
    		

		#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	    usScreenWidth = LCD_Default_Max_Width;
 8003194:	23f0      	movs	r3, #240	; 0xf0
 8003196:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	    usScreenHeigth = LCD_Default_Max_Heigth;
 800319a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800319e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	
	  #endif
		
		

		strCrossCoordinate [ 0 ] .x = usScreenWidth >> 2;
 80031a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		strCrossCoordinate [ 0 ] .y = usScreenHeigth >> 2;
 80031ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		
		strCrossCoordinate [ 1 ] .x = strCrossCoordinate [ 0 ] .x;
 80031ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		strCrossCoordinate [ 1 ] .y = ( usScreenHeigth * 3 ) >> 2;
 80031c2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	109b      	asrs	r3, r3, #2
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		
		strCrossCoordinate [ 2 ] .x = ( usScreenWidth * 3 ) >> 2;
 80031d4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80031d8:	4613      	mov	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4413      	add	r3, r2
 80031de:	109b      	asrs	r3, r3, #2
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		strCrossCoordinate [ 2 ] .y = strCrossCoordinate [ 1 ] .y;
 80031e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031ea:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		
		strCrossCoordinate [ 3 ] .x = strCrossCoordinate [ 2 ] .x;
 80031ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		strCrossCoordinate [ 3 ] .y = strCrossCoordinate [ 0 ] .y;		
 80031f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031fa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  	
			
		LCD_GramScan (1 );
 80031fe:	2001      	movs	r0, #1
 8003200:	f7fe fbf4 	bl	80019ec <LCD_GramScan>
		
		
		for ( i = 0; i < 4; i ++ )
 8003204:	2300      	movs	r3, #0
 8003206:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800320a:	e066      	b.n	80032da <XPT2046_Touch_Calibrate+0x16a>
		{ 
			LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );       
 800320c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003210:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003214:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003218:	9100      	str	r1, [sp, #0]
 800321a:	2100      	movs	r1, #0
 800321c:	2000      	movs	r0, #0
 800321e:	f7fe faa6 	bl	800176e <LCD_Clear>
			
			pStr = "Touch Calibrate ......";			
 8003222:	4bc6      	ldr	r3, [pc, #792]	; (800353c <XPT2046_Touch_Calibrate+0x3cc>)
 8003224:	66bb      	str	r3, [r7, #104]	; 0x68
      LCD_DrawString_Color ( ( usScreenWidth - ( strlen ( pStr ) - 7 ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );			
 8003226:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800322a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800322c:	f7fc fffc 	bl	8000228 <strlen>
 8003230:	4603      	mov	r3, r0
 8003232:	3b07      	subs	r3, #7
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	1ae3      	subs	r3, r4, r3
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	b298      	uxth	r0, r3
 800323c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	b299      	uxth	r1, r3
 8003244:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800324e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003250:	f7fe fb96 	bl	8001980 <LCD_DrawString_Color>
		
			sprintf ( cStr, "%d", i + 1 );
 8003254:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800325e:	49b8      	ldr	r1, [pc, #736]	; (8003540 <XPT2046_Touch_Calibrate+0x3d0>)
 8003260:	4618      	mov	r0, r3
 8003262:	f005 fa23 	bl	80086ac <siprintf>
			LCD_DrawString_Color ( usScreenWidth >> 1, ( usScreenHeigth >> 1 ) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED );
 8003266:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	b298      	uxth	r0, r3
 800326e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b10      	subs	r3, #16
 8003278:	b299      	uxth	r1, r3
 800327a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800327e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003288:	f7fe fb7a 	bl	8001980 <LCD_DrawString_Color>
		
			XPT2046_DelayUS ( 100000 );		                                                   
 800328c:	48ad      	ldr	r0, [pc, #692]	; (8003544 <XPT2046_Touch_Calibrate+0x3d4>)
 800328e:	f7ff fc03 	bl	8002a98 <XPT2046_DelayUS>
			
			LCD_DrawCross ( strCrossCoordinate [ i ] .x, strCrossCoordinate [ i ] .y );  
 8003292:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	3378      	adds	r3, #120	; 0x78
 800329a:	443b      	add	r3, r7
 800329c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80032a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	3378      	adds	r3, #120	; 0x78
 80032a8:	443b      	add	r3, r7
 80032aa:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 80032ae:	4619      	mov	r1, r3
 80032b0:	4610      	mov	r0, r2
 80032b2:	f7fe fb43 	bl	800193c <LCD_DrawCross>

			while ( ! XPT2046_ReadAdc_Smooth_XY ( & strScreenSample [ i ] ) );         
 80032b6:	bf00      	nop
 80032b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80032bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fcaf 	bl	8002c28 <XPT2046_ReadAdc_Smooth_XY>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f3      	beq.n	80032b8 <XPT2046_Touch_Calibrate+0x148>
		for ( i = 0; i < 4; i ++ )
 80032d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80032d4:	3301      	adds	r3, #1
 80032d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d994      	bls.n	800320c <XPT2046_Touch_Calibrate+0x9c>

		}
		
		
		XPT2046_Calculate_CalibrationFactor ( strCrossCoordinate, strScreenSample, & CalibrationFactor ) ;  	 
 80032e2:	463a      	mov	r2, r7
 80032e4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80032e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fdb1 	bl	8002e54 <XPT2046_Calculate_CalibrationFactor>
		
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 80032f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	f7fd fbbf 	bl	8000a80 <__aeabi_dcmpeq>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	f040 8116 	bne.w	8003536 <XPT2046_Touch_Calibrate+0x3c6>
		
			
		usTest_x = ( ( CalibrationFactor .An * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .Bn * strScreenSample [ 3 ] .y ) + CalibrationFactor .Cn ) / CalibrationFactor .Divider;		
 800330a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800330e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd f8e2 	bl	80004dc <__aeabi_i2d>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4620      	mov	r0, r4
 800331e:	4629      	mov	r1, r5
 8003320:	f7fd f946 	bl	80005b0 <__aeabi_dmul>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4690      	mov	r8, r2
 800332a:	4699      	mov	r9, r3
 800332c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003330:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f8d1 	bl	80004dc <__aeabi_i2d>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4620      	mov	r0, r4
 8003340:	4629      	mov	r1, r5
 8003342:	f7fd f935 	bl	80005b0 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4640      	mov	r0, r8
 800334c:	4649      	mov	r1, r9
 800334e:	f7fc ff79 	bl	8000244 <__adddf3>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800335e:	f7fc ff71 	bl	8000244 <__adddf3>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800336e:	f7fd fa49 	bl	8000804 <__aeabi_ddiv>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	f7fd fbf1 	bl	8000b60 <__aeabi_d2uiz>
 800337e:	4603      	mov	r3, r0
 8003380:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		usTest_y = ( ( CalibrationFactor .Dn * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .En * strScreenSample [ 3 ] .y ) + CalibrationFactor .Fn ) / CalibrationFactor .Divider;   
 8003384:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003388:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd f8a5 	bl	80004dc <__aeabi_i2d>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4620      	mov	r0, r4
 8003398:	4629      	mov	r1, r5
 800339a:	f7fd f909 	bl	80005b0 <__aeabi_dmul>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4690      	mov	r8, r2
 80033a4:	4699      	mov	r9, r3
 80033a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80033aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd f894 	bl	80004dc <__aeabi_i2d>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4620      	mov	r0, r4
 80033ba:	4629      	mov	r1, r5
 80033bc:	f7fd f8f8 	bl	80005b0 <__aeabi_dmul>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4640      	mov	r0, r8
 80033c6:	4649      	mov	r1, r9
 80033c8:	f7fc ff3c 	bl	8000244 <__adddf3>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033d8:	f7fc ff34 	bl	8000244 <__adddf3>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80033e8:	f7fd fa0c 	bl	8000804 <__aeabi_ddiv>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	f7fd fbb4 	bl	8000b60 <__aeabi_d2uiz>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		
		usGap_x = ( usTest_x > strCrossCoordinate [ 3 ] .x ) ? ( usTest_x - strCrossCoordinate [ 3 ] .x ) : ( strCrossCoordinate [ 3 ] .x - usTest_x );  
 80033fe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003402:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8003406:	429a      	cmp	r2, r3
 8003408:	d906      	bls.n	8003418 <XPT2046_Touch_Calibrate+0x2a8>
 800340a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800340e:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	b29b      	uxth	r3, r3
 8003416:	e005      	b.n	8003424 <XPT2046_Touch_Calibrate+0x2b4>
 8003418:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800341c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	b29b      	uxth	r3, r3
 8003424:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		usGap_y = ( usTest_y > strCrossCoordinate [ 3 ] .y ) ? ( usTest_y - strCrossCoordinate [ 3 ] .y ) : ( strCrossCoordinate [ 3 ] .y - usTest_y );  
 8003428:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800342c:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8003430:	429a      	cmp	r2, r3
 8003432:	d906      	bls.n	8003442 <XPT2046_Touch_Calibrate+0x2d2>
 8003434:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003438:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	b29b      	uxth	r3, r3
 8003440:	e005      	b.n	800344e <XPT2046_Touch_Calibrate+0x2de>
 8003442:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003446:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	b29b      	uxth	r3, r3
 800344e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 8003452:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8003456:	2b0a      	cmp	r3, #10
 8003458:	d87c      	bhi.n	8003554 <XPT2046_Touch_Calibrate+0x3e4>
 800345a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800345e:	2b0a      	cmp	r3, #10
 8003460:	d878      	bhi.n	8003554 <XPT2046_Touch_Calibrate+0x3e4>
		

		strXPT2046_TouchPara .dX_X = ( CalibrationFactor .An * 1.0 ) / CalibrationFactor .Divider;
 8003462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003466:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800346a:	f7fd f9cb 	bl	8000804 <__aeabi_ddiv>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4935      	ldr	r1, [pc, #212]	; (8003548 <XPT2046_Touch_Calibrate+0x3d8>)
 8003474:	e9c1 2300 	strd	r2, r3, [r1]
		strXPT2046_TouchPara .dX_Y = ( CalibrationFactor .Bn * 1.0 ) / CalibrationFactor .Divider;
 8003478:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800347c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003480:	f7fd f9c0 	bl	8000804 <__aeabi_ddiv>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	492f      	ldr	r1, [pc, #188]	; (8003548 <XPT2046_Touch_Calibrate+0x3d8>)
 800348a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		strXPT2046_TouchPara .dX   = ( CalibrationFactor .Cn * 1.0 ) / CalibrationFactor .Divider;
 800348e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003492:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003496:	f7fd f9b5 	bl	8000804 <__aeabi_ddiv>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	492a      	ldr	r1, [pc, #168]	; (8003548 <XPT2046_Touch_Calibrate+0x3d8>)
 80034a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		strXPT2046_TouchPara .dY_X = ( CalibrationFactor .Dn * 1.0 ) / CalibrationFactor .Divider;
 80034a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034ac:	f7fd f9aa 	bl	8000804 <__aeabi_ddiv>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4924      	ldr	r1, [pc, #144]	; (8003548 <XPT2046_Touch_Calibrate+0x3d8>)
 80034b6:	e9c1 2306 	strd	r2, r3, [r1, #24]
		strXPT2046_TouchPara .dY_Y = ( CalibrationFactor .En * 1.0 ) / CalibrationFactor .Divider;
 80034ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034c2:	f7fd f99f 	bl	8000804 <__aeabi_ddiv>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	491f      	ldr	r1, [pc, #124]	; (8003548 <XPT2046_Touch_Calibrate+0x3d8>)
 80034cc:	e9c1 2308 	strd	r2, r3, [r1, #32]
		strXPT2046_TouchPara .dY   = ( CalibrationFactor .Fn * 1.0 ) / CalibrationFactor .Divider;
 80034d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034d8:	f7fd f994 	bl	8000804 <__aeabi_ddiv>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4919      	ldr	r1, [pc, #100]	; (8003548 <XPT2046_Touch_Calibrate+0x3d8>)
 80034e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	

	#endif
	
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 80034e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80034ea:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80034ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80034f2:	9100      	str	r1, [sp, #0]
 80034f4:	2100      	movs	r1, #0
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fe f939 	bl	800176e <LCD_Clear>
	
	pStr = "Calibrate Succed";			
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <XPT2046_Touch_Calibrate+0x3dc>)
 80034fe:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 8003500:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003504:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003506:	f7fc fe8f 	bl	8000228 <strlen>
 800350a:	4603      	mov	r3, r0
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	1ae3      	subs	r3, r4, r3
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	b298      	uxth	r0, r3
 8003514:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	b299      	uxth	r1, r3
 800351c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003526:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003528:	f7fe fa2a 	bl	8001980 <LCD_DrawString_Color>

  XPT2046_DelayUS ( 200000 );
 800352c:	4808      	ldr	r0, [pc, #32]	; (8003550 <XPT2046_Touch_Calibrate+0x3e0>)
 800352e:	f7ff fab3 	bl	8002a98 <XPT2046_DelayUS>

	return 1;    
 8003532:	2301      	movs	r3, #1
 8003534:	e050      	b.n	80035d8 <XPT2046_Touch_Calibrate+0x468>
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 8003536:	bf00      	nop
 8003538:	e00d      	b.n	8003556 <XPT2046_Touch_Calibrate+0x3e6>
 800353a:	bf00      	nop
 800353c:	0800ac80 	.word	0x0800ac80
 8003540:	0800ac98 	.word	0x0800ac98
 8003544:	000186a0 	.word	0x000186a0
 8003548:	20000008 	.word	0x20000008
 800354c:	0800ac9c 	.word	0x0800ac9c
 8003550:	00030d40 	.word	0x00030d40
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 8003554:	bf00      	nop
	

	Failure:
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND ); 
 8003556:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800355a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800355e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003562:	9100      	str	r1, [sp, #0]
 8003564:	2100      	movs	r1, #0
 8003566:	2000      	movs	r0, #0
 8003568:	f7fe f901 	bl	800176e <LCD_Clear>
	
	pStr = "Calibrate fail";			
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <XPT2046_Touch_Calibrate+0x474>)
 800356e:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 8003570:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 8003574:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003576:	f7fc fe57 	bl	8000228 <strlen>
 800357a:	4603      	mov	r3, r0
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	1ae3      	subs	r3, r4, r3
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	b298      	uxth	r0, r3
 8003584:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	b299      	uxth	r1, r3
 800358c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003596:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003598:	f7fe f9f2 	bl	8001980 <LCD_DrawString_Color>

	pStr = "try again";			
 800359c:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <XPT2046_Touch_Calibrate+0x478>)
 800359e:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, ( usScreenHeigth >> 1 ) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED );				
 80035a0:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80035a4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80035a6:	f7fc fe3f 	bl	8000228 <strlen>
 80035aa:	4603      	mov	r3, r0
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	1ae3      	subs	r3, r4, r3
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	b298      	uxth	r0, r3
 80035b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3310      	adds	r3, #16
 80035be:	b299      	uxth	r1, r3
 80035c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035cc:	f7fe f9d8 	bl	8001980 <LCD_DrawString_Color>

	XPT2046_DelayUS ( 1000000 );		
 80035d0:	4806      	ldr	r0, [pc, #24]	; (80035ec <XPT2046_Touch_Calibrate+0x47c>)
 80035d2:	f7ff fa61 	bl	8002a98 <XPT2046_DelayUS>
	
	return 0; 
 80035d6:	2300      	movs	r3, #0
		
		
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3778      	adds	r7, #120	; 0x78
 80035dc:	46bd      	mov	sp, r7
 80035de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035e2:	bf00      	nop
 80035e4:	0800acb0 	.word	0x0800acb0
 80035e8:	0800acc0 	.word	0x0800acc0
 80035ec:	000f4240 	.word	0x000f4240

080035f0 <XPT2046_Get_TouchedPoint>:

   

uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 80035f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 8003600:	f107 0308 	add.w	r3, r7, #8
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fb0f 	bl	8002c28 <XPT2046_ReadAdc_Smooth_XY>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d06e      	beq.n	80036ee <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003616:	893b      	ldrh	r3, [r7, #8]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fc ff5f 	bl	80004dc <__aeabi_i2d>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4620      	mov	r0, r4
 8003624:	4629      	mov	r1, r5
 8003626:	f7fc ffc3 	bl	80005b0 <__aeabi_dmul>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4690      	mov	r8, r2
 8003630:	4699      	mov	r9, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003638:	897b      	ldrh	r3, [r7, #10]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fc ff4e 	bl	80004dc <__aeabi_i2d>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4620      	mov	r0, r4
 8003646:	4629      	mov	r1, r5
 8003648:	f7fc ffb2 	bl	80005b0 <__aeabi_dmul>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4640      	mov	r0, r8
 8003652:	4649      	mov	r1, r9
 8003654:	f7fc fdf6 	bl	8000244 <__adddf3>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4610      	mov	r0, r2
 800365e:	4619      	mov	r1, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003666:	f7fc fded 	bl	8000244 <__adddf3>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4610      	mov	r0, r2
 8003670:	4619      	mov	r1, r3
 8003672:	f7fd fa75 	bl	8000b60 <__aeabi_d2uiz>
 8003676:	4603      	mov	r3, r0
 8003678:	b29a      	uxth	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003684:	893b      	ldrh	r3, [r7, #8]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc ff28 	bl	80004dc <__aeabi_i2d>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4620      	mov	r0, r4
 8003692:	4629      	mov	r1, r5
 8003694:	f7fc ff8c 	bl	80005b0 <__aeabi_dmul>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4690      	mov	r8, r2
 800369e:	4699      	mov	r9, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80036a6:	897b      	ldrh	r3, [r7, #10]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fc ff17 	bl	80004dc <__aeabi_i2d>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4620      	mov	r0, r4
 80036b4:	4629      	mov	r1, r5
 80036b6:	f7fc ff7b 	bl	80005b0 <__aeabi_dmul>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4640      	mov	r0, r8
 80036c0:	4649      	mov	r1, r9
 80036c2:	f7fc fdbf 	bl	8000244 <__adddf3>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4610      	mov	r0, r2
 80036cc:	4619      	mov	r1, r3
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80036d4:	f7fc fdb6 	bl	8000244 <__adddf3>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	f7fd fa3e 	bl	8000b60 <__aeabi_d2uiz>
 80036e4:	4603      	mov	r3, r0
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	805a      	strh	r2, [r3, #2]
 80036ec:	e001      	b.n	80036f2 <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003700 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003700:	480c      	ldr	r0, [pc, #48]	; (8003734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003702:	490d      	ldr	r1, [pc, #52]	; (8003738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003708:	e002      	b.n	8003710 <LoopCopyDataInit>

0800370a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800370a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800370c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800370e:	3304      	adds	r3, #4

08003710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003714:	d3f9      	bcc.n	800370a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003716:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003718:	4c0a      	ldr	r4, [pc, #40]	; (8003744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800371a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800371c:	e001      	b.n	8003722 <LoopFillZerobss>

0800371e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800371e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003720:	3204      	adds	r2, #4

08003722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003724:	d3fb      	bcc.n	800371e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003726:	f7ff f903 	bl	8002930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800372a:	f004 fb25 	bl	8007d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800372e:	f7fe fa0f 	bl	8001b50 <main>
  bx lr
 8003732:	4770      	bx	lr
  ldr r0, =_sdata
 8003734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003738:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 800373c:	0800b6c4 	.word	0x0800b6c4
  ldr r2, =_sbss
 8003740:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003744:	2000078c 	.word	0x2000078c

08003748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003748:	e7fe      	b.n	8003748 <ADC1_2_IRQHandler>
	...

0800374c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_Init+0x28>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a07      	ldr	r2, [pc, #28]	; (8003774 <HAL_Init+0x28>)
 8003756:	f043 0310 	orr.w	r3, r3, #16
 800375a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800375c:	2003      	movs	r0, #3
 800375e:	f000 f947 	bl	80039f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003762:	200f      	movs	r0, #15
 8003764:	f000 f808 	bl	8003778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003768:	f7fe fe8a 	bl	8002480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40022000 	.word	0x40022000

08003778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003780:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_InitTick+0x54>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_InitTick+0x58>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	4619      	mov	r1, r3
 800378a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800378e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f95f 	bl	8003a5a <HAL_SYSTICK_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e00e      	b.n	80037c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b0f      	cmp	r3, #15
 80037aa:	d80a      	bhi.n	80037c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ac:	2200      	movs	r2, #0
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037b4:	f000 f927 	bl	8003a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037b8:	4a06      	ldr	r2, [pc, #24]	; (80037d4 <HAL_InitTick+0x5c>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000000 	.word	0x20000000
 80037d0:	2000003c 	.word	0x2000003c
 80037d4:	20000038 	.word	0x20000038

080037d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_IncTick+0x1c>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_IncTick+0x20>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4413      	add	r3, r2
 80037e8:	4a03      	ldr	r2, [pc, #12]	; (80037f8 <HAL_IncTick+0x20>)
 80037ea:	6013      	str	r3, [r2, #0]
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	2000003c 	.word	0x2000003c
 80037f8:	20000788 	.word	0x20000788

080037fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003800:	4b02      	ldr	r3, [pc, #8]	; (800380c <HAL_GetTick+0x10>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr
 800380c:	20000788 	.word	0x20000788

08003810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003818:	f7ff fff0 	bl	80037fc <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003828:	d005      	beq.n	8003836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <HAL_Delay+0x44>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003836:	bf00      	nop
 8003838:	f7ff ffe0 	bl	80037fc <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	429a      	cmp	r2, r3
 8003846:	d8f7      	bhi.n	8003838 <HAL_Delay+0x28>
  {
  }
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	2000003c 	.word	0x2000003c

08003858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <__NVIC_SetPriorityGrouping+0x44>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003874:	4013      	ands	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800388a:	4a04      	ldr	r2, [pc, #16]	; (800389c <__NVIC_SetPriorityGrouping+0x44>)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	60d3      	str	r3, [r2, #12]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a4:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <__NVIC_GetPriorityGrouping+0x18>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	f003 0307 	and.w	r3, r3, #7
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	e000ed00 	.word	0xe000ed00

080038bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	db0b      	blt.n	80038e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	f003 021f 	and.w	r2, r3, #31
 80038d4:	4906      	ldr	r1, [pc, #24]	; (80038f0 <__NVIC_EnableIRQ+0x34>)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2001      	movs	r0, #1
 80038de:	fa00 f202 	lsl.w	r2, r0, r2
 80038e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	e000e100 	.word	0xe000e100

080038f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	2b00      	cmp	r3, #0
 8003906:	db0a      	blt.n	800391e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	490c      	ldr	r1, [pc, #48]	; (8003940 <__NVIC_SetPriority+0x4c>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	440b      	add	r3, r1
 8003918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800391c:	e00a      	b.n	8003934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4908      	ldr	r1, [pc, #32]	; (8003944 <__NVIC_SetPriority+0x50>)
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	3b04      	subs	r3, #4
 800392c:	0112      	lsls	r2, r2, #4
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	440b      	add	r3, r1
 8003932:	761a      	strb	r2, [r3, #24]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	e000e100 	.word	0xe000e100
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f1c3 0307 	rsb	r3, r3, #7
 8003962:	2b04      	cmp	r3, #4
 8003964:	bf28      	it	cs
 8003966:	2304      	movcs	r3, #4
 8003968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3304      	adds	r3, #4
 800396e:	2b06      	cmp	r3, #6
 8003970:	d902      	bls.n	8003978 <NVIC_EncodePriority+0x30>
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3b03      	subs	r3, #3
 8003976:	e000      	b.n	800397a <NVIC_EncodePriority+0x32>
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	401a      	ands	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	43d9      	mvns	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	4313      	orrs	r3, r2
         );
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3724      	adds	r7, #36	; 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039bc:	d301      	bcc.n	80039c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039be:	2301      	movs	r3, #1
 80039c0:	e00f      	b.n	80039e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039c2:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <SysTick_Config+0x40>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ca:	210f      	movs	r1, #15
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039d0:	f7ff ff90 	bl	80038f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <SysTick_Config+0x40>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039da:	4b04      	ldr	r3, [pc, #16]	; (80039ec <SysTick_Config+0x40>)
 80039dc:	2207      	movs	r2, #7
 80039de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	e000e010 	.word	0xe000e010

080039f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff2d 	bl	8003858 <__NVIC_SetPriorityGrouping>
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a18:	f7ff ff42 	bl	80038a0 <__NVIC_GetPriorityGrouping>
 8003a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	f7ff ff90 	bl	8003948 <NVIC_EncodePriority>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff5f 	bl	80038f4 <__NVIC_SetPriority>
}
 8003a36:	bf00      	nop
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	4603      	mov	r3, r0
 8003a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff35 	bl	80038bc <__NVIC_EnableIRQ>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff ffa2 	bl	80039ac <SysTick_Config>
 8003a68:	4603      	mov	r3, r0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e059      	b.n	8003b3e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <HAL_DMA_Init+0xd4>)
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d80f      	bhi.n	8003ab6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_DMA_Init+0xd8>)
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4a2b      	ldr	r2, [pc, #172]	; (8003b50 <HAL_DMA_Init+0xdc>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	009a      	lsls	r2, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a28      	ldr	r2, [pc, #160]	; (8003b54 <HAL_DMA_Init+0xe0>)
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ab4:	e00e      	b.n	8003ad4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <HAL_DMA_Init+0xe4>)
 8003abe:	4413      	add	r3, r2
 8003ac0:	4a23      	ldr	r2, [pc, #140]	; (8003b50 <HAL_DMA_Init+0xdc>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	009a      	lsls	r2, r3, #2
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <HAL_DMA_Init+0xe8>)
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003aea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003aee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	40020407 	.word	0x40020407
 8003b4c:	bffdfff8 	.word	0xbffdfff8
 8003b50:	cccccccd 	.word	0xcccccccd
 8003b54:	40020000 	.word	0x40020000
 8003b58:	bffdfbf8 	.word	0xbffdfbf8
 8003b5c:	40020400 	.word	0x40020400

08003b60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_DMA_Start_IT+0x20>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e04a      	b.n	8003c16 <HAL_DMA_Start_IT+0xb6>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d13a      	bne.n	8003c08 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fb76 	bl	80042a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 020e 	orr.w	r2, r2, #14
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e00f      	b.n	8003bf6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0204 	bic.w	r2, r2, #4
 8003be4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 020a 	orr.w	r2, r2, #10
 8003bf4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e005      	b.n	8003c14 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c10:	2302      	movs	r3, #2
 8003c12:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d005      	beq.n	8003c42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e0d6      	b.n	8003df0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 020e 	bic.w	r2, r2, #14
 8003c50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	4b64      	ldr	r3, [pc, #400]	; (8003dfc <HAL_DMA_Abort_IT+0x1dc>)
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d958      	bls.n	8003d20 <HAL_DMA_Abort_IT+0x100>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a63      	ldr	r2, [pc, #396]	; (8003e00 <HAL_DMA_Abort_IT+0x1e0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d04f      	beq.n	8003d18 <HAL_DMA_Abort_IT+0xf8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a61      	ldr	r2, [pc, #388]	; (8003e04 <HAL_DMA_Abort_IT+0x1e4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d048      	beq.n	8003d14 <HAL_DMA_Abort_IT+0xf4>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a60      	ldr	r2, [pc, #384]	; (8003e08 <HAL_DMA_Abort_IT+0x1e8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d040      	beq.n	8003d0e <HAL_DMA_Abort_IT+0xee>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a5e      	ldr	r2, [pc, #376]	; (8003e0c <HAL_DMA_Abort_IT+0x1ec>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d038      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xe8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a5d      	ldr	r2, [pc, #372]	; (8003e10 <HAL_DMA_Abort_IT+0x1f0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d030      	beq.n	8003d02 <HAL_DMA_Abort_IT+0xe2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a5b      	ldr	r2, [pc, #364]	; (8003e14 <HAL_DMA_Abort_IT+0x1f4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d028      	beq.n	8003cfc <HAL_DMA_Abort_IT+0xdc>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a53      	ldr	r2, [pc, #332]	; (8003dfc <HAL_DMA_Abort_IT+0x1dc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d020      	beq.n	8003cf6 <HAL_DMA_Abort_IT+0xd6>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a57      	ldr	r2, [pc, #348]	; (8003e18 <HAL_DMA_Abort_IT+0x1f8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d019      	beq.n	8003cf2 <HAL_DMA_Abort_IT+0xd2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a56      	ldr	r2, [pc, #344]	; (8003e1c <HAL_DMA_Abort_IT+0x1fc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d012      	beq.n	8003cee <HAL_DMA_Abort_IT+0xce>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a54      	ldr	r2, [pc, #336]	; (8003e20 <HAL_DMA_Abort_IT+0x200>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_DMA_Abort_IT+0xc8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a53      	ldr	r2, [pc, #332]	; (8003e24 <HAL_DMA_Abort_IT+0x204>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d102      	bne.n	8003ce2 <HAL_DMA_Abort_IT+0xc2>
 8003cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce0:	e01b      	b.n	8003d1a <HAL_DMA_Abort_IT+0xfa>
 8003ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ce6:	e018      	b.n	8003d1a <HAL_DMA_Abort_IT+0xfa>
 8003ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cec:	e015      	b.n	8003d1a <HAL_DMA_Abort_IT+0xfa>
 8003cee:	2310      	movs	r3, #16
 8003cf0:	e013      	b.n	8003d1a <HAL_DMA_Abort_IT+0xfa>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e011      	b.n	8003d1a <HAL_DMA_Abort_IT+0xfa>
 8003cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cfa:	e00e      	b.n	8003d1a <HAL_DMA_Abort_IT+0xfa>
 8003cfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d00:	e00b      	b.n	8003d1a <HAL_DMA_Abort_IT+0xfa>
 8003d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d06:	e008      	b.n	8003d1a <HAL_DMA_Abort_IT+0xfa>
 8003d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d0c:	e005      	b.n	8003d1a <HAL_DMA_Abort_IT+0xfa>
 8003d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d12:	e002      	b.n	8003d1a <HAL_DMA_Abort_IT+0xfa>
 8003d14:	2310      	movs	r3, #16
 8003d16:	e000      	b.n	8003d1a <HAL_DMA_Abort_IT+0xfa>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	4a43      	ldr	r2, [pc, #268]	; (8003e28 <HAL_DMA_Abort_IT+0x208>)
 8003d1c:	6053      	str	r3, [r2, #4]
 8003d1e:	e057      	b.n	8003dd0 <HAL_DMA_Abort_IT+0x1b0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a36      	ldr	r2, [pc, #216]	; (8003e00 <HAL_DMA_Abort_IT+0x1e0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d04f      	beq.n	8003dca <HAL_DMA_Abort_IT+0x1aa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a35      	ldr	r2, [pc, #212]	; (8003e04 <HAL_DMA_Abort_IT+0x1e4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d048      	beq.n	8003dc6 <HAL_DMA_Abort_IT+0x1a6>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a33      	ldr	r2, [pc, #204]	; (8003e08 <HAL_DMA_Abort_IT+0x1e8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d040      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x1a0>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a32      	ldr	r2, [pc, #200]	; (8003e0c <HAL_DMA_Abort_IT+0x1ec>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d038      	beq.n	8003dba <HAL_DMA_Abort_IT+0x19a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a30      	ldr	r2, [pc, #192]	; (8003e10 <HAL_DMA_Abort_IT+0x1f0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d030      	beq.n	8003db4 <HAL_DMA_Abort_IT+0x194>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2f      	ldr	r2, [pc, #188]	; (8003e14 <HAL_DMA_Abort_IT+0x1f4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d028      	beq.n	8003dae <HAL_DMA_Abort_IT+0x18e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <HAL_DMA_Abort_IT+0x1dc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d020      	beq.n	8003da8 <HAL_DMA_Abort_IT+0x188>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a2b      	ldr	r2, [pc, #172]	; (8003e18 <HAL_DMA_Abort_IT+0x1f8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d019      	beq.n	8003da4 <HAL_DMA_Abort_IT+0x184>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <HAL_DMA_Abort_IT+0x1fc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d012      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x180>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a28      	ldr	r2, [pc, #160]	; (8003e20 <HAL_DMA_Abort_IT+0x200>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00a      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x17a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <HAL_DMA_Abort_IT+0x204>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d102      	bne.n	8003d94 <HAL_DMA_Abort_IT+0x174>
 8003d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d92:	e01b      	b.n	8003dcc <HAL_DMA_Abort_IT+0x1ac>
 8003d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d98:	e018      	b.n	8003dcc <HAL_DMA_Abort_IT+0x1ac>
 8003d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d9e:	e015      	b.n	8003dcc <HAL_DMA_Abort_IT+0x1ac>
 8003da0:	2310      	movs	r3, #16
 8003da2:	e013      	b.n	8003dcc <HAL_DMA_Abort_IT+0x1ac>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e011      	b.n	8003dcc <HAL_DMA_Abort_IT+0x1ac>
 8003da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dac:	e00e      	b.n	8003dcc <HAL_DMA_Abort_IT+0x1ac>
 8003dae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003db2:	e00b      	b.n	8003dcc <HAL_DMA_Abort_IT+0x1ac>
 8003db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003db8:	e008      	b.n	8003dcc <HAL_DMA_Abort_IT+0x1ac>
 8003dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dbe:	e005      	b.n	8003dcc <HAL_DMA_Abort_IT+0x1ac>
 8003dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dc4:	e002      	b.n	8003dcc <HAL_DMA_Abort_IT+0x1ac>
 8003dc6:	2310      	movs	r3, #16
 8003dc8:	e000      	b.n	8003dcc <HAL_DMA_Abort_IT+0x1ac>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	4a17      	ldr	r2, [pc, #92]	; (8003e2c <HAL_DMA_Abort_IT+0x20c>)
 8003dce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
    } 
  }
  return status;
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40020080 	.word	0x40020080
 8003e00:	40020008 	.word	0x40020008
 8003e04:	4002001c 	.word	0x4002001c
 8003e08:	40020030 	.word	0x40020030
 8003e0c:	40020044 	.word	0x40020044
 8003e10:	40020058 	.word	0x40020058
 8003e14:	4002006c 	.word	0x4002006c
 8003e18:	40020408 	.word	0x40020408
 8003e1c:	4002041c 	.word	0x4002041c
 8003e20:	40020430 	.word	0x40020430
 8003e24:	40020444 	.word	0x40020444
 8003e28:	40020400 	.word	0x40020400
 8003e2c:	40020000 	.word	0x40020000

08003e30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4013      	ands	r3, r2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80f1 	beq.w	800403c <HAL_DMA_IRQHandler+0x20c>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80eb 	beq.w	800403c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0204 	bic.w	r2, r2, #4
 8003e82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b5f      	ldr	r3, [pc, #380]	; (8004008 <HAL_DMA_IRQHandler+0x1d8>)
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d958      	bls.n	8003f42 <HAL_DMA_IRQHandler+0x112>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a5d      	ldr	r2, [pc, #372]	; (800400c <HAL_DMA_IRQHandler+0x1dc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d04f      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x10a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a5c      	ldr	r2, [pc, #368]	; (8004010 <HAL_DMA_IRQHandler+0x1e0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d048      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x106>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a5a      	ldr	r2, [pc, #360]	; (8004014 <HAL_DMA_IRQHandler+0x1e4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d040      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x100>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a59      	ldr	r2, [pc, #356]	; (8004018 <HAL_DMA_IRQHandler+0x1e8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d038      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xfa>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a57      	ldr	r2, [pc, #348]	; (800401c <HAL_DMA_IRQHandler+0x1ec>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d030      	beq.n	8003f24 <HAL_DMA_IRQHandler+0xf4>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a56      	ldr	r2, [pc, #344]	; (8004020 <HAL_DMA_IRQHandler+0x1f0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d028      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xee>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a4d      	ldr	r2, [pc, #308]	; (8004008 <HAL_DMA_IRQHandler+0x1d8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d020      	beq.n	8003f18 <HAL_DMA_IRQHandler+0xe8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_DMA_IRQHandler+0x1f4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d019      	beq.n	8003f14 <HAL_DMA_IRQHandler+0xe4>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a50      	ldr	r2, [pc, #320]	; (8004028 <HAL_DMA_IRQHandler+0x1f8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d012      	beq.n	8003f10 <HAL_DMA_IRQHandler+0xe0>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a4f      	ldr	r2, [pc, #316]	; (800402c <HAL_DMA_IRQHandler+0x1fc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00a      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xda>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <HAL_DMA_IRQHandler+0x200>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d102      	bne.n	8003f04 <HAL_DMA_IRQHandler+0xd4>
 8003efe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f02:	e01b      	b.n	8003f3c <HAL_DMA_IRQHandler+0x10c>
 8003f04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f08:	e018      	b.n	8003f3c <HAL_DMA_IRQHandler+0x10c>
 8003f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f0e:	e015      	b.n	8003f3c <HAL_DMA_IRQHandler+0x10c>
 8003f10:	2340      	movs	r3, #64	; 0x40
 8003f12:	e013      	b.n	8003f3c <HAL_DMA_IRQHandler+0x10c>
 8003f14:	2304      	movs	r3, #4
 8003f16:	e011      	b.n	8003f3c <HAL_DMA_IRQHandler+0x10c>
 8003f18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f1c:	e00e      	b.n	8003f3c <HAL_DMA_IRQHandler+0x10c>
 8003f1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f22:	e00b      	b.n	8003f3c <HAL_DMA_IRQHandler+0x10c>
 8003f24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f28:	e008      	b.n	8003f3c <HAL_DMA_IRQHandler+0x10c>
 8003f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f2e:	e005      	b.n	8003f3c <HAL_DMA_IRQHandler+0x10c>
 8003f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f34:	e002      	b.n	8003f3c <HAL_DMA_IRQHandler+0x10c>
 8003f36:	2340      	movs	r3, #64	; 0x40
 8003f38:	e000      	b.n	8003f3c <HAL_DMA_IRQHandler+0x10c>
 8003f3a:	2304      	movs	r3, #4
 8003f3c:	4a3d      	ldr	r2, [pc, #244]	; (8004034 <HAL_DMA_IRQHandler+0x204>)
 8003f3e:	6053      	str	r3, [r2, #4]
 8003f40:	e057      	b.n	8003ff2 <HAL_DMA_IRQHandler+0x1c2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a31      	ldr	r2, [pc, #196]	; (800400c <HAL_DMA_IRQHandler+0x1dc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d04f      	beq.n	8003fec <HAL_DMA_IRQHandler+0x1bc>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2f      	ldr	r2, [pc, #188]	; (8004010 <HAL_DMA_IRQHandler+0x1e0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d048      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x1b8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2e      	ldr	r2, [pc, #184]	; (8004014 <HAL_DMA_IRQHandler+0x1e4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d040      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x1b2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2c      	ldr	r2, [pc, #176]	; (8004018 <HAL_DMA_IRQHandler+0x1e8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d038      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x1ac>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a2b      	ldr	r2, [pc, #172]	; (800401c <HAL_DMA_IRQHandler+0x1ec>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d030      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x1a6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a29      	ldr	r2, [pc, #164]	; (8004020 <HAL_DMA_IRQHandler+0x1f0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d028      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x1a0>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a21      	ldr	r2, [pc, #132]	; (8004008 <HAL_DMA_IRQHandler+0x1d8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d020      	beq.n	8003fca <HAL_DMA_IRQHandler+0x19a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a25      	ldr	r2, [pc, #148]	; (8004024 <HAL_DMA_IRQHandler+0x1f4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d019      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x196>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a24      	ldr	r2, [pc, #144]	; (8004028 <HAL_DMA_IRQHandler+0x1f8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d012      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x192>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a22      	ldr	r2, [pc, #136]	; (800402c <HAL_DMA_IRQHandler+0x1fc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00a      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x18c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a21      	ldr	r2, [pc, #132]	; (8004030 <HAL_DMA_IRQHandler+0x200>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d102      	bne.n	8003fb6 <HAL_DMA_IRQHandler+0x186>
 8003fb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fb4:	e01b      	b.n	8003fee <HAL_DMA_IRQHandler+0x1be>
 8003fb6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003fba:	e018      	b.n	8003fee <HAL_DMA_IRQHandler+0x1be>
 8003fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc0:	e015      	b.n	8003fee <HAL_DMA_IRQHandler+0x1be>
 8003fc2:	2340      	movs	r3, #64	; 0x40
 8003fc4:	e013      	b.n	8003fee <HAL_DMA_IRQHandler+0x1be>
 8003fc6:	2304      	movs	r3, #4
 8003fc8:	e011      	b.n	8003fee <HAL_DMA_IRQHandler+0x1be>
 8003fca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003fce:	e00e      	b.n	8003fee <HAL_DMA_IRQHandler+0x1be>
 8003fd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fd4:	e00b      	b.n	8003fee <HAL_DMA_IRQHandler+0x1be>
 8003fd6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003fda:	e008      	b.n	8003fee <HAL_DMA_IRQHandler+0x1be>
 8003fdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fe0:	e005      	b.n	8003fee <HAL_DMA_IRQHandler+0x1be>
 8003fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe6:	e002      	b.n	8003fee <HAL_DMA_IRQHandler+0x1be>
 8003fe8:	2340      	movs	r3, #64	; 0x40
 8003fea:	e000      	b.n	8003fee <HAL_DMA_IRQHandler+0x1be>
 8003fec:	2304      	movs	r3, #4
 8003fee:	4a12      	ldr	r2, [pc, #72]	; (8004038 <HAL_DMA_IRQHandler+0x208>)
 8003ff0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8136 	beq.w	8004268 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004004:	e130      	b.n	8004268 <HAL_DMA_IRQHandler+0x438>
 8004006:	bf00      	nop
 8004008:	40020080 	.word	0x40020080
 800400c:	40020008 	.word	0x40020008
 8004010:	4002001c 	.word	0x4002001c
 8004014:	40020030 	.word	0x40020030
 8004018:	40020044 	.word	0x40020044
 800401c:	40020058 	.word	0x40020058
 8004020:	4002006c 	.word	0x4002006c
 8004024:	40020408 	.word	0x40020408
 8004028:	4002041c 	.word	0x4002041c
 800402c:	40020430 	.word	0x40020430
 8004030:	40020444 	.word	0x40020444
 8004034:	40020400 	.word	0x40020400
 8004038:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	2202      	movs	r2, #2
 8004042:	409a      	lsls	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80dd 	beq.w	8004208 <HAL_DMA_IRQHandler+0x3d8>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80d7 	beq.w	8004208 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 020a 	bic.w	r2, r2, #10
 8004076:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	4b7b      	ldr	r3, [pc, #492]	; (8004274 <HAL_DMA_IRQHandler+0x444>)
 8004088:	429a      	cmp	r2, r3
 800408a:	d958      	bls.n	800413e <HAL_DMA_IRQHandler+0x30e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a79      	ldr	r2, [pc, #484]	; (8004278 <HAL_DMA_IRQHandler+0x448>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d04f      	beq.n	8004136 <HAL_DMA_IRQHandler+0x306>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a78      	ldr	r2, [pc, #480]	; (800427c <HAL_DMA_IRQHandler+0x44c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d048      	beq.n	8004132 <HAL_DMA_IRQHandler+0x302>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a76      	ldr	r2, [pc, #472]	; (8004280 <HAL_DMA_IRQHandler+0x450>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d040      	beq.n	800412c <HAL_DMA_IRQHandler+0x2fc>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a75      	ldr	r2, [pc, #468]	; (8004284 <HAL_DMA_IRQHandler+0x454>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d038      	beq.n	8004126 <HAL_DMA_IRQHandler+0x2f6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a73      	ldr	r2, [pc, #460]	; (8004288 <HAL_DMA_IRQHandler+0x458>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d030      	beq.n	8004120 <HAL_DMA_IRQHandler+0x2f0>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a72      	ldr	r2, [pc, #456]	; (800428c <HAL_DMA_IRQHandler+0x45c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d028      	beq.n	800411a <HAL_DMA_IRQHandler+0x2ea>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a69      	ldr	r2, [pc, #420]	; (8004274 <HAL_DMA_IRQHandler+0x444>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d020      	beq.n	8004114 <HAL_DMA_IRQHandler+0x2e4>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a6e      	ldr	r2, [pc, #440]	; (8004290 <HAL_DMA_IRQHandler+0x460>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d019      	beq.n	8004110 <HAL_DMA_IRQHandler+0x2e0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a6c      	ldr	r2, [pc, #432]	; (8004294 <HAL_DMA_IRQHandler+0x464>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d012      	beq.n	800410c <HAL_DMA_IRQHandler+0x2dc>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6b      	ldr	r2, [pc, #428]	; (8004298 <HAL_DMA_IRQHandler+0x468>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00a      	beq.n	8004106 <HAL_DMA_IRQHandler+0x2d6>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a69      	ldr	r2, [pc, #420]	; (800429c <HAL_DMA_IRQHandler+0x46c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d102      	bne.n	8004100 <HAL_DMA_IRQHandler+0x2d0>
 80040fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040fe:	e01b      	b.n	8004138 <HAL_DMA_IRQHandler+0x308>
 8004100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004104:	e018      	b.n	8004138 <HAL_DMA_IRQHandler+0x308>
 8004106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800410a:	e015      	b.n	8004138 <HAL_DMA_IRQHandler+0x308>
 800410c:	2320      	movs	r3, #32
 800410e:	e013      	b.n	8004138 <HAL_DMA_IRQHandler+0x308>
 8004110:	2302      	movs	r3, #2
 8004112:	e011      	b.n	8004138 <HAL_DMA_IRQHandler+0x308>
 8004114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004118:	e00e      	b.n	8004138 <HAL_DMA_IRQHandler+0x308>
 800411a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800411e:	e00b      	b.n	8004138 <HAL_DMA_IRQHandler+0x308>
 8004120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004124:	e008      	b.n	8004138 <HAL_DMA_IRQHandler+0x308>
 8004126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800412a:	e005      	b.n	8004138 <HAL_DMA_IRQHandler+0x308>
 800412c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004130:	e002      	b.n	8004138 <HAL_DMA_IRQHandler+0x308>
 8004132:	2320      	movs	r3, #32
 8004134:	e000      	b.n	8004138 <HAL_DMA_IRQHandler+0x308>
 8004136:	2302      	movs	r3, #2
 8004138:	4a59      	ldr	r2, [pc, #356]	; (80042a0 <HAL_DMA_IRQHandler+0x470>)
 800413a:	6053      	str	r3, [r2, #4]
 800413c:	e057      	b.n	80041ee <HAL_DMA_IRQHandler+0x3be>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a4d      	ldr	r2, [pc, #308]	; (8004278 <HAL_DMA_IRQHandler+0x448>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d04f      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x3b8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a4b      	ldr	r2, [pc, #300]	; (800427c <HAL_DMA_IRQHandler+0x44c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d048      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x3b4>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a4a      	ldr	r2, [pc, #296]	; (8004280 <HAL_DMA_IRQHandler+0x450>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d040      	beq.n	80041de <HAL_DMA_IRQHandler+0x3ae>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a48      	ldr	r2, [pc, #288]	; (8004284 <HAL_DMA_IRQHandler+0x454>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d038      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x3a8>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a47      	ldr	r2, [pc, #284]	; (8004288 <HAL_DMA_IRQHandler+0x458>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d030      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x3a2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a45      	ldr	r2, [pc, #276]	; (800428c <HAL_DMA_IRQHandler+0x45c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d028      	beq.n	80041cc <HAL_DMA_IRQHandler+0x39c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a3d      	ldr	r2, [pc, #244]	; (8004274 <HAL_DMA_IRQHandler+0x444>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d020      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x396>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a41      	ldr	r2, [pc, #260]	; (8004290 <HAL_DMA_IRQHandler+0x460>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d019      	beq.n	80041c2 <HAL_DMA_IRQHandler+0x392>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a40      	ldr	r2, [pc, #256]	; (8004294 <HAL_DMA_IRQHandler+0x464>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d012      	beq.n	80041be <HAL_DMA_IRQHandler+0x38e>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a3e      	ldr	r2, [pc, #248]	; (8004298 <HAL_DMA_IRQHandler+0x468>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00a      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x388>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a3d      	ldr	r2, [pc, #244]	; (800429c <HAL_DMA_IRQHandler+0x46c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d102      	bne.n	80041b2 <HAL_DMA_IRQHandler+0x382>
 80041ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041b0:	e01b      	b.n	80041ea <HAL_DMA_IRQHandler+0x3ba>
 80041b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041b6:	e018      	b.n	80041ea <HAL_DMA_IRQHandler+0x3ba>
 80041b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041bc:	e015      	b.n	80041ea <HAL_DMA_IRQHandler+0x3ba>
 80041be:	2320      	movs	r3, #32
 80041c0:	e013      	b.n	80041ea <HAL_DMA_IRQHandler+0x3ba>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e011      	b.n	80041ea <HAL_DMA_IRQHandler+0x3ba>
 80041c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ca:	e00e      	b.n	80041ea <HAL_DMA_IRQHandler+0x3ba>
 80041cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041d0:	e00b      	b.n	80041ea <HAL_DMA_IRQHandler+0x3ba>
 80041d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041d6:	e008      	b.n	80041ea <HAL_DMA_IRQHandler+0x3ba>
 80041d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041dc:	e005      	b.n	80041ea <HAL_DMA_IRQHandler+0x3ba>
 80041de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041e2:	e002      	b.n	80041ea <HAL_DMA_IRQHandler+0x3ba>
 80041e4:	2320      	movs	r3, #32
 80041e6:	e000      	b.n	80041ea <HAL_DMA_IRQHandler+0x3ba>
 80041e8:	2302      	movs	r3, #2
 80041ea:	4a2e      	ldr	r2, [pc, #184]	; (80042a4 <HAL_DMA_IRQHandler+0x474>)
 80041ec:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d034      	beq.n	8004268 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004206:	e02f      	b.n	8004268 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	2208      	movs	r2, #8
 800420e:	409a      	lsls	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d028      	beq.n	800426a <HAL_DMA_IRQHandler+0x43a>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d023      	beq.n	800426a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 020e 	bic.w	r2, r2, #14
 8004230:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	2101      	movs	r1, #1
 800423c:	fa01 f202 	lsl.w	r2, r1, r2
 8004240:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4798      	blx	r3
    }
  }
  return;
 8004268:	bf00      	nop
 800426a:	bf00      	nop
}
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40020080 	.word	0x40020080
 8004278:	40020008 	.word	0x40020008
 800427c:	4002001c 	.word	0x4002001c
 8004280:	40020030 	.word	0x40020030
 8004284:	40020044 	.word	0x40020044
 8004288:	40020058 	.word	0x40020058
 800428c:	4002006c 	.word	0x4002006c
 8004290:	40020408 	.word	0x40020408
 8004294:	4002041c 	.word	0x4002041c
 8004298:	40020430 	.word	0x40020430
 800429c:	40020444 	.word	0x40020444
 80042a0:	40020400 	.word	0x40020400
 80042a4:	40020000 	.word	0x40020000

080042a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042be:	2101      	movs	r1, #1
 80042c0:	fa01 f202 	lsl.w	r2, r1, r2
 80042c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d108      	bne.n	80042e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042e6:	e007      	b.n	80042f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	60da      	str	r2, [r3, #12]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
	...

08004304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004304:	b480      	push	{r7}
 8004306:	b08b      	sub	sp, #44	; 0x2c
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800430e:	2300      	movs	r3, #0
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004312:	2300      	movs	r3, #0
 8004314:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004316:	e179      	b.n	800460c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004318:	2201      	movs	r2, #1
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69fa      	ldr	r2, [r7, #28]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	429a      	cmp	r2, r3
 8004332:	f040 8168 	bne.w	8004606 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4a96      	ldr	r2, [pc, #600]	; (8004594 <HAL_GPIO_Init+0x290>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d05e      	beq.n	80043fe <HAL_GPIO_Init+0xfa>
 8004340:	4a94      	ldr	r2, [pc, #592]	; (8004594 <HAL_GPIO_Init+0x290>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d875      	bhi.n	8004432 <HAL_GPIO_Init+0x12e>
 8004346:	4a94      	ldr	r2, [pc, #592]	; (8004598 <HAL_GPIO_Init+0x294>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d058      	beq.n	80043fe <HAL_GPIO_Init+0xfa>
 800434c:	4a92      	ldr	r2, [pc, #584]	; (8004598 <HAL_GPIO_Init+0x294>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d86f      	bhi.n	8004432 <HAL_GPIO_Init+0x12e>
 8004352:	4a92      	ldr	r2, [pc, #584]	; (800459c <HAL_GPIO_Init+0x298>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d052      	beq.n	80043fe <HAL_GPIO_Init+0xfa>
 8004358:	4a90      	ldr	r2, [pc, #576]	; (800459c <HAL_GPIO_Init+0x298>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d869      	bhi.n	8004432 <HAL_GPIO_Init+0x12e>
 800435e:	4a90      	ldr	r2, [pc, #576]	; (80045a0 <HAL_GPIO_Init+0x29c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d04c      	beq.n	80043fe <HAL_GPIO_Init+0xfa>
 8004364:	4a8e      	ldr	r2, [pc, #568]	; (80045a0 <HAL_GPIO_Init+0x29c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d863      	bhi.n	8004432 <HAL_GPIO_Init+0x12e>
 800436a:	4a8e      	ldr	r2, [pc, #568]	; (80045a4 <HAL_GPIO_Init+0x2a0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d046      	beq.n	80043fe <HAL_GPIO_Init+0xfa>
 8004370:	4a8c      	ldr	r2, [pc, #560]	; (80045a4 <HAL_GPIO_Init+0x2a0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d85d      	bhi.n	8004432 <HAL_GPIO_Init+0x12e>
 8004376:	2b12      	cmp	r3, #18
 8004378:	d82a      	bhi.n	80043d0 <HAL_GPIO_Init+0xcc>
 800437a:	2b12      	cmp	r3, #18
 800437c:	d859      	bhi.n	8004432 <HAL_GPIO_Init+0x12e>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <HAL_GPIO_Init+0x80>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043ff 	.word	0x080043ff
 8004388:	080043d9 	.word	0x080043d9
 800438c:	080043eb 	.word	0x080043eb
 8004390:	0800442d 	.word	0x0800442d
 8004394:	08004433 	.word	0x08004433
 8004398:	08004433 	.word	0x08004433
 800439c:	08004433 	.word	0x08004433
 80043a0:	08004433 	.word	0x08004433
 80043a4:	08004433 	.word	0x08004433
 80043a8:	08004433 	.word	0x08004433
 80043ac:	08004433 	.word	0x08004433
 80043b0:	08004433 	.word	0x08004433
 80043b4:	08004433 	.word	0x08004433
 80043b8:	08004433 	.word	0x08004433
 80043bc:	08004433 	.word	0x08004433
 80043c0:	08004433 	.word	0x08004433
 80043c4:	08004433 	.word	0x08004433
 80043c8:	080043e1 	.word	0x080043e1
 80043cc:	080043f5 	.word	0x080043f5
 80043d0:	4a75      	ldr	r2, [pc, #468]	; (80045a8 <HAL_GPIO_Init+0x2a4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80043d6:	e02c      	b.n	8004432 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	623b      	str	r3, [r7, #32]
          break;
 80043de:	e029      	b.n	8004434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	3304      	adds	r3, #4
 80043e6:	623b      	str	r3, [r7, #32]
          break;
 80043e8:	e024      	b.n	8004434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	3308      	adds	r3, #8
 80043f0:	623b      	str	r3, [r7, #32]
          break;
 80043f2:	e01f      	b.n	8004434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	330c      	adds	r3, #12
 80043fa:	623b      	str	r3, [r7, #32]
          break;
 80043fc:	e01a      	b.n	8004434 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d102      	bne.n	800440c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004406:	2304      	movs	r3, #4
 8004408:	623b      	str	r3, [r7, #32]
          break;
 800440a:	e013      	b.n	8004434 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004414:	2308      	movs	r3, #8
 8004416:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	611a      	str	r2, [r3, #16]
          break;
 800441e:	e009      	b.n	8004434 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004420:	2308      	movs	r3, #8
 8004422:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	615a      	str	r2, [r3, #20]
          break;
 800442a:	e003      	b.n	8004434 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800442c:	2300      	movs	r3, #0
 800442e:	623b      	str	r3, [r7, #32]
          break;
 8004430:	e000      	b.n	8004434 <HAL_GPIO_Init+0x130>
          break;
 8004432:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2bff      	cmp	r3, #255	; 0xff
 8004438:	d801      	bhi.n	800443e <HAL_GPIO_Init+0x13a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	e001      	b.n	8004442 <HAL_GPIO_Init+0x13e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3304      	adds	r3, #4
 8004442:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2bff      	cmp	r3, #255	; 0xff
 8004448:	d802      	bhi.n	8004450 <HAL_GPIO_Init+0x14c>
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	e002      	b.n	8004456 <HAL_GPIO_Init+0x152>
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	3b08      	subs	r3, #8
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	210f      	movs	r1, #15
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	401a      	ands	r2, r3
 8004468:	6a39      	ldr	r1, [r7, #32]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	431a      	orrs	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 80c1 	beq.w	8004606 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004484:	4b49      	ldr	r3, [pc, #292]	; (80045ac <HAL_GPIO_Init+0x2a8>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	4a48      	ldr	r2, [pc, #288]	; (80045ac <HAL_GPIO_Init+0x2a8>)
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6193      	str	r3, [r2, #24]
 8004490:	4b46      	ldr	r3, [pc, #280]	; (80045ac <HAL_GPIO_Init+0x2a8>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800449c:	4a44      	ldr	r2, [pc, #272]	; (80045b0 <HAL_GPIO_Init+0x2ac>)
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	089b      	lsrs	r3, r3, #2
 80044a2:	3302      	adds	r3, #2
 80044a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	220f      	movs	r2, #15
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4013      	ands	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a3c      	ldr	r2, [pc, #240]	; (80045b4 <HAL_GPIO_Init+0x2b0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d01f      	beq.n	8004508 <HAL_GPIO_Init+0x204>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3b      	ldr	r2, [pc, #236]	; (80045b8 <HAL_GPIO_Init+0x2b4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d019      	beq.n	8004504 <HAL_GPIO_Init+0x200>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3a      	ldr	r2, [pc, #232]	; (80045bc <HAL_GPIO_Init+0x2b8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <HAL_GPIO_Init+0x1fc>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a39      	ldr	r2, [pc, #228]	; (80045c0 <HAL_GPIO_Init+0x2bc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00d      	beq.n	80044fc <HAL_GPIO_Init+0x1f8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a38      	ldr	r2, [pc, #224]	; (80045c4 <HAL_GPIO_Init+0x2c0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <HAL_GPIO_Init+0x1f4>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a37      	ldr	r2, [pc, #220]	; (80045c8 <HAL_GPIO_Init+0x2c4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d101      	bne.n	80044f4 <HAL_GPIO_Init+0x1f0>
 80044f0:	2305      	movs	r3, #5
 80044f2:	e00a      	b.n	800450a <HAL_GPIO_Init+0x206>
 80044f4:	2306      	movs	r3, #6
 80044f6:	e008      	b.n	800450a <HAL_GPIO_Init+0x206>
 80044f8:	2304      	movs	r3, #4
 80044fa:	e006      	b.n	800450a <HAL_GPIO_Init+0x206>
 80044fc:	2303      	movs	r3, #3
 80044fe:	e004      	b.n	800450a <HAL_GPIO_Init+0x206>
 8004500:	2302      	movs	r3, #2
 8004502:	e002      	b.n	800450a <HAL_GPIO_Init+0x206>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <HAL_GPIO_Init+0x206>
 8004508:	2300      	movs	r3, #0
 800450a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450c:	f002 0203 	and.w	r2, r2, #3
 8004510:	0092      	lsls	r2, r2, #2
 8004512:	4093      	lsls	r3, r2
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800451a:	4925      	ldr	r1, [pc, #148]	; (80045b0 <HAL_GPIO_Init+0x2ac>)
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	3302      	adds	r3, #2
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d006      	beq.n	8004542 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004534:	4b25      	ldr	r3, [pc, #148]	; (80045cc <HAL_GPIO_Init+0x2c8>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4924      	ldr	r1, [pc, #144]	; (80045cc <HAL_GPIO_Init+0x2c8>)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]
 8004540:	e006      	b.n	8004550 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004542:	4b22      	ldr	r3, [pc, #136]	; (80045cc <HAL_GPIO_Init+0x2c8>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	43db      	mvns	r3, r3
 800454a:	4920      	ldr	r1, [pc, #128]	; (80045cc <HAL_GPIO_Init+0x2c8>)
 800454c:	4013      	ands	r3, r2
 800454e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d006      	beq.n	800456a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800455c:	4b1b      	ldr	r3, [pc, #108]	; (80045cc <HAL_GPIO_Init+0x2c8>)
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	491a      	ldr	r1, [pc, #104]	; (80045cc <HAL_GPIO_Init+0x2c8>)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
 8004568:	e006      	b.n	8004578 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800456a:	4b18      	ldr	r3, [pc, #96]	; (80045cc <HAL_GPIO_Init+0x2c8>)
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	43db      	mvns	r3, r3
 8004572:	4916      	ldr	r1, [pc, #88]	; (80045cc <HAL_GPIO_Init+0x2c8>)
 8004574:	4013      	ands	r3, r2
 8004576:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d025      	beq.n	80045d0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <HAL_GPIO_Init+0x2c8>)
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	4910      	ldr	r1, [pc, #64]	; (80045cc <HAL_GPIO_Init+0x2c8>)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	4313      	orrs	r3, r2
 800458e:	608b      	str	r3, [r1, #8]
 8004590:	e025      	b.n	80045de <HAL_GPIO_Init+0x2da>
 8004592:	bf00      	nop
 8004594:	10320000 	.word	0x10320000
 8004598:	10310000 	.word	0x10310000
 800459c:	10220000 	.word	0x10220000
 80045a0:	10210000 	.word	0x10210000
 80045a4:	10120000 	.word	0x10120000
 80045a8:	10110000 	.word	0x10110000
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40010800 	.word	0x40010800
 80045b8:	40010c00 	.word	0x40010c00
 80045bc:	40011000 	.word	0x40011000
 80045c0:	40011400 	.word	0x40011400
 80045c4:	40011800 	.word	0x40011800
 80045c8:	40011c00 	.word	0x40011c00
 80045cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80045d0:	4b15      	ldr	r3, [pc, #84]	; (8004628 <HAL_GPIO_Init+0x324>)
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	43db      	mvns	r3, r3
 80045d8:	4913      	ldr	r1, [pc, #76]	; (8004628 <HAL_GPIO_Init+0x324>)
 80045da:	4013      	ands	r3, r2
 80045dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d006      	beq.n	80045f8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80045ea:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <HAL_GPIO_Init+0x324>)
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	490e      	ldr	r1, [pc, #56]	; (8004628 <HAL_GPIO_Init+0x324>)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60cb      	str	r3, [r1, #12]
 80045f6:	e006      	b.n	8004606 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <HAL_GPIO_Init+0x324>)
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	43db      	mvns	r3, r3
 8004600:	4909      	ldr	r1, [pc, #36]	; (8004628 <HAL_GPIO_Init+0x324>)
 8004602:	4013      	ands	r3, r2
 8004604:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	3301      	adds	r3, #1
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	fa22 f303 	lsr.w	r3, r2, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	f47f ae7e 	bne.w	8004318 <HAL_GPIO_Init+0x14>
  }
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	372c      	adds	r7, #44	; 0x2c
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	40010400 	.word	0x40010400

0800462c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	887b      	ldrh	r3, [r7, #2]
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
 8004648:	e001      	b.n	800464e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	807b      	strh	r3, [r7, #2]
 8004666:	4613      	mov	r3, r2
 8004668:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800466a:	787b      	ldrb	r3, [r7, #1]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004670:	887a      	ldrh	r2, [r7, #2]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004676:	e003      	b.n	8004680 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004678:	887b      	ldrh	r3, [r7, #2]
 800467a:	041a      	lsls	r2, r3, #16
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	611a      	str	r2, [r3, #16]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
	...

0800468c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e12b      	b.n	80048f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fd ff16 	bl	80024e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2224      	movs	r2, #36	; 0x24
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046f0:	f001 fba0 	bl	8005e34 <HAL_RCC_GetPCLK1Freq>
 80046f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4a81      	ldr	r2, [pc, #516]	; (8004900 <HAL_I2C_Init+0x274>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d807      	bhi.n	8004710 <HAL_I2C_Init+0x84>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a80      	ldr	r2, [pc, #512]	; (8004904 <HAL_I2C_Init+0x278>)
 8004704:	4293      	cmp	r3, r2
 8004706:	bf94      	ite	ls
 8004708:	2301      	movls	r3, #1
 800470a:	2300      	movhi	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	e006      	b.n	800471e <HAL_I2C_Init+0x92>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a7d      	ldr	r2, [pc, #500]	; (8004908 <HAL_I2C_Init+0x27c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	bf94      	ite	ls
 8004718:	2301      	movls	r3, #1
 800471a:	2300      	movhi	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e0e7      	b.n	80048f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4a78      	ldr	r2, [pc, #480]	; (800490c <HAL_I2C_Init+0x280>)
 800472a:	fba2 2303 	umull	r2, r3, r2, r3
 800472e:	0c9b      	lsrs	r3, r3, #18
 8004730:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	4a6a      	ldr	r2, [pc, #424]	; (8004900 <HAL_I2C_Init+0x274>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d802      	bhi.n	8004760 <HAL_I2C_Init+0xd4>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	3301      	adds	r3, #1
 800475e:	e009      	b.n	8004774 <HAL_I2C_Init+0xe8>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004766:	fb02 f303 	mul.w	r3, r2, r3
 800476a:	4a69      	ldr	r2, [pc, #420]	; (8004910 <HAL_I2C_Init+0x284>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	099b      	lsrs	r3, r3, #6
 8004772:	3301      	adds	r3, #1
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	430b      	orrs	r3, r1
 800477a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004786:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	495c      	ldr	r1, [pc, #368]	; (8004900 <HAL_I2C_Init+0x274>)
 8004790:	428b      	cmp	r3, r1
 8004792:	d819      	bhi.n	80047c8 <HAL_I2C_Init+0x13c>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1e59      	subs	r1, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	fbb1 f3f3 	udiv	r3, r1, r3
 80047a2:	1c59      	adds	r1, r3, #1
 80047a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047a8:	400b      	ands	r3, r1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_I2C_Init+0x138>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1e59      	subs	r1, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047bc:	3301      	adds	r3, #1
 80047be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c2:	e051      	b.n	8004868 <HAL_I2C_Init+0x1dc>
 80047c4:	2304      	movs	r3, #4
 80047c6:	e04f      	b.n	8004868 <HAL_I2C_Init+0x1dc>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d111      	bne.n	80047f4 <HAL_I2C_Init+0x168>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1e58      	subs	r0, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	440b      	add	r3, r1
 80047de:	fbb0 f3f3 	udiv	r3, r0, r3
 80047e2:	3301      	adds	r3, #1
 80047e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e012      	b.n	800481a <HAL_I2C_Init+0x18e>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1e58      	subs	r0, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6859      	ldr	r1, [r3, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	0099      	lsls	r1, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	fbb0 f3f3 	udiv	r3, r0, r3
 800480a:	3301      	adds	r3, #1
 800480c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_I2C_Init+0x196>
 800481e:	2301      	movs	r3, #1
 8004820:	e022      	b.n	8004868 <HAL_I2C_Init+0x1dc>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10e      	bne.n	8004848 <HAL_I2C_Init+0x1bc>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1e58      	subs	r0, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6859      	ldr	r1, [r3, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	440b      	add	r3, r1
 8004838:	fbb0 f3f3 	udiv	r3, r0, r3
 800483c:	3301      	adds	r3, #1
 800483e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004846:	e00f      	b.n	8004868 <HAL_I2C_Init+0x1dc>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	1e58      	subs	r0, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	0099      	lsls	r1, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	fbb0 f3f3 	udiv	r3, r0, r3
 800485e:	3301      	adds	r3, #1
 8004860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	6809      	ldr	r1, [r1, #0]
 800486c:	4313      	orrs	r3, r2
 800486e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004896:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6911      	ldr	r1, [r2, #16]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68d2      	ldr	r2, [r2, #12]
 80048a2:	4311      	orrs	r1, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	430b      	orrs	r3, r1
 80048aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	000186a0 	.word	0x000186a0
 8004904:	001e847f 	.word	0x001e847f
 8004908:	003d08ff 	.word	0x003d08ff
 800490c:	431bde83 	.word	0x431bde83
 8004910:	10624dd3 	.word	0x10624dd3

08004914 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af02      	add	r7, sp, #8
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	4608      	mov	r0, r1
 800491e:	4611      	mov	r1, r2
 8004920:	461a      	mov	r2, r3
 8004922:	4603      	mov	r3, r0
 8004924:	817b      	strh	r3, [r7, #10]
 8004926:	460b      	mov	r3, r1
 8004928:	813b      	strh	r3, [r7, #8]
 800492a:	4613      	mov	r3, r2
 800492c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800492e:	f7fe ff65 	bl	80037fc <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b20      	cmp	r3, #32
 800493e:	f040 80d9 	bne.w	8004af4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	2319      	movs	r3, #25
 8004948:	2201      	movs	r2, #1
 800494a:	496d      	ldr	r1, [pc, #436]	; (8004b00 <HAL_I2C_Mem_Write+0x1ec>)
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 fcc1 	bl	80052d4 <I2C_WaitOnFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004958:	2302      	movs	r3, #2
 800495a:	e0cc      	b.n	8004af6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_I2C_Mem_Write+0x56>
 8004966:	2302      	movs	r3, #2
 8004968:	e0c5      	b.n	8004af6 <HAL_I2C_Mem_Write+0x1e2>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b01      	cmp	r3, #1
 800497e:	d007      	beq.n	8004990 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2221      	movs	r2, #33	; 0x21
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a4d      	ldr	r2, [pc, #308]	; (8004b04 <HAL_I2C_Mem_Write+0x1f0>)
 80049d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049d2:	88f8      	ldrh	r0, [r7, #6]
 80049d4:	893a      	ldrh	r2, [r7, #8]
 80049d6:	8979      	ldrh	r1, [r7, #10]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	4603      	mov	r3, r0
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 faf8 	bl	8004fd8 <I2C_RequestMemoryWrite>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d052      	beq.n	8004a94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e081      	b.n	8004af6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fd42 	bl	8005480 <I2C_WaitOnTXEFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d107      	bne.n	8004a1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e06b      	b.n	8004af6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d11b      	bne.n	8004a94 <HAL_I2C_Mem_Write+0x180>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d017      	beq.n	8004a94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1aa      	bne.n	80049f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 fd2e 	bl	8005502 <I2C_WaitOnBTFFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d107      	bne.n	8004ac4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e016      	b.n	8004af6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004af4:	2302      	movs	r3, #2
  }
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	00100002 	.word	0x00100002
 8004b04:	ffff0000 	.word	0xffff0000

08004b08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08c      	sub	sp, #48	; 0x30
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	4608      	mov	r0, r1
 8004b12:	4611      	mov	r1, r2
 8004b14:	461a      	mov	r2, r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	817b      	strh	r3, [r7, #10]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	813b      	strh	r3, [r7, #8]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b26:	f7fe fe69 	bl	80037fc <HAL_GetTick>
 8004b2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	f040 8244 	bne.w	8004fc2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	2319      	movs	r3, #25
 8004b40:	2201      	movs	r2, #1
 8004b42:	4982      	ldr	r1, [pc, #520]	; (8004d4c <HAL_I2C_Mem_Read+0x244>)
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fbc5 	bl	80052d4 <I2C_WaitOnFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
 8004b52:	e237      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2C_Mem_Read+0x5a>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e230      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x4bc>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d007      	beq.n	8004b88 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2222      	movs	r2, #34	; 0x22
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2240      	movs	r2, #64	; 0x40
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a62      	ldr	r2, [pc, #392]	; (8004d50 <HAL_I2C_Mem_Read+0x248>)
 8004bc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bca:	88f8      	ldrh	r0, [r7, #6]
 8004bcc:	893a      	ldrh	r2, [r7, #8]
 8004bce:	8979      	ldrh	r1, [r7, #10]
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	4603      	mov	r3, r0
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fa92 	bl	8005104 <I2C_RequestMemoryRead>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e1ec      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d113      	bne.n	8004c1a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e1c0      	b.n	8004f9c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d11e      	bne.n	8004c60 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c32:	b672      	cpsid	i
}
 8004c34:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c5c:	b662      	cpsie	i
}
 8004c5e:	e035      	b.n	8004ccc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d11e      	bne.n	8004ca6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c78:	b672      	cpsid	i
}
 8004c7a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ca2:	b662      	cpsie	i
}
 8004ca4:	e012      	b.n	8004ccc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cb4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004ccc:	e166      	b.n	8004f9c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	f200 811f 	bhi.w	8004f16 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d123      	bne.n	8004d28 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fc4d 	bl	8005584 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e167      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d26:	e139      	b.n	8004f9c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d152      	bne.n	8004dd6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d36:	2200      	movs	r2, #0
 8004d38:	4906      	ldr	r1, [pc, #24]	; (8004d54 <HAL_I2C_Mem_Read+0x24c>)
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 faca 	bl	80052d4 <I2C_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e13c      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x4bc>
 8004d4a:	bf00      	nop
 8004d4c:	00100002 	.word	0x00100002
 8004d50:	ffff0000 	.word	0xffff0000
 8004d54:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004d58:	b672      	cpsid	i
}
 8004d5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d9e:	b662      	cpsie	i
}
 8004da0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dd4:	e0e2      	b.n	8004f9c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	2200      	movs	r2, #0
 8004dde:	497b      	ldr	r1, [pc, #492]	; (8004fcc <HAL_I2C_Mem_Read+0x4c4>)
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 fa77 	bl	80052d4 <I2C_WaitOnFlagUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0e9      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e00:	b672      	cpsid	i
}
 8004e02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e36:	4b66      	ldr	r3, [pc, #408]	; (8004fd0 <HAL_I2C_Mem_Read+0x4c8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	08db      	lsrs	r3, r3, #3
 8004e3c:	4a65      	ldr	r2, [pc, #404]	; (8004fd4 <HAL_I2C_Mem_Read+0x4cc>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	0a1a      	lsrs	r2, r3, #8
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	00da      	lsls	r2, r3, #3
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d118      	bne.n	8004e8e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f043 0220 	orr.w	r2, r3, #32
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004e7e:	b662      	cpsie	i
}
 8004e80:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e09a      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d1d9      	bne.n	8004e50 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ede:	b662      	cpsie	i
}
 8004ee0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f14:	e042      	b.n	8004f9c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 fb32 	bl	8005584 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e04c      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d118      	bne.n	8004f9c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f47f ae94 	bne.w	8004cce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e000      	b.n	8004fc4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004fc2:	2302      	movs	r3, #2
  }
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3728      	adds	r7, #40	; 0x28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	00010004 	.word	0x00010004
 8004fd0:	20000000 	.word	0x20000000
 8004fd4:	14f8b589 	.word	0x14f8b589

08004fd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	817b      	strh	r3, [r7, #10]
 8004fea:	460b      	mov	r3, r1
 8004fec:	813b      	strh	r3, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005000:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	2200      	movs	r2, #0
 800500a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 f960 	bl	80052d4 <I2C_WaitOnFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00d      	beq.n	8005036 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005028:	d103      	bne.n	8005032 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005030:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e05f      	b.n	80050f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005036:	897b      	ldrh	r3, [r7, #10]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	461a      	mov	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005044:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	6a3a      	ldr	r2, [r7, #32]
 800504a:	492d      	ldr	r1, [pc, #180]	; (8005100 <I2C_RequestMemoryWrite+0x128>)
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f998 	bl	8005382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e04c      	b.n	80050f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	6a39      	ldr	r1, [r7, #32]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fa02 	bl	8005480 <I2C_WaitOnTXEFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00d      	beq.n	800509e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	2b04      	cmp	r3, #4
 8005088:	d107      	bne.n	800509a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005098:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e02b      	b.n	80050f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800509e:	88fb      	ldrh	r3, [r7, #6]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d105      	bne.n	80050b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050a4:	893b      	ldrh	r3, [r7, #8]
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	611a      	str	r2, [r3, #16]
 80050ae:	e021      	b.n	80050f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050b0:	893b      	ldrh	r3, [r7, #8]
 80050b2:	0a1b      	lsrs	r3, r3, #8
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c0:	6a39      	ldr	r1, [r7, #32]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f9dc 	bl	8005480 <I2C_WaitOnTXEFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00d      	beq.n	80050ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d107      	bne.n	80050e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e005      	b.n	80050f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050ea:	893b      	ldrh	r3, [r7, #8]
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	00010002 	.word	0x00010002

08005104 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af02      	add	r7, sp, #8
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	4608      	mov	r0, r1
 800510e:	4611      	mov	r1, r2
 8005110:	461a      	mov	r2, r3
 8005112:	4603      	mov	r3, r0
 8005114:	817b      	strh	r3, [r7, #10]
 8005116:	460b      	mov	r3, r1
 8005118:	813b      	strh	r3, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800512c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800513c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	2200      	movs	r2, #0
 8005146:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 f8c2 	bl	80052d4 <I2C_WaitOnFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00d      	beq.n	8005172 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005164:	d103      	bne.n	800516e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e0aa      	b.n	80052c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005172:	897b      	ldrh	r3, [r7, #10]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005180:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	6a3a      	ldr	r2, [r7, #32]
 8005186:	4952      	ldr	r1, [pc, #328]	; (80052d0 <I2C_RequestMemoryRead+0x1cc>)
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f8fa 	bl	8005382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e097      	b.n	80052c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b0:	6a39      	ldr	r1, [r7, #32]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f964 	bl	8005480 <I2C_WaitOnTXEFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00d      	beq.n	80051da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d107      	bne.n	80051d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e076      	b.n	80052c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d105      	bne.n	80051ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051e0:	893b      	ldrh	r3, [r7, #8]
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	611a      	str	r2, [r3, #16]
 80051ea:	e021      	b.n	8005230 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051ec:	893b      	ldrh	r3, [r7, #8]
 80051ee:	0a1b      	lsrs	r3, r3, #8
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fc:	6a39      	ldr	r1, [r7, #32]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f93e 	bl	8005480 <I2C_WaitOnTXEFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00d      	beq.n	8005226 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	2b04      	cmp	r3, #4
 8005210:	d107      	bne.n	8005222 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005220:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e050      	b.n	80052c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005226:	893b      	ldrh	r3, [r7, #8]
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	6a39      	ldr	r1, [r7, #32]
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f923 	bl	8005480 <I2C_WaitOnTXEFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00d      	beq.n	800525c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	2b04      	cmp	r3, #4
 8005246:	d107      	bne.n	8005258 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005256:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e035      	b.n	80052c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800526a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	2200      	movs	r2, #0
 8005274:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f82b 	bl	80052d4 <I2C_WaitOnFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00d      	beq.n	80052a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005292:	d103      	bne.n	800529c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800529a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e013      	b.n	80052c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052a0:	897b      	ldrh	r3, [r7, #10]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	6a3a      	ldr	r2, [r7, #32]
 80052b4:	4906      	ldr	r1, [pc, #24]	; (80052d0 <I2C_RequestMemoryRead+0x1cc>)
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f863 	bl	8005382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	00010002 	.word	0x00010002

080052d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052e4:	e025      	b.n	8005332 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ec:	d021      	beq.n	8005332 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ee:	f7fe fa85 	bl	80037fc <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d302      	bcc.n	8005304 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d116      	bne.n	8005332 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e023      	b.n	800537a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d10d      	bne.n	8005358 <I2C_WaitOnFlagUntilTimeout+0x84>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	43da      	mvns	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4013      	ands	r3, r2
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	bf0c      	ite	eq
 800534e:	2301      	moveq	r3, #1
 8005350:	2300      	movne	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	e00c      	b.n	8005372 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	43da      	mvns	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4013      	ands	r3, r2
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	bf0c      	ite	eq
 800536a:	2301      	moveq	r3, #1
 800536c:	2300      	movne	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	429a      	cmp	r2, r3
 8005376:	d0b6      	beq.n	80052e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005390:	e051      	b.n	8005436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a0:	d123      	bne.n	80053ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f043 0204 	orr.w	r2, r3, #4
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e046      	b.n	8005478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f0:	d021      	beq.n	8005436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f2:	f7fe fa03 	bl	80037fc <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d302      	bcc.n	8005408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d116      	bne.n	8005436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f043 0220 	orr.w	r2, r3, #32
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e020      	b.n	8005478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	0c1b      	lsrs	r3, r3, #16
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	d10c      	bne.n	800545a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	43da      	mvns	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4013      	ands	r3, r2
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	bf14      	ite	ne
 8005452:	2301      	movne	r3, #1
 8005454:	2300      	moveq	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	e00b      	b.n	8005472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	43da      	mvns	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4013      	ands	r3, r2
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf14      	ite	ne
 800546c:	2301      	movne	r3, #1
 800546e:	2300      	moveq	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d18d      	bne.n	8005392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800548c:	e02d      	b.n	80054ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 f8ce 	bl	8005630 <I2C_IsAcknowledgeFailed>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e02d      	b.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a4:	d021      	beq.n	80054ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a6:	f7fe f9a9 	bl	80037fc <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d302      	bcc.n	80054bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d116      	bne.n	80054ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f043 0220 	orr.w	r2, r3, #32
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e007      	b.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f4:	2b80      	cmp	r3, #128	; 0x80
 80054f6:	d1ca      	bne.n	800548e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800550e:	e02d      	b.n	800556c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f88d 	bl	8005630 <I2C_IsAcknowledgeFailed>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e02d      	b.n	800557c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005526:	d021      	beq.n	800556c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005528:	f7fe f968 	bl	80037fc <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	429a      	cmp	r2, r3
 8005536:	d302      	bcc.n	800553e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d116      	bne.n	800556c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	f043 0220 	orr.w	r2, r3, #32
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e007      	b.n	800557c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b04      	cmp	r3, #4
 8005578:	d1ca      	bne.n	8005510 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005590:	e042      	b.n	8005618 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	f003 0310 	and.w	r3, r3, #16
 800559c:	2b10      	cmp	r3, #16
 800559e:	d119      	bne.n	80055d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0210 	mvn.w	r2, #16
 80055a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e029      	b.n	8005628 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d4:	f7fe f912 	bl	80037fc <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d302      	bcc.n	80055ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d116      	bne.n	8005618 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	f043 0220 	orr.w	r2, r3, #32
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e007      	b.n	8005628 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d1b5      	bne.n	8005592 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005646:	d11b      	bne.n	8005680 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005650:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	f043 0204 	orr.w	r2, r3, #4
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e272      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8087 	beq.w	80057ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056ac:	4b92      	ldr	r3, [pc, #584]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d00c      	beq.n	80056d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056b8:	4b8f      	ldr	r3, [pc, #572]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f003 030c 	and.w	r3, r3, #12
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d112      	bne.n	80056ea <HAL_RCC_OscConfig+0x5e>
 80056c4:	4b8c      	ldr	r3, [pc, #560]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d0:	d10b      	bne.n	80056ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d2:	4b89      	ldr	r3, [pc, #548]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d06c      	beq.n	80057b8 <HAL_RCC_OscConfig+0x12c>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d168      	bne.n	80057b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e24c      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f2:	d106      	bne.n	8005702 <HAL_RCC_OscConfig+0x76>
 80056f4:	4b80      	ldr	r3, [pc, #512]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a7f      	ldr	r2, [pc, #508]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 80056fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	e02e      	b.n	8005760 <HAL_RCC_OscConfig+0xd4>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10c      	bne.n	8005724 <HAL_RCC_OscConfig+0x98>
 800570a:	4b7b      	ldr	r3, [pc, #492]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a7a      	ldr	r2, [pc, #488]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 8005710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	4b78      	ldr	r3, [pc, #480]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a77      	ldr	r2, [pc, #476]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 800571c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e01d      	b.n	8005760 <HAL_RCC_OscConfig+0xd4>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800572c:	d10c      	bne.n	8005748 <HAL_RCC_OscConfig+0xbc>
 800572e:	4b72      	ldr	r3, [pc, #456]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a71      	ldr	r2, [pc, #452]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 8005734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	4b6f      	ldr	r3, [pc, #444]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a6e      	ldr	r2, [pc, #440]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e00b      	b.n	8005760 <HAL_RCC_OscConfig+0xd4>
 8005748:	4b6b      	ldr	r3, [pc, #428]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a6a      	ldr	r2, [pc, #424]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 800574e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	4b68      	ldr	r3, [pc, #416]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a67      	ldr	r2, [pc, #412]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 800575a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800575e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d013      	beq.n	8005790 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7fe f848 	bl	80037fc <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005770:	f7fe f844 	bl	80037fc <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b64      	cmp	r3, #100	; 0x64
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e200      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005782:	4b5d      	ldr	r3, [pc, #372]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0xe4>
 800578e:	e014      	b.n	80057ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fe f834 	bl	80037fc <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005798:	f7fe f830 	bl	80037fc <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e1ec      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057aa:	4b53      	ldr	r3, [pc, #332]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0x10c>
 80057b6:	e000      	b.n	80057ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d063      	beq.n	800588e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057c6:	4b4c      	ldr	r3, [pc, #304]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057d2:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f003 030c 	and.w	r3, r3, #12
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d11c      	bne.n	8005818 <HAL_RCC_OscConfig+0x18c>
 80057de:	4b46      	ldr	r3, [pc, #280]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d116      	bne.n	8005818 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ea:	4b43      	ldr	r3, [pc, #268]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_RCC_OscConfig+0x176>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e1c0      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005802:	4b3d      	ldr	r3, [pc, #244]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4939      	ldr	r1, [pc, #228]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 8005812:	4313      	orrs	r3, r2
 8005814:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005816:	e03a      	b.n	800588e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d020      	beq.n	8005862 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005820:	4b36      	ldr	r3, [pc, #216]	; (80058fc <HAL_RCC_OscConfig+0x270>)
 8005822:	2201      	movs	r2, #1
 8005824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005826:	f7fd ffe9 	bl	80037fc <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800582e:	f7fd ffe5 	bl	80037fc <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e1a1      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005840:	4b2d      	ldr	r3, [pc, #180]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800584c:	4b2a      	ldr	r3, [pc, #168]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	4927      	ldr	r1, [pc, #156]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 800585c:	4313      	orrs	r3, r2
 800585e:	600b      	str	r3, [r1, #0]
 8005860:	e015      	b.n	800588e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005862:	4b26      	ldr	r3, [pc, #152]	; (80058fc <HAL_RCC_OscConfig+0x270>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005868:	f7fd ffc8 	bl	80037fc <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005870:	f7fd ffc4 	bl	80037fc <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e180      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005882:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d03a      	beq.n	8005910 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d019      	beq.n	80058d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058a2:	4b17      	ldr	r3, [pc, #92]	; (8005900 <HAL_RCC_OscConfig+0x274>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a8:	f7fd ffa8 	bl	80037fc <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b0:	f7fd ffa4 	bl	80037fc <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e160      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058c2:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <HAL_RCC_OscConfig+0x26c>)
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0f0      	beq.n	80058b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058ce:	2001      	movs	r0, #1
 80058d0:	f000 fac4 	bl	8005e5c <RCC_Delay>
 80058d4:	e01c      	b.n	8005910 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d6:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <HAL_RCC_OscConfig+0x274>)
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058dc:	f7fd ff8e 	bl	80037fc <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e2:	e00f      	b.n	8005904 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058e4:	f7fd ff8a 	bl	80037fc <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d908      	bls.n	8005904 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e146      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
 80058f6:	bf00      	nop
 80058f8:	40021000 	.word	0x40021000
 80058fc:	42420000 	.word	0x42420000
 8005900:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005904:	4b92      	ldr	r3, [pc, #584]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e9      	bne.n	80058e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80a6 	beq.w	8005a6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591e:	2300      	movs	r3, #0
 8005920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005922:	4b8b      	ldr	r3, [pc, #556]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10d      	bne.n	800594a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800592e:	4b88      	ldr	r3, [pc, #544]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	4a87      	ldr	r2, [pc, #540]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005938:	61d3      	str	r3, [r2, #28]
 800593a:	4b85      	ldr	r3, [pc, #532]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005942:	60bb      	str	r3, [r7, #8]
 8005944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594a:	4b82      	ldr	r3, [pc, #520]	; (8005b54 <HAL_RCC_OscConfig+0x4c8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d118      	bne.n	8005988 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005956:	4b7f      	ldr	r3, [pc, #508]	; (8005b54 <HAL_RCC_OscConfig+0x4c8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a7e      	ldr	r2, [pc, #504]	; (8005b54 <HAL_RCC_OscConfig+0x4c8>)
 800595c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005962:	f7fd ff4b 	bl	80037fc <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596a:	f7fd ff47 	bl	80037fc <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b64      	cmp	r3, #100	; 0x64
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e103      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597c:	4b75      	ldr	r3, [pc, #468]	; (8005b54 <HAL_RCC_OscConfig+0x4c8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d106      	bne.n	800599e <HAL_RCC_OscConfig+0x312>
 8005990:	4b6f      	ldr	r3, [pc, #444]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	4a6e      	ldr	r2, [pc, #440]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	6213      	str	r3, [r2, #32]
 800599c:	e02d      	b.n	80059fa <HAL_RCC_OscConfig+0x36e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10c      	bne.n	80059c0 <HAL_RCC_OscConfig+0x334>
 80059a6:	4b6a      	ldr	r3, [pc, #424]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	4a69      	ldr	r2, [pc, #420]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	6213      	str	r3, [r2, #32]
 80059b2:	4b67      	ldr	r3, [pc, #412]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	4a66      	ldr	r2, [pc, #408]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 80059b8:	f023 0304 	bic.w	r3, r3, #4
 80059bc:	6213      	str	r3, [r2, #32]
 80059be:	e01c      	b.n	80059fa <HAL_RCC_OscConfig+0x36e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	2b05      	cmp	r3, #5
 80059c6:	d10c      	bne.n	80059e2 <HAL_RCC_OscConfig+0x356>
 80059c8:	4b61      	ldr	r3, [pc, #388]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	4a60      	ldr	r2, [pc, #384]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 80059ce:	f043 0304 	orr.w	r3, r3, #4
 80059d2:	6213      	str	r3, [r2, #32]
 80059d4:	4b5e      	ldr	r3, [pc, #376]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	4a5d      	ldr	r2, [pc, #372]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	6213      	str	r3, [r2, #32]
 80059e0:	e00b      	b.n	80059fa <HAL_RCC_OscConfig+0x36e>
 80059e2:	4b5b      	ldr	r3, [pc, #364]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	4a5a      	ldr	r2, [pc, #360]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	6213      	str	r3, [r2, #32]
 80059ee:	4b58      	ldr	r3, [pc, #352]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	4a57      	ldr	r2, [pc, #348]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 80059f4:	f023 0304 	bic.w	r3, r3, #4
 80059f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d015      	beq.n	8005a2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a02:	f7fd fefb 	bl	80037fc <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a08:	e00a      	b.n	8005a20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0a:	f7fd fef7 	bl	80037fc <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e0b1      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a20:	4b4b      	ldr	r3, [pc, #300]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0ee      	beq.n	8005a0a <HAL_RCC_OscConfig+0x37e>
 8005a2c:	e014      	b.n	8005a58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a2e:	f7fd fee5 	bl	80037fc <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a34:	e00a      	b.n	8005a4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a36:	f7fd fee1 	bl	80037fc <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e09b      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a4c:	4b40      	ldr	r3, [pc, #256]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1ee      	bne.n	8005a36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d105      	bne.n	8005a6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a5e:	4b3c      	ldr	r3, [pc, #240]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	4a3b      	ldr	r2, [pc, #236]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8087 	beq.w	8005b82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a74:	4b36      	ldr	r3, [pc, #216]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 030c 	and.w	r3, r3, #12
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d061      	beq.n	8005b44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d146      	bne.n	8005b16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a88:	4b33      	ldr	r3, [pc, #204]	; (8005b58 <HAL_RCC_OscConfig+0x4cc>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8e:	f7fd feb5 	bl	80037fc <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a96:	f7fd feb1 	bl	80037fc <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e06d      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005aa8:	4b29      	ldr	r3, [pc, #164]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f0      	bne.n	8005a96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005abc:	d108      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005abe:	4b24      	ldr	r3, [pc, #144]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	4921      	ldr	r1, [pc, #132]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ad0:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a19      	ldr	r1, [r3, #32]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	491b      	ldr	r1, [pc, #108]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ae8:	4b1b      	ldr	r3, [pc, #108]	; (8005b58 <HAL_RCC_OscConfig+0x4cc>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aee:	f7fd fe85 	bl	80037fc <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af6:	f7fd fe81 	bl	80037fc <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e03d      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b08:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f0      	beq.n	8005af6 <HAL_RCC_OscConfig+0x46a>
 8005b14:	e035      	b.n	8005b82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <HAL_RCC_OscConfig+0x4cc>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1c:	f7fd fe6e 	bl	80037fc <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b24:	f7fd fe6a 	bl	80037fc <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e026      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b36:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <HAL_RCC_OscConfig+0x4c4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f0      	bne.n	8005b24 <HAL_RCC_OscConfig+0x498>
 8005b42:	e01e      	b.n	8005b82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d107      	bne.n	8005b5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e019      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
 8005b50:	40021000 	.word	0x40021000
 8005b54:	40007000 	.word	0x40007000
 8005b58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <HAL_RCC_OscConfig+0x500>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d106      	bne.n	8005b7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d001      	beq.n	8005b82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40021000 	.word	0x40021000

08005b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0d0      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ba4:	4b6a      	ldr	r3, [pc, #424]	; (8005d50 <HAL_RCC_ClockConfig+0x1c0>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d910      	bls.n	8005bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb2:	4b67      	ldr	r3, [pc, #412]	; (8005d50 <HAL_RCC_ClockConfig+0x1c0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f023 0207 	bic.w	r2, r3, #7
 8005bba:	4965      	ldr	r1, [pc, #404]	; (8005d50 <HAL_RCC_ClockConfig+0x1c0>)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc2:	4b63      	ldr	r3, [pc, #396]	; (8005d50 <HAL_RCC_ClockConfig+0x1c0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0b8      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d020      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bec:	4b59      	ldr	r3, [pc, #356]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4a58      	ldr	r2, [pc, #352]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c04:	4b53      	ldr	r3, [pc, #332]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	4a52      	ldr	r2, [pc, #328]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005c0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c10:	4b50      	ldr	r3, [pc, #320]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	494d      	ldr	r1, [pc, #308]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d040      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d107      	bne.n	8005c46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c36:	4b47      	ldr	r3, [pc, #284]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d115      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e07f      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d107      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4e:	4b41      	ldr	r3, [pc, #260]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d109      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e073      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5e:	4b3d      	ldr	r3, [pc, #244]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e06b      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c6e:	4b39      	ldr	r3, [pc, #228]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f023 0203 	bic.w	r2, r3, #3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	4936      	ldr	r1, [pc, #216]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c80:	f7fd fdbc 	bl	80037fc <HAL_GetTick>
 8005c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c86:	e00a      	b.n	8005c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c88:	f7fd fdb8 	bl	80037fc <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e053      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9e:	4b2d      	ldr	r3, [pc, #180]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f003 020c 	and.w	r2, r3, #12
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d1eb      	bne.n	8005c88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb0:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <HAL_RCC_ClockConfig+0x1c0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d210      	bcs.n	8005ce0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cbe:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <HAL_RCC_ClockConfig+0x1c0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f023 0207 	bic.w	r2, r3, #7
 8005cc6:	4922      	ldr	r1, [pc, #136]	; (8005d50 <HAL_RCC_ClockConfig+0x1c0>)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cce:	4b20      	ldr	r3, [pc, #128]	; (8005d50 <HAL_RCC_ClockConfig+0x1c0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d001      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e032      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cec:	4b19      	ldr	r3, [pc, #100]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	4916      	ldr	r1, [pc, #88]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d0a:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	490e      	ldr	r1, [pc, #56]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d1e:	f000 f821 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8005d22:	4602      	mov	r2, r0
 8005d24:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	091b      	lsrs	r3, r3, #4
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	490a      	ldr	r1, [pc, #40]	; (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d30:	5ccb      	ldrb	r3, [r1, r3]
 8005d32:	fa22 f303 	lsr.w	r3, r2, r3
 8005d36:	4a09      	ldr	r2, [pc, #36]	; (8005d5c <HAL_RCC_ClockConfig+0x1cc>)
 8005d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <HAL_RCC_ClockConfig+0x1d0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fd fd1a 	bl	8003778 <HAL_InitTick>

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	40022000 	.word	0x40022000
 8005d54:	40021000 	.word	0x40021000
 8005d58:	0800b2cc 	.word	0x0800b2cc
 8005d5c:	20000000 	.word	0x20000000
 8005d60:	20000038 	.word	0x20000038

08005d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d64:	b490      	push	{r4, r7}
 8005d66:	b08a      	sub	sp, #40	; 0x28
 8005d68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d6a:	4b29      	ldr	r3, [pc, #164]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xac>)
 8005d6c:	1d3c      	adds	r4, r7, #4
 8005d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005d74:	f240 2301 	movw	r3, #513	; 0x201
 8005d78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	2300      	movs	r3, #0
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d8e:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f003 030c 	and.w	r3, r3, #12
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d002      	beq.n	8005da4 <HAL_RCC_GetSysClockFreq+0x40>
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d003      	beq.n	8005daa <HAL_RCC_GetSysClockFreq+0x46>
 8005da2:	e02b      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005da4:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005da6:	623b      	str	r3, [r7, #32]
      break;
 8005da8:	e02b      	b.n	8005e02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	0c9b      	lsrs	r3, r3, #18
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	3328      	adds	r3, #40	; 0x28
 8005db4:	443b      	add	r3, r7
 8005db6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005dba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d012      	beq.n	8005dec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005dc6:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	0c5b      	lsrs	r3, r3, #17
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	3328      	adds	r3, #40	; 0x28
 8005dd2:	443b      	add	r3, r7
 8005dd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005dd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	4a0e      	ldr	r2, [pc, #56]	; (8005e18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005dde:	fb03 f202 	mul.w	r2, r3, r2
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dea:	e004      	b.n	8005df6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4a0b      	ldr	r2, [pc, #44]	; (8005e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005df0:	fb02 f303 	mul.w	r3, r2, r3
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	623b      	str	r3, [r7, #32]
      break;
 8005dfa:	e002      	b.n	8005e02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005dfc:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005dfe:	623b      	str	r3, [r7, #32]
      break;
 8005e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e02:	6a3b      	ldr	r3, [r7, #32]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3728      	adds	r7, #40	; 0x28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc90      	pop	{r4, r7}
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	0800accc 	.word	0x0800accc
 8005e14:	40021000 	.word	0x40021000
 8005e18:	007a1200 	.word	0x007a1200
 8005e1c:	003d0900 	.word	0x003d0900

08005e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e24:	4b02      	ldr	r3, [pc, #8]	; (8005e30 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e26:	681b      	ldr	r3, [r3, #0]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr
 8005e30:	20000000 	.word	0x20000000

08005e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e38:	f7ff fff2 	bl	8005e20 <HAL_RCC_GetHCLKFreq>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	0a1b      	lsrs	r3, r3, #8
 8005e44:	f003 0307 	and.w	r3, r3, #7
 8005e48:	4903      	ldr	r1, [pc, #12]	; (8005e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e4a:	5ccb      	ldrb	r3, [r1, r3]
 8005e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40021000 	.word	0x40021000
 8005e58:	0800b2dc 	.word	0x0800b2dc

08005e5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e64:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <RCC_Delay+0x34>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a0a      	ldr	r2, [pc, #40]	; (8005e94 <RCC_Delay+0x38>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	0a5b      	lsrs	r3, r3, #9
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e78:	bf00      	nop
  }
  while (Delay --);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	1e5a      	subs	r2, r3, #1
 8005e7e:	60fa      	str	r2, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1f9      	bne.n	8005e78 <RCC_Delay+0x1c>
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr
 8005e90:	20000000 	.word	0x20000000
 8005e94:	10624dd3 	.word	0x10624dd3

08005e98 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d004      	beq.n	8005eb4 <HAL_SRAM_Init+0x1c>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb2:	d101      	bne.n	8005eb8 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e038      	b.n	8005f2a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d106      	bne.n	8005ed2 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7fc fc27 	bl	8002720 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f001 fae3 	bl	80074a8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	461a      	mov	r2, r3
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	f001 fb45 	bl	800757c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6858      	ldr	r0, [r3, #4]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	f001 fb70 	bl	80075e4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	6892      	ldr	r2, [r2, #8]
 8005f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	6892      	ldr	r2, [r2, #8]
 8005f18:	f041 0101 	orr.w	r1, r1, #1
 8005f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e041      	b.n	8005fc8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d106      	bne.n	8005f5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7fc fb03 	bl	8002564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4610      	mov	r0, r2
 8005f72:	f000 fee9 	bl	8006d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d001      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e044      	b.n	8006072 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1d      	ldr	r2, [pc, #116]	; (800607c <HAL_TIM_Base_Start_IT+0xac>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d018      	beq.n	800603c <HAL_TIM_Base_Start_IT+0x6c>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_TIM_Base_Start_IT+0xb0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d013      	beq.n	800603c <HAL_TIM_Base_Start_IT+0x6c>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601c:	d00e      	beq.n	800603c <HAL_TIM_Base_Start_IT+0x6c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a18      	ldr	r2, [pc, #96]	; (8006084 <HAL_TIM_Base_Start_IT+0xb4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d009      	beq.n	800603c <HAL_TIM_Base_Start_IT+0x6c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a16      	ldr	r2, [pc, #88]	; (8006088 <HAL_TIM_Base_Start_IT+0xb8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d004      	beq.n	800603c <HAL_TIM_Base_Start_IT+0x6c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a15      	ldr	r2, [pc, #84]	; (800608c <HAL_TIM_Base_Start_IT+0xbc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d111      	bne.n	8006060 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b06      	cmp	r3, #6
 800604c:	d010      	beq.n	8006070 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605e:	e007      	b.n	8006070 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr
 800607c:	40012c00 	.word	0x40012c00
 8006080:	40013400 	.word	0x40013400
 8006084:	40000400 	.word	0x40000400
 8006088:	40000800 	.word	0x40000800
 800608c:	40000c00 	.word	0x40000c00

08006090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e041      	b.n	8006126 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f839 	bl	800612e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f000 fe3a 	bl	8006d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr

08006140 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <HAL_TIM_PWM_Start_DMA+0x28>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	bf0c      	ite	eq
 8006160:	2301      	moveq	r3, #1
 8006162:	2300      	movne	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	e022      	b.n	80061ae <HAL_TIM_PWM_Start_DMA+0x6e>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b04      	cmp	r3, #4
 800616c:	d109      	bne.n	8006182 <HAL_TIM_PWM_Start_DMA+0x42>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	bf0c      	ite	eq
 800617a:	2301      	moveq	r3, #1
 800617c:	2300      	movne	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	e015      	b.n	80061ae <HAL_TIM_PWM_Start_DMA+0x6e>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b08      	cmp	r3, #8
 8006186:	d109      	bne.n	800619c <HAL_TIM_PWM_Start_DMA+0x5c>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	bf0c      	ite	eq
 8006194:	2301      	moveq	r3, #1
 8006196:	2300      	movne	r3, #0
 8006198:	b2db      	uxtb	r3, r3
 800619a:	e008      	b.n	80061ae <HAL_TIM_PWM_Start_DMA+0x6e>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	bf0c      	ite	eq
 80061a8:	2301      	moveq	r3, #1
 80061aa:	2300      	movne	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 80061b2:	2302      	movs	r3, #2
 80061b4:	e162      	b.n	800647c <HAL_TIM_PWM_Start_DMA+0x33c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <HAL_TIM_PWM_Start_DMA+0x90>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	bf0c      	ite	eq
 80061c8:	2301      	moveq	r3, #1
 80061ca:	2300      	movne	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	e022      	b.n	8006216 <HAL_TIM_PWM_Start_DMA+0xd6>
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d109      	bne.n	80061ea <HAL_TIM_PWM_Start_DMA+0xaa>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	bf0c      	ite	eq
 80061e2:	2301      	moveq	r3, #1
 80061e4:	2300      	movne	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	e015      	b.n	8006216 <HAL_TIM_PWM_Start_DMA+0xd6>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d109      	bne.n	8006204 <HAL_TIM_PWM_Start_DMA+0xc4>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	bf0c      	ite	eq
 80061fc:	2301      	moveq	r3, #1
 80061fe:	2300      	movne	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	e008      	b.n	8006216 <HAL_TIM_PWM_Start_DMA+0xd6>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	bf0c      	ite	eq
 8006210:	2301      	moveq	r3, #1
 8006212:	2300      	movne	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d024      	beq.n	8006264 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d104      	bne.n	800622a <HAL_TIM_PWM_Start_DMA+0xea>
 8006220:	887b      	ldrh	r3, [r7, #2]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e128      	b.n	800647c <HAL_TIM_PWM_Start_DMA+0x33c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <HAL_TIM_PWM_Start_DMA+0xfa>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006238:	e016      	b.n	8006268 <HAL_TIM_PWM_Start_DMA+0x128>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b04      	cmp	r3, #4
 800623e:	d104      	bne.n	800624a <HAL_TIM_PWM_Start_DMA+0x10a>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006248:	e00e      	b.n	8006268 <HAL_TIM_PWM_Start_DMA+0x128>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d104      	bne.n	800625a <HAL_TIM_PWM_Start_DMA+0x11a>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006258:	e006      	b.n	8006268 <HAL_TIM_PWM_Start_DMA+0x128>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2202      	movs	r2, #2
 800625e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006262:	e001      	b.n	8006268 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e109      	b.n	800647c <HAL_TIM_PWM_Start_DMA+0x33c>
  }

  switch (Channel)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b0c      	cmp	r3, #12
 800626c:	f200 80ae 	bhi.w	80063cc <HAL_TIM_PWM_Start_DMA+0x28c>
 8006270:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <HAL_TIM_PWM_Start_DMA+0x138>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	080062ad 	.word	0x080062ad
 800627c:	080063cd 	.word	0x080063cd
 8006280:	080063cd 	.word	0x080063cd
 8006284:	080063cd 	.word	0x080063cd
 8006288:	080062f5 	.word	0x080062f5
 800628c:	080063cd 	.word	0x080063cd
 8006290:	080063cd 	.word	0x080063cd
 8006294:	080063cd 	.word	0x080063cd
 8006298:	0800633d 	.word	0x0800633d
 800629c:	080063cd 	.word	0x080063cd
 80062a0:	080063cd 	.word	0x080063cd
 80062a4:	080063cd 	.word	0x080063cd
 80062a8:	08006385 	.word	0x08006385
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	4a74      	ldr	r2, [pc, #464]	; (8006484 <HAL_TIM_PWM_Start_DMA+0x344>)
 80062b2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	4a73      	ldr	r2, [pc, #460]	; (8006488 <HAL_TIM_PWM_Start_DMA+0x348>)
 80062ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	4a72      	ldr	r2, [pc, #456]	; (800648c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3334      	adds	r3, #52	; 0x34
 80062d0:	461a      	mov	r2, r3
 80062d2:	887b      	ldrh	r3, [r7, #2]
 80062d4:	f7fd fc44 	bl	8003b60 <HAL_DMA_Start_IT>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e0cc      	b.n	800647c <HAL_TIM_PWM_Start_DMA+0x33c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f0:	60da      	str	r2, [r3, #12]
      break;
 80062f2:	e06c      	b.n	80063ce <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	4a62      	ldr	r2, [pc, #392]	; (8006484 <HAL_TIM_PWM_Start_DMA+0x344>)
 80062fa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006300:	4a61      	ldr	r2, [pc, #388]	; (8006488 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006302:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	4a60      	ldr	r2, [pc, #384]	; (800648c <HAL_TIM_PWM_Start_DMA+0x34c>)
 800630a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3338      	adds	r3, #56	; 0x38
 8006318:	461a      	mov	r2, r3
 800631a:	887b      	ldrh	r3, [r7, #2]
 800631c:	f7fd fc20 	bl	8003b60 <HAL_DMA_Start_IT>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e0a8      	b.n	800647c <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006338:	60da      	str	r2, [r3, #12]
      break;
 800633a:	e048      	b.n	80063ce <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	4a50      	ldr	r2, [pc, #320]	; (8006484 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006342:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	4a4f      	ldr	r2, [pc, #316]	; (8006488 <HAL_TIM_PWM_Start_DMA+0x348>)
 800634a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	4a4e      	ldr	r2, [pc, #312]	; (800648c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006352:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	333c      	adds	r3, #60	; 0x3c
 8006360:	461a      	mov	r2, r3
 8006362:	887b      	ldrh	r3, [r7, #2]
 8006364:	f7fd fbfc 	bl	8003b60 <HAL_DMA_Start_IT>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e084      	b.n	800647c <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006380:	60da      	str	r2, [r3, #12]
      break;
 8006382:	e024      	b.n	80063ce <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	4a3e      	ldr	r2, [pc, #248]	; (8006484 <HAL_TIM_PWM_Start_DMA+0x344>)
 800638a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	4a3d      	ldr	r2, [pc, #244]	; (8006488 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006392:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	4a3c      	ldr	r2, [pc, #240]	; (800648c <HAL_TIM_PWM_Start_DMA+0x34c>)
 800639a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3340      	adds	r3, #64	; 0x40
 80063a8:	461a      	mov	r2, r3
 80063aa:	887b      	ldrh	r3, [r7, #2]
 80063ac:	f7fd fbd8 	bl	8003b60 <HAL_DMA_Start_IT>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e060      	b.n	800647c <HAL_TIM_PWM_Start_DMA+0x33c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063c8:	60da      	str	r2, [r3, #12]
      break;
 80063ca:	e000      	b.n	80063ce <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80063cc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2201      	movs	r2, #1
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 ff72 	bl	80072c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a2b      	ldr	r2, [pc, #172]	; (8006490 <HAL_TIM_PWM_Start_DMA+0x350>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_TIM_PWM_Start_DMA+0x2b0>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a2a      	ldr	r2, [pc, #168]	; (8006494 <HAL_TIM_PWM_Start_DMA+0x354>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d101      	bne.n	80063f4 <HAL_TIM_PWM_Start_DMA+0x2b4>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <HAL_TIM_PWM_Start_DMA+0x2b6>
 80063f4:	2300      	movs	r3, #0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d007      	beq.n	800640a <HAL_TIM_PWM_Start_DMA+0x2ca>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006408:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a20      	ldr	r2, [pc, #128]	; (8006490 <HAL_TIM_PWM_Start_DMA+0x350>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d018      	beq.n	8006446 <HAL_TIM_PWM_Start_DMA+0x306>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <HAL_TIM_PWM_Start_DMA+0x354>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_TIM_PWM_Start_DMA+0x306>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006426:	d00e      	beq.n	8006446 <HAL_TIM_PWM_Start_DMA+0x306>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1a      	ldr	r2, [pc, #104]	; (8006498 <HAL_TIM_PWM_Start_DMA+0x358>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_TIM_PWM_Start_DMA+0x306>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a19      	ldr	r2, [pc, #100]	; (800649c <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_TIM_PWM_Start_DMA+0x306>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a17      	ldr	r2, [pc, #92]	; (80064a0 <HAL_TIM_PWM_Start_DMA+0x360>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d111      	bne.n	800646a <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b06      	cmp	r3, #6
 8006456:	d010      	beq.n	800647a <HAL_TIM_PWM_Start_DMA+0x33a>
    {
      __HAL_TIM_ENABLE(htim);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006468:	e007      	b.n	800647a <HAL_TIM_PWM_Start_DMA+0x33a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0201 	orr.w	r2, r2, #1
 8006478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	08006c39 	.word	0x08006c39
 8006488:	08006ce1 	.word	0x08006ce1
 800648c:	08006ba7 	.word	0x08006ba7
 8006490:	40012c00 	.word	0x40012c00
 8006494:	40013400 	.word	0x40013400
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40000c00 	.word	0x40000c00

080064a4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b0c      	cmp	r3, #12
 80064b2:	d855      	bhi.n	8006560 <HAL_TIM_PWM_Stop_DMA+0xbc>
 80064b4:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <HAL_TIM_PWM_Stop_DMA+0x18>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064f1 	.word	0x080064f1
 80064c0:	08006561 	.word	0x08006561
 80064c4:	08006561 	.word	0x08006561
 80064c8:	08006561 	.word	0x08006561
 80064cc:	0800650d 	.word	0x0800650d
 80064d0:	08006561 	.word	0x08006561
 80064d4:	08006561 	.word	0x08006561
 80064d8:	08006561 	.word	0x08006561
 80064dc:	08006529 	.word	0x08006529
 80064e0:	08006561 	.word	0x08006561
 80064e4:	08006561 	.word	0x08006561
 80064e8:	08006561 	.word	0x08006561
 80064ec:	08006545 	.word	0x08006545
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	4618      	mov	r0, r3
 8006506:	f7fd fb8b 	bl	8003c20 <HAL_DMA_Abort_IT>
      break;
 800650a:	e02a      	b.n	8006562 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800651a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	4618      	mov	r0, r3
 8006522:	f7fd fb7d 	bl	8003c20 <HAL_DMA_Abort_IT>
      break;
 8006526:	e01c      	b.n	8006562 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006536:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	4618      	mov	r0, r3
 800653e:	f7fd fb6f 	bl	8003c20 <HAL_DMA_Abort_IT>
      break;
 8006542:	e00e      	b.n	8006562 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006552:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	4618      	mov	r0, r3
 800655a:	f7fd fb61 	bl	8003c20 <HAL_DMA_Abort_IT>
      break;
 800655e:	e000      	b.n	8006562 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8006560:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2200      	movs	r2, #0
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fea8 	bl	80072c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a2e      	ldr	r2, [pc, #184]	; (8006630 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_TIM_PWM_Stop_DMA+0xe0>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a2d      	ldr	r2, [pc, #180]	; (8006634 <HAL_TIM_PWM_Stop_DMA+0x190>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d101      	bne.n	8006588 <HAL_TIM_PWM_Stop_DMA+0xe4>
 8006584:	2301      	movs	r3, #1
 8006586:	e000      	b.n	800658a <HAL_TIM_PWM_Stop_DMA+0xe6>
 8006588:	2300      	movs	r3, #0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d017      	beq.n	80065be <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6a1a      	ldr	r2, [r3, #32]
 8006594:	f241 1311 	movw	r3, #4369	; 0x1111
 8006598:	4013      	ands	r3, r2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10f      	bne.n	80065be <HAL_TIM_PWM_Stop_DMA+0x11a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6a1a      	ldr	r2, [r3, #32]
 80065a4:	f240 4344 	movw	r3, #1092	; 0x444
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d107      	bne.n	80065be <HAL_TIM_PWM_Stop_DMA+0x11a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6a1a      	ldr	r2, [r3, #32]
 80065c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80065c8:	4013      	ands	r3, r2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10f      	bne.n	80065ee <HAL_TIM_PWM_Stop_DMA+0x14a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6a1a      	ldr	r2, [r3, #32]
 80065d4:	f240 4344 	movw	r3, #1092	; 0x444
 80065d8:	4013      	ands	r3, r2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d107      	bne.n	80065ee <HAL_TIM_PWM_Stop_DMA+0x14a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <HAL_TIM_PWM_Stop_DMA+0x15a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065fc:	e013      	b.n	8006626 <HAL_TIM_PWM_Stop_DMA+0x182>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b04      	cmp	r3, #4
 8006602:	d104      	bne.n	800660e <HAL_TIM_PWM_Stop_DMA+0x16a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800660c:	e00b      	b.n	8006626 <HAL_TIM_PWM_Stop_DMA+0x182>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d104      	bne.n	800661e <HAL_TIM_PWM_Stop_DMA+0x17a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800661c:	e003      	b.n	8006626 <HAL_TIM_PWM_Stop_DMA+0x182>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40013400 	.word	0x40013400

08006638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b02      	cmp	r3, #2
 800664c:	d122      	bne.n	8006694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b02      	cmp	r3, #2
 800665a:	d11b      	bne.n	8006694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0202 	mvn.w	r2, #2
 8006664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fa6f 	bl	8006b5e <HAL_TIM_IC_CaptureCallback>
 8006680:	e005      	b.n	800668e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa62 	bl	8006b4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7fc f957 	bl	800293c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d122      	bne.n	80066e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d11b      	bne.n	80066e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0204 	mvn.w	r2, #4
 80066b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fa45 	bl	8006b5e <HAL_TIM_IC_CaptureCallback>
 80066d4:	e005      	b.n	80066e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa38 	bl	8006b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7fc f92d 	bl	800293c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d122      	bne.n	800673c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b08      	cmp	r3, #8
 8006702:	d11b      	bne.n	800673c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0208 	mvn.w	r2, #8
 800670c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2204      	movs	r2, #4
 8006712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fa1b 	bl	8006b5e <HAL_TIM_IC_CaptureCallback>
 8006728:	e005      	b.n	8006736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa0e 	bl	8006b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7fc f903 	bl	800293c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2b10      	cmp	r3, #16
 8006748:	d122      	bne.n	8006790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	2b10      	cmp	r3, #16
 8006756:	d11b      	bne.n	8006790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0210 	mvn.w	r2, #16
 8006760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2208      	movs	r2, #8
 8006766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f9f1 	bl	8006b5e <HAL_TIM_IC_CaptureCallback>
 800677c:	e005      	b.n	800678a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f9e4 	bl	8006b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fc f8d9 	bl	800293c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b01      	cmp	r3, #1
 800679c:	d10e      	bne.n	80067bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d107      	bne.n	80067bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0201 	mvn.w	r2, #1
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fa fdb2 	bl	8001320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c6:	2b80      	cmp	r3, #128	; 0x80
 80067c8:	d10e      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d4:	2b80      	cmp	r3, #128	; 0x80
 80067d6:	d107      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fe56 	bl	8007494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b40      	cmp	r3, #64	; 0x40
 80067f4:	d10e      	bne.n	8006814 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d107      	bne.n	8006814 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800680c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f9b7 	bl	8006b82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b20      	cmp	r3, #32
 8006820:	d10e      	bne.n	8006840 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b20      	cmp	r3, #32
 800682e:	d107      	bne.n	8006840 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0220 	mvn.w	r2, #32
 8006838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fe21 	bl	8007482 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685a:	2b01      	cmp	r3, #1
 800685c:	d101      	bne.n	8006862 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800685e:	2302      	movs	r3, #2
 8006860:	e0ac      	b.n	80069bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b0c      	cmp	r3, #12
 800686e:	f200 809f 	bhi.w	80069b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006872:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	080068ad 	.word	0x080068ad
 800687c:	080069b1 	.word	0x080069b1
 8006880:	080069b1 	.word	0x080069b1
 8006884:	080069b1 	.word	0x080069b1
 8006888:	080068ed 	.word	0x080068ed
 800688c:	080069b1 	.word	0x080069b1
 8006890:	080069b1 	.word	0x080069b1
 8006894:	080069b1 	.word	0x080069b1
 8006898:	0800692f 	.word	0x0800692f
 800689c:	080069b1 	.word	0x080069b1
 80068a0:	080069b1 	.word	0x080069b1
 80068a4:	080069b1 	.word	0x080069b1
 80068a8:	0800696f 	.word	0x0800696f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fac2 	bl	8006e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0208 	orr.w	r2, r2, #8
 80068c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0204 	bic.w	r2, r2, #4
 80068d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6999      	ldr	r1, [r3, #24]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	691a      	ldr	r2, [r3, #16]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	619a      	str	r2, [r3, #24]
      break;
 80068ea:	e062      	b.n	80069b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fb12 	bl	8006f1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6999      	ldr	r1, [r3, #24]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	021a      	lsls	r2, r3, #8
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	619a      	str	r2, [r3, #24]
      break;
 800692c:	e041      	b.n	80069b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68b9      	ldr	r1, [r7, #8]
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fb65 	bl	8007004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0208 	orr.w	r2, r2, #8
 8006948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69da      	ldr	r2, [r3, #28]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0204 	bic.w	r2, r2, #4
 8006958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69d9      	ldr	r1, [r3, #28]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	691a      	ldr	r2, [r3, #16]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	61da      	str	r2, [r3, #28]
      break;
 800696c:	e021      	b.n	80069b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68b9      	ldr	r1, [r7, #8]
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fbb9 	bl	80070ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69d9      	ldr	r1, [r3, #28]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	021a      	lsls	r2, r3, #8
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	61da      	str	r2, [r3, #28]
      break;
 80069ae:	e000      	b.n	80069b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80069b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_TIM_ConfigClockSource+0x18>
 80069d8:	2302      	movs	r3, #2
 80069da:	e0b3      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x180>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a14:	d03e      	beq.n	8006a94 <HAL_TIM_ConfigClockSource+0xd0>
 8006a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a1a:	f200 8087 	bhi.w	8006b2c <HAL_TIM_ConfigClockSource+0x168>
 8006a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a22:	f000 8085 	beq.w	8006b30 <HAL_TIM_ConfigClockSource+0x16c>
 8006a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2a:	d87f      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x168>
 8006a2c:	2b70      	cmp	r3, #112	; 0x70
 8006a2e:	d01a      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0xa2>
 8006a30:	2b70      	cmp	r3, #112	; 0x70
 8006a32:	d87b      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x168>
 8006a34:	2b60      	cmp	r3, #96	; 0x60
 8006a36:	d050      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x116>
 8006a38:	2b60      	cmp	r3, #96	; 0x60
 8006a3a:	d877      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x168>
 8006a3c:	2b50      	cmp	r3, #80	; 0x50
 8006a3e:	d03c      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0xf6>
 8006a40:	2b50      	cmp	r3, #80	; 0x50
 8006a42:	d873      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x168>
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d058      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x136>
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	d86f      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x168>
 8006a4c:	2b30      	cmp	r3, #48	; 0x30
 8006a4e:	d064      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x156>
 8006a50:	2b30      	cmp	r3, #48	; 0x30
 8006a52:	d86b      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x168>
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d060      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x156>
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d867      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x168>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d05c      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x156>
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d05a      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a64:	e062      	b.n	8006b2c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6899      	ldr	r1, [r3, #8]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f000 fc04 	bl	8007282 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	609a      	str	r2, [r3, #8]
      break;
 8006a92:	e04e      	b.n	8006b32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	6899      	ldr	r1, [r3, #8]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f000 fbed 	bl	8007282 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab6:	609a      	str	r2, [r3, #8]
      break;
 8006ab8:	e03b      	b.n	8006b32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f000 fb64 	bl	8007194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2150      	movs	r1, #80	; 0x50
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fbbb 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 8006ad8:	e02b      	b.n	8006b32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6859      	ldr	r1, [r3, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f000 fb82 	bl	80071f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2160      	movs	r1, #96	; 0x60
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fbab 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 8006af8:	e01b      	b.n	8006b32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6859      	ldr	r1, [r3, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	461a      	mov	r2, r3
 8006b08:	f000 fb44 	bl	8007194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2140      	movs	r1, #64	; 0x40
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fb9b 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 8006b18:	e00b      	b.n	8006b32 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4619      	mov	r1, r3
 8006b24:	4610      	mov	r0, r2
 8006b26:	f000 fb92 	bl	800724e <TIM_ITRx_SetConfig>
        break;
 8006b2a:	e002      	b.n	8006b32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b2c:	bf00      	nop
 8006b2e:	e000      	b.n	8006b32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr

08006b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr

08006ba6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d107      	bne.n	8006bce <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bcc:	e02a      	b.n	8006c24 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d107      	bne.n	8006be8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006be6:	e01d      	b.n	8006c24 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d107      	bne.n	8006c02 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2204      	movs	r2, #4
 8006bf6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c00:	e010      	b.n	8006c24 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d107      	bne.n	8006c1c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2208      	movs	r2, #8
 8006c10:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c1a:	e003      	b.n	8006c24 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7ff ffb5 	bl	8006b94 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	771a      	strb	r2, [r3, #28]
}
 8006c30:	bf00      	nop
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d10b      	bne.n	8006c68 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2201      	movs	r2, #1
 8006c54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d136      	bne.n	8006ccc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c66:	e031      	b.n	8006ccc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d10b      	bne.n	8006c8a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2202      	movs	r2, #2
 8006c76:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d125      	bne.n	8006ccc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c88:	e020      	b.n	8006ccc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d10b      	bne.n	8006cac <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2204      	movs	r2, #4
 8006c98:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d114      	bne.n	8006ccc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006caa:	e00f      	b.n	8006ccc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d10a      	bne.n	8006ccc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2208      	movs	r2, #8
 8006cba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d103      	bne.n	8006ccc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7fb fe35 	bl	800293c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	771a      	strb	r2, [r3, #28]
}
 8006cd8:	bf00      	nop
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d103      	bne.n	8006d00 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	771a      	strb	r2, [r3, #28]
 8006cfe:	e019      	b.n	8006d34 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d103      	bne.n	8006d12 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	771a      	strb	r2, [r3, #28]
 8006d10:	e010      	b.n	8006d34 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d103      	bne.n	8006d24 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2204      	movs	r2, #4
 8006d20:	771a      	strb	r2, [r3, #28]
 8006d22:	e007      	b.n	8006d34 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d102      	bne.n	8006d34 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2208      	movs	r2, #8
 8006d32:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f7ff ff1b 	bl	8006b70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	771a      	strb	r2, [r3, #28]
}
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a33      	ldr	r2, [pc, #204]	; (8006e28 <TIM_Base_SetConfig+0xe0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d013      	beq.n	8006d88 <TIM_Base_SetConfig+0x40>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a32      	ldr	r2, [pc, #200]	; (8006e2c <TIM_Base_SetConfig+0xe4>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_Base_SetConfig+0x40>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6e:	d00b      	beq.n	8006d88 <TIM_Base_SetConfig+0x40>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a2f      	ldr	r2, [pc, #188]	; (8006e30 <TIM_Base_SetConfig+0xe8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_Base_SetConfig+0x40>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a2e      	ldr	r2, [pc, #184]	; (8006e34 <TIM_Base_SetConfig+0xec>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_Base_SetConfig+0x40>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a2d      	ldr	r2, [pc, #180]	; (8006e38 <TIM_Base_SetConfig+0xf0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d108      	bne.n	8006d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a22      	ldr	r2, [pc, #136]	; (8006e28 <TIM_Base_SetConfig+0xe0>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d013      	beq.n	8006dca <TIM_Base_SetConfig+0x82>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a21      	ldr	r2, [pc, #132]	; (8006e2c <TIM_Base_SetConfig+0xe4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00f      	beq.n	8006dca <TIM_Base_SetConfig+0x82>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db0:	d00b      	beq.n	8006dca <TIM_Base_SetConfig+0x82>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a1e      	ldr	r2, [pc, #120]	; (8006e30 <TIM_Base_SetConfig+0xe8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d007      	beq.n	8006dca <TIM_Base_SetConfig+0x82>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a1d      	ldr	r2, [pc, #116]	; (8006e34 <TIM_Base_SetConfig+0xec>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d003      	beq.n	8006dca <TIM_Base_SetConfig+0x82>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a1c      	ldr	r2, [pc, #112]	; (8006e38 <TIM_Base_SetConfig+0xf0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d108      	bne.n	8006ddc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a09      	ldr	r2, [pc, #36]	; (8006e28 <TIM_Base_SetConfig+0xe0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d003      	beq.n	8006e10 <TIM_Base_SetConfig+0xc8>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a08      	ldr	r2, [pc, #32]	; (8006e2c <TIM_Base_SetConfig+0xe4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d103      	bne.n	8006e18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	615a      	str	r2, [r3, #20]
}
 8006e1e:	bf00      	nop
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40013400 	.word	0x40013400
 8006e30:	40000400 	.word	0x40000400
 8006e34:	40000800 	.word	0x40000800
 8006e38:	40000c00 	.word	0x40000c00

08006e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	f023 0201 	bic.w	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0303 	bic.w	r3, r3, #3
 8006e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f023 0302 	bic.w	r3, r3, #2
 8006e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a20      	ldr	r2, [pc, #128]	; (8006f14 <TIM_OC1_SetConfig+0xd8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d003      	beq.n	8006ea0 <TIM_OC1_SetConfig+0x64>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a1f      	ldr	r2, [pc, #124]	; (8006f18 <TIM_OC1_SetConfig+0xdc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d10c      	bne.n	8006eba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f023 0308 	bic.w	r3, r3, #8
 8006ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f023 0304 	bic.w	r3, r3, #4
 8006eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a15      	ldr	r2, [pc, #84]	; (8006f14 <TIM_OC1_SetConfig+0xd8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d003      	beq.n	8006eca <TIM_OC1_SetConfig+0x8e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a14      	ldr	r2, [pc, #80]	; (8006f18 <TIM_OC1_SetConfig+0xdc>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d111      	bne.n	8006eee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	621a      	str	r2, [r3, #32]
}
 8006f08:	bf00      	nop
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bc80      	pop	{r7}
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40013400 	.word	0x40013400

08006f1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f023 0210 	bic.w	r2, r3, #16
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f023 0320 	bic.w	r3, r3, #32
 8006f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a21      	ldr	r2, [pc, #132]	; (8006ffc <TIM_OC2_SetConfig+0xe0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d003      	beq.n	8006f84 <TIM_OC2_SetConfig+0x68>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a20      	ldr	r2, [pc, #128]	; (8007000 <TIM_OC2_SetConfig+0xe4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d10d      	bne.n	8006fa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a16      	ldr	r2, [pc, #88]	; (8006ffc <TIM_OC2_SetConfig+0xe0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_OC2_SetConfig+0x94>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a15      	ldr	r2, [pc, #84]	; (8007000 <TIM_OC2_SetConfig+0xe4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d113      	bne.n	8006fd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr
 8006ffc:	40012c00 	.word	0x40012c00
 8007000:	40013400 	.word	0x40013400

08007004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f023 0303 	bic.w	r3, r3, #3
 800703a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800704c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	021b      	lsls	r3, r3, #8
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	4313      	orrs	r3, r2
 8007058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a21      	ldr	r2, [pc, #132]	; (80070e4 <TIM_OC3_SetConfig+0xe0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d003      	beq.n	800706a <TIM_OC3_SetConfig+0x66>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a20      	ldr	r2, [pc, #128]	; (80070e8 <TIM_OC3_SetConfig+0xe4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d10d      	bne.n	8007086 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	021b      	lsls	r3, r3, #8
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	4313      	orrs	r3, r2
 800707c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a16      	ldr	r2, [pc, #88]	; (80070e4 <TIM_OC3_SetConfig+0xe0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d003      	beq.n	8007096 <TIM_OC3_SetConfig+0x92>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a15      	ldr	r2, [pc, #84]	; (80070e8 <TIM_OC3_SetConfig+0xe4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d113      	bne.n	80070be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800709c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	621a      	str	r2, [r3, #32]
}
 80070d8:	bf00      	nop
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	bc80      	pop	{r7}
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	40012c00 	.word	0x40012c00
 80070e8:	40013400 	.word	0x40013400

080070ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800711a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	031b      	lsls	r3, r3, #12
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a11      	ldr	r2, [pc, #68]	; (800718c <TIM_OC4_SetConfig+0xa0>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_OC4_SetConfig+0x68>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a10      	ldr	r2, [pc, #64]	; (8007190 <TIM_OC4_SetConfig+0xa4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d109      	bne.n	8007168 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800715a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	019b      	lsls	r3, r3, #6
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr
 800718c:	40012c00 	.word	0x40012c00
 8007190:	40013400 	.word	0x40013400

08007194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	f023 0201 	bic.w	r2, r3, #1
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f023 030a 	bic.w	r3, r3, #10
 80071d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	621a      	str	r2, [r3, #32]
}
 80071e6:	bf00      	nop
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr

080071f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	f023 0210 	bic.w	r2, r3, #16
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800721a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	031b      	lsls	r3, r3, #12
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	4313      	orrs	r3, r2
 8007224:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800722c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	621a      	str	r2, [r3, #32]
}
 8007244:	bf00      	nop
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr

0800724e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	f043 0307 	orr.w	r3, r3, #7
 8007270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	609a      	str	r2, [r3, #8]
}
 8007278:	bf00      	nop
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr

08007282 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007282:	b480      	push	{r7}
 8007284:	b087      	sub	sp, #28
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	607a      	str	r2, [r7, #4]
 800728e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800729c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	021a      	lsls	r2, r3, #8
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	431a      	orrs	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	609a      	str	r2, [r3, #8]
}
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bc80      	pop	{r7}
 80072be:	4770      	bx	lr

080072c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	2201      	movs	r2, #1
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1a      	ldr	r2, [r3, #32]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	43db      	mvns	r3, r3
 80072e2:	401a      	ands	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	fa01 f303 	lsl.w	r3, r1, r3
 80072f8:	431a      	orrs	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	bc80      	pop	{r7}
 8007306:	4770      	bx	lr

08007308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800731c:	2302      	movs	r3, #2
 800731e:	e050      	b.n	80073c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a1b      	ldr	r2, [pc, #108]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d018      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a19      	ldr	r2, [pc, #100]	; (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d013      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007376:	d00e      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a15      	ldr	r2, [pc, #84]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d009      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a14      	ldr	r2, [pc, #80]	; (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d004      	beq.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a12      	ldr	r2, [pc, #72]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d10c      	bne.n	80073b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800739c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr
 80073cc:	40012c00 	.word	0x40012c00
 80073d0:	40013400 	.word	0x40013400
 80073d4:	40000400 	.word	0x40000400
 80073d8:	40000800 	.word	0x40000800
 80073dc:	40000c00 	.word	0x40000c00

080073e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e03d      	b.n	8007478 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr

08007482 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	bc80      	pop	{r7}
 8007492:	4770      	bx	lr

08007494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr
	...

080074a8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	f023 0101 	bic.w	r1, r3, #1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2b08      	cmp	r3, #8
 80074d0:	d102      	bne.n	80074d8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80074d2:	2340      	movs	r3, #64	; 0x40
 80074d4:	617b      	str	r3, [r7, #20]
 80074d6:	e001      	b.n	80074dc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80074d8:	2300      	movs	r3, #0
 80074da:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80074e8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80074ee:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80074f4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80074fa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007500:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007506:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800750c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007512:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8007518:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800751e:	4313      	orrs	r3, r2
 8007520:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	4313      	orrs	r3, r2
 800752a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8007536:	4b10      	ldr	r3, [pc, #64]	; (8007578 <FSMC_NORSRAM_Init+0xd0>)
 8007538:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007540:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007548:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	43db      	mvns	r3, r3
 8007558:	ea02 0103 	and.w	r1, r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	4319      	orrs	r1, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	bc80      	pop	{r7}
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	0008fb7f 	.word	0x0008fb7f

0800757c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	431a      	orrs	r2, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	431a      	orrs	r2, r3
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	041b      	lsls	r3, r3, #16
 80075b0:	431a      	orrs	r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	051b      	lsls	r3, r3, #20
 80075ba:	431a      	orrs	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	3b02      	subs	r3, #2
 80075c2:	061b      	lsls	r3, r3, #24
 80075c4:	431a      	orrs	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	3201      	adds	r2, #1
 80075d0:	4319      	orrs	r1, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr

080075e4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075f8:	d11d      	bne.n	8007636 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007602:	4b13      	ldr	r3, [pc, #76]	; (8007650 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007604:	4013      	ands	r3, r2
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	6811      	ldr	r1, [r2, #0]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	6852      	ldr	r2, [r2, #4]
 800760e:	0112      	lsls	r2, r2, #4
 8007610:	4311      	orrs	r1, r2
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	6892      	ldr	r2, [r2, #8]
 8007616:	0212      	lsls	r2, r2, #8
 8007618:	4311      	orrs	r1, r2
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	6992      	ldr	r2, [r2, #24]
 800761e:	4311      	orrs	r1, r2
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	68d2      	ldr	r2, [r2, #12]
 8007624:	0412      	lsls	r2, r2, #16
 8007626:	430a      	orrs	r2, r1
 8007628:	ea43 0102 	orr.w	r1, r3, r2
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007634:	e005      	b.n	8007642 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800763e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	bc80      	pop	{r7}
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	cff00000 	.word	0xcff00000

08007654 <MPU6050_Initialize>:
/* Includes */
#include "MPU6050.h"
#include "stm32f1xx.h"

/////functions////
void MPU6050_Initialize(I2C_HandleTypeDef *handle_i2c) {
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af04      	add	r7, sp, #16
 800765a:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &check, 1,10000);
 800765c:	f242 7310 	movw	r3, #10000	; 0x2710
 8007660:	9302      	str	r3, [sp, #8]
 8007662:	2301      	movs	r3, #1
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	f107 030f 	add.w	r3, r7, #15
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	2301      	movs	r3, #1
 800766e:	2275      	movs	r2, #117	; 0x75
 8007670:	21d0      	movs	r1, #208	; 0xd0
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fd fa48 	bl	8004b08 <HAL_I2C_Mem_Read>

	if (check == 0x68) {
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	2b68      	cmp	r3, #104	; 0x68
 800767c:	d13f      	bne.n	80076fe <MPU6050_Initialize+0xaa>

		Data = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &Data, 1,10000);
 8007682:	f242 7310 	movw	r3, #10000	; 0x2710
 8007686:	9302      	str	r3, [sp, #8]
 8007688:	2301      	movs	r3, #1
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	f107 030e 	add.w	r3, r7, #14
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	2301      	movs	r3, #1
 8007694:	226b      	movs	r2, #107	; 0x6b
 8007696:	21d0      	movs	r1, #208	; 0xd0
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7fd f93b 	bl	8004914 <HAL_I2C_Mem_Write>

		Data = 0x07;
 800769e:	2307      	movs	r3, #7
 80076a0:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_SMPLRT_DIV, 1, &Data, 1,10000);
 80076a2:	f242 7310 	movw	r3, #10000	; 0x2710
 80076a6:	9302      	str	r3, [sp, #8]
 80076a8:	2301      	movs	r3, #1
 80076aa:	9301      	str	r3, [sp, #4]
 80076ac:	f107 030e 	add.w	r3, r7, #14
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	2301      	movs	r3, #1
 80076b4:	2219      	movs	r2, #25
 80076b6:	21d0      	movs	r1, #208	; 0xd0
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7fd f92b 	bl	8004914 <HAL_I2C_Mem_Write>

		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1, MPU6050_ACCEL_RANGE_2_G, 1,10000);
 80076be:	f242 7310 	movw	r3, #10000	; 0x2710
 80076c2:	9302      	str	r3, [sp, #8]
 80076c4:	2301      	movs	r3, #1
 80076c6:	9301      	str	r3, [sp, #4]
 80076c8:	2300      	movs	r3, #0
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	2301      	movs	r3, #1
 80076ce:	221c      	movs	r2, #28
 80076d0:	21d0      	movs	r1, #208	; 0xd0
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fd f91e 	bl	8004914 <HAL_I2C_Mem_Write>
		MPU6050_AFS_SEL=MPU6050_ACCEL_RANGE_2_G;
 80076d8:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <MPU6050_Initialize+0xb4>)
 80076da:	2200      	movs	r2, #0
 80076dc:	701a      	strb	r2, [r3, #0]

		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, MPU6050_GYRO_RANGE_250_DEG, 1, 10000);
 80076de:	f242 7310 	movw	r3, #10000	; 0x2710
 80076e2:	9302      	str	r3, [sp, #8]
 80076e4:	2301      	movs	r3, #1
 80076e6:	9301      	str	r3, [sp, #4]
 80076e8:	2300      	movs	r3, #0
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	2301      	movs	r3, #1
 80076ee:	221b      	movs	r2, #27
 80076f0:	21d0      	movs	r1, #208	; 0xd0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7fd f90e 	bl	8004914 <HAL_I2C_Mem_Write>
		MPU6050_FS_SEL=MPU6050_GYRO_RANGE_250_DEG;
 80076f8:	4b04      	ldr	r3, [pc, #16]	; (800770c <MPU6050_Initialize+0xb8>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]
	}

}
 80076fe:	bf00      	nop
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20000268 	.word	0x20000268
 800770c:	20000298 	.word	0x20000298

08007710 <MPU6050_SetScaleAccelRange>:
void MPU6050_Read_DeviceID(I2C_HandleTypeDef *handle_i2c){
    HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &MPU6050_Dev_ID, 1, 10000);
}

void MPU6050_SetScaleAccelRange(I2C_HandleTypeDef *handle_i2c,mpu6050_accel_range_t MPU6050_ACCEL_RANGE_X_G)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af04      	add	r7, sp, #16
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1,&MPU6050_ACCEL_RANGE_X_G, 1,10000);
 800771c:	f242 7310 	movw	r3, #10000	; 0x2710
 8007720:	9302      	str	r3, [sp, #8]
 8007722:	2301      	movs	r3, #1
 8007724:	9301      	str	r3, [sp, #4]
 8007726:	1cfb      	adds	r3, r7, #3
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	2301      	movs	r3, #1
 800772c:	221c      	movs	r2, #28
 800772e:	21d0      	movs	r1, #208	; 0xd0
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7fd f8ef 	bl	8004914 <HAL_I2C_Mem_Write>
	MPU6050_AFS_SEL=MPU6050_ACCEL_RANGE_X_G;
 8007736:	78fa      	ldrb	r2, [r7, #3]
 8007738:	4b02      	ldr	r3, [pc, #8]	; (8007744 <MPU6050_SetScaleAccelRange+0x34>)
 800773a:	701a      	strb	r2, [r3, #0]
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000268 	.word	0x20000268

08007748 <MPU6050_SetScaleGyroRange>:


void MPU6050_SetScaleGyroRange(I2C_HandleTypeDef *handle_i2c,MPU6050_gyro_range_t MPU6050_GYRO_RANGE_XXX_DEG)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af04      	add	r7, sp, #16
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1,&MPU6050_GYRO_RANGE_XXX_DEG, 1,10000);
 8007754:	f242 7310 	movw	r3, #10000	; 0x2710
 8007758:	9302      	str	r3, [sp, #8]
 800775a:	2301      	movs	r3, #1
 800775c:	9301      	str	r3, [sp, #4]
 800775e:	1cfb      	adds	r3, r7, #3
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	2301      	movs	r3, #1
 8007764:	221b      	movs	r2, #27
 8007766:	21d0      	movs	r1, #208	; 0xd0
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7fd f8d3 	bl	8004914 <HAL_I2C_Mem_Write>
	MPU6050_FS_SEL=MPU6050_GYRO_RANGE_XXX_DEG;
 800776e:	78fa      	ldrb	r2, [r7, #3]
 8007770:	4b02      	ldr	r3, [pc, #8]	; (800777c <MPU6050_SetScaleGyroRange+0x34>)
 8007772:	701a      	strb	r2, [r3, #0]
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000298 	.word	0x20000298

08007780 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *handle_i2c) {
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af04      	add	r7, sp, #16
 8007786:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, Rec_Data, 6,10000);
 8007788:	f242 7310 	movw	r3, #10000	; 0x2710
 800778c:	9302      	str	r3, [sp, #8]
 800778e:	2306      	movs	r3, #6
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	f107 0308 	add.w	r3, r7, #8
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	2301      	movs	r3, #1
 800779a:	223b      	movs	r2, #59	; 0x3b
 800779c:	21d0      	movs	r1, #208	; 0xd0
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7fd f9b2 	bl	8004b08 <HAL_I2C_Mem_Read>

	MPU6050_Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80077a4:	7a3b      	ldrb	r3, [r7, #8]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	b21a      	sxth	r2, r3
 80077aa:	7a7b      	ldrb	r3, [r7, #9]
 80077ac:	b21b      	sxth	r3, r3
 80077ae:	4313      	orrs	r3, r2
 80077b0:	b21a      	sxth	r2, r3
 80077b2:	4ba3      	ldr	r3, [pc, #652]	; (8007a40 <MPU6050_Read_Accel+0x2c0>)
 80077b4:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80077b6:	7abb      	ldrb	r3, [r7, #10]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	b21a      	sxth	r2, r3
 80077bc:	7afb      	ldrb	r3, [r7, #11]
 80077be:	b21b      	sxth	r3, r3
 80077c0:	4313      	orrs	r3, r2
 80077c2:	b21a      	sxth	r2, r3
 80077c4:	4b9f      	ldr	r3, [pc, #636]	; (8007a44 <MPU6050_Read_Accel+0x2c4>)
 80077c6:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80077c8:	7b3b      	ldrb	r3, [r7, #12]
 80077ca:	021b      	lsls	r3, r3, #8
 80077cc:	b21a      	sxth	r2, r3
 80077ce:	7b7b      	ldrb	r3, [r7, #13]
 80077d0:	b21b      	sxth	r3, r3
 80077d2:	4313      	orrs	r3, r2
 80077d4:	b21a      	sxth	r2, r3
 80077d6:	4b9c      	ldr	r3, [pc, #624]	; (8007a48 <MPU6050_Read_Accel+0x2c8>)
 80077d8:	801a      	strh	r2, [r3, #0]
	0 ±2g 16384 LSB/g
	1 ±4g 8192 LSB/g
	2 ±8g 4096 LSB/g
	3 ±16g 2048 LSB/g
	 */
	switch (MPU6050_AFS_SEL) {
 80077da:	4b9c      	ldr	r3, [pc, #624]	; (8007a4c <MPU6050_Read_Accel+0x2cc>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b18      	cmp	r3, #24
 80077e0:	f200 812a 	bhi.w	8007a38 <MPU6050_Read_Accel+0x2b8>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <MPU6050_Read_Accel+0x6c>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	08007851 	.word	0x08007851
 80077f0:	08007a39 	.word	0x08007a39
 80077f4:	08007a39 	.word	0x08007a39
 80077f8:	08007a39 	.word	0x08007a39
 80077fc:	08007a39 	.word	0x08007a39
 8007800:	08007a39 	.word	0x08007a39
 8007804:	08007a39 	.word	0x08007a39
 8007808:	08007a39 	.word	0x08007a39
 800780c:	080078cb 	.word	0x080078cb
 8007810:	08007a39 	.word	0x08007a39
 8007814:	08007a39 	.word	0x08007a39
 8007818:	08007a39 	.word	0x08007a39
 800781c:	08007a39 	.word	0x08007a39
 8007820:	08007a39 	.word	0x08007a39
 8007824:	08007a39 	.word	0x08007a39
 8007828:	08007a39 	.word	0x08007a39
 800782c:	08007945 	.word	0x08007945
 8007830:	08007a39 	.word	0x08007a39
 8007834:	08007a39 	.word	0x08007a39
 8007838:	08007a39 	.word	0x08007a39
 800783c:	08007a39 	.word	0x08007a39
 8007840:	08007a39 	.word	0x08007a39
 8007844:	08007a39 	.word	0x08007a39
 8007848:	08007a39 	.word	0x08007a39
 800784c:	080079bf 	.word	0x080079bf
	case 0x00://0
		MPU6050_Ax = MPU6050_Accel_X_RAW / 16384.0;
 8007850:	4b7b      	ldr	r3, [pc, #492]	; (8007a40 <MPU6050_Read_Accel+0x2c0>)
 8007852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007856:	4618      	mov	r0, r3
 8007858:	f7f8 fe40 	bl	80004dc <__aeabi_i2d>
 800785c:	f04f 0200 	mov.w	r2, #0
 8007860:	4b7b      	ldr	r3, [pc, #492]	; (8007a50 <MPU6050_Read_Accel+0x2d0>)
 8007862:	f7f8 ffcf 	bl	8000804 <__aeabi_ddiv>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4610      	mov	r0, r2
 800786c:	4619      	mov	r1, r3
 800786e:	f7f9 f997 	bl	8000ba0 <__aeabi_d2f>
 8007872:	4603      	mov	r3, r0
 8007874:	4a77      	ldr	r2, [pc, #476]	; (8007a54 <MPU6050_Read_Accel+0x2d4>)
 8007876:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 16384.0;
 8007878:	4b72      	ldr	r3, [pc, #456]	; (8007a44 <MPU6050_Read_Accel+0x2c4>)
 800787a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800787e:	4618      	mov	r0, r3
 8007880:	f7f8 fe2c 	bl	80004dc <__aeabi_i2d>
 8007884:	f04f 0200 	mov.w	r2, #0
 8007888:	4b71      	ldr	r3, [pc, #452]	; (8007a50 <MPU6050_Read_Accel+0x2d0>)
 800788a:	f7f8 ffbb 	bl	8000804 <__aeabi_ddiv>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4610      	mov	r0, r2
 8007894:	4619      	mov	r1, r3
 8007896:	f7f9 f983 	bl	8000ba0 <__aeabi_d2f>
 800789a:	4603      	mov	r3, r0
 800789c:	4a6e      	ldr	r2, [pc, #440]	; (8007a58 <MPU6050_Read_Accel+0x2d8>)
 800789e:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 16384.0;
 80078a0:	4b69      	ldr	r3, [pc, #420]	; (8007a48 <MPU6050_Read_Accel+0x2c8>)
 80078a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7f8 fe18 	bl	80004dc <__aeabi_i2d>
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	4b67      	ldr	r3, [pc, #412]	; (8007a50 <MPU6050_Read_Accel+0x2d0>)
 80078b2:	f7f8 ffa7 	bl	8000804 <__aeabi_ddiv>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4610      	mov	r0, r2
 80078bc:	4619      	mov	r1, r3
 80078be:	f7f9 f96f 	bl	8000ba0 <__aeabi_d2f>
 80078c2:	4603      	mov	r3, r0
 80078c4:	4a65      	ldr	r2, [pc, #404]	; (8007a5c <MPU6050_Read_Accel+0x2dc>)
 80078c6:	6013      	str	r3, [r2, #0]

		break;
 80078c8:	e0b6      	b.n	8007a38 <MPU6050_Read_Accel+0x2b8>
	case 0x08://1
		MPU6050_Ax = MPU6050_Accel_X_RAW / 8192.0;
 80078ca:	4b5d      	ldr	r3, [pc, #372]	; (8007a40 <MPU6050_Read_Accel+0x2c0>)
 80078cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7f8 fe03 	bl	80004dc <__aeabi_i2d>
 80078d6:	f04f 0200 	mov.w	r2, #0
 80078da:	4b61      	ldr	r3, [pc, #388]	; (8007a60 <MPU6050_Read_Accel+0x2e0>)
 80078dc:	f7f8 ff92 	bl	8000804 <__aeabi_ddiv>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4610      	mov	r0, r2
 80078e6:	4619      	mov	r1, r3
 80078e8:	f7f9 f95a 	bl	8000ba0 <__aeabi_d2f>
 80078ec:	4603      	mov	r3, r0
 80078ee:	4a59      	ldr	r2, [pc, #356]	; (8007a54 <MPU6050_Read_Accel+0x2d4>)
 80078f0:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 8192.0;
 80078f2:	4b54      	ldr	r3, [pc, #336]	; (8007a44 <MPU6050_Read_Accel+0x2c4>)
 80078f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7f8 fdef 	bl	80004dc <__aeabi_i2d>
 80078fe:	f04f 0200 	mov.w	r2, #0
 8007902:	4b57      	ldr	r3, [pc, #348]	; (8007a60 <MPU6050_Read_Accel+0x2e0>)
 8007904:	f7f8 ff7e 	bl	8000804 <__aeabi_ddiv>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4610      	mov	r0, r2
 800790e:	4619      	mov	r1, r3
 8007910:	f7f9 f946 	bl	8000ba0 <__aeabi_d2f>
 8007914:	4603      	mov	r3, r0
 8007916:	4a50      	ldr	r2, [pc, #320]	; (8007a58 <MPU6050_Read_Accel+0x2d8>)
 8007918:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 8192.0;
 800791a:	4b4b      	ldr	r3, [pc, #300]	; (8007a48 <MPU6050_Read_Accel+0x2c8>)
 800791c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007920:	4618      	mov	r0, r3
 8007922:	f7f8 fddb 	bl	80004dc <__aeabi_i2d>
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	4b4d      	ldr	r3, [pc, #308]	; (8007a60 <MPU6050_Read_Accel+0x2e0>)
 800792c:	f7f8 ff6a 	bl	8000804 <__aeabi_ddiv>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4610      	mov	r0, r2
 8007936:	4619      	mov	r1, r3
 8007938:	f7f9 f932 	bl	8000ba0 <__aeabi_d2f>
 800793c:	4603      	mov	r3, r0
 800793e:	4a47      	ldr	r2, [pc, #284]	; (8007a5c <MPU6050_Read_Accel+0x2dc>)
 8007940:	6013      	str	r3, [r2, #0]

		break;
 8007942:	e079      	b.n	8007a38 <MPU6050_Read_Accel+0x2b8>
	case 0x10://2
		MPU6050_Ax = MPU6050_Accel_X_RAW / 4096.0;
 8007944:	4b3e      	ldr	r3, [pc, #248]	; (8007a40 <MPU6050_Read_Accel+0x2c0>)
 8007946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800794a:	4618      	mov	r0, r3
 800794c:	f7f8 fdc6 	bl	80004dc <__aeabi_i2d>
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	4b43      	ldr	r3, [pc, #268]	; (8007a64 <MPU6050_Read_Accel+0x2e4>)
 8007956:	f7f8 ff55 	bl	8000804 <__aeabi_ddiv>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	4610      	mov	r0, r2
 8007960:	4619      	mov	r1, r3
 8007962:	f7f9 f91d 	bl	8000ba0 <__aeabi_d2f>
 8007966:	4603      	mov	r3, r0
 8007968:	4a3a      	ldr	r2, [pc, #232]	; (8007a54 <MPU6050_Read_Accel+0x2d4>)
 800796a:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 4096.0;
 800796c:	4b35      	ldr	r3, [pc, #212]	; (8007a44 <MPU6050_Read_Accel+0x2c4>)
 800796e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007972:	4618      	mov	r0, r3
 8007974:	f7f8 fdb2 	bl	80004dc <__aeabi_i2d>
 8007978:	f04f 0200 	mov.w	r2, #0
 800797c:	4b39      	ldr	r3, [pc, #228]	; (8007a64 <MPU6050_Read_Accel+0x2e4>)
 800797e:	f7f8 ff41 	bl	8000804 <__aeabi_ddiv>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4610      	mov	r0, r2
 8007988:	4619      	mov	r1, r3
 800798a:	f7f9 f909 	bl	8000ba0 <__aeabi_d2f>
 800798e:	4603      	mov	r3, r0
 8007990:	4a31      	ldr	r2, [pc, #196]	; (8007a58 <MPU6050_Read_Accel+0x2d8>)
 8007992:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 4096.0;
 8007994:	4b2c      	ldr	r3, [pc, #176]	; (8007a48 <MPU6050_Read_Accel+0x2c8>)
 8007996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800799a:	4618      	mov	r0, r3
 800799c:	f7f8 fd9e 	bl	80004dc <__aeabi_i2d>
 80079a0:	f04f 0200 	mov.w	r2, #0
 80079a4:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <MPU6050_Read_Accel+0x2e4>)
 80079a6:	f7f8 ff2d 	bl	8000804 <__aeabi_ddiv>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4610      	mov	r0, r2
 80079b0:	4619      	mov	r1, r3
 80079b2:	f7f9 f8f5 	bl	8000ba0 <__aeabi_d2f>
 80079b6:	4603      	mov	r3, r0
 80079b8:	4a28      	ldr	r2, [pc, #160]	; (8007a5c <MPU6050_Read_Accel+0x2dc>)
 80079ba:	6013      	str	r3, [r2, #0]

		break;
 80079bc:	e03c      	b.n	8007a38 <MPU6050_Read_Accel+0x2b8>
	case 0x18://3
		MPU6050_Ax = MPU6050_Accel_X_RAW / 2048.0;
 80079be:	4b20      	ldr	r3, [pc, #128]	; (8007a40 <MPU6050_Read_Accel+0x2c0>)
 80079c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7f8 fd89 	bl	80004dc <__aeabi_i2d>
 80079ca:	f04f 0200 	mov.w	r2, #0
 80079ce:	4b26      	ldr	r3, [pc, #152]	; (8007a68 <MPU6050_Read_Accel+0x2e8>)
 80079d0:	f7f8 ff18 	bl	8000804 <__aeabi_ddiv>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4610      	mov	r0, r2
 80079da:	4619      	mov	r1, r3
 80079dc:	f7f9 f8e0 	bl	8000ba0 <__aeabi_d2f>
 80079e0:	4603      	mov	r3, r0
 80079e2:	4a1c      	ldr	r2, [pc, #112]	; (8007a54 <MPU6050_Read_Accel+0x2d4>)
 80079e4:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 2048.0;
 80079e6:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <MPU6050_Read_Accel+0x2c4>)
 80079e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7f8 fd75 	bl	80004dc <__aeabi_i2d>
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	4b1c      	ldr	r3, [pc, #112]	; (8007a68 <MPU6050_Read_Accel+0x2e8>)
 80079f8:	f7f8 ff04 	bl	8000804 <__aeabi_ddiv>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4610      	mov	r0, r2
 8007a02:	4619      	mov	r1, r3
 8007a04:	f7f9 f8cc 	bl	8000ba0 <__aeabi_d2f>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	4a13      	ldr	r2, [pc, #76]	; (8007a58 <MPU6050_Read_Accel+0x2d8>)
 8007a0c:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 2048.0;
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <MPU6050_Read_Accel+0x2c8>)
 8007a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7f8 fd61 	bl	80004dc <__aeabi_i2d>
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	4b12      	ldr	r3, [pc, #72]	; (8007a68 <MPU6050_Read_Accel+0x2e8>)
 8007a20:	f7f8 fef0 	bl	8000804 <__aeabi_ddiv>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	f7f9 f8b8 	bl	8000ba0 <__aeabi_d2f>
 8007a30:	4603      	mov	r3, r0
 8007a32:	4a0a      	ldr	r2, [pc, #40]	; (8007a5c <MPU6050_Read_Accel+0x2dc>)
 8007a34:	6013      	str	r3, [r2, #0]

		break;
 8007a36:	bf00      	nop
	}
}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	20000288 	.word	0x20000288
 8007a44:	2000028a 	.word	0x2000028a
 8007a48:	20000270 	.word	0x20000270
 8007a4c:	20000268 	.word	0x20000268
 8007a50:	40d00000 	.word	0x40d00000
 8007a54:	20000290 	.word	0x20000290
 8007a58:	20000278 	.word	0x20000278
 8007a5c:	20000264 	.word	0x20000264
 8007a60:	40c00000 	.word	0x40c00000
 8007a64:	40b00000 	.word	0x40b00000
 8007a68:	40a00000 	.word	0x40a00000
 8007a6c:	00000000 	.word	0x00000000

08007a70 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(I2C_HandleTypeDef *handle_i2c) {
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af04      	add	r7, sp, #16
 8007a76:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, Rec_Data, 6,10000);
 8007a78:	f242 7310 	movw	r3, #10000	; 0x2710
 8007a7c:	9302      	str	r3, [sp, #8]
 8007a7e:	2306      	movs	r3, #6
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	f107 0308 	add.w	r3, r7, #8
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	2301      	movs	r3, #1
 8007a8a:	2243      	movs	r2, #67	; 0x43
 8007a8c:	21d0      	movs	r1, #208	; 0xd0
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fd f83a 	bl	8004b08 <HAL_I2C_Mem_Read>

	MPU6050_Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8007a94:	7a3b      	ldrb	r3, [r7, #8]
 8007a96:	021b      	lsls	r3, r3, #8
 8007a98:	b21a      	sxth	r2, r3
 8007a9a:	7a7b      	ldrb	r3, [r7, #9]
 8007a9c:	b21b      	sxth	r3, r3
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	b21a      	sxth	r2, r3
 8007aa2:	4bab      	ldr	r3, [pc, #684]	; (8007d50 <MPU6050_Read_Gyro+0x2e0>)
 8007aa4:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8007aa6:	7abb      	ldrb	r3, [r7, #10]
 8007aa8:	021b      	lsls	r3, r3, #8
 8007aaa:	b21a      	sxth	r2, r3
 8007aac:	7afb      	ldrb	r3, [r7, #11]
 8007aae:	b21b      	sxth	r3, r3
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	b21a      	sxth	r2, r3
 8007ab4:	4ba7      	ldr	r3, [pc, #668]	; (8007d54 <MPU6050_Read_Gyro+0x2e4>)
 8007ab6:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8007ab8:	7b3b      	ldrb	r3, [r7, #12]
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	b21a      	sxth	r2, r3
 8007abe:	7b7b      	ldrb	r3, [r7, #13]
 8007ac0:	b21b      	sxth	r3, r3
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	b21a      	sxth	r2, r3
 8007ac6:	4ba4      	ldr	r3, [pc, #656]	; (8007d58 <MPU6050_Read_Gyro+0x2e8>)
 8007ac8:	801a      	strh	r2, [r3, #0]
	1 ± 500 °/s 65.5 LSB/°/s
	2 ± 1000 °/s 32.8 LSB/°/s
	3 ± 2000 °/s 16.4 LSB/°/s
	 */

	switch (MPU6050_FS_SEL) {
 8007aca:	4ba4      	ldr	r3, [pc, #656]	; (8007d5c <MPU6050_Read_Gyro+0x2ec>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b18      	cmp	r3, #24
 8007ad0:	f200 812a 	bhi.w	8007d28 <MPU6050_Read_Gyro+0x2b8>
 8007ad4:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <MPU6050_Read_Gyro+0x6c>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007b41 	.word	0x08007b41
 8007ae0:	08007d29 	.word	0x08007d29
 8007ae4:	08007d29 	.word	0x08007d29
 8007ae8:	08007d29 	.word	0x08007d29
 8007aec:	08007d29 	.word	0x08007d29
 8007af0:	08007d29 	.word	0x08007d29
 8007af4:	08007d29 	.word	0x08007d29
 8007af8:	08007d29 	.word	0x08007d29
 8007afc:	08007bbb 	.word	0x08007bbb
 8007b00:	08007d29 	.word	0x08007d29
 8007b04:	08007d29 	.word	0x08007d29
 8007b08:	08007d29 	.word	0x08007d29
 8007b0c:	08007d29 	.word	0x08007d29
 8007b10:	08007d29 	.word	0x08007d29
 8007b14:	08007d29 	.word	0x08007d29
 8007b18:	08007d29 	.word	0x08007d29
 8007b1c:	08007c35 	.word	0x08007c35
 8007b20:	08007d29 	.word	0x08007d29
 8007b24:	08007d29 	.word	0x08007d29
 8007b28:	08007d29 	.word	0x08007d29
 8007b2c:	08007d29 	.word	0x08007d29
 8007b30:	08007d29 	.word	0x08007d29
 8007b34:	08007d29 	.word	0x08007d29
 8007b38:	08007d29 	.word	0x08007d29
 8007b3c:	08007caf 	.word	0x08007caf
	case 0x00://0
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 131.0;
 8007b40:	4b83      	ldr	r3, [pc, #524]	; (8007d50 <MPU6050_Read_Gyro+0x2e0>)
 8007b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7f8 fcc8 	bl	80004dc <__aeabi_i2d>
 8007b4c:	a378      	add	r3, pc, #480	; (adr r3, 8007d30 <MPU6050_Read_Gyro+0x2c0>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7f8 fe57 	bl	8000804 <__aeabi_ddiv>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	f7f9 f81f 	bl	8000ba0 <__aeabi_d2f>
 8007b62:	4603      	mov	r3, r0
 8007b64:	4a7e      	ldr	r2, [pc, #504]	; (8007d60 <MPU6050_Read_Gyro+0x2f0>)
 8007b66:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 131.0;
 8007b68:	4b7a      	ldr	r3, [pc, #488]	; (8007d54 <MPU6050_Read_Gyro+0x2e4>)
 8007b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7f8 fcb4 	bl	80004dc <__aeabi_i2d>
 8007b74:	a36e      	add	r3, pc, #440	; (adr r3, 8007d30 <MPU6050_Read_Gyro+0x2c0>)
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	f7f8 fe43 	bl	8000804 <__aeabi_ddiv>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4610      	mov	r0, r2
 8007b84:	4619      	mov	r1, r3
 8007b86:	f7f9 f80b 	bl	8000ba0 <__aeabi_d2f>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4a75      	ldr	r2, [pc, #468]	; (8007d64 <MPU6050_Read_Gyro+0x2f4>)
 8007b8e:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 131.0;
 8007b90:	4b71      	ldr	r3, [pc, #452]	; (8007d58 <MPU6050_Read_Gyro+0x2e8>)
 8007b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7f8 fca0 	bl	80004dc <__aeabi_i2d>
 8007b9c:	a364      	add	r3, pc, #400	; (adr r3, 8007d30 <MPU6050_Read_Gyro+0x2c0>)
 8007b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba2:	f7f8 fe2f 	bl	8000804 <__aeabi_ddiv>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4610      	mov	r0, r2
 8007bac:	4619      	mov	r1, r3
 8007bae:	f7f8 fff7 	bl	8000ba0 <__aeabi_d2f>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	4a6c      	ldr	r2, [pc, #432]	; (8007d68 <MPU6050_Read_Gyro+0x2f8>)
 8007bb6:	6013      	str	r3, [r2, #0]
		break;
 8007bb8:	e0b6      	b.n	8007d28 <MPU6050_Read_Gyro+0x2b8>
	case 0x08://1
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 65.5;
 8007bba:	4b65      	ldr	r3, [pc, #404]	; (8007d50 <MPU6050_Read_Gyro+0x2e0>)
 8007bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7f8 fc8b 	bl	80004dc <__aeabi_i2d>
 8007bc6:	a35c      	add	r3, pc, #368	; (adr r3, 8007d38 <MPU6050_Read_Gyro+0x2c8>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f7f8 fe1a 	bl	8000804 <__aeabi_ddiv>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	f7f8 ffe2 	bl	8000ba0 <__aeabi_d2f>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	4a60      	ldr	r2, [pc, #384]	; (8007d60 <MPU6050_Read_Gyro+0x2f0>)
 8007be0:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 65.5;
 8007be2:	4b5c      	ldr	r3, [pc, #368]	; (8007d54 <MPU6050_Read_Gyro+0x2e4>)
 8007be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7f8 fc77 	bl	80004dc <__aeabi_i2d>
 8007bee:	a352      	add	r3, pc, #328	; (adr r3, 8007d38 <MPU6050_Read_Gyro+0x2c8>)
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f7f8 fe06 	bl	8000804 <__aeabi_ddiv>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4619      	mov	r1, r3
 8007c00:	f7f8 ffce 	bl	8000ba0 <__aeabi_d2f>
 8007c04:	4603      	mov	r3, r0
 8007c06:	4a57      	ldr	r2, [pc, #348]	; (8007d64 <MPU6050_Read_Gyro+0x2f4>)
 8007c08:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 65.5;
 8007c0a:	4b53      	ldr	r3, [pc, #332]	; (8007d58 <MPU6050_Read_Gyro+0x2e8>)
 8007c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7f8 fc63 	bl	80004dc <__aeabi_i2d>
 8007c16:	a348      	add	r3, pc, #288	; (adr r3, 8007d38 <MPU6050_Read_Gyro+0x2c8>)
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f7f8 fdf2 	bl	8000804 <__aeabi_ddiv>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4610      	mov	r0, r2
 8007c26:	4619      	mov	r1, r3
 8007c28:	f7f8 ffba 	bl	8000ba0 <__aeabi_d2f>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	4a4e      	ldr	r2, [pc, #312]	; (8007d68 <MPU6050_Read_Gyro+0x2f8>)
 8007c30:	6013      	str	r3, [r2, #0]
		break;
 8007c32:	e079      	b.n	8007d28 <MPU6050_Read_Gyro+0x2b8>
	case 0x10://2
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 32.8;
 8007c34:	4b46      	ldr	r3, [pc, #280]	; (8007d50 <MPU6050_Read_Gyro+0x2e0>)
 8007c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7f8 fc4e 	bl	80004dc <__aeabi_i2d>
 8007c40:	a33f      	add	r3, pc, #252	; (adr r3, 8007d40 <MPU6050_Read_Gyro+0x2d0>)
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f7f8 fddd 	bl	8000804 <__aeabi_ddiv>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4610      	mov	r0, r2
 8007c50:	4619      	mov	r1, r3
 8007c52:	f7f8 ffa5 	bl	8000ba0 <__aeabi_d2f>
 8007c56:	4603      	mov	r3, r0
 8007c58:	4a41      	ldr	r2, [pc, #260]	; (8007d60 <MPU6050_Read_Gyro+0x2f0>)
 8007c5a:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 32.8;
 8007c5c:	4b3d      	ldr	r3, [pc, #244]	; (8007d54 <MPU6050_Read_Gyro+0x2e4>)
 8007c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7f8 fc3a 	bl	80004dc <__aeabi_i2d>
 8007c68:	a335      	add	r3, pc, #212	; (adr r3, 8007d40 <MPU6050_Read_Gyro+0x2d0>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f7f8 fdc9 	bl	8000804 <__aeabi_ddiv>
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	4610      	mov	r0, r2
 8007c78:	4619      	mov	r1, r3
 8007c7a:	f7f8 ff91 	bl	8000ba0 <__aeabi_d2f>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4a38      	ldr	r2, [pc, #224]	; (8007d64 <MPU6050_Read_Gyro+0x2f4>)
 8007c82:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 32.8;
 8007c84:	4b34      	ldr	r3, [pc, #208]	; (8007d58 <MPU6050_Read_Gyro+0x2e8>)
 8007c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7f8 fc26 	bl	80004dc <__aeabi_i2d>
 8007c90:	a32b      	add	r3, pc, #172	; (adr r3, 8007d40 <MPU6050_Read_Gyro+0x2d0>)
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	f7f8 fdb5 	bl	8000804 <__aeabi_ddiv>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	f7f8 ff7d 	bl	8000ba0 <__aeabi_d2f>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	4a2f      	ldr	r2, [pc, #188]	; (8007d68 <MPU6050_Read_Gyro+0x2f8>)
 8007caa:	6013      	str	r3, [r2, #0]
		break;
 8007cac:	e03c      	b.n	8007d28 <MPU6050_Read_Gyro+0x2b8>
	case 0x18://3
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 16.4;
 8007cae:	4b28      	ldr	r3, [pc, #160]	; (8007d50 <MPU6050_Read_Gyro+0x2e0>)
 8007cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7f8 fc11 	bl	80004dc <__aeabi_i2d>
 8007cba:	a323      	add	r3, pc, #140	; (adr r3, 8007d48 <MPU6050_Read_Gyro+0x2d8>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fda0 	bl	8000804 <__aeabi_ddiv>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4619      	mov	r1, r3
 8007ccc:	f7f8 ff68 	bl	8000ba0 <__aeabi_d2f>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	4a23      	ldr	r2, [pc, #140]	; (8007d60 <MPU6050_Read_Gyro+0x2f0>)
 8007cd4:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 16.4;
 8007cd6:	4b1f      	ldr	r3, [pc, #124]	; (8007d54 <MPU6050_Read_Gyro+0x2e4>)
 8007cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7f8 fbfd 	bl	80004dc <__aeabi_i2d>
 8007ce2:	a319      	add	r3, pc, #100	; (adr r3, 8007d48 <MPU6050_Read_Gyro+0x2d8>)
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	f7f8 fd8c 	bl	8000804 <__aeabi_ddiv>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	f7f8 ff54 	bl	8000ba0 <__aeabi_d2f>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	4a1a      	ldr	r2, [pc, #104]	; (8007d64 <MPU6050_Read_Gyro+0x2f4>)
 8007cfc:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 16.4;
 8007cfe:	4b16      	ldr	r3, [pc, #88]	; (8007d58 <MPU6050_Read_Gyro+0x2e8>)
 8007d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7f8 fbe9 	bl	80004dc <__aeabi_i2d>
 8007d0a:	a30f      	add	r3, pc, #60	; (adr r3, 8007d48 <MPU6050_Read_Gyro+0x2d8>)
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f7f8 fd78 	bl	8000804 <__aeabi_ddiv>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	f7f8 ff40 	bl	8000ba0 <__aeabi_d2f>
 8007d20:	4603      	mov	r3, r0
 8007d22:	4a11      	ldr	r2, [pc, #68]	; (8007d68 <MPU6050_Read_Gyro+0x2f8>)
 8007d24:	6013      	str	r3, [r2, #0]
		break;
 8007d26:	bf00      	nop
	}
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	00000000 	.word	0x00000000
 8007d34:	40606000 	.word	0x40606000
 8007d38:	00000000 	.word	0x00000000
 8007d3c:	40506000 	.word	0x40506000
 8007d40:	66666666 	.word	0x66666666
 8007d44:	40406666 	.word	0x40406666
 8007d48:	66666666 	.word	0x66666666
 8007d4c:	40306666 	.word	0x40306666
 8007d50:	2000028c 	.word	0x2000028c
 8007d54:	20000280 	.word	0x20000280
 8007d58:	20000274 	.word	0x20000274
 8007d5c:	20000298 	.word	0x20000298
 8007d60:	2000026c 	.word	0x2000026c
 8007d64:	2000027c 	.word	0x2000027c
 8007d68:	20000294 	.word	0x20000294

08007d6c <__errno>:
 8007d6c:	4b01      	ldr	r3, [pc, #4]	; (8007d74 <__errno+0x8>)
 8007d6e:	6818      	ldr	r0, [r3, #0]
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	20000040 	.word	0x20000040

08007d78 <__libc_init_array>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	2600      	movs	r6, #0
 8007d7c:	4d0c      	ldr	r5, [pc, #48]	; (8007db0 <__libc_init_array+0x38>)
 8007d7e:	4c0d      	ldr	r4, [pc, #52]	; (8007db4 <__libc_init_array+0x3c>)
 8007d80:	1b64      	subs	r4, r4, r5
 8007d82:	10a4      	asrs	r4, r4, #2
 8007d84:	42a6      	cmp	r6, r4
 8007d86:	d109      	bne.n	8007d9c <__libc_init_array+0x24>
 8007d88:	f002 fefc 	bl	800ab84 <_init>
 8007d8c:	2600      	movs	r6, #0
 8007d8e:	4d0a      	ldr	r5, [pc, #40]	; (8007db8 <__libc_init_array+0x40>)
 8007d90:	4c0a      	ldr	r4, [pc, #40]	; (8007dbc <__libc_init_array+0x44>)
 8007d92:	1b64      	subs	r4, r4, r5
 8007d94:	10a4      	asrs	r4, r4, #2
 8007d96:	42a6      	cmp	r6, r4
 8007d98:	d105      	bne.n	8007da6 <__libc_init_array+0x2e>
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}
 8007d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da0:	4798      	blx	r3
 8007da2:	3601      	adds	r6, #1
 8007da4:	e7ee      	b.n	8007d84 <__libc_init_array+0xc>
 8007da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007daa:	4798      	blx	r3
 8007dac:	3601      	adds	r6, #1
 8007dae:	e7f2      	b.n	8007d96 <__libc_init_array+0x1e>
 8007db0:	0800b6bc 	.word	0x0800b6bc
 8007db4:	0800b6bc 	.word	0x0800b6bc
 8007db8:	0800b6bc 	.word	0x0800b6bc
 8007dbc:	0800b6c0 	.word	0x0800b6c0

08007dc0 <memcpy>:
 8007dc0:	440a      	add	r2, r1
 8007dc2:	4291      	cmp	r1, r2
 8007dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007dc8:	d100      	bne.n	8007dcc <memcpy+0xc>
 8007dca:	4770      	bx	lr
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dd2:	4291      	cmp	r1, r2
 8007dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dd8:	d1f9      	bne.n	8007dce <memcpy+0xe>
 8007dda:	bd10      	pop	{r4, pc}

08007ddc <memset>:
 8007ddc:	4603      	mov	r3, r0
 8007dde:	4402      	add	r2, r0
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d100      	bne.n	8007de6 <memset+0xa>
 8007de4:	4770      	bx	lr
 8007de6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dea:	e7f9      	b.n	8007de0 <memset+0x4>

08007dec <__cvt>:
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df2:	461f      	mov	r7, r3
 8007df4:	bfbb      	ittet	lt
 8007df6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007dfa:	461f      	movlt	r7, r3
 8007dfc:	2300      	movge	r3, #0
 8007dfe:	232d      	movlt	r3, #45	; 0x2d
 8007e00:	b088      	sub	sp, #32
 8007e02:	4614      	mov	r4, r2
 8007e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007e08:	7013      	strb	r3, [r2, #0]
 8007e0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007e10:	f023 0820 	bic.w	r8, r3, #32
 8007e14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e18:	d005      	beq.n	8007e26 <__cvt+0x3a>
 8007e1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e1e:	d100      	bne.n	8007e22 <__cvt+0x36>
 8007e20:	3501      	adds	r5, #1
 8007e22:	2302      	movs	r3, #2
 8007e24:	e000      	b.n	8007e28 <__cvt+0x3c>
 8007e26:	2303      	movs	r3, #3
 8007e28:	aa07      	add	r2, sp, #28
 8007e2a:	9204      	str	r2, [sp, #16]
 8007e2c:	aa06      	add	r2, sp, #24
 8007e2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007e32:	e9cd 3500 	strd	r3, r5, [sp]
 8007e36:	4622      	mov	r2, r4
 8007e38:	463b      	mov	r3, r7
 8007e3a:	f000 fce5 	bl	8008808 <_dtoa_r>
 8007e3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e42:	4606      	mov	r6, r0
 8007e44:	d102      	bne.n	8007e4c <__cvt+0x60>
 8007e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e48:	07db      	lsls	r3, r3, #31
 8007e4a:	d522      	bpl.n	8007e92 <__cvt+0xa6>
 8007e4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e50:	eb06 0905 	add.w	r9, r6, r5
 8007e54:	d110      	bne.n	8007e78 <__cvt+0x8c>
 8007e56:	7833      	ldrb	r3, [r6, #0]
 8007e58:	2b30      	cmp	r3, #48	; 0x30
 8007e5a:	d10a      	bne.n	8007e72 <__cvt+0x86>
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2300      	movs	r3, #0
 8007e60:	4620      	mov	r0, r4
 8007e62:	4639      	mov	r1, r7
 8007e64:	f7f8 fe0c 	bl	8000a80 <__aeabi_dcmpeq>
 8007e68:	b918      	cbnz	r0, 8007e72 <__cvt+0x86>
 8007e6a:	f1c5 0501 	rsb	r5, r5, #1
 8007e6e:	f8ca 5000 	str.w	r5, [sl]
 8007e72:	f8da 3000 	ldr.w	r3, [sl]
 8007e76:	4499      	add	r9, r3
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	4639      	mov	r1, r7
 8007e80:	f7f8 fdfe 	bl	8000a80 <__aeabi_dcmpeq>
 8007e84:	b108      	cbz	r0, 8007e8a <__cvt+0x9e>
 8007e86:	f8cd 901c 	str.w	r9, [sp, #28]
 8007e8a:	2230      	movs	r2, #48	; 0x30
 8007e8c:	9b07      	ldr	r3, [sp, #28]
 8007e8e:	454b      	cmp	r3, r9
 8007e90:	d307      	bcc.n	8007ea2 <__cvt+0xb6>
 8007e92:	4630      	mov	r0, r6
 8007e94:	9b07      	ldr	r3, [sp, #28]
 8007e96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e98:	1b9b      	subs	r3, r3, r6
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	b008      	add	sp, #32
 8007e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea2:	1c59      	adds	r1, r3, #1
 8007ea4:	9107      	str	r1, [sp, #28]
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	e7f0      	b.n	8007e8c <__cvt+0xa0>

08007eaa <__exponent>:
 8007eaa:	4603      	mov	r3, r0
 8007eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eae:	2900      	cmp	r1, #0
 8007eb0:	f803 2b02 	strb.w	r2, [r3], #2
 8007eb4:	bfb6      	itet	lt
 8007eb6:	222d      	movlt	r2, #45	; 0x2d
 8007eb8:	222b      	movge	r2, #43	; 0x2b
 8007eba:	4249      	neglt	r1, r1
 8007ebc:	2909      	cmp	r1, #9
 8007ebe:	7042      	strb	r2, [r0, #1]
 8007ec0:	dd2b      	ble.n	8007f1a <__exponent+0x70>
 8007ec2:	f10d 0407 	add.w	r4, sp, #7
 8007ec6:	46a4      	mov	ip, r4
 8007ec8:	270a      	movs	r7, #10
 8007eca:	fb91 f6f7 	sdiv	r6, r1, r7
 8007ece:	460a      	mov	r2, r1
 8007ed0:	46a6      	mov	lr, r4
 8007ed2:	fb07 1516 	mls	r5, r7, r6, r1
 8007ed6:	2a63      	cmp	r2, #99	; 0x63
 8007ed8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007edc:	4631      	mov	r1, r6
 8007ede:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007ee2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ee6:	dcf0      	bgt.n	8007eca <__exponent+0x20>
 8007ee8:	3130      	adds	r1, #48	; 0x30
 8007eea:	f1ae 0502 	sub.w	r5, lr, #2
 8007eee:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	1c44      	adds	r4, r0, #1
 8007ef6:	4561      	cmp	r1, ip
 8007ef8:	d30a      	bcc.n	8007f10 <__exponent+0x66>
 8007efa:	f10d 0209 	add.w	r2, sp, #9
 8007efe:	eba2 020e 	sub.w	r2, r2, lr
 8007f02:	4565      	cmp	r5, ip
 8007f04:	bf88      	it	hi
 8007f06:	2200      	movhi	r2, #0
 8007f08:	4413      	add	r3, r2
 8007f0a:	1a18      	subs	r0, r3, r0
 8007f0c:	b003      	add	sp, #12
 8007f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f14:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f18:	e7ed      	b.n	8007ef6 <__exponent+0x4c>
 8007f1a:	2330      	movs	r3, #48	; 0x30
 8007f1c:	3130      	adds	r1, #48	; 0x30
 8007f1e:	7083      	strb	r3, [r0, #2]
 8007f20:	70c1      	strb	r1, [r0, #3]
 8007f22:	1d03      	adds	r3, r0, #4
 8007f24:	e7f1      	b.n	8007f0a <__exponent+0x60>
	...

08007f28 <_printf_float>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	b091      	sub	sp, #68	; 0x44
 8007f2e:	460c      	mov	r4, r1
 8007f30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007f34:	4616      	mov	r6, r2
 8007f36:	461f      	mov	r7, r3
 8007f38:	4605      	mov	r5, r0
 8007f3a:	f001 fa53 	bl	80093e4 <_localeconv_r>
 8007f3e:	6803      	ldr	r3, [r0, #0]
 8007f40:	4618      	mov	r0, r3
 8007f42:	9309      	str	r3, [sp, #36]	; 0x24
 8007f44:	f7f8 f970 	bl	8000228 <strlen>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f50:	900a      	str	r0, [sp, #40]	; 0x28
 8007f52:	3307      	adds	r3, #7
 8007f54:	f023 0307 	bic.w	r3, r3, #7
 8007f58:	f103 0208 	add.w	r2, r3, #8
 8007f5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007f60:	f8d4 b000 	ldr.w	fp, [r4]
 8007f64:	f8c8 2000 	str.w	r2, [r8]
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f70:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007f74:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f7e:	4640      	mov	r0, r8
 8007f80:	4b9c      	ldr	r3, [pc, #624]	; (80081f4 <_printf_float+0x2cc>)
 8007f82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f84:	f7f8 fdae 	bl	8000ae4 <__aeabi_dcmpun>
 8007f88:	bb70      	cbnz	r0, 8007fe8 <_printf_float+0xc0>
 8007f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4b98      	ldr	r3, [pc, #608]	; (80081f4 <_printf_float+0x2cc>)
 8007f92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f94:	f7f8 fd88 	bl	8000aa8 <__aeabi_dcmple>
 8007f98:	bb30      	cbnz	r0, 8007fe8 <_printf_float+0xc0>
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4640      	mov	r0, r8
 8007fa0:	4651      	mov	r1, sl
 8007fa2:	f7f8 fd77 	bl	8000a94 <__aeabi_dcmplt>
 8007fa6:	b110      	cbz	r0, 8007fae <_printf_float+0x86>
 8007fa8:	232d      	movs	r3, #45	; 0x2d
 8007faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fae:	4b92      	ldr	r3, [pc, #584]	; (80081f8 <_printf_float+0x2d0>)
 8007fb0:	4892      	ldr	r0, [pc, #584]	; (80081fc <_printf_float+0x2d4>)
 8007fb2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007fb6:	bf94      	ite	ls
 8007fb8:	4698      	movls	r8, r3
 8007fba:	4680      	movhi	r8, r0
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	f04f 0a00 	mov.w	sl, #0
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	f02b 0304 	bic.w	r3, fp, #4
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	4633      	mov	r3, r6
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4628      	mov	r0, r5
 8007fd0:	9700      	str	r7, [sp, #0]
 8007fd2:	aa0f      	add	r2, sp, #60	; 0x3c
 8007fd4:	f000 f9d4 	bl	8008380 <_printf_common>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f040 8090 	bne.w	80080fe <_printf_float+0x1d6>
 8007fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fe2:	b011      	add	sp, #68	; 0x44
 8007fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe8:	4642      	mov	r2, r8
 8007fea:	4653      	mov	r3, sl
 8007fec:	4640      	mov	r0, r8
 8007fee:	4651      	mov	r1, sl
 8007ff0:	f7f8 fd78 	bl	8000ae4 <__aeabi_dcmpun>
 8007ff4:	b148      	cbz	r0, 800800a <_printf_float+0xe2>
 8007ff6:	f1ba 0f00 	cmp.w	sl, #0
 8007ffa:	bfb8      	it	lt
 8007ffc:	232d      	movlt	r3, #45	; 0x2d
 8007ffe:	4880      	ldr	r0, [pc, #512]	; (8008200 <_printf_float+0x2d8>)
 8008000:	bfb8      	it	lt
 8008002:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008006:	4b7f      	ldr	r3, [pc, #508]	; (8008204 <_printf_float+0x2dc>)
 8008008:	e7d3      	b.n	8007fb2 <_printf_float+0x8a>
 800800a:	6863      	ldr	r3, [r4, #4]
 800800c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	d142      	bne.n	800809a <_printf_float+0x172>
 8008014:	2306      	movs	r3, #6
 8008016:	6063      	str	r3, [r4, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	9206      	str	r2, [sp, #24]
 800801c:	aa0e      	add	r2, sp, #56	; 0x38
 800801e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008022:	aa0d      	add	r2, sp, #52	; 0x34
 8008024:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008028:	9203      	str	r2, [sp, #12]
 800802a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800802e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008032:	6023      	str	r3, [r4, #0]
 8008034:	6863      	ldr	r3, [r4, #4]
 8008036:	4642      	mov	r2, r8
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	4628      	mov	r0, r5
 800803c:	4653      	mov	r3, sl
 800803e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008040:	f7ff fed4 	bl	8007dec <__cvt>
 8008044:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008046:	4680      	mov	r8, r0
 8008048:	2947      	cmp	r1, #71	; 0x47
 800804a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800804c:	d108      	bne.n	8008060 <_printf_float+0x138>
 800804e:	1cc8      	adds	r0, r1, #3
 8008050:	db02      	blt.n	8008058 <_printf_float+0x130>
 8008052:	6863      	ldr	r3, [r4, #4]
 8008054:	4299      	cmp	r1, r3
 8008056:	dd40      	ble.n	80080da <_printf_float+0x1b2>
 8008058:	f1a9 0902 	sub.w	r9, r9, #2
 800805c:	fa5f f989 	uxtb.w	r9, r9
 8008060:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008064:	d81f      	bhi.n	80080a6 <_printf_float+0x17e>
 8008066:	464a      	mov	r2, r9
 8008068:	3901      	subs	r1, #1
 800806a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800806e:	910d      	str	r1, [sp, #52]	; 0x34
 8008070:	f7ff ff1b 	bl	8007eaa <__exponent>
 8008074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008076:	4682      	mov	sl, r0
 8008078:	1813      	adds	r3, r2, r0
 800807a:	2a01      	cmp	r2, #1
 800807c:	6123      	str	r3, [r4, #16]
 800807e:	dc02      	bgt.n	8008086 <_printf_float+0x15e>
 8008080:	6822      	ldr	r2, [r4, #0]
 8008082:	07d2      	lsls	r2, r2, #31
 8008084:	d501      	bpl.n	800808a <_printf_float+0x162>
 8008086:	3301      	adds	r3, #1
 8008088:	6123      	str	r3, [r4, #16]
 800808a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800808e:	2b00      	cmp	r3, #0
 8008090:	d09b      	beq.n	8007fca <_printf_float+0xa2>
 8008092:	232d      	movs	r3, #45	; 0x2d
 8008094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008098:	e797      	b.n	8007fca <_printf_float+0xa2>
 800809a:	2947      	cmp	r1, #71	; 0x47
 800809c:	d1bc      	bne.n	8008018 <_printf_float+0xf0>
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1ba      	bne.n	8008018 <_printf_float+0xf0>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e7b7      	b.n	8008016 <_printf_float+0xee>
 80080a6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80080aa:	d118      	bne.n	80080de <_printf_float+0x1b6>
 80080ac:	2900      	cmp	r1, #0
 80080ae:	6863      	ldr	r3, [r4, #4]
 80080b0:	dd0b      	ble.n	80080ca <_printf_float+0x1a2>
 80080b2:	6121      	str	r1, [r4, #16]
 80080b4:	b913      	cbnz	r3, 80080bc <_printf_float+0x194>
 80080b6:	6822      	ldr	r2, [r4, #0]
 80080b8:	07d0      	lsls	r0, r2, #31
 80080ba:	d502      	bpl.n	80080c2 <_printf_float+0x19a>
 80080bc:	3301      	adds	r3, #1
 80080be:	440b      	add	r3, r1
 80080c0:	6123      	str	r3, [r4, #16]
 80080c2:	f04f 0a00 	mov.w	sl, #0
 80080c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80080c8:	e7df      	b.n	800808a <_printf_float+0x162>
 80080ca:	b913      	cbnz	r3, 80080d2 <_printf_float+0x1aa>
 80080cc:	6822      	ldr	r2, [r4, #0]
 80080ce:	07d2      	lsls	r2, r2, #31
 80080d0:	d501      	bpl.n	80080d6 <_printf_float+0x1ae>
 80080d2:	3302      	adds	r3, #2
 80080d4:	e7f4      	b.n	80080c0 <_printf_float+0x198>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e7f2      	b.n	80080c0 <_printf_float+0x198>
 80080da:	f04f 0967 	mov.w	r9, #103	; 0x67
 80080de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080e0:	4299      	cmp	r1, r3
 80080e2:	db05      	blt.n	80080f0 <_printf_float+0x1c8>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	6121      	str	r1, [r4, #16]
 80080e8:	07d8      	lsls	r0, r3, #31
 80080ea:	d5ea      	bpl.n	80080c2 <_printf_float+0x19a>
 80080ec:	1c4b      	adds	r3, r1, #1
 80080ee:	e7e7      	b.n	80080c0 <_printf_float+0x198>
 80080f0:	2900      	cmp	r1, #0
 80080f2:	bfcc      	ite	gt
 80080f4:	2201      	movgt	r2, #1
 80080f6:	f1c1 0202 	rsble	r2, r1, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	e7e0      	b.n	80080c0 <_printf_float+0x198>
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	055a      	lsls	r2, r3, #21
 8008102:	d407      	bmi.n	8008114 <_printf_float+0x1ec>
 8008104:	6923      	ldr	r3, [r4, #16]
 8008106:	4642      	mov	r2, r8
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	d12b      	bne.n	800816a <_printf_float+0x242>
 8008112:	e764      	b.n	8007fde <_printf_float+0xb6>
 8008114:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008118:	f240 80dd 	bls.w	80082d6 <_printf_float+0x3ae>
 800811c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008120:	2200      	movs	r2, #0
 8008122:	2300      	movs	r3, #0
 8008124:	f7f8 fcac 	bl	8000a80 <__aeabi_dcmpeq>
 8008128:	2800      	cmp	r0, #0
 800812a:	d033      	beq.n	8008194 <_printf_float+0x26c>
 800812c:	2301      	movs	r3, #1
 800812e:	4631      	mov	r1, r6
 8008130:	4628      	mov	r0, r5
 8008132:	4a35      	ldr	r2, [pc, #212]	; (8008208 <_printf_float+0x2e0>)
 8008134:	47b8      	blx	r7
 8008136:	3001      	adds	r0, #1
 8008138:	f43f af51 	beq.w	8007fde <_printf_float+0xb6>
 800813c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008140:	429a      	cmp	r2, r3
 8008142:	db02      	blt.n	800814a <_printf_float+0x222>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	07d8      	lsls	r0, r3, #31
 8008148:	d50f      	bpl.n	800816a <_printf_float+0x242>
 800814a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800814e:	4631      	mov	r1, r6
 8008150:	4628      	mov	r0, r5
 8008152:	47b8      	blx	r7
 8008154:	3001      	adds	r0, #1
 8008156:	f43f af42 	beq.w	8007fde <_printf_float+0xb6>
 800815a:	f04f 0800 	mov.w	r8, #0
 800815e:	f104 091a 	add.w	r9, r4, #26
 8008162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008164:	3b01      	subs	r3, #1
 8008166:	4543      	cmp	r3, r8
 8008168:	dc09      	bgt.n	800817e <_printf_float+0x256>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	079b      	lsls	r3, r3, #30
 800816e:	f100 8102 	bmi.w	8008376 <_printf_float+0x44e>
 8008172:	68e0      	ldr	r0, [r4, #12]
 8008174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008176:	4298      	cmp	r0, r3
 8008178:	bfb8      	it	lt
 800817a:	4618      	movlt	r0, r3
 800817c:	e731      	b.n	8007fe2 <_printf_float+0xba>
 800817e:	2301      	movs	r3, #1
 8008180:	464a      	mov	r2, r9
 8008182:	4631      	mov	r1, r6
 8008184:	4628      	mov	r0, r5
 8008186:	47b8      	blx	r7
 8008188:	3001      	adds	r0, #1
 800818a:	f43f af28 	beq.w	8007fde <_printf_float+0xb6>
 800818e:	f108 0801 	add.w	r8, r8, #1
 8008192:	e7e6      	b.n	8008162 <_printf_float+0x23a>
 8008194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008196:	2b00      	cmp	r3, #0
 8008198:	dc38      	bgt.n	800820c <_printf_float+0x2e4>
 800819a:	2301      	movs	r3, #1
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	4a19      	ldr	r2, [pc, #100]	; (8008208 <_printf_float+0x2e0>)
 80081a2:	47b8      	blx	r7
 80081a4:	3001      	adds	r0, #1
 80081a6:	f43f af1a 	beq.w	8007fde <_printf_float+0xb6>
 80081aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80081ae:	4313      	orrs	r3, r2
 80081b0:	d102      	bne.n	80081b8 <_printf_float+0x290>
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	07d9      	lsls	r1, r3, #31
 80081b6:	d5d8      	bpl.n	800816a <_printf_float+0x242>
 80081b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081bc:	4631      	mov	r1, r6
 80081be:	4628      	mov	r0, r5
 80081c0:	47b8      	blx	r7
 80081c2:	3001      	adds	r0, #1
 80081c4:	f43f af0b 	beq.w	8007fde <_printf_float+0xb6>
 80081c8:	f04f 0900 	mov.w	r9, #0
 80081cc:	f104 0a1a 	add.w	sl, r4, #26
 80081d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081d2:	425b      	negs	r3, r3
 80081d4:	454b      	cmp	r3, r9
 80081d6:	dc01      	bgt.n	80081dc <_printf_float+0x2b4>
 80081d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081da:	e794      	b.n	8008106 <_printf_float+0x1de>
 80081dc:	2301      	movs	r3, #1
 80081de:	4652      	mov	r2, sl
 80081e0:	4631      	mov	r1, r6
 80081e2:	4628      	mov	r0, r5
 80081e4:	47b8      	blx	r7
 80081e6:	3001      	adds	r0, #1
 80081e8:	f43f aef9 	beq.w	8007fde <_printf_float+0xb6>
 80081ec:	f109 0901 	add.w	r9, r9, #1
 80081f0:	e7ee      	b.n	80081d0 <_printf_float+0x2a8>
 80081f2:	bf00      	nop
 80081f4:	7fefffff 	.word	0x7fefffff
 80081f8:	0800b2e8 	.word	0x0800b2e8
 80081fc:	0800b2ec 	.word	0x0800b2ec
 8008200:	0800b2f4 	.word	0x0800b2f4
 8008204:	0800b2f0 	.word	0x0800b2f0
 8008208:	0800b2f8 	.word	0x0800b2f8
 800820c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800820e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008210:	429a      	cmp	r2, r3
 8008212:	bfa8      	it	ge
 8008214:	461a      	movge	r2, r3
 8008216:	2a00      	cmp	r2, #0
 8008218:	4691      	mov	r9, r2
 800821a:	dc37      	bgt.n	800828c <_printf_float+0x364>
 800821c:	f04f 0b00 	mov.w	fp, #0
 8008220:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008224:	f104 021a 	add.w	r2, r4, #26
 8008228:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800822c:	ebaa 0309 	sub.w	r3, sl, r9
 8008230:	455b      	cmp	r3, fp
 8008232:	dc33      	bgt.n	800829c <_printf_float+0x374>
 8008234:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008238:	429a      	cmp	r2, r3
 800823a:	db3b      	blt.n	80082b4 <_printf_float+0x38c>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	07da      	lsls	r2, r3, #31
 8008240:	d438      	bmi.n	80082b4 <_printf_float+0x38c>
 8008242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008244:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008246:	eba3 020a 	sub.w	r2, r3, sl
 800824a:	eba3 0901 	sub.w	r9, r3, r1
 800824e:	4591      	cmp	r9, r2
 8008250:	bfa8      	it	ge
 8008252:	4691      	movge	r9, r2
 8008254:	f1b9 0f00 	cmp.w	r9, #0
 8008258:	dc34      	bgt.n	80082c4 <_printf_float+0x39c>
 800825a:	f04f 0800 	mov.w	r8, #0
 800825e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008262:	f104 0a1a 	add.w	sl, r4, #26
 8008266:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	eba3 0309 	sub.w	r3, r3, r9
 8008270:	4543      	cmp	r3, r8
 8008272:	f77f af7a 	ble.w	800816a <_printf_float+0x242>
 8008276:	2301      	movs	r3, #1
 8008278:	4652      	mov	r2, sl
 800827a:	4631      	mov	r1, r6
 800827c:	4628      	mov	r0, r5
 800827e:	47b8      	blx	r7
 8008280:	3001      	adds	r0, #1
 8008282:	f43f aeac 	beq.w	8007fde <_printf_float+0xb6>
 8008286:	f108 0801 	add.w	r8, r8, #1
 800828a:	e7ec      	b.n	8008266 <_printf_float+0x33e>
 800828c:	4613      	mov	r3, r2
 800828e:	4631      	mov	r1, r6
 8008290:	4642      	mov	r2, r8
 8008292:	4628      	mov	r0, r5
 8008294:	47b8      	blx	r7
 8008296:	3001      	adds	r0, #1
 8008298:	d1c0      	bne.n	800821c <_printf_float+0x2f4>
 800829a:	e6a0      	b.n	8007fde <_printf_float+0xb6>
 800829c:	2301      	movs	r3, #1
 800829e:	4631      	mov	r1, r6
 80082a0:	4628      	mov	r0, r5
 80082a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80082a4:	47b8      	blx	r7
 80082a6:	3001      	adds	r0, #1
 80082a8:	f43f ae99 	beq.w	8007fde <_printf_float+0xb6>
 80082ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082ae:	f10b 0b01 	add.w	fp, fp, #1
 80082b2:	e7b9      	b.n	8008228 <_printf_float+0x300>
 80082b4:	4631      	mov	r1, r6
 80082b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082ba:	4628      	mov	r0, r5
 80082bc:	47b8      	blx	r7
 80082be:	3001      	adds	r0, #1
 80082c0:	d1bf      	bne.n	8008242 <_printf_float+0x31a>
 80082c2:	e68c      	b.n	8007fde <_printf_float+0xb6>
 80082c4:	464b      	mov	r3, r9
 80082c6:	4631      	mov	r1, r6
 80082c8:	4628      	mov	r0, r5
 80082ca:	eb08 020a 	add.w	r2, r8, sl
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	d1c2      	bne.n	800825a <_printf_float+0x332>
 80082d4:	e683      	b.n	8007fde <_printf_float+0xb6>
 80082d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082d8:	2a01      	cmp	r2, #1
 80082da:	dc01      	bgt.n	80082e0 <_printf_float+0x3b8>
 80082dc:	07db      	lsls	r3, r3, #31
 80082de:	d537      	bpl.n	8008350 <_printf_float+0x428>
 80082e0:	2301      	movs	r3, #1
 80082e2:	4642      	mov	r2, r8
 80082e4:	4631      	mov	r1, r6
 80082e6:	4628      	mov	r0, r5
 80082e8:	47b8      	blx	r7
 80082ea:	3001      	adds	r0, #1
 80082ec:	f43f ae77 	beq.w	8007fde <_printf_float+0xb6>
 80082f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082f4:	4631      	mov	r1, r6
 80082f6:	4628      	mov	r0, r5
 80082f8:	47b8      	blx	r7
 80082fa:	3001      	adds	r0, #1
 80082fc:	f43f ae6f 	beq.w	8007fde <_printf_float+0xb6>
 8008300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008304:	2200      	movs	r2, #0
 8008306:	2300      	movs	r3, #0
 8008308:	f7f8 fbba 	bl	8000a80 <__aeabi_dcmpeq>
 800830c:	b9d8      	cbnz	r0, 8008346 <_printf_float+0x41e>
 800830e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008310:	f108 0201 	add.w	r2, r8, #1
 8008314:	3b01      	subs	r3, #1
 8008316:	4631      	mov	r1, r6
 8008318:	4628      	mov	r0, r5
 800831a:	47b8      	blx	r7
 800831c:	3001      	adds	r0, #1
 800831e:	d10e      	bne.n	800833e <_printf_float+0x416>
 8008320:	e65d      	b.n	8007fde <_printf_float+0xb6>
 8008322:	2301      	movs	r3, #1
 8008324:	464a      	mov	r2, r9
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	47b8      	blx	r7
 800832c:	3001      	adds	r0, #1
 800832e:	f43f ae56 	beq.w	8007fde <_printf_float+0xb6>
 8008332:	f108 0801 	add.w	r8, r8, #1
 8008336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008338:	3b01      	subs	r3, #1
 800833a:	4543      	cmp	r3, r8
 800833c:	dcf1      	bgt.n	8008322 <_printf_float+0x3fa>
 800833e:	4653      	mov	r3, sl
 8008340:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008344:	e6e0      	b.n	8008108 <_printf_float+0x1e0>
 8008346:	f04f 0800 	mov.w	r8, #0
 800834a:	f104 091a 	add.w	r9, r4, #26
 800834e:	e7f2      	b.n	8008336 <_printf_float+0x40e>
 8008350:	2301      	movs	r3, #1
 8008352:	4642      	mov	r2, r8
 8008354:	e7df      	b.n	8008316 <_printf_float+0x3ee>
 8008356:	2301      	movs	r3, #1
 8008358:	464a      	mov	r2, r9
 800835a:	4631      	mov	r1, r6
 800835c:	4628      	mov	r0, r5
 800835e:	47b8      	blx	r7
 8008360:	3001      	adds	r0, #1
 8008362:	f43f ae3c 	beq.w	8007fde <_printf_float+0xb6>
 8008366:	f108 0801 	add.w	r8, r8, #1
 800836a:	68e3      	ldr	r3, [r4, #12]
 800836c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800836e:	1a5b      	subs	r3, r3, r1
 8008370:	4543      	cmp	r3, r8
 8008372:	dcf0      	bgt.n	8008356 <_printf_float+0x42e>
 8008374:	e6fd      	b.n	8008172 <_printf_float+0x24a>
 8008376:	f04f 0800 	mov.w	r8, #0
 800837a:	f104 0919 	add.w	r9, r4, #25
 800837e:	e7f4      	b.n	800836a <_printf_float+0x442>

08008380 <_printf_common>:
 8008380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	4616      	mov	r6, r2
 8008386:	4699      	mov	r9, r3
 8008388:	688a      	ldr	r2, [r1, #8]
 800838a:	690b      	ldr	r3, [r1, #16]
 800838c:	4607      	mov	r7, r0
 800838e:	4293      	cmp	r3, r2
 8008390:	bfb8      	it	lt
 8008392:	4613      	movlt	r3, r2
 8008394:	6033      	str	r3, [r6, #0]
 8008396:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800839a:	460c      	mov	r4, r1
 800839c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083a0:	b10a      	cbz	r2, 80083a6 <_printf_common+0x26>
 80083a2:	3301      	adds	r3, #1
 80083a4:	6033      	str	r3, [r6, #0]
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	0699      	lsls	r1, r3, #26
 80083aa:	bf42      	ittt	mi
 80083ac:	6833      	ldrmi	r3, [r6, #0]
 80083ae:	3302      	addmi	r3, #2
 80083b0:	6033      	strmi	r3, [r6, #0]
 80083b2:	6825      	ldr	r5, [r4, #0]
 80083b4:	f015 0506 	ands.w	r5, r5, #6
 80083b8:	d106      	bne.n	80083c8 <_printf_common+0x48>
 80083ba:	f104 0a19 	add.w	sl, r4, #25
 80083be:	68e3      	ldr	r3, [r4, #12]
 80083c0:	6832      	ldr	r2, [r6, #0]
 80083c2:	1a9b      	subs	r3, r3, r2
 80083c4:	42ab      	cmp	r3, r5
 80083c6:	dc28      	bgt.n	800841a <_printf_common+0x9a>
 80083c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083cc:	1e13      	subs	r3, r2, #0
 80083ce:	6822      	ldr	r2, [r4, #0]
 80083d0:	bf18      	it	ne
 80083d2:	2301      	movne	r3, #1
 80083d4:	0692      	lsls	r2, r2, #26
 80083d6:	d42d      	bmi.n	8008434 <_printf_common+0xb4>
 80083d8:	4649      	mov	r1, r9
 80083da:	4638      	mov	r0, r7
 80083dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083e0:	47c0      	blx	r8
 80083e2:	3001      	adds	r0, #1
 80083e4:	d020      	beq.n	8008428 <_printf_common+0xa8>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	68e5      	ldr	r5, [r4, #12]
 80083ea:	f003 0306 	and.w	r3, r3, #6
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	bf18      	it	ne
 80083f2:	2500      	movne	r5, #0
 80083f4:	6832      	ldr	r2, [r6, #0]
 80083f6:	f04f 0600 	mov.w	r6, #0
 80083fa:	68a3      	ldr	r3, [r4, #8]
 80083fc:	bf08      	it	eq
 80083fe:	1aad      	subeq	r5, r5, r2
 8008400:	6922      	ldr	r2, [r4, #16]
 8008402:	bf08      	it	eq
 8008404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008408:	4293      	cmp	r3, r2
 800840a:	bfc4      	itt	gt
 800840c:	1a9b      	subgt	r3, r3, r2
 800840e:	18ed      	addgt	r5, r5, r3
 8008410:	341a      	adds	r4, #26
 8008412:	42b5      	cmp	r5, r6
 8008414:	d11a      	bne.n	800844c <_printf_common+0xcc>
 8008416:	2000      	movs	r0, #0
 8008418:	e008      	b.n	800842c <_printf_common+0xac>
 800841a:	2301      	movs	r3, #1
 800841c:	4652      	mov	r2, sl
 800841e:	4649      	mov	r1, r9
 8008420:	4638      	mov	r0, r7
 8008422:	47c0      	blx	r8
 8008424:	3001      	adds	r0, #1
 8008426:	d103      	bne.n	8008430 <_printf_common+0xb0>
 8008428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800842c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008430:	3501      	adds	r5, #1
 8008432:	e7c4      	b.n	80083be <_printf_common+0x3e>
 8008434:	2030      	movs	r0, #48	; 0x30
 8008436:	18e1      	adds	r1, r4, r3
 8008438:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008442:	4422      	add	r2, r4
 8008444:	3302      	adds	r3, #2
 8008446:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800844a:	e7c5      	b.n	80083d8 <_printf_common+0x58>
 800844c:	2301      	movs	r3, #1
 800844e:	4622      	mov	r2, r4
 8008450:	4649      	mov	r1, r9
 8008452:	4638      	mov	r0, r7
 8008454:	47c0      	blx	r8
 8008456:	3001      	adds	r0, #1
 8008458:	d0e6      	beq.n	8008428 <_printf_common+0xa8>
 800845a:	3601      	adds	r6, #1
 800845c:	e7d9      	b.n	8008412 <_printf_common+0x92>
	...

08008460 <_printf_i>:
 8008460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008464:	7e0f      	ldrb	r7, [r1, #24]
 8008466:	4691      	mov	r9, r2
 8008468:	2f78      	cmp	r7, #120	; 0x78
 800846a:	4680      	mov	r8, r0
 800846c:	460c      	mov	r4, r1
 800846e:	469a      	mov	sl, r3
 8008470:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008472:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008476:	d807      	bhi.n	8008488 <_printf_i+0x28>
 8008478:	2f62      	cmp	r7, #98	; 0x62
 800847a:	d80a      	bhi.n	8008492 <_printf_i+0x32>
 800847c:	2f00      	cmp	r7, #0
 800847e:	f000 80d9 	beq.w	8008634 <_printf_i+0x1d4>
 8008482:	2f58      	cmp	r7, #88	; 0x58
 8008484:	f000 80a4 	beq.w	80085d0 <_printf_i+0x170>
 8008488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800848c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008490:	e03a      	b.n	8008508 <_printf_i+0xa8>
 8008492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008496:	2b15      	cmp	r3, #21
 8008498:	d8f6      	bhi.n	8008488 <_printf_i+0x28>
 800849a:	a101      	add	r1, pc, #4	; (adr r1, 80084a0 <_printf_i+0x40>)
 800849c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084a0:	080084f9 	.word	0x080084f9
 80084a4:	0800850d 	.word	0x0800850d
 80084a8:	08008489 	.word	0x08008489
 80084ac:	08008489 	.word	0x08008489
 80084b0:	08008489 	.word	0x08008489
 80084b4:	08008489 	.word	0x08008489
 80084b8:	0800850d 	.word	0x0800850d
 80084bc:	08008489 	.word	0x08008489
 80084c0:	08008489 	.word	0x08008489
 80084c4:	08008489 	.word	0x08008489
 80084c8:	08008489 	.word	0x08008489
 80084cc:	0800861b 	.word	0x0800861b
 80084d0:	0800853d 	.word	0x0800853d
 80084d4:	080085fd 	.word	0x080085fd
 80084d8:	08008489 	.word	0x08008489
 80084dc:	08008489 	.word	0x08008489
 80084e0:	0800863d 	.word	0x0800863d
 80084e4:	08008489 	.word	0x08008489
 80084e8:	0800853d 	.word	0x0800853d
 80084ec:	08008489 	.word	0x08008489
 80084f0:	08008489 	.word	0x08008489
 80084f4:	08008605 	.word	0x08008605
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	1d1a      	adds	r2, r3, #4
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	602a      	str	r2, [r5, #0]
 8008500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008508:	2301      	movs	r3, #1
 800850a:	e0a4      	b.n	8008656 <_printf_i+0x1f6>
 800850c:	6820      	ldr	r0, [r4, #0]
 800850e:	6829      	ldr	r1, [r5, #0]
 8008510:	0606      	lsls	r6, r0, #24
 8008512:	f101 0304 	add.w	r3, r1, #4
 8008516:	d50a      	bpl.n	800852e <_printf_i+0xce>
 8008518:	680e      	ldr	r6, [r1, #0]
 800851a:	602b      	str	r3, [r5, #0]
 800851c:	2e00      	cmp	r6, #0
 800851e:	da03      	bge.n	8008528 <_printf_i+0xc8>
 8008520:	232d      	movs	r3, #45	; 0x2d
 8008522:	4276      	negs	r6, r6
 8008524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008528:	230a      	movs	r3, #10
 800852a:	485e      	ldr	r0, [pc, #376]	; (80086a4 <_printf_i+0x244>)
 800852c:	e019      	b.n	8008562 <_printf_i+0x102>
 800852e:	680e      	ldr	r6, [r1, #0]
 8008530:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008534:	602b      	str	r3, [r5, #0]
 8008536:	bf18      	it	ne
 8008538:	b236      	sxthne	r6, r6
 800853a:	e7ef      	b.n	800851c <_printf_i+0xbc>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	6820      	ldr	r0, [r4, #0]
 8008540:	1d19      	adds	r1, r3, #4
 8008542:	6029      	str	r1, [r5, #0]
 8008544:	0601      	lsls	r1, r0, #24
 8008546:	d501      	bpl.n	800854c <_printf_i+0xec>
 8008548:	681e      	ldr	r6, [r3, #0]
 800854a:	e002      	b.n	8008552 <_printf_i+0xf2>
 800854c:	0646      	lsls	r6, r0, #25
 800854e:	d5fb      	bpl.n	8008548 <_printf_i+0xe8>
 8008550:	881e      	ldrh	r6, [r3, #0]
 8008552:	2f6f      	cmp	r7, #111	; 0x6f
 8008554:	bf0c      	ite	eq
 8008556:	2308      	moveq	r3, #8
 8008558:	230a      	movne	r3, #10
 800855a:	4852      	ldr	r0, [pc, #328]	; (80086a4 <_printf_i+0x244>)
 800855c:	2100      	movs	r1, #0
 800855e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008562:	6865      	ldr	r5, [r4, #4]
 8008564:	2d00      	cmp	r5, #0
 8008566:	bfa8      	it	ge
 8008568:	6821      	ldrge	r1, [r4, #0]
 800856a:	60a5      	str	r5, [r4, #8]
 800856c:	bfa4      	itt	ge
 800856e:	f021 0104 	bicge.w	r1, r1, #4
 8008572:	6021      	strge	r1, [r4, #0]
 8008574:	b90e      	cbnz	r6, 800857a <_printf_i+0x11a>
 8008576:	2d00      	cmp	r5, #0
 8008578:	d04d      	beq.n	8008616 <_printf_i+0x1b6>
 800857a:	4615      	mov	r5, r2
 800857c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008580:	fb03 6711 	mls	r7, r3, r1, r6
 8008584:	5dc7      	ldrb	r7, [r0, r7]
 8008586:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800858a:	4637      	mov	r7, r6
 800858c:	42bb      	cmp	r3, r7
 800858e:	460e      	mov	r6, r1
 8008590:	d9f4      	bls.n	800857c <_printf_i+0x11c>
 8008592:	2b08      	cmp	r3, #8
 8008594:	d10b      	bne.n	80085ae <_printf_i+0x14e>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	07de      	lsls	r6, r3, #31
 800859a:	d508      	bpl.n	80085ae <_printf_i+0x14e>
 800859c:	6923      	ldr	r3, [r4, #16]
 800859e:	6861      	ldr	r1, [r4, #4]
 80085a0:	4299      	cmp	r1, r3
 80085a2:	bfde      	ittt	le
 80085a4:	2330      	movle	r3, #48	; 0x30
 80085a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80085ae:	1b52      	subs	r2, r2, r5
 80085b0:	6122      	str	r2, [r4, #16]
 80085b2:	464b      	mov	r3, r9
 80085b4:	4621      	mov	r1, r4
 80085b6:	4640      	mov	r0, r8
 80085b8:	f8cd a000 	str.w	sl, [sp]
 80085bc:	aa03      	add	r2, sp, #12
 80085be:	f7ff fedf 	bl	8008380 <_printf_common>
 80085c2:	3001      	adds	r0, #1
 80085c4:	d14c      	bne.n	8008660 <_printf_i+0x200>
 80085c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085ca:	b004      	add	sp, #16
 80085cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d0:	4834      	ldr	r0, [pc, #208]	; (80086a4 <_printf_i+0x244>)
 80085d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085d6:	6829      	ldr	r1, [r5, #0]
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	f851 6b04 	ldr.w	r6, [r1], #4
 80085de:	6029      	str	r1, [r5, #0]
 80085e0:	061d      	lsls	r5, r3, #24
 80085e2:	d514      	bpl.n	800860e <_printf_i+0x1ae>
 80085e4:	07df      	lsls	r7, r3, #31
 80085e6:	bf44      	itt	mi
 80085e8:	f043 0320 	orrmi.w	r3, r3, #32
 80085ec:	6023      	strmi	r3, [r4, #0]
 80085ee:	b91e      	cbnz	r6, 80085f8 <_printf_i+0x198>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	f023 0320 	bic.w	r3, r3, #32
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	2310      	movs	r3, #16
 80085fa:	e7af      	b.n	800855c <_printf_i+0xfc>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	f043 0320 	orr.w	r3, r3, #32
 8008602:	6023      	str	r3, [r4, #0]
 8008604:	2378      	movs	r3, #120	; 0x78
 8008606:	4828      	ldr	r0, [pc, #160]	; (80086a8 <_printf_i+0x248>)
 8008608:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800860c:	e7e3      	b.n	80085d6 <_printf_i+0x176>
 800860e:	0659      	lsls	r1, r3, #25
 8008610:	bf48      	it	mi
 8008612:	b2b6      	uxthmi	r6, r6
 8008614:	e7e6      	b.n	80085e4 <_printf_i+0x184>
 8008616:	4615      	mov	r5, r2
 8008618:	e7bb      	b.n	8008592 <_printf_i+0x132>
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	6826      	ldr	r6, [r4, #0]
 800861e:	1d18      	adds	r0, r3, #4
 8008620:	6961      	ldr	r1, [r4, #20]
 8008622:	6028      	str	r0, [r5, #0]
 8008624:	0635      	lsls	r5, r6, #24
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	d501      	bpl.n	800862e <_printf_i+0x1ce>
 800862a:	6019      	str	r1, [r3, #0]
 800862c:	e002      	b.n	8008634 <_printf_i+0x1d4>
 800862e:	0670      	lsls	r0, r6, #25
 8008630:	d5fb      	bpl.n	800862a <_printf_i+0x1ca>
 8008632:	8019      	strh	r1, [r3, #0]
 8008634:	2300      	movs	r3, #0
 8008636:	4615      	mov	r5, r2
 8008638:	6123      	str	r3, [r4, #16]
 800863a:	e7ba      	b.n	80085b2 <_printf_i+0x152>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	2100      	movs	r1, #0
 8008640:	1d1a      	adds	r2, r3, #4
 8008642:	602a      	str	r2, [r5, #0]
 8008644:	681d      	ldr	r5, [r3, #0]
 8008646:	6862      	ldr	r2, [r4, #4]
 8008648:	4628      	mov	r0, r5
 800864a:	f000 fed7 	bl	80093fc <memchr>
 800864e:	b108      	cbz	r0, 8008654 <_printf_i+0x1f4>
 8008650:	1b40      	subs	r0, r0, r5
 8008652:	6060      	str	r0, [r4, #4]
 8008654:	6863      	ldr	r3, [r4, #4]
 8008656:	6123      	str	r3, [r4, #16]
 8008658:	2300      	movs	r3, #0
 800865a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800865e:	e7a8      	b.n	80085b2 <_printf_i+0x152>
 8008660:	462a      	mov	r2, r5
 8008662:	4649      	mov	r1, r9
 8008664:	4640      	mov	r0, r8
 8008666:	6923      	ldr	r3, [r4, #16]
 8008668:	47d0      	blx	sl
 800866a:	3001      	adds	r0, #1
 800866c:	d0ab      	beq.n	80085c6 <_printf_i+0x166>
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	079b      	lsls	r3, r3, #30
 8008672:	d413      	bmi.n	800869c <_printf_i+0x23c>
 8008674:	68e0      	ldr	r0, [r4, #12]
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	4298      	cmp	r0, r3
 800867a:	bfb8      	it	lt
 800867c:	4618      	movlt	r0, r3
 800867e:	e7a4      	b.n	80085ca <_printf_i+0x16a>
 8008680:	2301      	movs	r3, #1
 8008682:	4632      	mov	r2, r6
 8008684:	4649      	mov	r1, r9
 8008686:	4640      	mov	r0, r8
 8008688:	47d0      	blx	sl
 800868a:	3001      	adds	r0, #1
 800868c:	d09b      	beq.n	80085c6 <_printf_i+0x166>
 800868e:	3501      	adds	r5, #1
 8008690:	68e3      	ldr	r3, [r4, #12]
 8008692:	9903      	ldr	r1, [sp, #12]
 8008694:	1a5b      	subs	r3, r3, r1
 8008696:	42ab      	cmp	r3, r5
 8008698:	dcf2      	bgt.n	8008680 <_printf_i+0x220>
 800869a:	e7eb      	b.n	8008674 <_printf_i+0x214>
 800869c:	2500      	movs	r5, #0
 800869e:	f104 0619 	add.w	r6, r4, #25
 80086a2:	e7f5      	b.n	8008690 <_printf_i+0x230>
 80086a4:	0800b2fa 	.word	0x0800b2fa
 80086a8:	0800b30b 	.word	0x0800b30b

080086ac <siprintf>:
 80086ac:	b40e      	push	{r1, r2, r3}
 80086ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086b2:	b500      	push	{lr}
 80086b4:	b09c      	sub	sp, #112	; 0x70
 80086b6:	ab1d      	add	r3, sp, #116	; 0x74
 80086b8:	9002      	str	r0, [sp, #8]
 80086ba:	9006      	str	r0, [sp, #24]
 80086bc:	9107      	str	r1, [sp, #28]
 80086be:	9104      	str	r1, [sp, #16]
 80086c0:	4808      	ldr	r0, [pc, #32]	; (80086e4 <siprintf+0x38>)
 80086c2:	4909      	ldr	r1, [pc, #36]	; (80086e8 <siprintf+0x3c>)
 80086c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c8:	9105      	str	r1, [sp, #20]
 80086ca:	6800      	ldr	r0, [r0, #0]
 80086cc:	a902      	add	r1, sp, #8
 80086ce:	9301      	str	r3, [sp, #4]
 80086d0:	f001 fb70 	bl	8009db4 <_svfiprintf_r>
 80086d4:	2200      	movs	r2, #0
 80086d6:	9b02      	ldr	r3, [sp, #8]
 80086d8:	701a      	strb	r2, [r3, #0]
 80086da:	b01c      	add	sp, #112	; 0x70
 80086dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e0:	b003      	add	sp, #12
 80086e2:	4770      	bx	lr
 80086e4:	20000040 	.word	0x20000040
 80086e8:	ffff0208 	.word	0xffff0208

080086ec <quorem>:
 80086ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f0:	6903      	ldr	r3, [r0, #16]
 80086f2:	690c      	ldr	r4, [r1, #16]
 80086f4:	4607      	mov	r7, r0
 80086f6:	42a3      	cmp	r3, r4
 80086f8:	f2c0 8082 	blt.w	8008800 <quorem+0x114>
 80086fc:	3c01      	subs	r4, #1
 80086fe:	f100 0514 	add.w	r5, r0, #20
 8008702:	f101 0814 	add.w	r8, r1, #20
 8008706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008710:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008714:	3301      	adds	r3, #1
 8008716:	429a      	cmp	r2, r3
 8008718:	fbb2 f6f3 	udiv	r6, r2, r3
 800871c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008720:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008724:	d331      	bcc.n	800878a <quorem+0x9e>
 8008726:	f04f 0e00 	mov.w	lr, #0
 800872a:	4640      	mov	r0, r8
 800872c:	46ac      	mov	ip, r5
 800872e:	46f2      	mov	sl, lr
 8008730:	f850 2b04 	ldr.w	r2, [r0], #4
 8008734:	b293      	uxth	r3, r2
 8008736:	fb06 e303 	mla	r3, r6, r3, lr
 800873a:	0c12      	lsrs	r2, r2, #16
 800873c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008740:	b29b      	uxth	r3, r3
 8008742:	fb06 e202 	mla	r2, r6, r2, lr
 8008746:	ebaa 0303 	sub.w	r3, sl, r3
 800874a:	f8dc a000 	ldr.w	sl, [ip]
 800874e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008752:	fa1f fa8a 	uxth.w	sl, sl
 8008756:	4453      	add	r3, sl
 8008758:	f8dc a000 	ldr.w	sl, [ip]
 800875c:	b292      	uxth	r2, r2
 800875e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008762:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008766:	b29b      	uxth	r3, r3
 8008768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800876c:	4581      	cmp	r9, r0
 800876e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008772:	f84c 3b04 	str.w	r3, [ip], #4
 8008776:	d2db      	bcs.n	8008730 <quorem+0x44>
 8008778:	f855 300b 	ldr.w	r3, [r5, fp]
 800877c:	b92b      	cbnz	r3, 800878a <quorem+0x9e>
 800877e:	9b01      	ldr	r3, [sp, #4]
 8008780:	3b04      	subs	r3, #4
 8008782:	429d      	cmp	r5, r3
 8008784:	461a      	mov	r2, r3
 8008786:	d32f      	bcc.n	80087e8 <quorem+0xfc>
 8008788:	613c      	str	r4, [r7, #16]
 800878a:	4638      	mov	r0, r7
 800878c:	f001 f8c2 	bl	8009914 <__mcmp>
 8008790:	2800      	cmp	r0, #0
 8008792:	db25      	blt.n	80087e0 <quorem+0xf4>
 8008794:	4628      	mov	r0, r5
 8008796:	f04f 0c00 	mov.w	ip, #0
 800879a:	3601      	adds	r6, #1
 800879c:	f858 1b04 	ldr.w	r1, [r8], #4
 80087a0:	f8d0 e000 	ldr.w	lr, [r0]
 80087a4:	b28b      	uxth	r3, r1
 80087a6:	ebac 0303 	sub.w	r3, ip, r3
 80087aa:	fa1f f28e 	uxth.w	r2, lr
 80087ae:	4413      	add	r3, r2
 80087b0:	0c0a      	lsrs	r2, r1, #16
 80087b2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087c0:	45c1      	cmp	r9, r8
 80087c2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087c6:	f840 3b04 	str.w	r3, [r0], #4
 80087ca:	d2e7      	bcs.n	800879c <quorem+0xb0>
 80087cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087d4:	b922      	cbnz	r2, 80087e0 <quorem+0xf4>
 80087d6:	3b04      	subs	r3, #4
 80087d8:	429d      	cmp	r5, r3
 80087da:	461a      	mov	r2, r3
 80087dc:	d30a      	bcc.n	80087f4 <quorem+0x108>
 80087de:	613c      	str	r4, [r7, #16]
 80087e0:	4630      	mov	r0, r6
 80087e2:	b003      	add	sp, #12
 80087e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	3b04      	subs	r3, #4
 80087ec:	2a00      	cmp	r2, #0
 80087ee:	d1cb      	bne.n	8008788 <quorem+0x9c>
 80087f0:	3c01      	subs	r4, #1
 80087f2:	e7c6      	b.n	8008782 <quorem+0x96>
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	3b04      	subs	r3, #4
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	d1f0      	bne.n	80087de <quorem+0xf2>
 80087fc:	3c01      	subs	r4, #1
 80087fe:	e7eb      	b.n	80087d8 <quorem+0xec>
 8008800:	2000      	movs	r0, #0
 8008802:	e7ee      	b.n	80087e2 <quorem+0xf6>
 8008804:	0000      	movs	r0, r0
	...

08008808 <_dtoa_r>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	4616      	mov	r6, r2
 800880e:	461f      	mov	r7, r3
 8008810:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008812:	b099      	sub	sp, #100	; 0x64
 8008814:	4605      	mov	r5, r0
 8008816:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800881a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800881e:	b974      	cbnz	r4, 800883e <_dtoa_r+0x36>
 8008820:	2010      	movs	r0, #16
 8008822:	f000 fde3 	bl	80093ec <malloc>
 8008826:	4602      	mov	r2, r0
 8008828:	6268      	str	r0, [r5, #36]	; 0x24
 800882a:	b920      	cbnz	r0, 8008836 <_dtoa_r+0x2e>
 800882c:	21ea      	movs	r1, #234	; 0xea
 800882e:	4ba8      	ldr	r3, [pc, #672]	; (8008ad0 <_dtoa_r+0x2c8>)
 8008830:	48a8      	ldr	r0, [pc, #672]	; (8008ad4 <_dtoa_r+0x2cc>)
 8008832:	f001 fbcf 	bl	8009fd4 <__assert_func>
 8008836:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800883a:	6004      	str	r4, [r0, #0]
 800883c:	60c4      	str	r4, [r0, #12]
 800883e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008840:	6819      	ldr	r1, [r3, #0]
 8008842:	b151      	cbz	r1, 800885a <_dtoa_r+0x52>
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	2301      	movs	r3, #1
 8008848:	4093      	lsls	r3, r2
 800884a:	604a      	str	r2, [r1, #4]
 800884c:	608b      	str	r3, [r1, #8]
 800884e:	4628      	mov	r0, r5
 8008850:	f000 fe22 	bl	8009498 <_Bfree>
 8008854:	2200      	movs	r2, #0
 8008856:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	1e3b      	subs	r3, r7, #0
 800885c:	bfaf      	iteee	ge
 800885e:	2300      	movge	r3, #0
 8008860:	2201      	movlt	r2, #1
 8008862:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008866:	9305      	strlt	r3, [sp, #20]
 8008868:	bfa8      	it	ge
 800886a:	f8c8 3000 	strge.w	r3, [r8]
 800886e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008872:	4b99      	ldr	r3, [pc, #612]	; (8008ad8 <_dtoa_r+0x2d0>)
 8008874:	bfb8      	it	lt
 8008876:	f8c8 2000 	strlt.w	r2, [r8]
 800887a:	ea33 0309 	bics.w	r3, r3, r9
 800887e:	d119      	bne.n	80088b4 <_dtoa_r+0xac>
 8008880:	f242 730f 	movw	r3, #9999	; 0x270f
 8008884:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800888c:	4333      	orrs	r3, r6
 800888e:	f000 857f 	beq.w	8009390 <_dtoa_r+0xb88>
 8008892:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008894:	b953      	cbnz	r3, 80088ac <_dtoa_r+0xa4>
 8008896:	4b91      	ldr	r3, [pc, #580]	; (8008adc <_dtoa_r+0x2d4>)
 8008898:	e022      	b.n	80088e0 <_dtoa_r+0xd8>
 800889a:	4b91      	ldr	r3, [pc, #580]	; (8008ae0 <_dtoa_r+0x2d8>)
 800889c:	9303      	str	r3, [sp, #12]
 800889e:	3308      	adds	r3, #8
 80088a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	9803      	ldr	r0, [sp, #12]
 80088a6:	b019      	add	sp, #100	; 0x64
 80088a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ac:	4b8b      	ldr	r3, [pc, #556]	; (8008adc <_dtoa_r+0x2d4>)
 80088ae:	9303      	str	r3, [sp, #12]
 80088b0:	3303      	adds	r3, #3
 80088b2:	e7f5      	b.n	80088a0 <_dtoa_r+0x98>
 80088b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80088b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80088bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088c0:	2200      	movs	r2, #0
 80088c2:	2300      	movs	r3, #0
 80088c4:	f7f8 f8dc 	bl	8000a80 <__aeabi_dcmpeq>
 80088c8:	4680      	mov	r8, r0
 80088ca:	b158      	cbz	r0, 80088e4 <_dtoa_r+0xdc>
 80088cc:	2301      	movs	r3, #1
 80088ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 8558 	beq.w	800938a <_dtoa_r+0xb82>
 80088da:	4882      	ldr	r0, [pc, #520]	; (8008ae4 <_dtoa_r+0x2dc>)
 80088dc:	6018      	str	r0, [r3, #0]
 80088de:	1e43      	subs	r3, r0, #1
 80088e0:	9303      	str	r3, [sp, #12]
 80088e2:	e7df      	b.n	80088a4 <_dtoa_r+0x9c>
 80088e4:	ab16      	add	r3, sp, #88	; 0x58
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	ab17      	add	r3, sp, #92	; 0x5c
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	4628      	mov	r0, r5
 80088ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80088f2:	f001 f8b7 	bl	8009a64 <__d2b>
 80088f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80088fa:	4683      	mov	fp, r0
 80088fc:	2c00      	cmp	r4, #0
 80088fe:	d07f      	beq.n	8008a00 <_dtoa_r+0x1f8>
 8008900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008906:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800890a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800890e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008912:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008916:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800891a:	2200      	movs	r2, #0
 800891c:	4b72      	ldr	r3, [pc, #456]	; (8008ae8 <_dtoa_r+0x2e0>)
 800891e:	f7f7 fc8f 	bl	8000240 <__aeabi_dsub>
 8008922:	a365      	add	r3, pc, #404	; (adr r3, 8008ab8 <_dtoa_r+0x2b0>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fe42 	bl	80005b0 <__aeabi_dmul>
 800892c:	a364      	add	r3, pc, #400	; (adr r3, 8008ac0 <_dtoa_r+0x2b8>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	f7f7 fc87 	bl	8000244 <__adddf3>
 8008936:	4606      	mov	r6, r0
 8008938:	4620      	mov	r0, r4
 800893a:	460f      	mov	r7, r1
 800893c:	f7f7 fdce 	bl	80004dc <__aeabi_i2d>
 8008940:	a361      	add	r3, pc, #388	; (adr r3, 8008ac8 <_dtoa_r+0x2c0>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f7f7 fe33 	bl	80005b0 <__aeabi_dmul>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4630      	mov	r0, r6
 8008950:	4639      	mov	r1, r7
 8008952:	f7f7 fc77 	bl	8000244 <__adddf3>
 8008956:	4606      	mov	r6, r0
 8008958:	460f      	mov	r7, r1
 800895a:	f7f8 f8d9 	bl	8000b10 <__aeabi_d2iz>
 800895e:	2200      	movs	r2, #0
 8008960:	4682      	mov	sl, r0
 8008962:	2300      	movs	r3, #0
 8008964:	4630      	mov	r0, r6
 8008966:	4639      	mov	r1, r7
 8008968:	f7f8 f894 	bl	8000a94 <__aeabi_dcmplt>
 800896c:	b148      	cbz	r0, 8008982 <_dtoa_r+0x17a>
 800896e:	4650      	mov	r0, sl
 8008970:	f7f7 fdb4 	bl	80004dc <__aeabi_i2d>
 8008974:	4632      	mov	r2, r6
 8008976:	463b      	mov	r3, r7
 8008978:	f7f8 f882 	bl	8000a80 <__aeabi_dcmpeq>
 800897c:	b908      	cbnz	r0, 8008982 <_dtoa_r+0x17a>
 800897e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008982:	f1ba 0f16 	cmp.w	sl, #22
 8008986:	d858      	bhi.n	8008a3a <_dtoa_r+0x232>
 8008988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800898c:	4b57      	ldr	r3, [pc, #348]	; (8008aec <_dtoa_r+0x2e4>)
 800898e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f7f8 f87d 	bl	8000a94 <__aeabi_dcmplt>
 800899a:	2800      	cmp	r0, #0
 800899c:	d04f      	beq.n	8008a3e <_dtoa_r+0x236>
 800899e:	2300      	movs	r3, #0
 80089a0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80089a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80089a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80089a8:	1b1c      	subs	r4, r3, r4
 80089aa:	1e63      	subs	r3, r4, #1
 80089ac:	9309      	str	r3, [sp, #36]	; 0x24
 80089ae:	bf49      	itett	mi
 80089b0:	f1c4 0301 	rsbmi	r3, r4, #1
 80089b4:	2300      	movpl	r3, #0
 80089b6:	9306      	strmi	r3, [sp, #24]
 80089b8:	2300      	movmi	r3, #0
 80089ba:	bf54      	ite	pl
 80089bc:	9306      	strpl	r3, [sp, #24]
 80089be:	9309      	strmi	r3, [sp, #36]	; 0x24
 80089c0:	f1ba 0f00 	cmp.w	sl, #0
 80089c4:	db3d      	blt.n	8008a42 <_dtoa_r+0x23a>
 80089c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80089cc:	4453      	add	r3, sl
 80089ce:	9309      	str	r3, [sp, #36]	; 0x24
 80089d0:	2300      	movs	r3, #0
 80089d2:	930a      	str	r3, [sp, #40]	; 0x28
 80089d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	f200 808c 	bhi.w	8008af4 <_dtoa_r+0x2ec>
 80089dc:	2b05      	cmp	r3, #5
 80089de:	bfc4      	itt	gt
 80089e0:	3b04      	subgt	r3, #4
 80089e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80089e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089e6:	bfc8      	it	gt
 80089e8:	2400      	movgt	r4, #0
 80089ea:	f1a3 0302 	sub.w	r3, r3, #2
 80089ee:	bfd8      	it	le
 80089f0:	2401      	movle	r4, #1
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	f200 808a 	bhi.w	8008b0c <_dtoa_r+0x304>
 80089f8:	e8df f003 	tbb	[pc, r3]
 80089fc:	5b4d4f2d 	.word	0x5b4d4f2d
 8008a00:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008a04:	441c      	add	r4, r3
 8008a06:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008a0a:	2b20      	cmp	r3, #32
 8008a0c:	bfc3      	ittte	gt
 8008a0e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a12:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008a16:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a1a:	f1c3 0320 	rsble	r3, r3, #32
 8008a1e:	bfc6      	itte	gt
 8008a20:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a24:	4318      	orrgt	r0, r3
 8008a26:	fa06 f003 	lslle.w	r0, r6, r3
 8008a2a:	f7f7 fd47 	bl	80004bc <__aeabi_ui2d>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008a34:	3c01      	subs	r4, #1
 8008a36:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a38:	e76f      	b.n	800891a <_dtoa_r+0x112>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e7b2      	b.n	80089a4 <_dtoa_r+0x19c>
 8008a3e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a40:	e7b1      	b.n	80089a6 <_dtoa_r+0x19e>
 8008a42:	9b06      	ldr	r3, [sp, #24]
 8008a44:	eba3 030a 	sub.w	r3, r3, sl
 8008a48:	9306      	str	r3, [sp, #24]
 8008a4a:	f1ca 0300 	rsb	r3, sl, #0
 8008a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a50:	2300      	movs	r3, #0
 8008a52:	930e      	str	r3, [sp, #56]	; 0x38
 8008a54:	e7be      	b.n	80089d4 <_dtoa_r+0x1cc>
 8008a56:	2300      	movs	r3, #0
 8008a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	dc58      	bgt.n	8008b12 <_dtoa_r+0x30a>
 8008a60:	f04f 0901 	mov.w	r9, #1
 8008a64:	464b      	mov	r3, r9
 8008a66:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a6a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008a6e:	2200      	movs	r2, #0
 8008a70:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008a72:	6042      	str	r2, [r0, #4]
 8008a74:	2204      	movs	r2, #4
 8008a76:	f102 0614 	add.w	r6, r2, #20
 8008a7a:	429e      	cmp	r6, r3
 8008a7c:	6841      	ldr	r1, [r0, #4]
 8008a7e:	d94e      	bls.n	8008b1e <_dtoa_r+0x316>
 8008a80:	4628      	mov	r0, r5
 8008a82:	f000 fcc9 	bl	8009418 <_Balloc>
 8008a86:	9003      	str	r0, [sp, #12]
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d14c      	bne.n	8008b26 <_dtoa_r+0x31e>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a92:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <_dtoa_r+0x2e8>)
 8008a94:	e6cc      	b.n	8008830 <_dtoa_r+0x28>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e7de      	b.n	8008a58 <_dtoa_r+0x250>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008aa0:	eb0a 0903 	add.w	r9, sl, r3
 8008aa4:	f109 0301 	add.w	r3, r9, #1
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	9308      	str	r3, [sp, #32]
 8008aac:	bfb8      	it	lt
 8008aae:	2301      	movlt	r3, #1
 8008ab0:	e7dd      	b.n	8008a6e <_dtoa_r+0x266>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e7f2      	b.n	8008a9c <_dtoa_r+0x294>
 8008ab6:	bf00      	nop
 8008ab8:	636f4361 	.word	0x636f4361
 8008abc:	3fd287a7 	.word	0x3fd287a7
 8008ac0:	8b60c8b3 	.word	0x8b60c8b3
 8008ac4:	3fc68a28 	.word	0x3fc68a28
 8008ac8:	509f79fb 	.word	0x509f79fb
 8008acc:	3fd34413 	.word	0x3fd34413
 8008ad0:	0800b329 	.word	0x0800b329
 8008ad4:	0800b340 	.word	0x0800b340
 8008ad8:	7ff00000 	.word	0x7ff00000
 8008adc:	0800b325 	.word	0x0800b325
 8008ae0:	0800b31c 	.word	0x0800b31c
 8008ae4:	0800b2f9 	.word	0x0800b2f9
 8008ae8:	3ff80000 	.word	0x3ff80000
 8008aec:	0800b430 	.word	0x0800b430
 8008af0:	0800b39b 	.word	0x0800b39b
 8008af4:	2401      	movs	r4, #1
 8008af6:	2300      	movs	r3, #0
 8008af8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008afa:	9322      	str	r3, [sp, #136]	; 0x88
 8008afc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008b00:	2200      	movs	r2, #0
 8008b02:	2312      	movs	r3, #18
 8008b04:	f8cd 9020 	str.w	r9, [sp, #32]
 8008b08:	9223      	str	r2, [sp, #140]	; 0x8c
 8008b0a:	e7b0      	b.n	8008a6e <_dtoa_r+0x266>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b10:	e7f4      	b.n	8008afc <_dtoa_r+0x2f4>
 8008b12:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008b16:	464b      	mov	r3, r9
 8008b18:	f8cd 9020 	str.w	r9, [sp, #32]
 8008b1c:	e7a7      	b.n	8008a6e <_dtoa_r+0x266>
 8008b1e:	3101      	adds	r1, #1
 8008b20:	6041      	str	r1, [r0, #4]
 8008b22:	0052      	lsls	r2, r2, #1
 8008b24:	e7a7      	b.n	8008a76 <_dtoa_r+0x26e>
 8008b26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b28:	9a03      	ldr	r2, [sp, #12]
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	9b08      	ldr	r3, [sp, #32]
 8008b2e:	2b0e      	cmp	r3, #14
 8008b30:	f200 80a8 	bhi.w	8008c84 <_dtoa_r+0x47c>
 8008b34:	2c00      	cmp	r4, #0
 8008b36:	f000 80a5 	beq.w	8008c84 <_dtoa_r+0x47c>
 8008b3a:	f1ba 0f00 	cmp.w	sl, #0
 8008b3e:	dd34      	ble.n	8008baa <_dtoa_r+0x3a2>
 8008b40:	4a9a      	ldr	r2, [pc, #616]	; (8008dac <_dtoa_r+0x5a4>)
 8008b42:	f00a 030f 	and.w	r3, sl, #15
 8008b46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b4a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008b4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008b56:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008b5a:	d016      	beq.n	8008b8a <_dtoa_r+0x382>
 8008b5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b60:	4b93      	ldr	r3, [pc, #588]	; (8008db0 <_dtoa_r+0x5a8>)
 8008b62:	2703      	movs	r7, #3
 8008b64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b68:	f7f7 fe4c 	bl	8000804 <__aeabi_ddiv>
 8008b6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b70:	f004 040f 	and.w	r4, r4, #15
 8008b74:	4e8e      	ldr	r6, [pc, #568]	; (8008db0 <_dtoa_r+0x5a8>)
 8008b76:	b954      	cbnz	r4, 8008b8e <_dtoa_r+0x386>
 8008b78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b80:	f7f7 fe40 	bl	8000804 <__aeabi_ddiv>
 8008b84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b88:	e029      	b.n	8008bde <_dtoa_r+0x3d6>
 8008b8a:	2702      	movs	r7, #2
 8008b8c:	e7f2      	b.n	8008b74 <_dtoa_r+0x36c>
 8008b8e:	07e1      	lsls	r1, r4, #31
 8008b90:	d508      	bpl.n	8008ba4 <_dtoa_r+0x39c>
 8008b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b9a:	f7f7 fd09 	bl	80005b0 <__aeabi_dmul>
 8008b9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ba2:	3701      	adds	r7, #1
 8008ba4:	1064      	asrs	r4, r4, #1
 8008ba6:	3608      	adds	r6, #8
 8008ba8:	e7e5      	b.n	8008b76 <_dtoa_r+0x36e>
 8008baa:	f000 80a5 	beq.w	8008cf8 <_dtoa_r+0x4f0>
 8008bae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bb2:	f1ca 0400 	rsb	r4, sl, #0
 8008bb6:	4b7d      	ldr	r3, [pc, #500]	; (8008dac <_dtoa_r+0x5a4>)
 8008bb8:	f004 020f 	and.w	r2, r4, #15
 8008bbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fcf4 	bl	80005b0 <__aeabi_dmul>
 8008bc8:	2702      	movs	r7, #2
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bd0:	4e77      	ldr	r6, [pc, #476]	; (8008db0 <_dtoa_r+0x5a8>)
 8008bd2:	1124      	asrs	r4, r4, #4
 8008bd4:	2c00      	cmp	r4, #0
 8008bd6:	f040 8084 	bne.w	8008ce2 <_dtoa_r+0x4da>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1d2      	bne.n	8008b84 <_dtoa_r+0x37c>
 8008bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 808b 	beq.w	8008cfc <_dtoa_r+0x4f4>
 8008be6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008bea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008bee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	4b6f      	ldr	r3, [pc, #444]	; (8008db4 <_dtoa_r+0x5ac>)
 8008bf6:	f7f7 ff4d 	bl	8000a94 <__aeabi_dcmplt>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d07e      	beq.n	8008cfc <_dtoa_r+0x4f4>
 8008bfe:	9b08      	ldr	r3, [sp, #32]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d07b      	beq.n	8008cfc <_dtoa_r+0x4f4>
 8008c04:	f1b9 0f00 	cmp.w	r9, #0
 8008c08:	dd38      	ble.n	8008c7c <_dtoa_r+0x474>
 8008c0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c0e:	2200      	movs	r2, #0
 8008c10:	4b69      	ldr	r3, [pc, #420]	; (8008db8 <_dtoa_r+0x5b0>)
 8008c12:	f7f7 fccd 	bl	80005b0 <__aeabi_dmul>
 8008c16:	464c      	mov	r4, r9
 8008c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c1c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8008c20:	3701      	adds	r7, #1
 8008c22:	4638      	mov	r0, r7
 8008c24:	f7f7 fc5a 	bl	80004dc <__aeabi_i2d>
 8008c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c2c:	f7f7 fcc0 	bl	80005b0 <__aeabi_dmul>
 8008c30:	2200      	movs	r2, #0
 8008c32:	4b62      	ldr	r3, [pc, #392]	; (8008dbc <_dtoa_r+0x5b4>)
 8008c34:	f7f7 fb06 	bl	8000244 <__adddf3>
 8008c38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c40:	9611      	str	r6, [sp, #68]	; 0x44
 8008c42:	2c00      	cmp	r4, #0
 8008c44:	d15d      	bne.n	8008d02 <_dtoa_r+0x4fa>
 8008c46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	4b5c      	ldr	r3, [pc, #368]	; (8008dc0 <_dtoa_r+0x5b8>)
 8008c4e:	f7f7 faf7 	bl	8000240 <__aeabi_dsub>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c5a:	4633      	mov	r3, r6
 8008c5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c5e:	f7f7 ff37 	bl	8000ad0 <__aeabi_dcmpgt>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	f040 829c 	bne.w	80091a0 <_dtoa_r+0x998>
 8008c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c6e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008c72:	f7f7 ff0f 	bl	8000a94 <__aeabi_dcmplt>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	f040 8290 	bne.w	800919c <_dtoa_r+0x994>
 8008c7c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008c80:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f2c0 8152 	blt.w	8008f30 <_dtoa_r+0x728>
 8008c8c:	f1ba 0f0e 	cmp.w	sl, #14
 8008c90:	f300 814e 	bgt.w	8008f30 <_dtoa_r+0x728>
 8008c94:	4b45      	ldr	r3, [pc, #276]	; (8008dac <_dtoa_r+0x5a4>)
 8008c96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c9e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008ca2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f280 80db 	bge.w	8008e60 <_dtoa_r+0x658>
 8008caa:	9b08      	ldr	r3, [sp, #32]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f300 80d7 	bgt.w	8008e60 <_dtoa_r+0x658>
 8008cb2:	f040 8272 	bne.w	800919a <_dtoa_r+0x992>
 8008cb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	4b40      	ldr	r3, [pc, #256]	; (8008dc0 <_dtoa_r+0x5b8>)
 8008cbe:	f7f7 fc77 	bl	80005b0 <__aeabi_dmul>
 8008cc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cc6:	f7f7 fef9 	bl	8000abc <__aeabi_dcmpge>
 8008cca:	9c08      	ldr	r4, [sp, #32]
 8008ccc:	4626      	mov	r6, r4
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	f040 8248 	bne.w	8009164 <_dtoa_r+0x95c>
 8008cd4:	2331      	movs	r3, #49	; 0x31
 8008cd6:	9f03      	ldr	r7, [sp, #12]
 8008cd8:	f10a 0a01 	add.w	sl, sl, #1
 8008cdc:	f807 3b01 	strb.w	r3, [r7], #1
 8008ce0:	e244      	b.n	800916c <_dtoa_r+0x964>
 8008ce2:	07e2      	lsls	r2, r4, #31
 8008ce4:	d505      	bpl.n	8008cf2 <_dtoa_r+0x4ea>
 8008ce6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cea:	f7f7 fc61 	bl	80005b0 <__aeabi_dmul>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	3701      	adds	r7, #1
 8008cf2:	1064      	asrs	r4, r4, #1
 8008cf4:	3608      	adds	r6, #8
 8008cf6:	e76d      	b.n	8008bd4 <_dtoa_r+0x3cc>
 8008cf8:	2702      	movs	r7, #2
 8008cfa:	e770      	b.n	8008bde <_dtoa_r+0x3d6>
 8008cfc:	46d0      	mov	r8, sl
 8008cfe:	9c08      	ldr	r4, [sp, #32]
 8008d00:	e78f      	b.n	8008c22 <_dtoa_r+0x41a>
 8008d02:	9903      	ldr	r1, [sp, #12]
 8008d04:	4b29      	ldr	r3, [pc, #164]	; (8008dac <_dtoa_r+0x5a4>)
 8008d06:	4421      	add	r1, r4
 8008d08:	9112      	str	r1, [sp, #72]	; 0x48
 8008d0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d10:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008d14:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d18:	2900      	cmp	r1, #0
 8008d1a:	d055      	beq.n	8008dc8 <_dtoa_r+0x5c0>
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	4929      	ldr	r1, [pc, #164]	; (8008dc4 <_dtoa_r+0x5bc>)
 8008d20:	f7f7 fd70 	bl	8000804 <__aeabi_ddiv>
 8008d24:	463b      	mov	r3, r7
 8008d26:	4632      	mov	r2, r6
 8008d28:	f7f7 fa8a 	bl	8000240 <__aeabi_dsub>
 8008d2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d30:	9f03      	ldr	r7, [sp, #12]
 8008d32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d36:	f7f7 feeb 	bl	8000b10 <__aeabi_d2iz>
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	f7f7 fbce 	bl	80004dc <__aeabi_i2d>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d48:	f7f7 fa7a 	bl	8000240 <__aeabi_dsub>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	3430      	adds	r4, #48	; 0x30
 8008d52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d5a:	f807 4b01 	strb.w	r4, [r7], #1
 8008d5e:	f7f7 fe99 	bl	8000a94 <__aeabi_dcmplt>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d174      	bne.n	8008e50 <_dtoa_r+0x648>
 8008d66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	4911      	ldr	r1, [pc, #68]	; (8008db4 <_dtoa_r+0x5ac>)
 8008d6e:	f7f7 fa67 	bl	8000240 <__aeabi_dsub>
 8008d72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d76:	f7f7 fe8d 	bl	8000a94 <__aeabi_dcmplt>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	f040 80b7 	bne.w	8008eee <_dtoa_r+0x6e6>
 8008d80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d82:	429f      	cmp	r7, r3
 8008d84:	f43f af7a 	beq.w	8008c7c <_dtoa_r+0x474>
 8008d88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <_dtoa_r+0x5b0>)
 8008d90:	f7f7 fc0e 	bl	80005b0 <__aeabi_dmul>
 8008d94:	2200      	movs	r2, #0
 8008d96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d9e:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <_dtoa_r+0x5b0>)
 8008da0:	f7f7 fc06 	bl	80005b0 <__aeabi_dmul>
 8008da4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008da8:	e7c3      	b.n	8008d32 <_dtoa_r+0x52a>
 8008daa:	bf00      	nop
 8008dac:	0800b430 	.word	0x0800b430
 8008db0:	0800b408 	.word	0x0800b408
 8008db4:	3ff00000 	.word	0x3ff00000
 8008db8:	40240000 	.word	0x40240000
 8008dbc:	401c0000 	.word	0x401c0000
 8008dc0:	40140000 	.word	0x40140000
 8008dc4:	3fe00000 	.word	0x3fe00000
 8008dc8:	4630      	mov	r0, r6
 8008dca:	4639      	mov	r1, r7
 8008dcc:	f7f7 fbf0 	bl	80005b0 <__aeabi_dmul>
 8008dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008dd6:	9c03      	ldr	r4, [sp, #12]
 8008dd8:	9314      	str	r3, [sp, #80]	; 0x50
 8008dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dde:	f7f7 fe97 	bl	8000b10 <__aeabi_d2iz>
 8008de2:	9015      	str	r0, [sp, #84]	; 0x54
 8008de4:	f7f7 fb7a 	bl	80004dc <__aeabi_i2d>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008df0:	f7f7 fa26 	bl	8000240 <__aeabi_dsub>
 8008df4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008df6:	4606      	mov	r6, r0
 8008df8:	3330      	adds	r3, #48	; 0x30
 8008dfa:	f804 3b01 	strb.w	r3, [r4], #1
 8008dfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e00:	460f      	mov	r7, r1
 8008e02:	429c      	cmp	r4, r3
 8008e04:	f04f 0200 	mov.w	r2, #0
 8008e08:	d124      	bne.n	8008e54 <_dtoa_r+0x64c>
 8008e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e0e:	4bb0      	ldr	r3, [pc, #704]	; (80090d0 <_dtoa_r+0x8c8>)
 8008e10:	f7f7 fa18 	bl	8000244 <__adddf3>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4630      	mov	r0, r6
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	f7f7 fe58 	bl	8000ad0 <__aeabi_dcmpgt>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d163      	bne.n	8008eec <_dtoa_r+0x6e4>
 8008e24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e28:	2000      	movs	r0, #0
 8008e2a:	49a9      	ldr	r1, [pc, #676]	; (80090d0 <_dtoa_r+0x8c8>)
 8008e2c:	f7f7 fa08 	bl	8000240 <__aeabi_dsub>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	4630      	mov	r0, r6
 8008e36:	4639      	mov	r1, r7
 8008e38:	f7f7 fe2c 	bl	8000a94 <__aeabi_dcmplt>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	f43f af1d 	beq.w	8008c7c <_dtoa_r+0x474>
 8008e42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008e44:	1e7b      	subs	r3, r7, #1
 8008e46:	9314      	str	r3, [sp, #80]	; 0x50
 8008e48:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008e4c:	2b30      	cmp	r3, #48	; 0x30
 8008e4e:	d0f8      	beq.n	8008e42 <_dtoa_r+0x63a>
 8008e50:	46c2      	mov	sl, r8
 8008e52:	e03b      	b.n	8008ecc <_dtoa_r+0x6c4>
 8008e54:	4b9f      	ldr	r3, [pc, #636]	; (80090d4 <_dtoa_r+0x8cc>)
 8008e56:	f7f7 fbab 	bl	80005b0 <__aeabi_dmul>
 8008e5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e5e:	e7bc      	b.n	8008dda <_dtoa_r+0x5d2>
 8008e60:	9f03      	ldr	r7, [sp, #12]
 8008e62:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	f7f7 fcc9 	bl	8000804 <__aeabi_ddiv>
 8008e72:	f7f7 fe4d 	bl	8000b10 <__aeabi_d2iz>
 8008e76:	4604      	mov	r4, r0
 8008e78:	f7f7 fb30 	bl	80004dc <__aeabi_i2d>
 8008e7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e80:	f7f7 fb96 	bl	80005b0 <__aeabi_dmul>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4640      	mov	r0, r8
 8008e8a:	4649      	mov	r1, r9
 8008e8c:	f7f7 f9d8 	bl	8000240 <__aeabi_dsub>
 8008e90:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008e94:	f807 6b01 	strb.w	r6, [r7], #1
 8008e98:	9e03      	ldr	r6, [sp, #12]
 8008e9a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008e9e:	1bbe      	subs	r6, r7, r6
 8008ea0:	45b4      	cmp	ip, r6
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	d136      	bne.n	8008f16 <_dtoa_r+0x70e>
 8008ea8:	f7f7 f9cc 	bl	8000244 <__adddf3>
 8008eac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008eb0:	4680      	mov	r8, r0
 8008eb2:	4689      	mov	r9, r1
 8008eb4:	f7f7 fe0c 	bl	8000ad0 <__aeabi_dcmpgt>
 8008eb8:	bb58      	cbnz	r0, 8008f12 <_dtoa_r+0x70a>
 8008eba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ebe:	4640      	mov	r0, r8
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	f7f7 fddd 	bl	8000a80 <__aeabi_dcmpeq>
 8008ec6:	b108      	cbz	r0, 8008ecc <_dtoa_r+0x6c4>
 8008ec8:	07e1      	lsls	r1, r4, #31
 8008eca:	d422      	bmi.n	8008f12 <_dtoa_r+0x70a>
 8008ecc:	4628      	mov	r0, r5
 8008ece:	4659      	mov	r1, fp
 8008ed0:	f000 fae2 	bl	8009498 <_Bfree>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	703b      	strb	r3, [r7, #0]
 8008ed8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008eda:	f10a 0001 	add.w	r0, sl, #1
 8008ede:	6018      	str	r0, [r3, #0]
 8008ee0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f43f acde 	beq.w	80088a4 <_dtoa_r+0x9c>
 8008ee8:	601f      	str	r7, [r3, #0]
 8008eea:	e4db      	b.n	80088a4 <_dtoa_r+0x9c>
 8008eec:	4627      	mov	r7, r4
 8008eee:	463b      	mov	r3, r7
 8008ef0:	461f      	mov	r7, r3
 8008ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ef6:	2a39      	cmp	r2, #57	; 0x39
 8008ef8:	d107      	bne.n	8008f0a <_dtoa_r+0x702>
 8008efa:	9a03      	ldr	r2, [sp, #12]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d1f7      	bne.n	8008ef0 <_dtoa_r+0x6e8>
 8008f00:	2230      	movs	r2, #48	; 0x30
 8008f02:	9903      	ldr	r1, [sp, #12]
 8008f04:	f108 0801 	add.w	r8, r8, #1
 8008f08:	700a      	strb	r2, [r1, #0]
 8008f0a:	781a      	ldrb	r2, [r3, #0]
 8008f0c:	3201      	adds	r2, #1
 8008f0e:	701a      	strb	r2, [r3, #0]
 8008f10:	e79e      	b.n	8008e50 <_dtoa_r+0x648>
 8008f12:	46d0      	mov	r8, sl
 8008f14:	e7eb      	b.n	8008eee <_dtoa_r+0x6e6>
 8008f16:	2200      	movs	r2, #0
 8008f18:	4b6e      	ldr	r3, [pc, #440]	; (80090d4 <_dtoa_r+0x8cc>)
 8008f1a:	f7f7 fb49 	bl	80005b0 <__aeabi_dmul>
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2300      	movs	r3, #0
 8008f22:	4680      	mov	r8, r0
 8008f24:	4689      	mov	r9, r1
 8008f26:	f7f7 fdab 	bl	8000a80 <__aeabi_dcmpeq>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d09b      	beq.n	8008e66 <_dtoa_r+0x65e>
 8008f2e:	e7cd      	b.n	8008ecc <_dtoa_r+0x6c4>
 8008f30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f32:	2a00      	cmp	r2, #0
 8008f34:	f000 80d0 	beq.w	80090d8 <_dtoa_r+0x8d0>
 8008f38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008f3a:	2a01      	cmp	r2, #1
 8008f3c:	f300 80ae 	bgt.w	800909c <_dtoa_r+0x894>
 8008f40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f42:	2a00      	cmp	r2, #0
 8008f44:	f000 80a6 	beq.w	8009094 <_dtoa_r+0x88c>
 8008f48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f4e:	9f06      	ldr	r7, [sp, #24]
 8008f50:	9a06      	ldr	r2, [sp, #24]
 8008f52:	2101      	movs	r1, #1
 8008f54:	441a      	add	r2, r3
 8008f56:	9206      	str	r2, [sp, #24]
 8008f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	441a      	add	r2, r3
 8008f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f60:	f000 fb50 	bl	8009604 <__i2b>
 8008f64:	4606      	mov	r6, r0
 8008f66:	2f00      	cmp	r7, #0
 8008f68:	dd0c      	ble.n	8008f84 <_dtoa_r+0x77c>
 8008f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	dd09      	ble.n	8008f84 <_dtoa_r+0x77c>
 8008f70:	42bb      	cmp	r3, r7
 8008f72:	bfa8      	it	ge
 8008f74:	463b      	movge	r3, r7
 8008f76:	9a06      	ldr	r2, [sp, #24]
 8008f78:	1aff      	subs	r7, r7, r3
 8008f7a:	1ad2      	subs	r2, r2, r3
 8008f7c:	9206      	str	r2, [sp, #24]
 8008f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	9309      	str	r3, [sp, #36]	; 0x24
 8008f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f86:	b1f3      	cbz	r3, 8008fc6 <_dtoa_r+0x7be>
 8008f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 80a8 	beq.w	80090e0 <_dtoa_r+0x8d8>
 8008f90:	2c00      	cmp	r4, #0
 8008f92:	dd10      	ble.n	8008fb6 <_dtoa_r+0x7ae>
 8008f94:	4631      	mov	r1, r6
 8008f96:	4622      	mov	r2, r4
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f000 fbf1 	bl	8009780 <__pow5mult>
 8008f9e:	465a      	mov	r2, fp
 8008fa0:	4601      	mov	r1, r0
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 fb43 	bl	8009630 <__multiply>
 8008faa:	4680      	mov	r8, r0
 8008fac:	4659      	mov	r1, fp
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f000 fa72 	bl	8009498 <_Bfree>
 8008fb4:	46c3      	mov	fp, r8
 8008fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fb8:	1b1a      	subs	r2, r3, r4
 8008fba:	d004      	beq.n	8008fc6 <_dtoa_r+0x7be>
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f000 fbde 	bl	8009780 <__pow5mult>
 8008fc4:	4683      	mov	fp, r0
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f000 fb1b 	bl	8009604 <__i2b>
 8008fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f340 8086 	ble.w	80090e4 <_dtoa_r+0x8dc>
 8008fd8:	461a      	mov	r2, r3
 8008fda:	4601      	mov	r1, r0
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 fbcf 	bl	8009780 <__pow5mult>
 8008fe2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	dd7f      	ble.n	80090ea <_dtoa_r+0x8e2>
 8008fea:	f04f 0800 	mov.w	r8, #0
 8008fee:	6923      	ldr	r3, [r4, #16]
 8008ff0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ff4:	6918      	ldr	r0, [r3, #16]
 8008ff6:	f000 fab7 	bl	8009568 <__hi0bits>
 8008ffa:	f1c0 0020 	rsb	r0, r0, #32
 8008ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009000:	4418      	add	r0, r3
 8009002:	f010 001f 	ands.w	r0, r0, #31
 8009006:	f000 8092 	beq.w	800912e <_dtoa_r+0x926>
 800900a:	f1c0 0320 	rsb	r3, r0, #32
 800900e:	2b04      	cmp	r3, #4
 8009010:	f340 808a 	ble.w	8009128 <_dtoa_r+0x920>
 8009014:	f1c0 001c 	rsb	r0, r0, #28
 8009018:	9b06      	ldr	r3, [sp, #24]
 800901a:	4407      	add	r7, r0
 800901c:	4403      	add	r3, r0
 800901e:	9306      	str	r3, [sp, #24]
 8009020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009022:	4403      	add	r3, r0
 8009024:	9309      	str	r3, [sp, #36]	; 0x24
 8009026:	9b06      	ldr	r3, [sp, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	dd05      	ble.n	8009038 <_dtoa_r+0x830>
 800902c:	4659      	mov	r1, fp
 800902e:	461a      	mov	r2, r3
 8009030:	4628      	mov	r0, r5
 8009032:	f000 fbff 	bl	8009834 <__lshift>
 8009036:	4683      	mov	fp, r0
 8009038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903a:	2b00      	cmp	r3, #0
 800903c:	dd05      	ble.n	800904a <_dtoa_r+0x842>
 800903e:	4621      	mov	r1, r4
 8009040:	461a      	mov	r2, r3
 8009042:	4628      	mov	r0, r5
 8009044:	f000 fbf6 	bl	8009834 <__lshift>
 8009048:	4604      	mov	r4, r0
 800904a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d070      	beq.n	8009132 <_dtoa_r+0x92a>
 8009050:	4621      	mov	r1, r4
 8009052:	4658      	mov	r0, fp
 8009054:	f000 fc5e 	bl	8009914 <__mcmp>
 8009058:	2800      	cmp	r0, #0
 800905a:	da6a      	bge.n	8009132 <_dtoa_r+0x92a>
 800905c:	2300      	movs	r3, #0
 800905e:	4659      	mov	r1, fp
 8009060:	220a      	movs	r2, #10
 8009062:	4628      	mov	r0, r5
 8009064:	f000 fa3a 	bl	80094dc <__multadd>
 8009068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800906a:	4683      	mov	fp, r0
 800906c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8194 	beq.w	800939e <_dtoa_r+0xb96>
 8009076:	4631      	mov	r1, r6
 8009078:	2300      	movs	r3, #0
 800907a:	220a      	movs	r2, #10
 800907c:	4628      	mov	r0, r5
 800907e:	f000 fa2d 	bl	80094dc <__multadd>
 8009082:	f1b9 0f00 	cmp.w	r9, #0
 8009086:	4606      	mov	r6, r0
 8009088:	f300 8093 	bgt.w	80091b2 <_dtoa_r+0x9aa>
 800908c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800908e:	2b02      	cmp	r3, #2
 8009090:	dc57      	bgt.n	8009142 <_dtoa_r+0x93a>
 8009092:	e08e      	b.n	80091b2 <_dtoa_r+0x9aa>
 8009094:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009096:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800909a:	e757      	b.n	8008f4c <_dtoa_r+0x744>
 800909c:	9b08      	ldr	r3, [sp, #32]
 800909e:	1e5c      	subs	r4, r3, #1
 80090a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a2:	42a3      	cmp	r3, r4
 80090a4:	bfb7      	itett	lt
 80090a6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80090a8:	1b1c      	subge	r4, r3, r4
 80090aa:	1ae2      	sublt	r2, r4, r3
 80090ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80090ae:	bfbe      	ittt	lt
 80090b0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80090b2:	189b      	addlt	r3, r3, r2
 80090b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80090b6:	9b08      	ldr	r3, [sp, #32]
 80090b8:	bfb8      	it	lt
 80090ba:	2400      	movlt	r4, #0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bfbb      	ittet	lt
 80090c0:	9b06      	ldrlt	r3, [sp, #24]
 80090c2:	9a08      	ldrlt	r2, [sp, #32]
 80090c4:	9f06      	ldrge	r7, [sp, #24]
 80090c6:	1a9f      	sublt	r7, r3, r2
 80090c8:	bfac      	ite	ge
 80090ca:	9b08      	ldrge	r3, [sp, #32]
 80090cc:	2300      	movlt	r3, #0
 80090ce:	e73f      	b.n	8008f50 <_dtoa_r+0x748>
 80090d0:	3fe00000 	.word	0x3fe00000
 80090d4:	40240000 	.word	0x40240000
 80090d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80090da:	9f06      	ldr	r7, [sp, #24]
 80090dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80090de:	e742      	b.n	8008f66 <_dtoa_r+0x75e>
 80090e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090e2:	e76b      	b.n	8008fbc <_dtoa_r+0x7b4>
 80090e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	dc19      	bgt.n	800911e <_dtoa_r+0x916>
 80090ea:	9b04      	ldr	r3, [sp, #16]
 80090ec:	b9bb      	cbnz	r3, 800911e <_dtoa_r+0x916>
 80090ee:	9b05      	ldr	r3, [sp, #20]
 80090f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090f4:	b99b      	cbnz	r3, 800911e <_dtoa_r+0x916>
 80090f6:	9b05      	ldr	r3, [sp, #20]
 80090f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090fc:	0d1b      	lsrs	r3, r3, #20
 80090fe:	051b      	lsls	r3, r3, #20
 8009100:	b183      	cbz	r3, 8009124 <_dtoa_r+0x91c>
 8009102:	f04f 0801 	mov.w	r8, #1
 8009106:	9b06      	ldr	r3, [sp, #24]
 8009108:	3301      	adds	r3, #1
 800910a:	9306      	str	r3, [sp, #24]
 800910c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910e:	3301      	adds	r3, #1
 8009110:	9309      	str	r3, [sp, #36]	; 0x24
 8009112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009114:	2b00      	cmp	r3, #0
 8009116:	f47f af6a 	bne.w	8008fee <_dtoa_r+0x7e6>
 800911a:	2001      	movs	r0, #1
 800911c:	e76f      	b.n	8008ffe <_dtoa_r+0x7f6>
 800911e:	f04f 0800 	mov.w	r8, #0
 8009122:	e7f6      	b.n	8009112 <_dtoa_r+0x90a>
 8009124:	4698      	mov	r8, r3
 8009126:	e7f4      	b.n	8009112 <_dtoa_r+0x90a>
 8009128:	f43f af7d 	beq.w	8009026 <_dtoa_r+0x81e>
 800912c:	4618      	mov	r0, r3
 800912e:	301c      	adds	r0, #28
 8009130:	e772      	b.n	8009018 <_dtoa_r+0x810>
 8009132:	9b08      	ldr	r3, [sp, #32]
 8009134:	2b00      	cmp	r3, #0
 8009136:	dc36      	bgt.n	80091a6 <_dtoa_r+0x99e>
 8009138:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800913a:	2b02      	cmp	r3, #2
 800913c:	dd33      	ble.n	80091a6 <_dtoa_r+0x99e>
 800913e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009142:	f1b9 0f00 	cmp.w	r9, #0
 8009146:	d10d      	bne.n	8009164 <_dtoa_r+0x95c>
 8009148:	4621      	mov	r1, r4
 800914a:	464b      	mov	r3, r9
 800914c:	2205      	movs	r2, #5
 800914e:	4628      	mov	r0, r5
 8009150:	f000 f9c4 	bl	80094dc <__multadd>
 8009154:	4601      	mov	r1, r0
 8009156:	4604      	mov	r4, r0
 8009158:	4658      	mov	r0, fp
 800915a:	f000 fbdb 	bl	8009914 <__mcmp>
 800915e:	2800      	cmp	r0, #0
 8009160:	f73f adb8 	bgt.w	8008cd4 <_dtoa_r+0x4cc>
 8009164:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009166:	9f03      	ldr	r7, [sp, #12]
 8009168:	ea6f 0a03 	mvn.w	sl, r3
 800916c:	f04f 0800 	mov.w	r8, #0
 8009170:	4621      	mov	r1, r4
 8009172:	4628      	mov	r0, r5
 8009174:	f000 f990 	bl	8009498 <_Bfree>
 8009178:	2e00      	cmp	r6, #0
 800917a:	f43f aea7 	beq.w	8008ecc <_dtoa_r+0x6c4>
 800917e:	f1b8 0f00 	cmp.w	r8, #0
 8009182:	d005      	beq.n	8009190 <_dtoa_r+0x988>
 8009184:	45b0      	cmp	r8, r6
 8009186:	d003      	beq.n	8009190 <_dtoa_r+0x988>
 8009188:	4641      	mov	r1, r8
 800918a:	4628      	mov	r0, r5
 800918c:	f000 f984 	bl	8009498 <_Bfree>
 8009190:	4631      	mov	r1, r6
 8009192:	4628      	mov	r0, r5
 8009194:	f000 f980 	bl	8009498 <_Bfree>
 8009198:	e698      	b.n	8008ecc <_dtoa_r+0x6c4>
 800919a:	2400      	movs	r4, #0
 800919c:	4626      	mov	r6, r4
 800919e:	e7e1      	b.n	8009164 <_dtoa_r+0x95c>
 80091a0:	46c2      	mov	sl, r8
 80091a2:	4626      	mov	r6, r4
 80091a4:	e596      	b.n	8008cd4 <_dtoa_r+0x4cc>
 80091a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 80fd 	beq.w	80093ac <_dtoa_r+0xba4>
 80091b2:	2f00      	cmp	r7, #0
 80091b4:	dd05      	ble.n	80091c2 <_dtoa_r+0x9ba>
 80091b6:	4631      	mov	r1, r6
 80091b8:	463a      	mov	r2, r7
 80091ba:	4628      	mov	r0, r5
 80091bc:	f000 fb3a 	bl	8009834 <__lshift>
 80091c0:	4606      	mov	r6, r0
 80091c2:	f1b8 0f00 	cmp.w	r8, #0
 80091c6:	d05c      	beq.n	8009282 <_dtoa_r+0xa7a>
 80091c8:	4628      	mov	r0, r5
 80091ca:	6871      	ldr	r1, [r6, #4]
 80091cc:	f000 f924 	bl	8009418 <_Balloc>
 80091d0:	4607      	mov	r7, r0
 80091d2:	b928      	cbnz	r0, 80091e0 <_dtoa_r+0x9d8>
 80091d4:	4602      	mov	r2, r0
 80091d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091da:	4b7f      	ldr	r3, [pc, #508]	; (80093d8 <_dtoa_r+0xbd0>)
 80091dc:	f7ff bb28 	b.w	8008830 <_dtoa_r+0x28>
 80091e0:	6932      	ldr	r2, [r6, #16]
 80091e2:	f106 010c 	add.w	r1, r6, #12
 80091e6:	3202      	adds	r2, #2
 80091e8:	0092      	lsls	r2, r2, #2
 80091ea:	300c      	adds	r0, #12
 80091ec:	f7fe fde8 	bl	8007dc0 <memcpy>
 80091f0:	2201      	movs	r2, #1
 80091f2:	4639      	mov	r1, r7
 80091f4:	4628      	mov	r0, r5
 80091f6:	f000 fb1d 	bl	8009834 <__lshift>
 80091fa:	46b0      	mov	r8, r6
 80091fc:	4606      	mov	r6, r0
 80091fe:	9b03      	ldr	r3, [sp, #12]
 8009200:	3301      	adds	r3, #1
 8009202:	9308      	str	r3, [sp, #32]
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	444b      	add	r3, r9
 8009208:	930a      	str	r3, [sp, #40]	; 0x28
 800920a:	9b04      	ldr	r3, [sp, #16]
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	9309      	str	r3, [sp, #36]	; 0x24
 8009212:	9b08      	ldr	r3, [sp, #32]
 8009214:	4621      	mov	r1, r4
 8009216:	3b01      	subs	r3, #1
 8009218:	4658      	mov	r0, fp
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	f7ff fa66 	bl	80086ec <quorem>
 8009220:	4603      	mov	r3, r0
 8009222:	4641      	mov	r1, r8
 8009224:	3330      	adds	r3, #48	; 0x30
 8009226:	9006      	str	r0, [sp, #24]
 8009228:	4658      	mov	r0, fp
 800922a:	930b      	str	r3, [sp, #44]	; 0x2c
 800922c:	f000 fb72 	bl	8009914 <__mcmp>
 8009230:	4632      	mov	r2, r6
 8009232:	4681      	mov	r9, r0
 8009234:	4621      	mov	r1, r4
 8009236:	4628      	mov	r0, r5
 8009238:	f000 fb88 	bl	800994c <__mdiff>
 800923c:	68c2      	ldr	r2, [r0, #12]
 800923e:	4607      	mov	r7, r0
 8009240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009242:	bb02      	cbnz	r2, 8009286 <_dtoa_r+0xa7e>
 8009244:	4601      	mov	r1, r0
 8009246:	4658      	mov	r0, fp
 8009248:	f000 fb64 	bl	8009914 <__mcmp>
 800924c:	4602      	mov	r2, r0
 800924e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009250:	4639      	mov	r1, r7
 8009252:	4628      	mov	r0, r5
 8009254:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009258:	f000 f91e 	bl	8009498 <_Bfree>
 800925c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800925e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009260:	9f08      	ldr	r7, [sp, #32]
 8009262:	ea43 0102 	orr.w	r1, r3, r2
 8009266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009268:	430b      	orrs	r3, r1
 800926a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800926c:	d10d      	bne.n	800928a <_dtoa_r+0xa82>
 800926e:	2b39      	cmp	r3, #57	; 0x39
 8009270:	d029      	beq.n	80092c6 <_dtoa_r+0xabe>
 8009272:	f1b9 0f00 	cmp.w	r9, #0
 8009276:	dd01      	ble.n	800927c <_dtoa_r+0xa74>
 8009278:	9b06      	ldr	r3, [sp, #24]
 800927a:	3331      	adds	r3, #49	; 0x31
 800927c:	9a04      	ldr	r2, [sp, #16]
 800927e:	7013      	strb	r3, [r2, #0]
 8009280:	e776      	b.n	8009170 <_dtoa_r+0x968>
 8009282:	4630      	mov	r0, r6
 8009284:	e7b9      	b.n	80091fa <_dtoa_r+0x9f2>
 8009286:	2201      	movs	r2, #1
 8009288:	e7e2      	b.n	8009250 <_dtoa_r+0xa48>
 800928a:	f1b9 0f00 	cmp.w	r9, #0
 800928e:	db06      	blt.n	800929e <_dtoa_r+0xa96>
 8009290:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009292:	ea41 0909 	orr.w	r9, r1, r9
 8009296:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009298:	ea59 0101 	orrs.w	r1, r9, r1
 800929c:	d120      	bne.n	80092e0 <_dtoa_r+0xad8>
 800929e:	2a00      	cmp	r2, #0
 80092a0:	ddec      	ble.n	800927c <_dtoa_r+0xa74>
 80092a2:	4659      	mov	r1, fp
 80092a4:	2201      	movs	r2, #1
 80092a6:	4628      	mov	r0, r5
 80092a8:	9308      	str	r3, [sp, #32]
 80092aa:	f000 fac3 	bl	8009834 <__lshift>
 80092ae:	4621      	mov	r1, r4
 80092b0:	4683      	mov	fp, r0
 80092b2:	f000 fb2f 	bl	8009914 <__mcmp>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	9b08      	ldr	r3, [sp, #32]
 80092ba:	dc02      	bgt.n	80092c2 <_dtoa_r+0xaba>
 80092bc:	d1de      	bne.n	800927c <_dtoa_r+0xa74>
 80092be:	07da      	lsls	r2, r3, #31
 80092c0:	d5dc      	bpl.n	800927c <_dtoa_r+0xa74>
 80092c2:	2b39      	cmp	r3, #57	; 0x39
 80092c4:	d1d8      	bne.n	8009278 <_dtoa_r+0xa70>
 80092c6:	2339      	movs	r3, #57	; 0x39
 80092c8:	9a04      	ldr	r2, [sp, #16]
 80092ca:	7013      	strb	r3, [r2, #0]
 80092cc:	463b      	mov	r3, r7
 80092ce:	461f      	mov	r7, r3
 80092d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	2a39      	cmp	r2, #57	; 0x39
 80092d8:	d050      	beq.n	800937c <_dtoa_r+0xb74>
 80092da:	3201      	adds	r2, #1
 80092dc:	701a      	strb	r2, [r3, #0]
 80092de:	e747      	b.n	8009170 <_dtoa_r+0x968>
 80092e0:	2a00      	cmp	r2, #0
 80092e2:	dd03      	ble.n	80092ec <_dtoa_r+0xae4>
 80092e4:	2b39      	cmp	r3, #57	; 0x39
 80092e6:	d0ee      	beq.n	80092c6 <_dtoa_r+0xabe>
 80092e8:	3301      	adds	r3, #1
 80092ea:	e7c7      	b.n	800927c <_dtoa_r+0xa74>
 80092ec:	9a08      	ldr	r2, [sp, #32]
 80092ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80092f4:	428a      	cmp	r2, r1
 80092f6:	d02a      	beq.n	800934e <_dtoa_r+0xb46>
 80092f8:	4659      	mov	r1, fp
 80092fa:	2300      	movs	r3, #0
 80092fc:	220a      	movs	r2, #10
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f8ec 	bl	80094dc <__multadd>
 8009304:	45b0      	cmp	r8, r6
 8009306:	4683      	mov	fp, r0
 8009308:	f04f 0300 	mov.w	r3, #0
 800930c:	f04f 020a 	mov.w	r2, #10
 8009310:	4641      	mov	r1, r8
 8009312:	4628      	mov	r0, r5
 8009314:	d107      	bne.n	8009326 <_dtoa_r+0xb1e>
 8009316:	f000 f8e1 	bl	80094dc <__multadd>
 800931a:	4680      	mov	r8, r0
 800931c:	4606      	mov	r6, r0
 800931e:	9b08      	ldr	r3, [sp, #32]
 8009320:	3301      	adds	r3, #1
 8009322:	9308      	str	r3, [sp, #32]
 8009324:	e775      	b.n	8009212 <_dtoa_r+0xa0a>
 8009326:	f000 f8d9 	bl	80094dc <__multadd>
 800932a:	4631      	mov	r1, r6
 800932c:	4680      	mov	r8, r0
 800932e:	2300      	movs	r3, #0
 8009330:	220a      	movs	r2, #10
 8009332:	4628      	mov	r0, r5
 8009334:	f000 f8d2 	bl	80094dc <__multadd>
 8009338:	4606      	mov	r6, r0
 800933a:	e7f0      	b.n	800931e <_dtoa_r+0xb16>
 800933c:	f1b9 0f00 	cmp.w	r9, #0
 8009340:	bfcc      	ite	gt
 8009342:	464f      	movgt	r7, r9
 8009344:	2701      	movle	r7, #1
 8009346:	f04f 0800 	mov.w	r8, #0
 800934a:	9a03      	ldr	r2, [sp, #12]
 800934c:	4417      	add	r7, r2
 800934e:	4659      	mov	r1, fp
 8009350:	2201      	movs	r2, #1
 8009352:	4628      	mov	r0, r5
 8009354:	9308      	str	r3, [sp, #32]
 8009356:	f000 fa6d 	bl	8009834 <__lshift>
 800935a:	4621      	mov	r1, r4
 800935c:	4683      	mov	fp, r0
 800935e:	f000 fad9 	bl	8009914 <__mcmp>
 8009362:	2800      	cmp	r0, #0
 8009364:	dcb2      	bgt.n	80092cc <_dtoa_r+0xac4>
 8009366:	d102      	bne.n	800936e <_dtoa_r+0xb66>
 8009368:	9b08      	ldr	r3, [sp, #32]
 800936a:	07db      	lsls	r3, r3, #31
 800936c:	d4ae      	bmi.n	80092cc <_dtoa_r+0xac4>
 800936e:	463b      	mov	r3, r7
 8009370:	461f      	mov	r7, r3
 8009372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009376:	2a30      	cmp	r2, #48	; 0x30
 8009378:	d0fa      	beq.n	8009370 <_dtoa_r+0xb68>
 800937a:	e6f9      	b.n	8009170 <_dtoa_r+0x968>
 800937c:	9a03      	ldr	r2, [sp, #12]
 800937e:	429a      	cmp	r2, r3
 8009380:	d1a5      	bne.n	80092ce <_dtoa_r+0xac6>
 8009382:	2331      	movs	r3, #49	; 0x31
 8009384:	f10a 0a01 	add.w	sl, sl, #1
 8009388:	e779      	b.n	800927e <_dtoa_r+0xa76>
 800938a:	4b14      	ldr	r3, [pc, #80]	; (80093dc <_dtoa_r+0xbd4>)
 800938c:	f7ff baa8 	b.w	80088e0 <_dtoa_r+0xd8>
 8009390:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009392:	2b00      	cmp	r3, #0
 8009394:	f47f aa81 	bne.w	800889a <_dtoa_r+0x92>
 8009398:	4b11      	ldr	r3, [pc, #68]	; (80093e0 <_dtoa_r+0xbd8>)
 800939a:	f7ff baa1 	b.w	80088e0 <_dtoa_r+0xd8>
 800939e:	f1b9 0f00 	cmp.w	r9, #0
 80093a2:	dc03      	bgt.n	80093ac <_dtoa_r+0xba4>
 80093a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	f73f aecb 	bgt.w	8009142 <_dtoa_r+0x93a>
 80093ac:	9f03      	ldr	r7, [sp, #12]
 80093ae:	4621      	mov	r1, r4
 80093b0:	4658      	mov	r0, fp
 80093b2:	f7ff f99b 	bl	80086ec <quorem>
 80093b6:	9a03      	ldr	r2, [sp, #12]
 80093b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093bc:	f807 3b01 	strb.w	r3, [r7], #1
 80093c0:	1aba      	subs	r2, r7, r2
 80093c2:	4591      	cmp	r9, r2
 80093c4:	ddba      	ble.n	800933c <_dtoa_r+0xb34>
 80093c6:	4659      	mov	r1, fp
 80093c8:	2300      	movs	r3, #0
 80093ca:	220a      	movs	r2, #10
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 f885 	bl	80094dc <__multadd>
 80093d2:	4683      	mov	fp, r0
 80093d4:	e7eb      	b.n	80093ae <_dtoa_r+0xba6>
 80093d6:	bf00      	nop
 80093d8:	0800b39b 	.word	0x0800b39b
 80093dc:	0800b2f8 	.word	0x0800b2f8
 80093e0:	0800b31c 	.word	0x0800b31c

080093e4 <_localeconv_r>:
 80093e4:	4800      	ldr	r0, [pc, #0]	; (80093e8 <_localeconv_r+0x4>)
 80093e6:	4770      	bx	lr
 80093e8:	20000194 	.word	0x20000194

080093ec <malloc>:
 80093ec:	4b02      	ldr	r3, [pc, #8]	; (80093f8 <malloc+0xc>)
 80093ee:	4601      	mov	r1, r0
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	f000 bc0f 	b.w	8009c14 <_malloc_r>
 80093f6:	bf00      	nop
 80093f8:	20000040 	.word	0x20000040

080093fc <memchr>:
 80093fc:	4603      	mov	r3, r0
 80093fe:	b510      	push	{r4, lr}
 8009400:	b2c9      	uxtb	r1, r1
 8009402:	4402      	add	r2, r0
 8009404:	4293      	cmp	r3, r2
 8009406:	4618      	mov	r0, r3
 8009408:	d101      	bne.n	800940e <memchr+0x12>
 800940a:	2000      	movs	r0, #0
 800940c:	e003      	b.n	8009416 <memchr+0x1a>
 800940e:	7804      	ldrb	r4, [r0, #0]
 8009410:	3301      	adds	r3, #1
 8009412:	428c      	cmp	r4, r1
 8009414:	d1f6      	bne.n	8009404 <memchr+0x8>
 8009416:	bd10      	pop	{r4, pc}

08009418 <_Balloc>:
 8009418:	b570      	push	{r4, r5, r6, lr}
 800941a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800941c:	4604      	mov	r4, r0
 800941e:	460d      	mov	r5, r1
 8009420:	b976      	cbnz	r6, 8009440 <_Balloc+0x28>
 8009422:	2010      	movs	r0, #16
 8009424:	f7ff ffe2 	bl	80093ec <malloc>
 8009428:	4602      	mov	r2, r0
 800942a:	6260      	str	r0, [r4, #36]	; 0x24
 800942c:	b920      	cbnz	r0, 8009438 <_Balloc+0x20>
 800942e:	2166      	movs	r1, #102	; 0x66
 8009430:	4b17      	ldr	r3, [pc, #92]	; (8009490 <_Balloc+0x78>)
 8009432:	4818      	ldr	r0, [pc, #96]	; (8009494 <_Balloc+0x7c>)
 8009434:	f000 fdce 	bl	8009fd4 <__assert_func>
 8009438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800943c:	6006      	str	r6, [r0, #0]
 800943e:	60c6      	str	r6, [r0, #12]
 8009440:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009442:	68f3      	ldr	r3, [r6, #12]
 8009444:	b183      	cbz	r3, 8009468 <_Balloc+0x50>
 8009446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800944e:	b9b8      	cbnz	r0, 8009480 <_Balloc+0x68>
 8009450:	2101      	movs	r1, #1
 8009452:	fa01 f605 	lsl.w	r6, r1, r5
 8009456:	1d72      	adds	r2, r6, #5
 8009458:	4620      	mov	r0, r4
 800945a:	0092      	lsls	r2, r2, #2
 800945c:	f000 fb5e 	bl	8009b1c <_calloc_r>
 8009460:	b160      	cbz	r0, 800947c <_Balloc+0x64>
 8009462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009466:	e00e      	b.n	8009486 <_Balloc+0x6e>
 8009468:	2221      	movs	r2, #33	; 0x21
 800946a:	2104      	movs	r1, #4
 800946c:	4620      	mov	r0, r4
 800946e:	f000 fb55 	bl	8009b1c <_calloc_r>
 8009472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009474:	60f0      	str	r0, [r6, #12]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e4      	bne.n	8009446 <_Balloc+0x2e>
 800947c:	2000      	movs	r0, #0
 800947e:	bd70      	pop	{r4, r5, r6, pc}
 8009480:	6802      	ldr	r2, [r0, #0]
 8009482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009486:	2300      	movs	r3, #0
 8009488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800948c:	e7f7      	b.n	800947e <_Balloc+0x66>
 800948e:	bf00      	nop
 8009490:	0800b329 	.word	0x0800b329
 8009494:	0800b3ac 	.word	0x0800b3ac

08009498 <_Bfree>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800949c:	4605      	mov	r5, r0
 800949e:	460c      	mov	r4, r1
 80094a0:	b976      	cbnz	r6, 80094c0 <_Bfree+0x28>
 80094a2:	2010      	movs	r0, #16
 80094a4:	f7ff ffa2 	bl	80093ec <malloc>
 80094a8:	4602      	mov	r2, r0
 80094aa:	6268      	str	r0, [r5, #36]	; 0x24
 80094ac:	b920      	cbnz	r0, 80094b8 <_Bfree+0x20>
 80094ae:	218a      	movs	r1, #138	; 0x8a
 80094b0:	4b08      	ldr	r3, [pc, #32]	; (80094d4 <_Bfree+0x3c>)
 80094b2:	4809      	ldr	r0, [pc, #36]	; (80094d8 <_Bfree+0x40>)
 80094b4:	f000 fd8e 	bl	8009fd4 <__assert_func>
 80094b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094bc:	6006      	str	r6, [r0, #0]
 80094be:	60c6      	str	r6, [r0, #12]
 80094c0:	b13c      	cbz	r4, 80094d2 <_Bfree+0x3a>
 80094c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094c4:	6862      	ldr	r2, [r4, #4]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094cc:	6021      	str	r1, [r4, #0]
 80094ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	0800b329 	.word	0x0800b329
 80094d8:	0800b3ac 	.word	0x0800b3ac

080094dc <__multadd>:
 80094dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e0:	4607      	mov	r7, r0
 80094e2:	460c      	mov	r4, r1
 80094e4:	461e      	mov	r6, r3
 80094e6:	2000      	movs	r0, #0
 80094e8:	690d      	ldr	r5, [r1, #16]
 80094ea:	f101 0c14 	add.w	ip, r1, #20
 80094ee:	f8dc 3000 	ldr.w	r3, [ip]
 80094f2:	3001      	adds	r0, #1
 80094f4:	b299      	uxth	r1, r3
 80094f6:	fb02 6101 	mla	r1, r2, r1, r6
 80094fa:	0c1e      	lsrs	r6, r3, #16
 80094fc:	0c0b      	lsrs	r3, r1, #16
 80094fe:	fb02 3306 	mla	r3, r2, r6, r3
 8009502:	b289      	uxth	r1, r1
 8009504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009508:	4285      	cmp	r5, r0
 800950a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800950e:	f84c 1b04 	str.w	r1, [ip], #4
 8009512:	dcec      	bgt.n	80094ee <__multadd+0x12>
 8009514:	b30e      	cbz	r6, 800955a <__multadd+0x7e>
 8009516:	68a3      	ldr	r3, [r4, #8]
 8009518:	42ab      	cmp	r3, r5
 800951a:	dc19      	bgt.n	8009550 <__multadd+0x74>
 800951c:	6861      	ldr	r1, [r4, #4]
 800951e:	4638      	mov	r0, r7
 8009520:	3101      	adds	r1, #1
 8009522:	f7ff ff79 	bl	8009418 <_Balloc>
 8009526:	4680      	mov	r8, r0
 8009528:	b928      	cbnz	r0, 8009536 <__multadd+0x5a>
 800952a:	4602      	mov	r2, r0
 800952c:	21b5      	movs	r1, #181	; 0xb5
 800952e:	4b0c      	ldr	r3, [pc, #48]	; (8009560 <__multadd+0x84>)
 8009530:	480c      	ldr	r0, [pc, #48]	; (8009564 <__multadd+0x88>)
 8009532:	f000 fd4f 	bl	8009fd4 <__assert_func>
 8009536:	6922      	ldr	r2, [r4, #16]
 8009538:	f104 010c 	add.w	r1, r4, #12
 800953c:	3202      	adds	r2, #2
 800953e:	0092      	lsls	r2, r2, #2
 8009540:	300c      	adds	r0, #12
 8009542:	f7fe fc3d 	bl	8007dc0 <memcpy>
 8009546:	4621      	mov	r1, r4
 8009548:	4638      	mov	r0, r7
 800954a:	f7ff ffa5 	bl	8009498 <_Bfree>
 800954e:	4644      	mov	r4, r8
 8009550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009554:	3501      	adds	r5, #1
 8009556:	615e      	str	r6, [r3, #20]
 8009558:	6125      	str	r5, [r4, #16]
 800955a:	4620      	mov	r0, r4
 800955c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009560:	0800b39b 	.word	0x0800b39b
 8009564:	0800b3ac 	.word	0x0800b3ac

08009568 <__hi0bits>:
 8009568:	0c02      	lsrs	r2, r0, #16
 800956a:	0412      	lsls	r2, r2, #16
 800956c:	4603      	mov	r3, r0
 800956e:	b9ca      	cbnz	r2, 80095a4 <__hi0bits+0x3c>
 8009570:	0403      	lsls	r3, r0, #16
 8009572:	2010      	movs	r0, #16
 8009574:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009578:	bf04      	itt	eq
 800957a:	021b      	lsleq	r3, r3, #8
 800957c:	3008      	addeq	r0, #8
 800957e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009582:	bf04      	itt	eq
 8009584:	011b      	lsleq	r3, r3, #4
 8009586:	3004      	addeq	r0, #4
 8009588:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800958c:	bf04      	itt	eq
 800958e:	009b      	lsleq	r3, r3, #2
 8009590:	3002      	addeq	r0, #2
 8009592:	2b00      	cmp	r3, #0
 8009594:	db05      	blt.n	80095a2 <__hi0bits+0x3a>
 8009596:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800959a:	f100 0001 	add.w	r0, r0, #1
 800959e:	bf08      	it	eq
 80095a0:	2020      	moveq	r0, #32
 80095a2:	4770      	bx	lr
 80095a4:	2000      	movs	r0, #0
 80095a6:	e7e5      	b.n	8009574 <__hi0bits+0xc>

080095a8 <__lo0bits>:
 80095a8:	6803      	ldr	r3, [r0, #0]
 80095aa:	4602      	mov	r2, r0
 80095ac:	f013 0007 	ands.w	r0, r3, #7
 80095b0:	d00b      	beq.n	80095ca <__lo0bits+0x22>
 80095b2:	07d9      	lsls	r1, r3, #31
 80095b4:	d421      	bmi.n	80095fa <__lo0bits+0x52>
 80095b6:	0798      	lsls	r0, r3, #30
 80095b8:	bf49      	itett	mi
 80095ba:	085b      	lsrmi	r3, r3, #1
 80095bc:	089b      	lsrpl	r3, r3, #2
 80095be:	2001      	movmi	r0, #1
 80095c0:	6013      	strmi	r3, [r2, #0]
 80095c2:	bf5c      	itt	pl
 80095c4:	2002      	movpl	r0, #2
 80095c6:	6013      	strpl	r3, [r2, #0]
 80095c8:	4770      	bx	lr
 80095ca:	b299      	uxth	r1, r3
 80095cc:	b909      	cbnz	r1, 80095d2 <__lo0bits+0x2a>
 80095ce:	2010      	movs	r0, #16
 80095d0:	0c1b      	lsrs	r3, r3, #16
 80095d2:	b2d9      	uxtb	r1, r3
 80095d4:	b909      	cbnz	r1, 80095da <__lo0bits+0x32>
 80095d6:	3008      	adds	r0, #8
 80095d8:	0a1b      	lsrs	r3, r3, #8
 80095da:	0719      	lsls	r1, r3, #28
 80095dc:	bf04      	itt	eq
 80095de:	091b      	lsreq	r3, r3, #4
 80095e0:	3004      	addeq	r0, #4
 80095e2:	0799      	lsls	r1, r3, #30
 80095e4:	bf04      	itt	eq
 80095e6:	089b      	lsreq	r3, r3, #2
 80095e8:	3002      	addeq	r0, #2
 80095ea:	07d9      	lsls	r1, r3, #31
 80095ec:	d403      	bmi.n	80095f6 <__lo0bits+0x4e>
 80095ee:	085b      	lsrs	r3, r3, #1
 80095f0:	f100 0001 	add.w	r0, r0, #1
 80095f4:	d003      	beq.n	80095fe <__lo0bits+0x56>
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	4770      	bx	lr
 80095fa:	2000      	movs	r0, #0
 80095fc:	4770      	bx	lr
 80095fe:	2020      	movs	r0, #32
 8009600:	4770      	bx	lr
	...

08009604 <__i2b>:
 8009604:	b510      	push	{r4, lr}
 8009606:	460c      	mov	r4, r1
 8009608:	2101      	movs	r1, #1
 800960a:	f7ff ff05 	bl	8009418 <_Balloc>
 800960e:	4602      	mov	r2, r0
 8009610:	b928      	cbnz	r0, 800961e <__i2b+0x1a>
 8009612:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009616:	4b04      	ldr	r3, [pc, #16]	; (8009628 <__i2b+0x24>)
 8009618:	4804      	ldr	r0, [pc, #16]	; (800962c <__i2b+0x28>)
 800961a:	f000 fcdb 	bl	8009fd4 <__assert_func>
 800961e:	2301      	movs	r3, #1
 8009620:	6144      	str	r4, [r0, #20]
 8009622:	6103      	str	r3, [r0, #16]
 8009624:	bd10      	pop	{r4, pc}
 8009626:	bf00      	nop
 8009628:	0800b39b 	.word	0x0800b39b
 800962c:	0800b3ac 	.word	0x0800b3ac

08009630 <__multiply>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	4691      	mov	r9, r2
 8009636:	690a      	ldr	r2, [r1, #16]
 8009638:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800963c:	460c      	mov	r4, r1
 800963e:	429a      	cmp	r2, r3
 8009640:	bfbe      	ittt	lt
 8009642:	460b      	movlt	r3, r1
 8009644:	464c      	movlt	r4, r9
 8009646:	4699      	movlt	r9, r3
 8009648:	6927      	ldr	r7, [r4, #16]
 800964a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800964e:	68a3      	ldr	r3, [r4, #8]
 8009650:	6861      	ldr	r1, [r4, #4]
 8009652:	eb07 060a 	add.w	r6, r7, sl
 8009656:	42b3      	cmp	r3, r6
 8009658:	b085      	sub	sp, #20
 800965a:	bfb8      	it	lt
 800965c:	3101      	addlt	r1, #1
 800965e:	f7ff fedb 	bl	8009418 <_Balloc>
 8009662:	b930      	cbnz	r0, 8009672 <__multiply+0x42>
 8009664:	4602      	mov	r2, r0
 8009666:	f240 115d 	movw	r1, #349	; 0x15d
 800966a:	4b43      	ldr	r3, [pc, #268]	; (8009778 <__multiply+0x148>)
 800966c:	4843      	ldr	r0, [pc, #268]	; (800977c <__multiply+0x14c>)
 800966e:	f000 fcb1 	bl	8009fd4 <__assert_func>
 8009672:	f100 0514 	add.w	r5, r0, #20
 8009676:	462b      	mov	r3, r5
 8009678:	2200      	movs	r2, #0
 800967a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800967e:	4543      	cmp	r3, r8
 8009680:	d321      	bcc.n	80096c6 <__multiply+0x96>
 8009682:	f104 0314 	add.w	r3, r4, #20
 8009686:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800968a:	f109 0314 	add.w	r3, r9, #20
 800968e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009692:	9202      	str	r2, [sp, #8]
 8009694:	1b3a      	subs	r2, r7, r4
 8009696:	3a15      	subs	r2, #21
 8009698:	f022 0203 	bic.w	r2, r2, #3
 800969c:	3204      	adds	r2, #4
 800969e:	f104 0115 	add.w	r1, r4, #21
 80096a2:	428f      	cmp	r7, r1
 80096a4:	bf38      	it	cc
 80096a6:	2204      	movcc	r2, #4
 80096a8:	9201      	str	r2, [sp, #4]
 80096aa:	9a02      	ldr	r2, [sp, #8]
 80096ac:	9303      	str	r3, [sp, #12]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d80c      	bhi.n	80096cc <__multiply+0x9c>
 80096b2:	2e00      	cmp	r6, #0
 80096b4:	dd03      	ble.n	80096be <__multiply+0x8e>
 80096b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d059      	beq.n	8009772 <__multiply+0x142>
 80096be:	6106      	str	r6, [r0, #16]
 80096c0:	b005      	add	sp, #20
 80096c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c6:	f843 2b04 	str.w	r2, [r3], #4
 80096ca:	e7d8      	b.n	800967e <__multiply+0x4e>
 80096cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80096d0:	f1ba 0f00 	cmp.w	sl, #0
 80096d4:	d023      	beq.n	800971e <__multiply+0xee>
 80096d6:	46a9      	mov	r9, r5
 80096d8:	f04f 0c00 	mov.w	ip, #0
 80096dc:	f104 0e14 	add.w	lr, r4, #20
 80096e0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096e4:	f8d9 1000 	ldr.w	r1, [r9]
 80096e8:	fa1f fb82 	uxth.w	fp, r2
 80096ec:	b289      	uxth	r1, r1
 80096ee:	fb0a 110b 	mla	r1, sl, fp, r1
 80096f2:	4461      	add	r1, ip
 80096f4:	f8d9 c000 	ldr.w	ip, [r9]
 80096f8:	0c12      	lsrs	r2, r2, #16
 80096fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80096fe:	fb0a c202 	mla	r2, sl, r2, ip
 8009702:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009706:	b289      	uxth	r1, r1
 8009708:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800970c:	4577      	cmp	r7, lr
 800970e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009712:	f849 1b04 	str.w	r1, [r9], #4
 8009716:	d8e3      	bhi.n	80096e0 <__multiply+0xb0>
 8009718:	9a01      	ldr	r2, [sp, #4]
 800971a:	f845 c002 	str.w	ip, [r5, r2]
 800971e:	9a03      	ldr	r2, [sp, #12]
 8009720:	3304      	adds	r3, #4
 8009722:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009726:	f1b9 0f00 	cmp.w	r9, #0
 800972a:	d020      	beq.n	800976e <__multiply+0x13e>
 800972c:	46ae      	mov	lr, r5
 800972e:	f04f 0a00 	mov.w	sl, #0
 8009732:	6829      	ldr	r1, [r5, #0]
 8009734:	f104 0c14 	add.w	ip, r4, #20
 8009738:	f8bc b000 	ldrh.w	fp, [ip]
 800973c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009740:	b289      	uxth	r1, r1
 8009742:	fb09 220b 	mla	r2, r9, fp, r2
 8009746:	4492      	add	sl, r2
 8009748:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800974c:	f84e 1b04 	str.w	r1, [lr], #4
 8009750:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009754:	f8be 1000 	ldrh.w	r1, [lr]
 8009758:	0c12      	lsrs	r2, r2, #16
 800975a:	fb09 1102 	mla	r1, r9, r2, r1
 800975e:	4567      	cmp	r7, ip
 8009760:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009764:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009768:	d8e6      	bhi.n	8009738 <__multiply+0x108>
 800976a:	9a01      	ldr	r2, [sp, #4]
 800976c:	50a9      	str	r1, [r5, r2]
 800976e:	3504      	adds	r5, #4
 8009770:	e79b      	b.n	80096aa <__multiply+0x7a>
 8009772:	3e01      	subs	r6, #1
 8009774:	e79d      	b.n	80096b2 <__multiply+0x82>
 8009776:	bf00      	nop
 8009778:	0800b39b 	.word	0x0800b39b
 800977c:	0800b3ac 	.word	0x0800b3ac

08009780 <__pow5mult>:
 8009780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009784:	4615      	mov	r5, r2
 8009786:	f012 0203 	ands.w	r2, r2, #3
 800978a:	4606      	mov	r6, r0
 800978c:	460f      	mov	r7, r1
 800978e:	d007      	beq.n	80097a0 <__pow5mult+0x20>
 8009790:	4c25      	ldr	r4, [pc, #148]	; (8009828 <__pow5mult+0xa8>)
 8009792:	3a01      	subs	r2, #1
 8009794:	2300      	movs	r3, #0
 8009796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800979a:	f7ff fe9f 	bl	80094dc <__multadd>
 800979e:	4607      	mov	r7, r0
 80097a0:	10ad      	asrs	r5, r5, #2
 80097a2:	d03d      	beq.n	8009820 <__pow5mult+0xa0>
 80097a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80097a6:	b97c      	cbnz	r4, 80097c8 <__pow5mult+0x48>
 80097a8:	2010      	movs	r0, #16
 80097aa:	f7ff fe1f 	bl	80093ec <malloc>
 80097ae:	4602      	mov	r2, r0
 80097b0:	6270      	str	r0, [r6, #36]	; 0x24
 80097b2:	b928      	cbnz	r0, 80097c0 <__pow5mult+0x40>
 80097b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097b8:	4b1c      	ldr	r3, [pc, #112]	; (800982c <__pow5mult+0xac>)
 80097ba:	481d      	ldr	r0, [pc, #116]	; (8009830 <__pow5mult+0xb0>)
 80097bc:	f000 fc0a 	bl	8009fd4 <__assert_func>
 80097c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097c4:	6004      	str	r4, [r0, #0]
 80097c6:	60c4      	str	r4, [r0, #12]
 80097c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097d0:	b94c      	cbnz	r4, 80097e6 <__pow5mult+0x66>
 80097d2:	f240 2171 	movw	r1, #625	; 0x271
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7ff ff14 	bl	8009604 <__i2b>
 80097dc:	2300      	movs	r3, #0
 80097de:	4604      	mov	r4, r0
 80097e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80097e4:	6003      	str	r3, [r0, #0]
 80097e6:	f04f 0900 	mov.w	r9, #0
 80097ea:	07eb      	lsls	r3, r5, #31
 80097ec:	d50a      	bpl.n	8009804 <__pow5mult+0x84>
 80097ee:	4639      	mov	r1, r7
 80097f0:	4622      	mov	r2, r4
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7ff ff1c 	bl	8009630 <__multiply>
 80097f8:	4680      	mov	r8, r0
 80097fa:	4639      	mov	r1, r7
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7ff fe4b 	bl	8009498 <_Bfree>
 8009802:	4647      	mov	r7, r8
 8009804:	106d      	asrs	r5, r5, #1
 8009806:	d00b      	beq.n	8009820 <__pow5mult+0xa0>
 8009808:	6820      	ldr	r0, [r4, #0]
 800980a:	b938      	cbnz	r0, 800981c <__pow5mult+0x9c>
 800980c:	4622      	mov	r2, r4
 800980e:	4621      	mov	r1, r4
 8009810:	4630      	mov	r0, r6
 8009812:	f7ff ff0d 	bl	8009630 <__multiply>
 8009816:	6020      	str	r0, [r4, #0]
 8009818:	f8c0 9000 	str.w	r9, [r0]
 800981c:	4604      	mov	r4, r0
 800981e:	e7e4      	b.n	80097ea <__pow5mult+0x6a>
 8009820:	4638      	mov	r0, r7
 8009822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009826:	bf00      	nop
 8009828:	0800b4f8 	.word	0x0800b4f8
 800982c:	0800b329 	.word	0x0800b329
 8009830:	0800b3ac 	.word	0x0800b3ac

08009834 <__lshift>:
 8009834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009838:	460c      	mov	r4, r1
 800983a:	4607      	mov	r7, r0
 800983c:	4691      	mov	r9, r2
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	6849      	ldr	r1, [r1, #4]
 8009842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009846:	68a3      	ldr	r3, [r4, #8]
 8009848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800984c:	f108 0601 	add.w	r6, r8, #1
 8009850:	42b3      	cmp	r3, r6
 8009852:	db0b      	blt.n	800986c <__lshift+0x38>
 8009854:	4638      	mov	r0, r7
 8009856:	f7ff fddf 	bl	8009418 <_Balloc>
 800985a:	4605      	mov	r5, r0
 800985c:	b948      	cbnz	r0, 8009872 <__lshift+0x3e>
 800985e:	4602      	mov	r2, r0
 8009860:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009864:	4b29      	ldr	r3, [pc, #164]	; (800990c <__lshift+0xd8>)
 8009866:	482a      	ldr	r0, [pc, #168]	; (8009910 <__lshift+0xdc>)
 8009868:	f000 fbb4 	bl	8009fd4 <__assert_func>
 800986c:	3101      	adds	r1, #1
 800986e:	005b      	lsls	r3, r3, #1
 8009870:	e7ee      	b.n	8009850 <__lshift+0x1c>
 8009872:	2300      	movs	r3, #0
 8009874:	f100 0114 	add.w	r1, r0, #20
 8009878:	f100 0210 	add.w	r2, r0, #16
 800987c:	4618      	mov	r0, r3
 800987e:	4553      	cmp	r3, sl
 8009880:	db37      	blt.n	80098f2 <__lshift+0xbe>
 8009882:	6920      	ldr	r0, [r4, #16]
 8009884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009888:	f104 0314 	add.w	r3, r4, #20
 800988c:	f019 091f 	ands.w	r9, r9, #31
 8009890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009894:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009898:	d02f      	beq.n	80098fa <__lshift+0xc6>
 800989a:	468a      	mov	sl, r1
 800989c:	f04f 0c00 	mov.w	ip, #0
 80098a0:	f1c9 0e20 	rsb	lr, r9, #32
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	fa02 f209 	lsl.w	r2, r2, r9
 80098aa:	ea42 020c 	orr.w	r2, r2, ip
 80098ae:	f84a 2b04 	str.w	r2, [sl], #4
 80098b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b6:	4298      	cmp	r0, r3
 80098b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80098bc:	d8f2      	bhi.n	80098a4 <__lshift+0x70>
 80098be:	1b03      	subs	r3, r0, r4
 80098c0:	3b15      	subs	r3, #21
 80098c2:	f023 0303 	bic.w	r3, r3, #3
 80098c6:	3304      	adds	r3, #4
 80098c8:	f104 0215 	add.w	r2, r4, #21
 80098cc:	4290      	cmp	r0, r2
 80098ce:	bf38      	it	cc
 80098d0:	2304      	movcc	r3, #4
 80098d2:	f841 c003 	str.w	ip, [r1, r3]
 80098d6:	f1bc 0f00 	cmp.w	ip, #0
 80098da:	d001      	beq.n	80098e0 <__lshift+0xac>
 80098dc:	f108 0602 	add.w	r6, r8, #2
 80098e0:	3e01      	subs	r6, #1
 80098e2:	4638      	mov	r0, r7
 80098e4:	4621      	mov	r1, r4
 80098e6:	612e      	str	r6, [r5, #16]
 80098e8:	f7ff fdd6 	bl	8009498 <_Bfree>
 80098ec:	4628      	mov	r0, r5
 80098ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80098f6:	3301      	adds	r3, #1
 80098f8:	e7c1      	b.n	800987e <__lshift+0x4a>
 80098fa:	3904      	subs	r1, #4
 80098fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009900:	4298      	cmp	r0, r3
 8009902:	f841 2f04 	str.w	r2, [r1, #4]!
 8009906:	d8f9      	bhi.n	80098fc <__lshift+0xc8>
 8009908:	e7ea      	b.n	80098e0 <__lshift+0xac>
 800990a:	bf00      	nop
 800990c:	0800b39b 	.word	0x0800b39b
 8009910:	0800b3ac 	.word	0x0800b3ac

08009914 <__mcmp>:
 8009914:	4603      	mov	r3, r0
 8009916:	690a      	ldr	r2, [r1, #16]
 8009918:	6900      	ldr	r0, [r0, #16]
 800991a:	b530      	push	{r4, r5, lr}
 800991c:	1a80      	subs	r0, r0, r2
 800991e:	d10d      	bne.n	800993c <__mcmp+0x28>
 8009920:	3314      	adds	r3, #20
 8009922:	3114      	adds	r1, #20
 8009924:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009928:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800992c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009930:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009934:	4295      	cmp	r5, r2
 8009936:	d002      	beq.n	800993e <__mcmp+0x2a>
 8009938:	d304      	bcc.n	8009944 <__mcmp+0x30>
 800993a:	2001      	movs	r0, #1
 800993c:	bd30      	pop	{r4, r5, pc}
 800993e:	42a3      	cmp	r3, r4
 8009940:	d3f4      	bcc.n	800992c <__mcmp+0x18>
 8009942:	e7fb      	b.n	800993c <__mcmp+0x28>
 8009944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009948:	e7f8      	b.n	800993c <__mcmp+0x28>
	...

0800994c <__mdiff>:
 800994c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009950:	460d      	mov	r5, r1
 8009952:	4607      	mov	r7, r0
 8009954:	4611      	mov	r1, r2
 8009956:	4628      	mov	r0, r5
 8009958:	4614      	mov	r4, r2
 800995a:	f7ff ffdb 	bl	8009914 <__mcmp>
 800995e:	1e06      	subs	r6, r0, #0
 8009960:	d111      	bne.n	8009986 <__mdiff+0x3a>
 8009962:	4631      	mov	r1, r6
 8009964:	4638      	mov	r0, r7
 8009966:	f7ff fd57 	bl	8009418 <_Balloc>
 800996a:	4602      	mov	r2, r0
 800996c:	b928      	cbnz	r0, 800997a <__mdiff+0x2e>
 800996e:	f240 2132 	movw	r1, #562	; 0x232
 8009972:	4b3a      	ldr	r3, [pc, #232]	; (8009a5c <__mdiff+0x110>)
 8009974:	483a      	ldr	r0, [pc, #232]	; (8009a60 <__mdiff+0x114>)
 8009976:	f000 fb2d 	bl	8009fd4 <__assert_func>
 800997a:	2301      	movs	r3, #1
 800997c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009980:	4610      	mov	r0, r2
 8009982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009986:	bfa4      	itt	ge
 8009988:	4623      	movge	r3, r4
 800998a:	462c      	movge	r4, r5
 800998c:	4638      	mov	r0, r7
 800998e:	6861      	ldr	r1, [r4, #4]
 8009990:	bfa6      	itte	ge
 8009992:	461d      	movge	r5, r3
 8009994:	2600      	movge	r6, #0
 8009996:	2601      	movlt	r6, #1
 8009998:	f7ff fd3e 	bl	8009418 <_Balloc>
 800999c:	4602      	mov	r2, r0
 800999e:	b918      	cbnz	r0, 80099a8 <__mdiff+0x5c>
 80099a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80099a4:	4b2d      	ldr	r3, [pc, #180]	; (8009a5c <__mdiff+0x110>)
 80099a6:	e7e5      	b.n	8009974 <__mdiff+0x28>
 80099a8:	f102 0814 	add.w	r8, r2, #20
 80099ac:	46c2      	mov	sl, r8
 80099ae:	f04f 0c00 	mov.w	ip, #0
 80099b2:	6927      	ldr	r7, [r4, #16]
 80099b4:	60c6      	str	r6, [r0, #12]
 80099b6:	692e      	ldr	r6, [r5, #16]
 80099b8:	f104 0014 	add.w	r0, r4, #20
 80099bc:	f105 0914 	add.w	r9, r5, #20
 80099c0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80099c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80099c8:	3410      	adds	r4, #16
 80099ca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80099ce:	f859 3b04 	ldr.w	r3, [r9], #4
 80099d2:	fa1f f18b 	uxth.w	r1, fp
 80099d6:	448c      	add	ip, r1
 80099d8:	b299      	uxth	r1, r3
 80099da:	0c1b      	lsrs	r3, r3, #16
 80099dc:	ebac 0101 	sub.w	r1, ip, r1
 80099e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099e4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80099e8:	b289      	uxth	r1, r1
 80099ea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80099ee:	454e      	cmp	r6, r9
 80099f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80099f4:	f84a 3b04 	str.w	r3, [sl], #4
 80099f8:	d8e7      	bhi.n	80099ca <__mdiff+0x7e>
 80099fa:	1b73      	subs	r3, r6, r5
 80099fc:	3b15      	subs	r3, #21
 80099fe:	f023 0303 	bic.w	r3, r3, #3
 8009a02:	3515      	adds	r5, #21
 8009a04:	3304      	adds	r3, #4
 8009a06:	42ae      	cmp	r6, r5
 8009a08:	bf38      	it	cc
 8009a0a:	2304      	movcc	r3, #4
 8009a0c:	4418      	add	r0, r3
 8009a0e:	4443      	add	r3, r8
 8009a10:	461e      	mov	r6, r3
 8009a12:	4605      	mov	r5, r0
 8009a14:	4575      	cmp	r5, lr
 8009a16:	d30e      	bcc.n	8009a36 <__mdiff+0xea>
 8009a18:	f10e 0103 	add.w	r1, lr, #3
 8009a1c:	1a09      	subs	r1, r1, r0
 8009a1e:	f021 0103 	bic.w	r1, r1, #3
 8009a22:	3803      	subs	r0, #3
 8009a24:	4586      	cmp	lr, r0
 8009a26:	bf38      	it	cc
 8009a28:	2100      	movcc	r1, #0
 8009a2a:	4419      	add	r1, r3
 8009a2c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009a30:	b18b      	cbz	r3, 8009a56 <__mdiff+0x10a>
 8009a32:	6117      	str	r7, [r2, #16]
 8009a34:	e7a4      	b.n	8009980 <__mdiff+0x34>
 8009a36:	f855 8b04 	ldr.w	r8, [r5], #4
 8009a3a:	fa1f f188 	uxth.w	r1, r8
 8009a3e:	4461      	add	r1, ip
 8009a40:	140c      	asrs	r4, r1, #16
 8009a42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a46:	b289      	uxth	r1, r1
 8009a48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a4c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009a50:	f846 1b04 	str.w	r1, [r6], #4
 8009a54:	e7de      	b.n	8009a14 <__mdiff+0xc8>
 8009a56:	3f01      	subs	r7, #1
 8009a58:	e7e8      	b.n	8009a2c <__mdiff+0xe0>
 8009a5a:	bf00      	nop
 8009a5c:	0800b39b 	.word	0x0800b39b
 8009a60:	0800b3ac 	.word	0x0800b3ac

08009a64 <__d2b>:
 8009a64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009a68:	2101      	movs	r1, #1
 8009a6a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009a6e:	4690      	mov	r8, r2
 8009a70:	461d      	mov	r5, r3
 8009a72:	f7ff fcd1 	bl	8009418 <_Balloc>
 8009a76:	4604      	mov	r4, r0
 8009a78:	b930      	cbnz	r0, 8009a88 <__d2b+0x24>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	f240 310a 	movw	r1, #778	; 0x30a
 8009a80:	4b24      	ldr	r3, [pc, #144]	; (8009b14 <__d2b+0xb0>)
 8009a82:	4825      	ldr	r0, [pc, #148]	; (8009b18 <__d2b+0xb4>)
 8009a84:	f000 faa6 	bl	8009fd4 <__assert_func>
 8009a88:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009a8c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009a90:	bb2d      	cbnz	r5, 8009ade <__d2b+0x7a>
 8009a92:	9301      	str	r3, [sp, #4]
 8009a94:	f1b8 0300 	subs.w	r3, r8, #0
 8009a98:	d026      	beq.n	8009ae8 <__d2b+0x84>
 8009a9a:	4668      	mov	r0, sp
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	f7ff fd83 	bl	80095a8 <__lo0bits>
 8009aa2:	9900      	ldr	r1, [sp, #0]
 8009aa4:	b1f0      	cbz	r0, 8009ae4 <__d2b+0x80>
 8009aa6:	9a01      	ldr	r2, [sp, #4]
 8009aa8:	f1c0 0320 	rsb	r3, r0, #32
 8009aac:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	40c2      	lsrs	r2, r0
 8009ab4:	6163      	str	r3, [r4, #20]
 8009ab6:	9201      	str	r2, [sp, #4]
 8009ab8:	9b01      	ldr	r3, [sp, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	bf14      	ite	ne
 8009abe:	2102      	movne	r1, #2
 8009ac0:	2101      	moveq	r1, #1
 8009ac2:	61a3      	str	r3, [r4, #24]
 8009ac4:	6121      	str	r1, [r4, #16]
 8009ac6:	b1c5      	cbz	r5, 8009afa <__d2b+0x96>
 8009ac8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009acc:	4405      	add	r5, r0
 8009ace:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ad2:	603d      	str	r5, [r7, #0]
 8009ad4:	6030      	str	r0, [r6, #0]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	b002      	add	sp, #8
 8009ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ae2:	e7d6      	b.n	8009a92 <__d2b+0x2e>
 8009ae4:	6161      	str	r1, [r4, #20]
 8009ae6:	e7e7      	b.n	8009ab8 <__d2b+0x54>
 8009ae8:	a801      	add	r0, sp, #4
 8009aea:	f7ff fd5d 	bl	80095a8 <__lo0bits>
 8009aee:	2101      	movs	r1, #1
 8009af0:	9b01      	ldr	r3, [sp, #4]
 8009af2:	6121      	str	r1, [r4, #16]
 8009af4:	6163      	str	r3, [r4, #20]
 8009af6:	3020      	adds	r0, #32
 8009af8:	e7e5      	b.n	8009ac6 <__d2b+0x62>
 8009afa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009afe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b02:	6038      	str	r0, [r7, #0]
 8009b04:	6918      	ldr	r0, [r3, #16]
 8009b06:	f7ff fd2f 	bl	8009568 <__hi0bits>
 8009b0a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009b0e:	6031      	str	r1, [r6, #0]
 8009b10:	e7e1      	b.n	8009ad6 <__d2b+0x72>
 8009b12:	bf00      	nop
 8009b14:	0800b39b 	.word	0x0800b39b
 8009b18:	0800b3ac 	.word	0x0800b3ac

08009b1c <_calloc_r>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	fba1 5402 	umull	r5, r4, r1, r2
 8009b22:	b934      	cbnz	r4, 8009b32 <_calloc_r+0x16>
 8009b24:	4629      	mov	r1, r5
 8009b26:	f000 f875 	bl	8009c14 <_malloc_r>
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	b928      	cbnz	r0, 8009b3a <_calloc_r+0x1e>
 8009b2e:	4630      	mov	r0, r6
 8009b30:	bd70      	pop	{r4, r5, r6, pc}
 8009b32:	220c      	movs	r2, #12
 8009b34:	2600      	movs	r6, #0
 8009b36:	6002      	str	r2, [r0, #0]
 8009b38:	e7f9      	b.n	8009b2e <_calloc_r+0x12>
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	f7fe f94d 	bl	8007ddc <memset>
 8009b42:	e7f4      	b.n	8009b2e <_calloc_r+0x12>

08009b44 <_free_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4605      	mov	r5, r0
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	d040      	beq.n	8009bce <_free_r+0x8a>
 8009b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b50:	1f0c      	subs	r4, r1, #4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	bfb8      	it	lt
 8009b56:	18e4      	addlt	r4, r4, r3
 8009b58:	f000 fa98 	bl	800a08c <__malloc_lock>
 8009b5c:	4a1c      	ldr	r2, [pc, #112]	; (8009bd0 <_free_r+0x8c>)
 8009b5e:	6813      	ldr	r3, [r2, #0]
 8009b60:	b933      	cbnz	r3, 8009b70 <_free_r+0x2c>
 8009b62:	6063      	str	r3, [r4, #4]
 8009b64:	6014      	str	r4, [r2, #0]
 8009b66:	4628      	mov	r0, r5
 8009b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b6c:	f000 ba94 	b.w	800a098 <__malloc_unlock>
 8009b70:	42a3      	cmp	r3, r4
 8009b72:	d908      	bls.n	8009b86 <_free_r+0x42>
 8009b74:	6820      	ldr	r0, [r4, #0]
 8009b76:	1821      	adds	r1, r4, r0
 8009b78:	428b      	cmp	r3, r1
 8009b7a:	bf01      	itttt	eq
 8009b7c:	6819      	ldreq	r1, [r3, #0]
 8009b7e:	685b      	ldreq	r3, [r3, #4]
 8009b80:	1809      	addeq	r1, r1, r0
 8009b82:	6021      	streq	r1, [r4, #0]
 8009b84:	e7ed      	b.n	8009b62 <_free_r+0x1e>
 8009b86:	461a      	mov	r2, r3
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	b10b      	cbz	r3, 8009b90 <_free_r+0x4c>
 8009b8c:	42a3      	cmp	r3, r4
 8009b8e:	d9fa      	bls.n	8009b86 <_free_r+0x42>
 8009b90:	6811      	ldr	r1, [r2, #0]
 8009b92:	1850      	adds	r0, r2, r1
 8009b94:	42a0      	cmp	r0, r4
 8009b96:	d10b      	bne.n	8009bb0 <_free_r+0x6c>
 8009b98:	6820      	ldr	r0, [r4, #0]
 8009b9a:	4401      	add	r1, r0
 8009b9c:	1850      	adds	r0, r2, r1
 8009b9e:	4283      	cmp	r3, r0
 8009ba0:	6011      	str	r1, [r2, #0]
 8009ba2:	d1e0      	bne.n	8009b66 <_free_r+0x22>
 8009ba4:	6818      	ldr	r0, [r3, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	4401      	add	r1, r0
 8009baa:	6011      	str	r1, [r2, #0]
 8009bac:	6053      	str	r3, [r2, #4]
 8009bae:	e7da      	b.n	8009b66 <_free_r+0x22>
 8009bb0:	d902      	bls.n	8009bb8 <_free_r+0x74>
 8009bb2:	230c      	movs	r3, #12
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	e7d6      	b.n	8009b66 <_free_r+0x22>
 8009bb8:	6820      	ldr	r0, [r4, #0]
 8009bba:	1821      	adds	r1, r4, r0
 8009bbc:	428b      	cmp	r3, r1
 8009bbe:	bf01      	itttt	eq
 8009bc0:	6819      	ldreq	r1, [r3, #0]
 8009bc2:	685b      	ldreq	r3, [r3, #4]
 8009bc4:	1809      	addeq	r1, r1, r0
 8009bc6:	6021      	streq	r1, [r4, #0]
 8009bc8:	6063      	str	r3, [r4, #4]
 8009bca:	6054      	str	r4, [r2, #4]
 8009bcc:	e7cb      	b.n	8009b66 <_free_r+0x22>
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	20000254 	.word	0x20000254

08009bd4 <sbrk_aligned>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	4e0e      	ldr	r6, [pc, #56]	; (8009c10 <sbrk_aligned+0x3c>)
 8009bd8:	460c      	mov	r4, r1
 8009bda:	6831      	ldr	r1, [r6, #0]
 8009bdc:	4605      	mov	r5, r0
 8009bde:	b911      	cbnz	r1, 8009be6 <sbrk_aligned+0x12>
 8009be0:	f000 f9e8 	bl	8009fb4 <_sbrk_r>
 8009be4:	6030      	str	r0, [r6, #0]
 8009be6:	4621      	mov	r1, r4
 8009be8:	4628      	mov	r0, r5
 8009bea:	f000 f9e3 	bl	8009fb4 <_sbrk_r>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d00a      	beq.n	8009c08 <sbrk_aligned+0x34>
 8009bf2:	1cc4      	adds	r4, r0, #3
 8009bf4:	f024 0403 	bic.w	r4, r4, #3
 8009bf8:	42a0      	cmp	r0, r4
 8009bfa:	d007      	beq.n	8009c0c <sbrk_aligned+0x38>
 8009bfc:	1a21      	subs	r1, r4, r0
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f000 f9d8 	bl	8009fb4 <_sbrk_r>
 8009c04:	3001      	adds	r0, #1
 8009c06:	d101      	bne.n	8009c0c <sbrk_aligned+0x38>
 8009c08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}
 8009c10:	20000258 	.word	0x20000258

08009c14 <_malloc_r>:
 8009c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c18:	1ccd      	adds	r5, r1, #3
 8009c1a:	f025 0503 	bic.w	r5, r5, #3
 8009c1e:	3508      	adds	r5, #8
 8009c20:	2d0c      	cmp	r5, #12
 8009c22:	bf38      	it	cc
 8009c24:	250c      	movcc	r5, #12
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	4607      	mov	r7, r0
 8009c2a:	db01      	blt.n	8009c30 <_malloc_r+0x1c>
 8009c2c:	42a9      	cmp	r1, r5
 8009c2e:	d905      	bls.n	8009c3c <_malloc_r+0x28>
 8009c30:	230c      	movs	r3, #12
 8009c32:	2600      	movs	r6, #0
 8009c34:	603b      	str	r3, [r7, #0]
 8009c36:	4630      	mov	r0, r6
 8009c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c3c:	4e2e      	ldr	r6, [pc, #184]	; (8009cf8 <_malloc_r+0xe4>)
 8009c3e:	f000 fa25 	bl	800a08c <__malloc_lock>
 8009c42:	6833      	ldr	r3, [r6, #0]
 8009c44:	461c      	mov	r4, r3
 8009c46:	bb34      	cbnz	r4, 8009c96 <_malloc_r+0x82>
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	f7ff ffc2 	bl	8009bd4 <sbrk_aligned>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	4604      	mov	r4, r0
 8009c54:	d14d      	bne.n	8009cf2 <_malloc_r+0xde>
 8009c56:	6834      	ldr	r4, [r6, #0]
 8009c58:	4626      	mov	r6, r4
 8009c5a:	2e00      	cmp	r6, #0
 8009c5c:	d140      	bne.n	8009ce0 <_malloc_r+0xcc>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	4631      	mov	r1, r6
 8009c62:	4638      	mov	r0, r7
 8009c64:	eb04 0803 	add.w	r8, r4, r3
 8009c68:	f000 f9a4 	bl	8009fb4 <_sbrk_r>
 8009c6c:	4580      	cmp	r8, r0
 8009c6e:	d13a      	bne.n	8009ce6 <_malloc_r+0xd2>
 8009c70:	6821      	ldr	r1, [r4, #0]
 8009c72:	3503      	adds	r5, #3
 8009c74:	1a6d      	subs	r5, r5, r1
 8009c76:	f025 0503 	bic.w	r5, r5, #3
 8009c7a:	3508      	adds	r5, #8
 8009c7c:	2d0c      	cmp	r5, #12
 8009c7e:	bf38      	it	cc
 8009c80:	250c      	movcc	r5, #12
 8009c82:	4638      	mov	r0, r7
 8009c84:	4629      	mov	r1, r5
 8009c86:	f7ff ffa5 	bl	8009bd4 <sbrk_aligned>
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d02b      	beq.n	8009ce6 <_malloc_r+0xd2>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	442b      	add	r3, r5
 8009c92:	6023      	str	r3, [r4, #0]
 8009c94:	e00e      	b.n	8009cb4 <_malloc_r+0xa0>
 8009c96:	6822      	ldr	r2, [r4, #0]
 8009c98:	1b52      	subs	r2, r2, r5
 8009c9a:	d41e      	bmi.n	8009cda <_malloc_r+0xc6>
 8009c9c:	2a0b      	cmp	r2, #11
 8009c9e:	d916      	bls.n	8009cce <_malloc_r+0xba>
 8009ca0:	1961      	adds	r1, r4, r5
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	6025      	str	r5, [r4, #0]
 8009ca6:	bf18      	it	ne
 8009ca8:	6059      	strne	r1, [r3, #4]
 8009caa:	6863      	ldr	r3, [r4, #4]
 8009cac:	bf08      	it	eq
 8009cae:	6031      	streq	r1, [r6, #0]
 8009cb0:	5162      	str	r2, [r4, r5]
 8009cb2:	604b      	str	r3, [r1, #4]
 8009cb4:	4638      	mov	r0, r7
 8009cb6:	f104 060b 	add.w	r6, r4, #11
 8009cba:	f000 f9ed 	bl	800a098 <__malloc_unlock>
 8009cbe:	f026 0607 	bic.w	r6, r6, #7
 8009cc2:	1d23      	adds	r3, r4, #4
 8009cc4:	1af2      	subs	r2, r6, r3
 8009cc6:	d0b6      	beq.n	8009c36 <_malloc_r+0x22>
 8009cc8:	1b9b      	subs	r3, r3, r6
 8009cca:	50a3      	str	r3, [r4, r2]
 8009ccc:	e7b3      	b.n	8009c36 <_malloc_r+0x22>
 8009cce:	6862      	ldr	r2, [r4, #4]
 8009cd0:	42a3      	cmp	r3, r4
 8009cd2:	bf0c      	ite	eq
 8009cd4:	6032      	streq	r2, [r6, #0]
 8009cd6:	605a      	strne	r2, [r3, #4]
 8009cd8:	e7ec      	b.n	8009cb4 <_malloc_r+0xa0>
 8009cda:	4623      	mov	r3, r4
 8009cdc:	6864      	ldr	r4, [r4, #4]
 8009cde:	e7b2      	b.n	8009c46 <_malloc_r+0x32>
 8009ce0:	4634      	mov	r4, r6
 8009ce2:	6876      	ldr	r6, [r6, #4]
 8009ce4:	e7b9      	b.n	8009c5a <_malloc_r+0x46>
 8009ce6:	230c      	movs	r3, #12
 8009ce8:	4638      	mov	r0, r7
 8009cea:	603b      	str	r3, [r7, #0]
 8009cec:	f000 f9d4 	bl	800a098 <__malloc_unlock>
 8009cf0:	e7a1      	b.n	8009c36 <_malloc_r+0x22>
 8009cf2:	6025      	str	r5, [r4, #0]
 8009cf4:	e7de      	b.n	8009cb4 <_malloc_r+0xa0>
 8009cf6:	bf00      	nop
 8009cf8:	20000254 	.word	0x20000254

08009cfc <__ssputs_r>:
 8009cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d00:	688e      	ldr	r6, [r1, #8]
 8009d02:	4682      	mov	sl, r0
 8009d04:	429e      	cmp	r6, r3
 8009d06:	460c      	mov	r4, r1
 8009d08:	4690      	mov	r8, r2
 8009d0a:	461f      	mov	r7, r3
 8009d0c:	d838      	bhi.n	8009d80 <__ssputs_r+0x84>
 8009d0e:	898a      	ldrh	r2, [r1, #12]
 8009d10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d14:	d032      	beq.n	8009d7c <__ssputs_r+0x80>
 8009d16:	6825      	ldr	r5, [r4, #0]
 8009d18:	6909      	ldr	r1, [r1, #16]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	eba5 0901 	sub.w	r9, r5, r1
 8009d20:	6965      	ldr	r5, [r4, #20]
 8009d22:	444b      	add	r3, r9
 8009d24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d2c:	106d      	asrs	r5, r5, #1
 8009d2e:	429d      	cmp	r5, r3
 8009d30:	bf38      	it	cc
 8009d32:	461d      	movcc	r5, r3
 8009d34:	0553      	lsls	r3, r2, #21
 8009d36:	d531      	bpl.n	8009d9c <__ssputs_r+0xa0>
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7ff ff6b 	bl	8009c14 <_malloc_r>
 8009d3e:	4606      	mov	r6, r0
 8009d40:	b950      	cbnz	r0, 8009d58 <__ssputs_r+0x5c>
 8009d42:	230c      	movs	r3, #12
 8009d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d48:	f8ca 3000 	str.w	r3, [sl]
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d58:	464a      	mov	r2, r9
 8009d5a:	6921      	ldr	r1, [r4, #16]
 8009d5c:	f7fe f830 	bl	8007dc0 <memcpy>
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6a:	81a3      	strh	r3, [r4, #12]
 8009d6c:	6126      	str	r6, [r4, #16]
 8009d6e:	444e      	add	r6, r9
 8009d70:	6026      	str	r6, [r4, #0]
 8009d72:	463e      	mov	r6, r7
 8009d74:	6165      	str	r5, [r4, #20]
 8009d76:	eba5 0509 	sub.w	r5, r5, r9
 8009d7a:	60a5      	str	r5, [r4, #8]
 8009d7c:	42be      	cmp	r6, r7
 8009d7e:	d900      	bls.n	8009d82 <__ssputs_r+0x86>
 8009d80:	463e      	mov	r6, r7
 8009d82:	4632      	mov	r2, r6
 8009d84:	4641      	mov	r1, r8
 8009d86:	6820      	ldr	r0, [r4, #0]
 8009d88:	f000 f966 	bl	800a058 <memmove>
 8009d8c:	68a3      	ldr	r3, [r4, #8]
 8009d8e:	2000      	movs	r0, #0
 8009d90:	1b9b      	subs	r3, r3, r6
 8009d92:	60a3      	str	r3, [r4, #8]
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	4433      	add	r3, r6
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	e7db      	b.n	8009d54 <__ssputs_r+0x58>
 8009d9c:	462a      	mov	r2, r5
 8009d9e:	f000 f981 	bl	800a0a4 <_realloc_r>
 8009da2:	4606      	mov	r6, r0
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d1e1      	bne.n	8009d6c <__ssputs_r+0x70>
 8009da8:	4650      	mov	r0, sl
 8009daa:	6921      	ldr	r1, [r4, #16]
 8009dac:	f7ff feca 	bl	8009b44 <_free_r>
 8009db0:	e7c7      	b.n	8009d42 <__ssputs_r+0x46>
	...

08009db4 <_svfiprintf_r>:
 8009db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db8:	4698      	mov	r8, r3
 8009dba:	898b      	ldrh	r3, [r1, #12]
 8009dbc:	4607      	mov	r7, r0
 8009dbe:	061b      	lsls	r3, r3, #24
 8009dc0:	460d      	mov	r5, r1
 8009dc2:	4614      	mov	r4, r2
 8009dc4:	b09d      	sub	sp, #116	; 0x74
 8009dc6:	d50e      	bpl.n	8009de6 <_svfiprintf_r+0x32>
 8009dc8:	690b      	ldr	r3, [r1, #16]
 8009dca:	b963      	cbnz	r3, 8009de6 <_svfiprintf_r+0x32>
 8009dcc:	2140      	movs	r1, #64	; 0x40
 8009dce:	f7ff ff21 	bl	8009c14 <_malloc_r>
 8009dd2:	6028      	str	r0, [r5, #0]
 8009dd4:	6128      	str	r0, [r5, #16]
 8009dd6:	b920      	cbnz	r0, 8009de2 <_svfiprintf_r+0x2e>
 8009dd8:	230c      	movs	r3, #12
 8009dda:	603b      	str	r3, [r7, #0]
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009de0:	e0d1      	b.n	8009f86 <_svfiprintf_r+0x1d2>
 8009de2:	2340      	movs	r3, #64	; 0x40
 8009de4:	616b      	str	r3, [r5, #20]
 8009de6:	2300      	movs	r3, #0
 8009de8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dea:	2320      	movs	r3, #32
 8009dec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009df0:	2330      	movs	r3, #48	; 0x30
 8009df2:	f04f 0901 	mov.w	r9, #1
 8009df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dfa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009fa0 <_svfiprintf_r+0x1ec>
 8009dfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e02:	4623      	mov	r3, r4
 8009e04:	469a      	mov	sl, r3
 8009e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e0a:	b10a      	cbz	r2, 8009e10 <_svfiprintf_r+0x5c>
 8009e0c:	2a25      	cmp	r2, #37	; 0x25
 8009e0e:	d1f9      	bne.n	8009e04 <_svfiprintf_r+0x50>
 8009e10:	ebba 0b04 	subs.w	fp, sl, r4
 8009e14:	d00b      	beq.n	8009e2e <_svfiprintf_r+0x7a>
 8009e16:	465b      	mov	r3, fp
 8009e18:	4622      	mov	r2, r4
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f7ff ff6d 	bl	8009cfc <__ssputs_r>
 8009e22:	3001      	adds	r0, #1
 8009e24:	f000 80aa 	beq.w	8009f7c <_svfiprintf_r+0x1c8>
 8009e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e2a:	445a      	add	r2, fp
 8009e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 80a2 	beq.w	8009f7c <_svfiprintf_r+0x1c8>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e42:	f10a 0a01 	add.w	sl, sl, #1
 8009e46:	9304      	str	r3, [sp, #16]
 8009e48:	9307      	str	r3, [sp, #28]
 8009e4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e4e:	931a      	str	r3, [sp, #104]	; 0x68
 8009e50:	4654      	mov	r4, sl
 8009e52:	2205      	movs	r2, #5
 8009e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e58:	4851      	ldr	r0, [pc, #324]	; (8009fa0 <_svfiprintf_r+0x1ec>)
 8009e5a:	f7ff facf 	bl	80093fc <memchr>
 8009e5e:	9a04      	ldr	r2, [sp, #16]
 8009e60:	b9d8      	cbnz	r0, 8009e9a <_svfiprintf_r+0xe6>
 8009e62:	06d0      	lsls	r0, r2, #27
 8009e64:	bf44      	itt	mi
 8009e66:	2320      	movmi	r3, #32
 8009e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e6c:	0711      	lsls	r1, r2, #28
 8009e6e:	bf44      	itt	mi
 8009e70:	232b      	movmi	r3, #43	; 0x2b
 8009e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e76:	f89a 3000 	ldrb.w	r3, [sl]
 8009e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e7c:	d015      	beq.n	8009eaa <_svfiprintf_r+0xf6>
 8009e7e:	4654      	mov	r4, sl
 8009e80:	2000      	movs	r0, #0
 8009e82:	f04f 0c0a 	mov.w	ip, #10
 8009e86:	9a07      	ldr	r2, [sp, #28]
 8009e88:	4621      	mov	r1, r4
 8009e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e8e:	3b30      	subs	r3, #48	; 0x30
 8009e90:	2b09      	cmp	r3, #9
 8009e92:	d94e      	bls.n	8009f32 <_svfiprintf_r+0x17e>
 8009e94:	b1b0      	cbz	r0, 8009ec4 <_svfiprintf_r+0x110>
 8009e96:	9207      	str	r2, [sp, #28]
 8009e98:	e014      	b.n	8009ec4 <_svfiprintf_r+0x110>
 8009e9a:	eba0 0308 	sub.w	r3, r0, r8
 8009e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	46a2      	mov	sl, r4
 8009ea6:	9304      	str	r3, [sp, #16]
 8009ea8:	e7d2      	b.n	8009e50 <_svfiprintf_r+0x9c>
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	1d19      	adds	r1, r3, #4
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	9103      	str	r1, [sp, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	bfbb      	ittet	lt
 8009eb6:	425b      	neglt	r3, r3
 8009eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8009ebc:	9307      	strge	r3, [sp, #28]
 8009ebe:	9307      	strlt	r3, [sp, #28]
 8009ec0:	bfb8      	it	lt
 8009ec2:	9204      	strlt	r2, [sp, #16]
 8009ec4:	7823      	ldrb	r3, [r4, #0]
 8009ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ec8:	d10c      	bne.n	8009ee4 <_svfiprintf_r+0x130>
 8009eca:	7863      	ldrb	r3, [r4, #1]
 8009ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8009ece:	d135      	bne.n	8009f3c <_svfiprintf_r+0x188>
 8009ed0:	9b03      	ldr	r3, [sp, #12]
 8009ed2:	3402      	adds	r4, #2
 8009ed4:	1d1a      	adds	r2, r3, #4
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	9203      	str	r2, [sp, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	bfb8      	it	lt
 8009ede:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ee2:	9305      	str	r3, [sp, #20]
 8009ee4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009fa4 <_svfiprintf_r+0x1f0>
 8009ee8:	2203      	movs	r2, #3
 8009eea:	4650      	mov	r0, sl
 8009eec:	7821      	ldrb	r1, [r4, #0]
 8009eee:	f7ff fa85 	bl	80093fc <memchr>
 8009ef2:	b140      	cbz	r0, 8009f06 <_svfiprintf_r+0x152>
 8009ef4:	2340      	movs	r3, #64	; 0x40
 8009ef6:	eba0 000a 	sub.w	r0, r0, sl
 8009efa:	fa03 f000 	lsl.w	r0, r3, r0
 8009efe:	9b04      	ldr	r3, [sp, #16]
 8009f00:	3401      	adds	r4, #1
 8009f02:	4303      	orrs	r3, r0
 8009f04:	9304      	str	r3, [sp, #16]
 8009f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0a:	2206      	movs	r2, #6
 8009f0c:	4826      	ldr	r0, [pc, #152]	; (8009fa8 <_svfiprintf_r+0x1f4>)
 8009f0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f12:	f7ff fa73 	bl	80093fc <memchr>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d038      	beq.n	8009f8c <_svfiprintf_r+0x1d8>
 8009f1a:	4b24      	ldr	r3, [pc, #144]	; (8009fac <_svfiprintf_r+0x1f8>)
 8009f1c:	bb1b      	cbnz	r3, 8009f66 <_svfiprintf_r+0x1b2>
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	3307      	adds	r3, #7
 8009f22:	f023 0307 	bic.w	r3, r3, #7
 8009f26:	3308      	adds	r3, #8
 8009f28:	9303      	str	r3, [sp, #12]
 8009f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2c:	4433      	add	r3, r6
 8009f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f30:	e767      	b.n	8009e02 <_svfiprintf_r+0x4e>
 8009f32:	460c      	mov	r4, r1
 8009f34:	2001      	movs	r0, #1
 8009f36:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f3a:	e7a5      	b.n	8009e88 <_svfiprintf_r+0xd4>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f04f 0c0a 	mov.w	ip, #10
 8009f42:	4619      	mov	r1, r3
 8009f44:	3401      	adds	r4, #1
 8009f46:	9305      	str	r3, [sp, #20]
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f4e:	3a30      	subs	r2, #48	; 0x30
 8009f50:	2a09      	cmp	r2, #9
 8009f52:	d903      	bls.n	8009f5c <_svfiprintf_r+0x1a8>
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d0c5      	beq.n	8009ee4 <_svfiprintf_r+0x130>
 8009f58:	9105      	str	r1, [sp, #20]
 8009f5a:	e7c3      	b.n	8009ee4 <_svfiprintf_r+0x130>
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	2301      	movs	r3, #1
 8009f60:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f64:	e7f0      	b.n	8009f48 <_svfiprintf_r+0x194>
 8009f66:	ab03      	add	r3, sp, #12
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	462a      	mov	r2, r5
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	4b10      	ldr	r3, [pc, #64]	; (8009fb0 <_svfiprintf_r+0x1fc>)
 8009f70:	a904      	add	r1, sp, #16
 8009f72:	f7fd ffd9 	bl	8007f28 <_printf_float>
 8009f76:	1c42      	adds	r2, r0, #1
 8009f78:	4606      	mov	r6, r0
 8009f7a:	d1d6      	bne.n	8009f2a <_svfiprintf_r+0x176>
 8009f7c:	89ab      	ldrh	r3, [r5, #12]
 8009f7e:	065b      	lsls	r3, r3, #25
 8009f80:	f53f af2c 	bmi.w	8009ddc <_svfiprintf_r+0x28>
 8009f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f86:	b01d      	add	sp, #116	; 0x74
 8009f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8c:	ab03      	add	r3, sp, #12
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	462a      	mov	r2, r5
 8009f92:	4638      	mov	r0, r7
 8009f94:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <_svfiprintf_r+0x1fc>)
 8009f96:	a904      	add	r1, sp, #16
 8009f98:	f7fe fa62 	bl	8008460 <_printf_i>
 8009f9c:	e7eb      	b.n	8009f76 <_svfiprintf_r+0x1c2>
 8009f9e:	bf00      	nop
 8009fa0:	0800b504 	.word	0x0800b504
 8009fa4:	0800b50a 	.word	0x0800b50a
 8009fa8:	0800b50e 	.word	0x0800b50e
 8009fac:	08007f29 	.word	0x08007f29
 8009fb0:	08009cfd 	.word	0x08009cfd

08009fb4 <_sbrk_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	4d05      	ldr	r5, [pc, #20]	; (8009fd0 <_sbrk_r+0x1c>)
 8009fba:	4604      	mov	r4, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	602b      	str	r3, [r5, #0]
 8009fc0:	f7f8 fc80 	bl	80028c4 <_sbrk>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d102      	bne.n	8009fce <_sbrk_r+0x1a>
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	b103      	cbz	r3, 8009fce <_sbrk_r+0x1a>
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	2000025c 	.word	0x2000025c

08009fd4 <__assert_func>:
 8009fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fd6:	4614      	mov	r4, r2
 8009fd8:	461a      	mov	r2, r3
 8009fda:	4b09      	ldr	r3, [pc, #36]	; (800a000 <__assert_func+0x2c>)
 8009fdc:	4605      	mov	r5, r0
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68d8      	ldr	r0, [r3, #12]
 8009fe2:	b14c      	cbz	r4, 8009ff8 <__assert_func+0x24>
 8009fe4:	4b07      	ldr	r3, [pc, #28]	; (800a004 <__assert_func+0x30>)
 8009fe6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fea:	9100      	str	r1, [sp, #0]
 8009fec:	462b      	mov	r3, r5
 8009fee:	4906      	ldr	r1, [pc, #24]	; (800a008 <__assert_func+0x34>)
 8009ff0:	f000 f80e 	bl	800a010 <fiprintf>
 8009ff4:	f000 faaa 	bl	800a54c <abort>
 8009ff8:	4b04      	ldr	r3, [pc, #16]	; (800a00c <__assert_func+0x38>)
 8009ffa:	461c      	mov	r4, r3
 8009ffc:	e7f3      	b.n	8009fe6 <__assert_func+0x12>
 8009ffe:	bf00      	nop
 800a000:	20000040 	.word	0x20000040
 800a004:	0800b515 	.word	0x0800b515
 800a008:	0800b522 	.word	0x0800b522
 800a00c:	0800b550 	.word	0x0800b550

0800a010 <fiprintf>:
 800a010:	b40e      	push	{r1, r2, r3}
 800a012:	b503      	push	{r0, r1, lr}
 800a014:	4601      	mov	r1, r0
 800a016:	ab03      	add	r3, sp, #12
 800a018:	4805      	ldr	r0, [pc, #20]	; (800a030 <fiprintf+0x20>)
 800a01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a01e:	6800      	ldr	r0, [r0, #0]
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	f000 f895 	bl	800a150 <_vfiprintf_r>
 800a026:	b002      	add	sp, #8
 800a028:	f85d eb04 	ldr.w	lr, [sp], #4
 800a02c:	b003      	add	sp, #12
 800a02e:	4770      	bx	lr
 800a030:	20000040 	.word	0x20000040

0800a034 <__ascii_mbtowc>:
 800a034:	b082      	sub	sp, #8
 800a036:	b901      	cbnz	r1, 800a03a <__ascii_mbtowc+0x6>
 800a038:	a901      	add	r1, sp, #4
 800a03a:	b142      	cbz	r2, 800a04e <__ascii_mbtowc+0x1a>
 800a03c:	b14b      	cbz	r3, 800a052 <__ascii_mbtowc+0x1e>
 800a03e:	7813      	ldrb	r3, [r2, #0]
 800a040:	600b      	str	r3, [r1, #0]
 800a042:	7812      	ldrb	r2, [r2, #0]
 800a044:	1e10      	subs	r0, r2, #0
 800a046:	bf18      	it	ne
 800a048:	2001      	movne	r0, #1
 800a04a:	b002      	add	sp, #8
 800a04c:	4770      	bx	lr
 800a04e:	4610      	mov	r0, r2
 800a050:	e7fb      	b.n	800a04a <__ascii_mbtowc+0x16>
 800a052:	f06f 0001 	mvn.w	r0, #1
 800a056:	e7f8      	b.n	800a04a <__ascii_mbtowc+0x16>

0800a058 <memmove>:
 800a058:	4288      	cmp	r0, r1
 800a05a:	b510      	push	{r4, lr}
 800a05c:	eb01 0402 	add.w	r4, r1, r2
 800a060:	d902      	bls.n	800a068 <memmove+0x10>
 800a062:	4284      	cmp	r4, r0
 800a064:	4623      	mov	r3, r4
 800a066:	d807      	bhi.n	800a078 <memmove+0x20>
 800a068:	1e43      	subs	r3, r0, #1
 800a06a:	42a1      	cmp	r1, r4
 800a06c:	d008      	beq.n	800a080 <memmove+0x28>
 800a06e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a072:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a076:	e7f8      	b.n	800a06a <memmove+0x12>
 800a078:	4601      	mov	r1, r0
 800a07a:	4402      	add	r2, r0
 800a07c:	428a      	cmp	r2, r1
 800a07e:	d100      	bne.n	800a082 <memmove+0x2a>
 800a080:	bd10      	pop	{r4, pc}
 800a082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a08a:	e7f7      	b.n	800a07c <memmove+0x24>

0800a08c <__malloc_lock>:
 800a08c:	4801      	ldr	r0, [pc, #4]	; (800a094 <__malloc_lock+0x8>)
 800a08e:	f000 bc19 	b.w	800a8c4 <__retarget_lock_acquire_recursive>
 800a092:	bf00      	nop
 800a094:	20000260 	.word	0x20000260

0800a098 <__malloc_unlock>:
 800a098:	4801      	ldr	r0, [pc, #4]	; (800a0a0 <__malloc_unlock+0x8>)
 800a09a:	f000 bc14 	b.w	800a8c6 <__retarget_lock_release_recursive>
 800a09e:	bf00      	nop
 800a0a0:	20000260 	.word	0x20000260

0800a0a4 <_realloc_r>:
 800a0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a8:	4680      	mov	r8, r0
 800a0aa:	4614      	mov	r4, r2
 800a0ac:	460e      	mov	r6, r1
 800a0ae:	b921      	cbnz	r1, 800a0ba <_realloc_r+0x16>
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b6:	f7ff bdad 	b.w	8009c14 <_malloc_r>
 800a0ba:	b92a      	cbnz	r2, 800a0c8 <_realloc_r+0x24>
 800a0bc:	f7ff fd42 	bl	8009b44 <_free_r>
 800a0c0:	4625      	mov	r5, r4
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c8:	f000 fc64 	bl	800a994 <_malloc_usable_size_r>
 800a0cc:	4284      	cmp	r4, r0
 800a0ce:	4607      	mov	r7, r0
 800a0d0:	d802      	bhi.n	800a0d8 <_realloc_r+0x34>
 800a0d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0d6:	d812      	bhi.n	800a0fe <_realloc_r+0x5a>
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4640      	mov	r0, r8
 800a0dc:	f7ff fd9a 	bl	8009c14 <_malloc_r>
 800a0e0:	4605      	mov	r5, r0
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d0ed      	beq.n	800a0c2 <_realloc_r+0x1e>
 800a0e6:	42bc      	cmp	r4, r7
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	bf28      	it	cs
 800a0ee:	463a      	movcs	r2, r7
 800a0f0:	f7fd fe66 	bl	8007dc0 <memcpy>
 800a0f4:	4631      	mov	r1, r6
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	f7ff fd24 	bl	8009b44 <_free_r>
 800a0fc:	e7e1      	b.n	800a0c2 <_realloc_r+0x1e>
 800a0fe:	4635      	mov	r5, r6
 800a100:	e7df      	b.n	800a0c2 <_realloc_r+0x1e>

0800a102 <__sfputc_r>:
 800a102:	6893      	ldr	r3, [r2, #8]
 800a104:	b410      	push	{r4}
 800a106:	3b01      	subs	r3, #1
 800a108:	2b00      	cmp	r3, #0
 800a10a:	6093      	str	r3, [r2, #8]
 800a10c:	da07      	bge.n	800a11e <__sfputc_r+0x1c>
 800a10e:	6994      	ldr	r4, [r2, #24]
 800a110:	42a3      	cmp	r3, r4
 800a112:	db01      	blt.n	800a118 <__sfputc_r+0x16>
 800a114:	290a      	cmp	r1, #10
 800a116:	d102      	bne.n	800a11e <__sfputc_r+0x1c>
 800a118:	bc10      	pop	{r4}
 800a11a:	f000 b949 	b.w	800a3b0 <__swbuf_r>
 800a11e:	6813      	ldr	r3, [r2, #0]
 800a120:	1c58      	adds	r0, r3, #1
 800a122:	6010      	str	r0, [r2, #0]
 800a124:	7019      	strb	r1, [r3, #0]
 800a126:	4608      	mov	r0, r1
 800a128:	bc10      	pop	{r4}
 800a12a:	4770      	bx	lr

0800a12c <__sfputs_r>:
 800a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12e:	4606      	mov	r6, r0
 800a130:	460f      	mov	r7, r1
 800a132:	4614      	mov	r4, r2
 800a134:	18d5      	adds	r5, r2, r3
 800a136:	42ac      	cmp	r4, r5
 800a138:	d101      	bne.n	800a13e <__sfputs_r+0x12>
 800a13a:	2000      	movs	r0, #0
 800a13c:	e007      	b.n	800a14e <__sfputs_r+0x22>
 800a13e:	463a      	mov	r2, r7
 800a140:	4630      	mov	r0, r6
 800a142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a146:	f7ff ffdc 	bl	800a102 <__sfputc_r>
 800a14a:	1c43      	adds	r3, r0, #1
 800a14c:	d1f3      	bne.n	800a136 <__sfputs_r+0xa>
 800a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a150 <_vfiprintf_r>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	460d      	mov	r5, r1
 800a156:	4614      	mov	r4, r2
 800a158:	4698      	mov	r8, r3
 800a15a:	4606      	mov	r6, r0
 800a15c:	b09d      	sub	sp, #116	; 0x74
 800a15e:	b118      	cbz	r0, 800a168 <_vfiprintf_r+0x18>
 800a160:	6983      	ldr	r3, [r0, #24]
 800a162:	b90b      	cbnz	r3, 800a168 <_vfiprintf_r+0x18>
 800a164:	f000 fb10 	bl	800a788 <__sinit>
 800a168:	4b89      	ldr	r3, [pc, #548]	; (800a390 <_vfiprintf_r+0x240>)
 800a16a:	429d      	cmp	r5, r3
 800a16c:	d11b      	bne.n	800a1a6 <_vfiprintf_r+0x56>
 800a16e:	6875      	ldr	r5, [r6, #4]
 800a170:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a172:	07d9      	lsls	r1, r3, #31
 800a174:	d405      	bmi.n	800a182 <_vfiprintf_r+0x32>
 800a176:	89ab      	ldrh	r3, [r5, #12]
 800a178:	059a      	lsls	r2, r3, #22
 800a17a:	d402      	bmi.n	800a182 <_vfiprintf_r+0x32>
 800a17c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a17e:	f000 fba1 	bl	800a8c4 <__retarget_lock_acquire_recursive>
 800a182:	89ab      	ldrh	r3, [r5, #12]
 800a184:	071b      	lsls	r3, r3, #28
 800a186:	d501      	bpl.n	800a18c <_vfiprintf_r+0x3c>
 800a188:	692b      	ldr	r3, [r5, #16]
 800a18a:	b9eb      	cbnz	r3, 800a1c8 <_vfiprintf_r+0x78>
 800a18c:	4629      	mov	r1, r5
 800a18e:	4630      	mov	r0, r6
 800a190:	f000 f96e 	bl	800a470 <__swsetup_r>
 800a194:	b1c0      	cbz	r0, 800a1c8 <_vfiprintf_r+0x78>
 800a196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a198:	07dc      	lsls	r4, r3, #31
 800a19a:	d50e      	bpl.n	800a1ba <_vfiprintf_r+0x6a>
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1a0:	b01d      	add	sp, #116	; 0x74
 800a1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a6:	4b7b      	ldr	r3, [pc, #492]	; (800a394 <_vfiprintf_r+0x244>)
 800a1a8:	429d      	cmp	r5, r3
 800a1aa:	d101      	bne.n	800a1b0 <_vfiprintf_r+0x60>
 800a1ac:	68b5      	ldr	r5, [r6, #8]
 800a1ae:	e7df      	b.n	800a170 <_vfiprintf_r+0x20>
 800a1b0:	4b79      	ldr	r3, [pc, #484]	; (800a398 <_vfiprintf_r+0x248>)
 800a1b2:	429d      	cmp	r5, r3
 800a1b4:	bf08      	it	eq
 800a1b6:	68f5      	ldreq	r5, [r6, #12]
 800a1b8:	e7da      	b.n	800a170 <_vfiprintf_r+0x20>
 800a1ba:	89ab      	ldrh	r3, [r5, #12]
 800a1bc:	0598      	lsls	r0, r3, #22
 800a1be:	d4ed      	bmi.n	800a19c <_vfiprintf_r+0x4c>
 800a1c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1c2:	f000 fb80 	bl	800a8c6 <__retarget_lock_release_recursive>
 800a1c6:	e7e9      	b.n	800a19c <_vfiprintf_r+0x4c>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a1cc:	2320      	movs	r3, #32
 800a1ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1d2:	2330      	movs	r3, #48	; 0x30
 800a1d4:	f04f 0901 	mov.w	r9, #1
 800a1d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1dc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a39c <_vfiprintf_r+0x24c>
 800a1e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1e4:	4623      	mov	r3, r4
 800a1e6:	469a      	mov	sl, r3
 800a1e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1ec:	b10a      	cbz	r2, 800a1f2 <_vfiprintf_r+0xa2>
 800a1ee:	2a25      	cmp	r2, #37	; 0x25
 800a1f0:	d1f9      	bne.n	800a1e6 <_vfiprintf_r+0x96>
 800a1f2:	ebba 0b04 	subs.w	fp, sl, r4
 800a1f6:	d00b      	beq.n	800a210 <_vfiprintf_r+0xc0>
 800a1f8:	465b      	mov	r3, fp
 800a1fa:	4622      	mov	r2, r4
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	4630      	mov	r0, r6
 800a200:	f7ff ff94 	bl	800a12c <__sfputs_r>
 800a204:	3001      	adds	r0, #1
 800a206:	f000 80aa 	beq.w	800a35e <_vfiprintf_r+0x20e>
 800a20a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a20c:	445a      	add	r2, fp
 800a20e:	9209      	str	r2, [sp, #36]	; 0x24
 800a210:	f89a 3000 	ldrb.w	r3, [sl]
 800a214:	2b00      	cmp	r3, #0
 800a216:	f000 80a2 	beq.w	800a35e <_vfiprintf_r+0x20e>
 800a21a:	2300      	movs	r3, #0
 800a21c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a224:	f10a 0a01 	add.w	sl, sl, #1
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	9307      	str	r3, [sp, #28]
 800a22c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a230:	931a      	str	r3, [sp, #104]	; 0x68
 800a232:	4654      	mov	r4, sl
 800a234:	2205      	movs	r2, #5
 800a236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a23a:	4858      	ldr	r0, [pc, #352]	; (800a39c <_vfiprintf_r+0x24c>)
 800a23c:	f7ff f8de 	bl	80093fc <memchr>
 800a240:	9a04      	ldr	r2, [sp, #16]
 800a242:	b9d8      	cbnz	r0, 800a27c <_vfiprintf_r+0x12c>
 800a244:	06d1      	lsls	r1, r2, #27
 800a246:	bf44      	itt	mi
 800a248:	2320      	movmi	r3, #32
 800a24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a24e:	0713      	lsls	r3, r2, #28
 800a250:	bf44      	itt	mi
 800a252:	232b      	movmi	r3, #43	; 0x2b
 800a254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a258:	f89a 3000 	ldrb.w	r3, [sl]
 800a25c:	2b2a      	cmp	r3, #42	; 0x2a
 800a25e:	d015      	beq.n	800a28c <_vfiprintf_r+0x13c>
 800a260:	4654      	mov	r4, sl
 800a262:	2000      	movs	r0, #0
 800a264:	f04f 0c0a 	mov.w	ip, #10
 800a268:	9a07      	ldr	r2, [sp, #28]
 800a26a:	4621      	mov	r1, r4
 800a26c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a270:	3b30      	subs	r3, #48	; 0x30
 800a272:	2b09      	cmp	r3, #9
 800a274:	d94e      	bls.n	800a314 <_vfiprintf_r+0x1c4>
 800a276:	b1b0      	cbz	r0, 800a2a6 <_vfiprintf_r+0x156>
 800a278:	9207      	str	r2, [sp, #28]
 800a27a:	e014      	b.n	800a2a6 <_vfiprintf_r+0x156>
 800a27c:	eba0 0308 	sub.w	r3, r0, r8
 800a280:	fa09 f303 	lsl.w	r3, r9, r3
 800a284:	4313      	orrs	r3, r2
 800a286:	46a2      	mov	sl, r4
 800a288:	9304      	str	r3, [sp, #16]
 800a28a:	e7d2      	b.n	800a232 <_vfiprintf_r+0xe2>
 800a28c:	9b03      	ldr	r3, [sp, #12]
 800a28e:	1d19      	adds	r1, r3, #4
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	9103      	str	r1, [sp, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	bfbb      	ittet	lt
 800a298:	425b      	neglt	r3, r3
 800a29a:	f042 0202 	orrlt.w	r2, r2, #2
 800a29e:	9307      	strge	r3, [sp, #28]
 800a2a0:	9307      	strlt	r3, [sp, #28]
 800a2a2:	bfb8      	it	lt
 800a2a4:	9204      	strlt	r2, [sp, #16]
 800a2a6:	7823      	ldrb	r3, [r4, #0]
 800a2a8:	2b2e      	cmp	r3, #46	; 0x2e
 800a2aa:	d10c      	bne.n	800a2c6 <_vfiprintf_r+0x176>
 800a2ac:	7863      	ldrb	r3, [r4, #1]
 800a2ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a2b0:	d135      	bne.n	800a31e <_vfiprintf_r+0x1ce>
 800a2b2:	9b03      	ldr	r3, [sp, #12]
 800a2b4:	3402      	adds	r4, #2
 800a2b6:	1d1a      	adds	r2, r3, #4
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	9203      	str	r2, [sp, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	bfb8      	it	lt
 800a2c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2c4:	9305      	str	r3, [sp, #20]
 800a2c6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a3a0 <_vfiprintf_r+0x250>
 800a2ca:	2203      	movs	r2, #3
 800a2cc:	4650      	mov	r0, sl
 800a2ce:	7821      	ldrb	r1, [r4, #0]
 800a2d0:	f7ff f894 	bl	80093fc <memchr>
 800a2d4:	b140      	cbz	r0, 800a2e8 <_vfiprintf_r+0x198>
 800a2d6:	2340      	movs	r3, #64	; 0x40
 800a2d8:	eba0 000a 	sub.w	r0, r0, sl
 800a2dc:	fa03 f000 	lsl.w	r0, r3, r0
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	3401      	adds	r4, #1
 800a2e4:	4303      	orrs	r3, r0
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ec:	2206      	movs	r2, #6
 800a2ee:	482d      	ldr	r0, [pc, #180]	; (800a3a4 <_vfiprintf_r+0x254>)
 800a2f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2f4:	f7ff f882 	bl	80093fc <memchr>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d03f      	beq.n	800a37c <_vfiprintf_r+0x22c>
 800a2fc:	4b2a      	ldr	r3, [pc, #168]	; (800a3a8 <_vfiprintf_r+0x258>)
 800a2fe:	bb1b      	cbnz	r3, 800a348 <_vfiprintf_r+0x1f8>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	3307      	adds	r3, #7
 800a304:	f023 0307 	bic.w	r3, r3, #7
 800a308:	3308      	adds	r3, #8
 800a30a:	9303      	str	r3, [sp, #12]
 800a30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a30e:	443b      	add	r3, r7
 800a310:	9309      	str	r3, [sp, #36]	; 0x24
 800a312:	e767      	b.n	800a1e4 <_vfiprintf_r+0x94>
 800a314:	460c      	mov	r4, r1
 800a316:	2001      	movs	r0, #1
 800a318:	fb0c 3202 	mla	r2, ip, r2, r3
 800a31c:	e7a5      	b.n	800a26a <_vfiprintf_r+0x11a>
 800a31e:	2300      	movs	r3, #0
 800a320:	f04f 0c0a 	mov.w	ip, #10
 800a324:	4619      	mov	r1, r3
 800a326:	3401      	adds	r4, #1
 800a328:	9305      	str	r3, [sp, #20]
 800a32a:	4620      	mov	r0, r4
 800a32c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a330:	3a30      	subs	r2, #48	; 0x30
 800a332:	2a09      	cmp	r2, #9
 800a334:	d903      	bls.n	800a33e <_vfiprintf_r+0x1ee>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d0c5      	beq.n	800a2c6 <_vfiprintf_r+0x176>
 800a33a:	9105      	str	r1, [sp, #20]
 800a33c:	e7c3      	b.n	800a2c6 <_vfiprintf_r+0x176>
 800a33e:	4604      	mov	r4, r0
 800a340:	2301      	movs	r3, #1
 800a342:	fb0c 2101 	mla	r1, ip, r1, r2
 800a346:	e7f0      	b.n	800a32a <_vfiprintf_r+0x1da>
 800a348:	ab03      	add	r3, sp, #12
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	462a      	mov	r2, r5
 800a34e:	4630      	mov	r0, r6
 800a350:	4b16      	ldr	r3, [pc, #88]	; (800a3ac <_vfiprintf_r+0x25c>)
 800a352:	a904      	add	r1, sp, #16
 800a354:	f7fd fde8 	bl	8007f28 <_printf_float>
 800a358:	4607      	mov	r7, r0
 800a35a:	1c78      	adds	r0, r7, #1
 800a35c:	d1d6      	bne.n	800a30c <_vfiprintf_r+0x1bc>
 800a35e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a360:	07d9      	lsls	r1, r3, #31
 800a362:	d405      	bmi.n	800a370 <_vfiprintf_r+0x220>
 800a364:	89ab      	ldrh	r3, [r5, #12]
 800a366:	059a      	lsls	r2, r3, #22
 800a368:	d402      	bmi.n	800a370 <_vfiprintf_r+0x220>
 800a36a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a36c:	f000 faab 	bl	800a8c6 <__retarget_lock_release_recursive>
 800a370:	89ab      	ldrh	r3, [r5, #12]
 800a372:	065b      	lsls	r3, r3, #25
 800a374:	f53f af12 	bmi.w	800a19c <_vfiprintf_r+0x4c>
 800a378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a37a:	e711      	b.n	800a1a0 <_vfiprintf_r+0x50>
 800a37c:	ab03      	add	r3, sp, #12
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	462a      	mov	r2, r5
 800a382:	4630      	mov	r0, r6
 800a384:	4b09      	ldr	r3, [pc, #36]	; (800a3ac <_vfiprintf_r+0x25c>)
 800a386:	a904      	add	r1, sp, #16
 800a388:	f7fe f86a 	bl	8008460 <_printf_i>
 800a38c:	e7e4      	b.n	800a358 <_vfiprintf_r+0x208>
 800a38e:	bf00      	nop
 800a390:	0800b67c 	.word	0x0800b67c
 800a394:	0800b69c 	.word	0x0800b69c
 800a398:	0800b65c 	.word	0x0800b65c
 800a39c:	0800b504 	.word	0x0800b504
 800a3a0:	0800b50a 	.word	0x0800b50a
 800a3a4:	0800b50e 	.word	0x0800b50e
 800a3a8:	08007f29 	.word	0x08007f29
 800a3ac:	0800a12d 	.word	0x0800a12d

0800a3b0 <__swbuf_r>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	460e      	mov	r6, r1
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	b118      	cbz	r0, 800a3c2 <__swbuf_r+0x12>
 800a3ba:	6983      	ldr	r3, [r0, #24]
 800a3bc:	b90b      	cbnz	r3, 800a3c2 <__swbuf_r+0x12>
 800a3be:	f000 f9e3 	bl	800a788 <__sinit>
 800a3c2:	4b21      	ldr	r3, [pc, #132]	; (800a448 <__swbuf_r+0x98>)
 800a3c4:	429c      	cmp	r4, r3
 800a3c6:	d12b      	bne.n	800a420 <__swbuf_r+0x70>
 800a3c8:	686c      	ldr	r4, [r5, #4]
 800a3ca:	69a3      	ldr	r3, [r4, #24]
 800a3cc:	60a3      	str	r3, [r4, #8]
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	071a      	lsls	r2, r3, #28
 800a3d2:	d52f      	bpl.n	800a434 <__swbuf_r+0x84>
 800a3d4:	6923      	ldr	r3, [r4, #16]
 800a3d6:	b36b      	cbz	r3, 800a434 <__swbuf_r+0x84>
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	6820      	ldr	r0, [r4, #0]
 800a3dc:	b2f6      	uxtb	r6, r6
 800a3de:	1ac0      	subs	r0, r0, r3
 800a3e0:	6963      	ldr	r3, [r4, #20]
 800a3e2:	4637      	mov	r7, r6
 800a3e4:	4283      	cmp	r3, r0
 800a3e6:	dc04      	bgt.n	800a3f2 <__swbuf_r+0x42>
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f000 f938 	bl	800a660 <_fflush_r>
 800a3f0:	bb30      	cbnz	r0, 800a440 <__swbuf_r+0x90>
 800a3f2:	68a3      	ldr	r3, [r4, #8]
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	60a3      	str	r3, [r4, #8]
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	1c5a      	adds	r2, r3, #1
 800a3fe:	6022      	str	r2, [r4, #0]
 800a400:	701e      	strb	r6, [r3, #0]
 800a402:	6963      	ldr	r3, [r4, #20]
 800a404:	4283      	cmp	r3, r0
 800a406:	d004      	beq.n	800a412 <__swbuf_r+0x62>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	07db      	lsls	r3, r3, #31
 800a40c:	d506      	bpl.n	800a41c <__swbuf_r+0x6c>
 800a40e:	2e0a      	cmp	r6, #10
 800a410:	d104      	bne.n	800a41c <__swbuf_r+0x6c>
 800a412:	4621      	mov	r1, r4
 800a414:	4628      	mov	r0, r5
 800a416:	f000 f923 	bl	800a660 <_fflush_r>
 800a41a:	b988      	cbnz	r0, 800a440 <__swbuf_r+0x90>
 800a41c:	4638      	mov	r0, r7
 800a41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a420:	4b0a      	ldr	r3, [pc, #40]	; (800a44c <__swbuf_r+0x9c>)
 800a422:	429c      	cmp	r4, r3
 800a424:	d101      	bne.n	800a42a <__swbuf_r+0x7a>
 800a426:	68ac      	ldr	r4, [r5, #8]
 800a428:	e7cf      	b.n	800a3ca <__swbuf_r+0x1a>
 800a42a:	4b09      	ldr	r3, [pc, #36]	; (800a450 <__swbuf_r+0xa0>)
 800a42c:	429c      	cmp	r4, r3
 800a42e:	bf08      	it	eq
 800a430:	68ec      	ldreq	r4, [r5, #12]
 800a432:	e7ca      	b.n	800a3ca <__swbuf_r+0x1a>
 800a434:	4621      	mov	r1, r4
 800a436:	4628      	mov	r0, r5
 800a438:	f000 f81a 	bl	800a470 <__swsetup_r>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d0cb      	beq.n	800a3d8 <__swbuf_r+0x28>
 800a440:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a444:	e7ea      	b.n	800a41c <__swbuf_r+0x6c>
 800a446:	bf00      	nop
 800a448:	0800b67c 	.word	0x0800b67c
 800a44c:	0800b69c 	.word	0x0800b69c
 800a450:	0800b65c 	.word	0x0800b65c

0800a454 <__ascii_wctomb>:
 800a454:	4603      	mov	r3, r0
 800a456:	4608      	mov	r0, r1
 800a458:	b141      	cbz	r1, 800a46c <__ascii_wctomb+0x18>
 800a45a:	2aff      	cmp	r2, #255	; 0xff
 800a45c:	d904      	bls.n	800a468 <__ascii_wctomb+0x14>
 800a45e:	228a      	movs	r2, #138	; 0x8a
 800a460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	4770      	bx	lr
 800a468:	2001      	movs	r0, #1
 800a46a:	700a      	strb	r2, [r1, #0]
 800a46c:	4770      	bx	lr
	...

0800a470 <__swsetup_r>:
 800a470:	4b32      	ldr	r3, [pc, #200]	; (800a53c <__swsetup_r+0xcc>)
 800a472:	b570      	push	{r4, r5, r6, lr}
 800a474:	681d      	ldr	r5, [r3, #0]
 800a476:	4606      	mov	r6, r0
 800a478:	460c      	mov	r4, r1
 800a47a:	b125      	cbz	r5, 800a486 <__swsetup_r+0x16>
 800a47c:	69ab      	ldr	r3, [r5, #24]
 800a47e:	b913      	cbnz	r3, 800a486 <__swsetup_r+0x16>
 800a480:	4628      	mov	r0, r5
 800a482:	f000 f981 	bl	800a788 <__sinit>
 800a486:	4b2e      	ldr	r3, [pc, #184]	; (800a540 <__swsetup_r+0xd0>)
 800a488:	429c      	cmp	r4, r3
 800a48a:	d10f      	bne.n	800a4ac <__swsetup_r+0x3c>
 800a48c:	686c      	ldr	r4, [r5, #4]
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a494:	0719      	lsls	r1, r3, #28
 800a496:	d42c      	bmi.n	800a4f2 <__swsetup_r+0x82>
 800a498:	06dd      	lsls	r5, r3, #27
 800a49a:	d411      	bmi.n	800a4c0 <__swsetup_r+0x50>
 800a49c:	2309      	movs	r3, #9
 800a49e:	6033      	str	r3, [r6, #0]
 800a4a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4a8:	81a3      	strh	r3, [r4, #12]
 800a4aa:	e03e      	b.n	800a52a <__swsetup_r+0xba>
 800a4ac:	4b25      	ldr	r3, [pc, #148]	; (800a544 <__swsetup_r+0xd4>)
 800a4ae:	429c      	cmp	r4, r3
 800a4b0:	d101      	bne.n	800a4b6 <__swsetup_r+0x46>
 800a4b2:	68ac      	ldr	r4, [r5, #8]
 800a4b4:	e7eb      	b.n	800a48e <__swsetup_r+0x1e>
 800a4b6:	4b24      	ldr	r3, [pc, #144]	; (800a548 <__swsetup_r+0xd8>)
 800a4b8:	429c      	cmp	r4, r3
 800a4ba:	bf08      	it	eq
 800a4bc:	68ec      	ldreq	r4, [r5, #12]
 800a4be:	e7e6      	b.n	800a48e <__swsetup_r+0x1e>
 800a4c0:	0758      	lsls	r0, r3, #29
 800a4c2:	d512      	bpl.n	800a4ea <__swsetup_r+0x7a>
 800a4c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4c6:	b141      	cbz	r1, 800a4da <__swsetup_r+0x6a>
 800a4c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4cc:	4299      	cmp	r1, r3
 800a4ce:	d002      	beq.n	800a4d6 <__swsetup_r+0x66>
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7ff fb37 	bl	8009b44 <_free_r>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	6363      	str	r3, [r4, #52]	; 0x34
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	6063      	str	r3, [r4, #4]
 800a4e6:	6923      	ldr	r3, [r4, #16]
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	f043 0308 	orr.w	r3, r3, #8
 800a4f0:	81a3      	strh	r3, [r4, #12]
 800a4f2:	6923      	ldr	r3, [r4, #16]
 800a4f4:	b94b      	cbnz	r3, 800a50a <__swsetup_r+0x9a>
 800a4f6:	89a3      	ldrh	r3, [r4, #12]
 800a4f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a500:	d003      	beq.n	800a50a <__swsetup_r+0x9a>
 800a502:	4621      	mov	r1, r4
 800a504:	4630      	mov	r0, r6
 800a506:	f000 fa05 	bl	800a914 <__smakebuf_r>
 800a50a:	89a0      	ldrh	r0, [r4, #12]
 800a50c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a510:	f010 0301 	ands.w	r3, r0, #1
 800a514:	d00a      	beq.n	800a52c <__swsetup_r+0xbc>
 800a516:	2300      	movs	r3, #0
 800a518:	60a3      	str	r3, [r4, #8]
 800a51a:	6963      	ldr	r3, [r4, #20]
 800a51c:	425b      	negs	r3, r3
 800a51e:	61a3      	str	r3, [r4, #24]
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	b943      	cbnz	r3, 800a536 <__swsetup_r+0xc6>
 800a524:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a528:	d1ba      	bne.n	800a4a0 <__swsetup_r+0x30>
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	0781      	lsls	r1, r0, #30
 800a52e:	bf58      	it	pl
 800a530:	6963      	ldrpl	r3, [r4, #20]
 800a532:	60a3      	str	r3, [r4, #8]
 800a534:	e7f4      	b.n	800a520 <__swsetup_r+0xb0>
 800a536:	2000      	movs	r0, #0
 800a538:	e7f7      	b.n	800a52a <__swsetup_r+0xba>
 800a53a:	bf00      	nop
 800a53c:	20000040 	.word	0x20000040
 800a540:	0800b67c 	.word	0x0800b67c
 800a544:	0800b69c 	.word	0x0800b69c
 800a548:	0800b65c 	.word	0x0800b65c

0800a54c <abort>:
 800a54c:	2006      	movs	r0, #6
 800a54e:	b508      	push	{r3, lr}
 800a550:	f000 fa50 	bl	800a9f4 <raise>
 800a554:	2001      	movs	r0, #1
 800a556:	f7f8 f942 	bl	80027de <_exit>
	...

0800a55c <__sflush_r>:
 800a55c:	898a      	ldrh	r2, [r1, #12]
 800a55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a560:	4605      	mov	r5, r0
 800a562:	0710      	lsls	r0, r2, #28
 800a564:	460c      	mov	r4, r1
 800a566:	d457      	bmi.n	800a618 <__sflush_r+0xbc>
 800a568:	684b      	ldr	r3, [r1, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	dc04      	bgt.n	800a578 <__sflush_r+0x1c>
 800a56e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a570:	2b00      	cmp	r3, #0
 800a572:	dc01      	bgt.n	800a578 <__sflush_r+0x1c>
 800a574:	2000      	movs	r0, #0
 800a576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a57a:	2e00      	cmp	r6, #0
 800a57c:	d0fa      	beq.n	800a574 <__sflush_r+0x18>
 800a57e:	2300      	movs	r3, #0
 800a580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a584:	682f      	ldr	r7, [r5, #0]
 800a586:	602b      	str	r3, [r5, #0]
 800a588:	d032      	beq.n	800a5f0 <__sflush_r+0x94>
 800a58a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	075a      	lsls	r2, r3, #29
 800a590:	d505      	bpl.n	800a59e <__sflush_r+0x42>
 800a592:	6863      	ldr	r3, [r4, #4]
 800a594:	1ac0      	subs	r0, r0, r3
 800a596:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a598:	b10b      	cbz	r3, 800a59e <__sflush_r+0x42>
 800a59a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a59c:	1ac0      	subs	r0, r0, r3
 800a59e:	2300      	movs	r3, #0
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	6a21      	ldr	r1, [r4, #32]
 800a5a8:	47b0      	blx	r6
 800a5aa:	1c43      	adds	r3, r0, #1
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	d106      	bne.n	800a5be <__sflush_r+0x62>
 800a5b0:	6829      	ldr	r1, [r5, #0]
 800a5b2:	291d      	cmp	r1, #29
 800a5b4:	d82c      	bhi.n	800a610 <__sflush_r+0xb4>
 800a5b6:	4a29      	ldr	r2, [pc, #164]	; (800a65c <__sflush_r+0x100>)
 800a5b8:	40ca      	lsrs	r2, r1
 800a5ba:	07d6      	lsls	r6, r2, #31
 800a5bc:	d528      	bpl.n	800a610 <__sflush_r+0xb4>
 800a5be:	2200      	movs	r2, #0
 800a5c0:	6062      	str	r2, [r4, #4]
 800a5c2:	6922      	ldr	r2, [r4, #16]
 800a5c4:	04d9      	lsls	r1, r3, #19
 800a5c6:	6022      	str	r2, [r4, #0]
 800a5c8:	d504      	bpl.n	800a5d4 <__sflush_r+0x78>
 800a5ca:	1c42      	adds	r2, r0, #1
 800a5cc:	d101      	bne.n	800a5d2 <__sflush_r+0x76>
 800a5ce:	682b      	ldr	r3, [r5, #0]
 800a5d0:	b903      	cbnz	r3, 800a5d4 <__sflush_r+0x78>
 800a5d2:	6560      	str	r0, [r4, #84]	; 0x54
 800a5d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5d6:	602f      	str	r7, [r5, #0]
 800a5d8:	2900      	cmp	r1, #0
 800a5da:	d0cb      	beq.n	800a574 <__sflush_r+0x18>
 800a5dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e0:	4299      	cmp	r1, r3
 800a5e2:	d002      	beq.n	800a5ea <__sflush_r+0x8e>
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	f7ff faad 	bl	8009b44 <_free_r>
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	6360      	str	r0, [r4, #52]	; 0x34
 800a5ee:	e7c2      	b.n	800a576 <__sflush_r+0x1a>
 800a5f0:	6a21      	ldr	r1, [r4, #32]
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	47b0      	blx	r6
 800a5f8:	1c41      	adds	r1, r0, #1
 800a5fa:	d1c7      	bne.n	800a58c <__sflush_r+0x30>
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d0c4      	beq.n	800a58c <__sflush_r+0x30>
 800a602:	2b1d      	cmp	r3, #29
 800a604:	d001      	beq.n	800a60a <__sflush_r+0xae>
 800a606:	2b16      	cmp	r3, #22
 800a608:	d101      	bne.n	800a60e <__sflush_r+0xb2>
 800a60a:	602f      	str	r7, [r5, #0]
 800a60c:	e7b2      	b.n	800a574 <__sflush_r+0x18>
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a614:	81a3      	strh	r3, [r4, #12]
 800a616:	e7ae      	b.n	800a576 <__sflush_r+0x1a>
 800a618:	690f      	ldr	r7, [r1, #16]
 800a61a:	2f00      	cmp	r7, #0
 800a61c:	d0aa      	beq.n	800a574 <__sflush_r+0x18>
 800a61e:	0793      	lsls	r3, r2, #30
 800a620:	bf18      	it	ne
 800a622:	2300      	movne	r3, #0
 800a624:	680e      	ldr	r6, [r1, #0]
 800a626:	bf08      	it	eq
 800a628:	694b      	ldreq	r3, [r1, #20]
 800a62a:	1bf6      	subs	r6, r6, r7
 800a62c:	600f      	str	r7, [r1, #0]
 800a62e:	608b      	str	r3, [r1, #8]
 800a630:	2e00      	cmp	r6, #0
 800a632:	dd9f      	ble.n	800a574 <__sflush_r+0x18>
 800a634:	4633      	mov	r3, r6
 800a636:	463a      	mov	r2, r7
 800a638:	4628      	mov	r0, r5
 800a63a:	6a21      	ldr	r1, [r4, #32]
 800a63c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a640:	47e0      	blx	ip
 800a642:	2800      	cmp	r0, #0
 800a644:	dc06      	bgt.n	800a654 <__sflush_r+0xf8>
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a64c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a650:	81a3      	strh	r3, [r4, #12]
 800a652:	e790      	b.n	800a576 <__sflush_r+0x1a>
 800a654:	4407      	add	r7, r0
 800a656:	1a36      	subs	r6, r6, r0
 800a658:	e7ea      	b.n	800a630 <__sflush_r+0xd4>
 800a65a:	bf00      	nop
 800a65c:	20400001 	.word	0x20400001

0800a660 <_fflush_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	690b      	ldr	r3, [r1, #16]
 800a664:	4605      	mov	r5, r0
 800a666:	460c      	mov	r4, r1
 800a668:	b913      	cbnz	r3, 800a670 <_fflush_r+0x10>
 800a66a:	2500      	movs	r5, #0
 800a66c:	4628      	mov	r0, r5
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	b118      	cbz	r0, 800a67a <_fflush_r+0x1a>
 800a672:	6983      	ldr	r3, [r0, #24]
 800a674:	b90b      	cbnz	r3, 800a67a <_fflush_r+0x1a>
 800a676:	f000 f887 	bl	800a788 <__sinit>
 800a67a:	4b14      	ldr	r3, [pc, #80]	; (800a6cc <_fflush_r+0x6c>)
 800a67c:	429c      	cmp	r4, r3
 800a67e:	d11b      	bne.n	800a6b8 <_fflush_r+0x58>
 800a680:	686c      	ldr	r4, [r5, #4]
 800a682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d0ef      	beq.n	800a66a <_fflush_r+0xa>
 800a68a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a68c:	07d0      	lsls	r0, r2, #31
 800a68e:	d404      	bmi.n	800a69a <_fflush_r+0x3a>
 800a690:	0599      	lsls	r1, r3, #22
 800a692:	d402      	bmi.n	800a69a <_fflush_r+0x3a>
 800a694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a696:	f000 f915 	bl	800a8c4 <__retarget_lock_acquire_recursive>
 800a69a:	4628      	mov	r0, r5
 800a69c:	4621      	mov	r1, r4
 800a69e:	f7ff ff5d 	bl	800a55c <__sflush_r>
 800a6a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	07da      	lsls	r2, r3, #31
 800a6a8:	d4e0      	bmi.n	800a66c <_fflush_r+0xc>
 800a6aa:	89a3      	ldrh	r3, [r4, #12]
 800a6ac:	059b      	lsls	r3, r3, #22
 800a6ae:	d4dd      	bmi.n	800a66c <_fflush_r+0xc>
 800a6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6b2:	f000 f908 	bl	800a8c6 <__retarget_lock_release_recursive>
 800a6b6:	e7d9      	b.n	800a66c <_fflush_r+0xc>
 800a6b8:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <_fflush_r+0x70>)
 800a6ba:	429c      	cmp	r4, r3
 800a6bc:	d101      	bne.n	800a6c2 <_fflush_r+0x62>
 800a6be:	68ac      	ldr	r4, [r5, #8]
 800a6c0:	e7df      	b.n	800a682 <_fflush_r+0x22>
 800a6c2:	4b04      	ldr	r3, [pc, #16]	; (800a6d4 <_fflush_r+0x74>)
 800a6c4:	429c      	cmp	r4, r3
 800a6c6:	bf08      	it	eq
 800a6c8:	68ec      	ldreq	r4, [r5, #12]
 800a6ca:	e7da      	b.n	800a682 <_fflush_r+0x22>
 800a6cc:	0800b67c 	.word	0x0800b67c
 800a6d0:	0800b69c 	.word	0x0800b69c
 800a6d4:	0800b65c 	.word	0x0800b65c

0800a6d8 <std>:
 800a6d8:	2300      	movs	r3, #0
 800a6da:	b510      	push	{r4, lr}
 800a6dc:	4604      	mov	r4, r0
 800a6de:	e9c0 3300 	strd	r3, r3, [r0]
 800a6e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6e6:	6083      	str	r3, [r0, #8]
 800a6e8:	8181      	strh	r1, [r0, #12]
 800a6ea:	6643      	str	r3, [r0, #100]	; 0x64
 800a6ec:	81c2      	strh	r2, [r0, #14]
 800a6ee:	6183      	str	r3, [r0, #24]
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	2208      	movs	r2, #8
 800a6f4:	305c      	adds	r0, #92	; 0x5c
 800a6f6:	f7fd fb71 	bl	8007ddc <memset>
 800a6fa:	4b05      	ldr	r3, [pc, #20]	; (800a710 <std+0x38>)
 800a6fc:	6224      	str	r4, [r4, #32]
 800a6fe:	6263      	str	r3, [r4, #36]	; 0x24
 800a700:	4b04      	ldr	r3, [pc, #16]	; (800a714 <std+0x3c>)
 800a702:	62a3      	str	r3, [r4, #40]	; 0x28
 800a704:	4b04      	ldr	r3, [pc, #16]	; (800a718 <std+0x40>)
 800a706:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a708:	4b04      	ldr	r3, [pc, #16]	; (800a71c <std+0x44>)
 800a70a:	6323      	str	r3, [r4, #48]	; 0x30
 800a70c:	bd10      	pop	{r4, pc}
 800a70e:	bf00      	nop
 800a710:	0800aa2d 	.word	0x0800aa2d
 800a714:	0800aa4f 	.word	0x0800aa4f
 800a718:	0800aa87 	.word	0x0800aa87
 800a71c:	0800aaab 	.word	0x0800aaab

0800a720 <_cleanup_r>:
 800a720:	4901      	ldr	r1, [pc, #4]	; (800a728 <_cleanup_r+0x8>)
 800a722:	f000 b8af 	b.w	800a884 <_fwalk_reent>
 800a726:	bf00      	nop
 800a728:	0800a661 	.word	0x0800a661

0800a72c <__sfmoreglue>:
 800a72c:	2268      	movs	r2, #104	; 0x68
 800a72e:	b570      	push	{r4, r5, r6, lr}
 800a730:	1e4d      	subs	r5, r1, #1
 800a732:	4355      	muls	r5, r2
 800a734:	460e      	mov	r6, r1
 800a736:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a73a:	f7ff fa6b 	bl	8009c14 <_malloc_r>
 800a73e:	4604      	mov	r4, r0
 800a740:	b140      	cbz	r0, 800a754 <__sfmoreglue+0x28>
 800a742:	2100      	movs	r1, #0
 800a744:	e9c0 1600 	strd	r1, r6, [r0]
 800a748:	300c      	adds	r0, #12
 800a74a:	60a0      	str	r0, [r4, #8]
 800a74c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a750:	f7fd fb44 	bl	8007ddc <memset>
 800a754:	4620      	mov	r0, r4
 800a756:	bd70      	pop	{r4, r5, r6, pc}

0800a758 <__sfp_lock_acquire>:
 800a758:	4801      	ldr	r0, [pc, #4]	; (800a760 <__sfp_lock_acquire+0x8>)
 800a75a:	f000 b8b3 	b.w	800a8c4 <__retarget_lock_acquire_recursive>
 800a75e:	bf00      	nop
 800a760:	20000261 	.word	0x20000261

0800a764 <__sfp_lock_release>:
 800a764:	4801      	ldr	r0, [pc, #4]	; (800a76c <__sfp_lock_release+0x8>)
 800a766:	f000 b8ae 	b.w	800a8c6 <__retarget_lock_release_recursive>
 800a76a:	bf00      	nop
 800a76c:	20000261 	.word	0x20000261

0800a770 <__sinit_lock_acquire>:
 800a770:	4801      	ldr	r0, [pc, #4]	; (800a778 <__sinit_lock_acquire+0x8>)
 800a772:	f000 b8a7 	b.w	800a8c4 <__retarget_lock_acquire_recursive>
 800a776:	bf00      	nop
 800a778:	20000262 	.word	0x20000262

0800a77c <__sinit_lock_release>:
 800a77c:	4801      	ldr	r0, [pc, #4]	; (800a784 <__sinit_lock_release+0x8>)
 800a77e:	f000 b8a2 	b.w	800a8c6 <__retarget_lock_release_recursive>
 800a782:	bf00      	nop
 800a784:	20000262 	.word	0x20000262

0800a788 <__sinit>:
 800a788:	b510      	push	{r4, lr}
 800a78a:	4604      	mov	r4, r0
 800a78c:	f7ff fff0 	bl	800a770 <__sinit_lock_acquire>
 800a790:	69a3      	ldr	r3, [r4, #24]
 800a792:	b11b      	cbz	r3, 800a79c <__sinit+0x14>
 800a794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a798:	f7ff bff0 	b.w	800a77c <__sinit_lock_release>
 800a79c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7a0:	6523      	str	r3, [r4, #80]	; 0x50
 800a7a2:	4b13      	ldr	r3, [pc, #76]	; (800a7f0 <__sinit+0x68>)
 800a7a4:	4a13      	ldr	r2, [pc, #76]	; (800a7f4 <__sinit+0x6c>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7aa:	42a3      	cmp	r3, r4
 800a7ac:	bf08      	it	eq
 800a7ae:	2301      	moveq	r3, #1
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	bf08      	it	eq
 800a7b4:	61a3      	streq	r3, [r4, #24]
 800a7b6:	f000 f81f 	bl	800a7f8 <__sfp>
 800a7ba:	6060      	str	r0, [r4, #4]
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f000 f81b 	bl	800a7f8 <__sfp>
 800a7c2:	60a0      	str	r0, [r4, #8]
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f000 f817 	bl	800a7f8 <__sfp>
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	2104      	movs	r1, #4
 800a7ce:	60e0      	str	r0, [r4, #12]
 800a7d0:	6860      	ldr	r0, [r4, #4]
 800a7d2:	f7ff ff81 	bl	800a6d8 <std>
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	2109      	movs	r1, #9
 800a7da:	68a0      	ldr	r0, [r4, #8]
 800a7dc:	f7ff ff7c 	bl	800a6d8 <std>
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	2112      	movs	r1, #18
 800a7e4:	68e0      	ldr	r0, [r4, #12]
 800a7e6:	f7ff ff77 	bl	800a6d8 <std>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	61a3      	str	r3, [r4, #24]
 800a7ee:	e7d1      	b.n	800a794 <__sinit+0xc>
 800a7f0:	0800b2e4 	.word	0x0800b2e4
 800a7f4:	0800a721 	.word	0x0800a721

0800a7f8 <__sfp>:
 800a7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fa:	4607      	mov	r7, r0
 800a7fc:	f7ff ffac 	bl	800a758 <__sfp_lock_acquire>
 800a800:	4b1e      	ldr	r3, [pc, #120]	; (800a87c <__sfp+0x84>)
 800a802:	681e      	ldr	r6, [r3, #0]
 800a804:	69b3      	ldr	r3, [r6, #24]
 800a806:	b913      	cbnz	r3, 800a80e <__sfp+0x16>
 800a808:	4630      	mov	r0, r6
 800a80a:	f7ff ffbd 	bl	800a788 <__sinit>
 800a80e:	3648      	adds	r6, #72	; 0x48
 800a810:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a814:	3b01      	subs	r3, #1
 800a816:	d503      	bpl.n	800a820 <__sfp+0x28>
 800a818:	6833      	ldr	r3, [r6, #0]
 800a81a:	b30b      	cbz	r3, 800a860 <__sfp+0x68>
 800a81c:	6836      	ldr	r6, [r6, #0]
 800a81e:	e7f7      	b.n	800a810 <__sfp+0x18>
 800a820:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a824:	b9d5      	cbnz	r5, 800a85c <__sfp+0x64>
 800a826:	4b16      	ldr	r3, [pc, #88]	; (800a880 <__sfp+0x88>)
 800a828:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a82c:	60e3      	str	r3, [r4, #12]
 800a82e:	6665      	str	r5, [r4, #100]	; 0x64
 800a830:	f000 f847 	bl	800a8c2 <__retarget_lock_init_recursive>
 800a834:	f7ff ff96 	bl	800a764 <__sfp_lock_release>
 800a838:	2208      	movs	r2, #8
 800a83a:	4629      	mov	r1, r5
 800a83c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a840:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a844:	6025      	str	r5, [r4, #0]
 800a846:	61a5      	str	r5, [r4, #24]
 800a848:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a84c:	f7fd fac6 	bl	8007ddc <memset>
 800a850:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a854:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a858:	4620      	mov	r0, r4
 800a85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a85c:	3468      	adds	r4, #104	; 0x68
 800a85e:	e7d9      	b.n	800a814 <__sfp+0x1c>
 800a860:	2104      	movs	r1, #4
 800a862:	4638      	mov	r0, r7
 800a864:	f7ff ff62 	bl	800a72c <__sfmoreglue>
 800a868:	4604      	mov	r4, r0
 800a86a:	6030      	str	r0, [r6, #0]
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d1d5      	bne.n	800a81c <__sfp+0x24>
 800a870:	f7ff ff78 	bl	800a764 <__sfp_lock_release>
 800a874:	230c      	movs	r3, #12
 800a876:	603b      	str	r3, [r7, #0]
 800a878:	e7ee      	b.n	800a858 <__sfp+0x60>
 800a87a:	bf00      	nop
 800a87c:	0800b2e4 	.word	0x0800b2e4
 800a880:	ffff0001 	.word	0xffff0001

0800a884 <_fwalk_reent>:
 800a884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a888:	4606      	mov	r6, r0
 800a88a:	4688      	mov	r8, r1
 800a88c:	2700      	movs	r7, #0
 800a88e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a892:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a896:	f1b9 0901 	subs.w	r9, r9, #1
 800a89a:	d505      	bpl.n	800a8a8 <_fwalk_reent+0x24>
 800a89c:	6824      	ldr	r4, [r4, #0]
 800a89e:	2c00      	cmp	r4, #0
 800a8a0:	d1f7      	bne.n	800a892 <_fwalk_reent+0xe>
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8a8:	89ab      	ldrh	r3, [r5, #12]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d907      	bls.n	800a8be <_fwalk_reent+0x3a>
 800a8ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	d003      	beq.n	800a8be <_fwalk_reent+0x3a>
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	47c0      	blx	r8
 800a8bc:	4307      	orrs	r7, r0
 800a8be:	3568      	adds	r5, #104	; 0x68
 800a8c0:	e7e9      	b.n	800a896 <_fwalk_reent+0x12>

0800a8c2 <__retarget_lock_init_recursive>:
 800a8c2:	4770      	bx	lr

0800a8c4 <__retarget_lock_acquire_recursive>:
 800a8c4:	4770      	bx	lr

0800a8c6 <__retarget_lock_release_recursive>:
 800a8c6:	4770      	bx	lr

0800a8c8 <__swhatbuf_r>:
 800a8c8:	b570      	push	{r4, r5, r6, lr}
 800a8ca:	460e      	mov	r6, r1
 800a8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d0:	4614      	mov	r4, r2
 800a8d2:	2900      	cmp	r1, #0
 800a8d4:	461d      	mov	r5, r3
 800a8d6:	b096      	sub	sp, #88	; 0x58
 800a8d8:	da08      	bge.n	800a8ec <__swhatbuf_r+0x24>
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8e0:	602a      	str	r2, [r5, #0]
 800a8e2:	061a      	lsls	r2, r3, #24
 800a8e4:	d410      	bmi.n	800a908 <__swhatbuf_r+0x40>
 800a8e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ea:	e00e      	b.n	800a90a <__swhatbuf_r+0x42>
 800a8ec:	466a      	mov	r2, sp
 800a8ee:	f000 f903 	bl	800aaf8 <_fstat_r>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	dbf1      	blt.n	800a8da <__swhatbuf_r+0x12>
 800a8f6:	9a01      	ldr	r2, [sp, #4]
 800a8f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a900:	425a      	negs	r2, r3
 800a902:	415a      	adcs	r2, r3
 800a904:	602a      	str	r2, [r5, #0]
 800a906:	e7ee      	b.n	800a8e6 <__swhatbuf_r+0x1e>
 800a908:	2340      	movs	r3, #64	; 0x40
 800a90a:	2000      	movs	r0, #0
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	b016      	add	sp, #88	; 0x58
 800a910:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a914 <__smakebuf_r>:
 800a914:	898b      	ldrh	r3, [r1, #12]
 800a916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a918:	079d      	lsls	r5, r3, #30
 800a91a:	4606      	mov	r6, r0
 800a91c:	460c      	mov	r4, r1
 800a91e:	d507      	bpl.n	800a930 <__smakebuf_r+0x1c>
 800a920:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	6123      	str	r3, [r4, #16]
 800a928:	2301      	movs	r3, #1
 800a92a:	6163      	str	r3, [r4, #20]
 800a92c:	b002      	add	sp, #8
 800a92e:	bd70      	pop	{r4, r5, r6, pc}
 800a930:	466a      	mov	r2, sp
 800a932:	ab01      	add	r3, sp, #4
 800a934:	f7ff ffc8 	bl	800a8c8 <__swhatbuf_r>
 800a938:	9900      	ldr	r1, [sp, #0]
 800a93a:	4605      	mov	r5, r0
 800a93c:	4630      	mov	r0, r6
 800a93e:	f7ff f969 	bl	8009c14 <_malloc_r>
 800a942:	b948      	cbnz	r0, 800a958 <__smakebuf_r+0x44>
 800a944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a948:	059a      	lsls	r2, r3, #22
 800a94a:	d4ef      	bmi.n	800a92c <__smakebuf_r+0x18>
 800a94c:	f023 0303 	bic.w	r3, r3, #3
 800a950:	f043 0302 	orr.w	r3, r3, #2
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	e7e3      	b.n	800a920 <__smakebuf_r+0xc>
 800a958:	4b0d      	ldr	r3, [pc, #52]	; (800a990 <__smakebuf_r+0x7c>)
 800a95a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	6020      	str	r0, [r4, #0]
 800a960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	9b00      	ldr	r3, [sp, #0]
 800a968:	6120      	str	r0, [r4, #16]
 800a96a:	6163      	str	r3, [r4, #20]
 800a96c:	9b01      	ldr	r3, [sp, #4]
 800a96e:	b15b      	cbz	r3, 800a988 <__smakebuf_r+0x74>
 800a970:	4630      	mov	r0, r6
 800a972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a976:	f000 f8d1 	bl	800ab1c <_isatty_r>
 800a97a:	b128      	cbz	r0, 800a988 <__smakebuf_r+0x74>
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	f023 0303 	bic.w	r3, r3, #3
 800a982:	f043 0301 	orr.w	r3, r3, #1
 800a986:	81a3      	strh	r3, [r4, #12]
 800a988:	89a0      	ldrh	r0, [r4, #12]
 800a98a:	4305      	orrs	r5, r0
 800a98c:	81a5      	strh	r5, [r4, #12]
 800a98e:	e7cd      	b.n	800a92c <__smakebuf_r+0x18>
 800a990:	0800a721 	.word	0x0800a721

0800a994 <_malloc_usable_size_r>:
 800a994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a998:	1f18      	subs	r0, r3, #4
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	bfbc      	itt	lt
 800a99e:	580b      	ldrlt	r3, [r1, r0]
 800a9a0:	18c0      	addlt	r0, r0, r3
 800a9a2:	4770      	bx	lr

0800a9a4 <_raise_r>:
 800a9a4:	291f      	cmp	r1, #31
 800a9a6:	b538      	push	{r3, r4, r5, lr}
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	460d      	mov	r5, r1
 800a9ac:	d904      	bls.n	800a9b8 <_raise_r+0x14>
 800a9ae:	2316      	movs	r3, #22
 800a9b0:	6003      	str	r3, [r0, #0]
 800a9b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9ba:	b112      	cbz	r2, 800a9c2 <_raise_r+0x1e>
 800a9bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9c0:	b94b      	cbnz	r3, 800a9d6 <_raise_r+0x32>
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 f830 	bl	800aa28 <_getpid_r>
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	4601      	mov	r1, r0
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9d2:	f000 b817 	b.w	800aa04 <_kill_r>
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d00a      	beq.n	800a9f0 <_raise_r+0x4c>
 800a9da:	1c59      	adds	r1, r3, #1
 800a9dc:	d103      	bne.n	800a9e6 <_raise_r+0x42>
 800a9de:	2316      	movs	r3, #22
 800a9e0:	6003      	str	r3, [r0, #0]
 800a9e2:	2001      	movs	r0, #1
 800a9e4:	e7e7      	b.n	800a9b6 <_raise_r+0x12>
 800a9e6:	2400      	movs	r4, #0
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9ee:	4798      	blx	r3
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	e7e0      	b.n	800a9b6 <_raise_r+0x12>

0800a9f4 <raise>:
 800a9f4:	4b02      	ldr	r3, [pc, #8]	; (800aa00 <raise+0xc>)
 800a9f6:	4601      	mov	r1, r0
 800a9f8:	6818      	ldr	r0, [r3, #0]
 800a9fa:	f7ff bfd3 	b.w	800a9a4 <_raise_r>
 800a9fe:	bf00      	nop
 800aa00:	20000040 	.word	0x20000040

0800aa04 <_kill_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	2300      	movs	r3, #0
 800aa08:	4d06      	ldr	r5, [pc, #24]	; (800aa24 <_kill_r+0x20>)
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	4611      	mov	r1, r2
 800aa10:	602b      	str	r3, [r5, #0]
 800aa12:	f7f7 fed4 	bl	80027be <_kill>
 800aa16:	1c43      	adds	r3, r0, #1
 800aa18:	d102      	bne.n	800aa20 <_kill_r+0x1c>
 800aa1a:	682b      	ldr	r3, [r5, #0]
 800aa1c:	b103      	cbz	r3, 800aa20 <_kill_r+0x1c>
 800aa1e:	6023      	str	r3, [r4, #0]
 800aa20:	bd38      	pop	{r3, r4, r5, pc}
 800aa22:	bf00      	nop
 800aa24:	2000025c 	.word	0x2000025c

0800aa28 <_getpid_r>:
 800aa28:	f7f7 bec2 	b.w	80027b0 <_getpid>

0800aa2c <__sread>:
 800aa2c:	b510      	push	{r4, lr}
 800aa2e:	460c      	mov	r4, r1
 800aa30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa34:	f000 f894 	bl	800ab60 <_read_r>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	bfab      	itete	ge
 800aa3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa3e:	89a3      	ldrhlt	r3, [r4, #12]
 800aa40:	181b      	addge	r3, r3, r0
 800aa42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa46:	bfac      	ite	ge
 800aa48:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa4a:	81a3      	strhlt	r3, [r4, #12]
 800aa4c:	bd10      	pop	{r4, pc}

0800aa4e <__swrite>:
 800aa4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa52:	461f      	mov	r7, r3
 800aa54:	898b      	ldrh	r3, [r1, #12]
 800aa56:	4605      	mov	r5, r0
 800aa58:	05db      	lsls	r3, r3, #23
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	4616      	mov	r6, r2
 800aa5e:	d505      	bpl.n	800aa6c <__swrite+0x1e>
 800aa60:	2302      	movs	r3, #2
 800aa62:	2200      	movs	r2, #0
 800aa64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa68:	f000 f868 	bl	800ab3c <_lseek_r>
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	4632      	mov	r2, r6
 800aa70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa74:	81a3      	strh	r3, [r4, #12]
 800aa76:	4628      	mov	r0, r5
 800aa78:	463b      	mov	r3, r7
 800aa7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa82:	f000 b817 	b.w	800aab4 <_write_r>

0800aa86 <__sseek>:
 800aa86:	b510      	push	{r4, lr}
 800aa88:	460c      	mov	r4, r1
 800aa8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa8e:	f000 f855 	bl	800ab3c <_lseek_r>
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	bf15      	itete	ne
 800aa98:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aaa2:	81a3      	strheq	r3, [r4, #12]
 800aaa4:	bf18      	it	ne
 800aaa6:	81a3      	strhne	r3, [r4, #12]
 800aaa8:	bd10      	pop	{r4, pc}

0800aaaa <__sclose>:
 800aaaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaae:	f000 b813 	b.w	800aad8 <_close_r>
	...

0800aab4 <_write_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4604      	mov	r4, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	4611      	mov	r1, r2
 800aabc:	2200      	movs	r2, #0
 800aabe:	4d05      	ldr	r5, [pc, #20]	; (800aad4 <_write_r+0x20>)
 800aac0:	602a      	str	r2, [r5, #0]
 800aac2:	461a      	mov	r2, r3
 800aac4:	f7f7 feb2 	bl	800282c <_write>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d102      	bne.n	800aad2 <_write_r+0x1e>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b103      	cbz	r3, 800aad2 <_write_r+0x1e>
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	2000025c 	.word	0x2000025c

0800aad8 <_close_r>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	2300      	movs	r3, #0
 800aadc:	4d05      	ldr	r5, [pc, #20]	; (800aaf4 <_close_r+0x1c>)
 800aade:	4604      	mov	r4, r0
 800aae0:	4608      	mov	r0, r1
 800aae2:	602b      	str	r3, [r5, #0]
 800aae4:	f7f7 febe 	bl	8002864 <_close>
 800aae8:	1c43      	adds	r3, r0, #1
 800aaea:	d102      	bne.n	800aaf2 <_close_r+0x1a>
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	b103      	cbz	r3, 800aaf2 <_close_r+0x1a>
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	bd38      	pop	{r3, r4, r5, pc}
 800aaf4:	2000025c 	.word	0x2000025c

0800aaf8 <_fstat_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	2300      	movs	r3, #0
 800aafc:	4d06      	ldr	r5, [pc, #24]	; (800ab18 <_fstat_r+0x20>)
 800aafe:	4604      	mov	r4, r0
 800ab00:	4608      	mov	r0, r1
 800ab02:	4611      	mov	r1, r2
 800ab04:	602b      	str	r3, [r5, #0]
 800ab06:	f7f7 feb8 	bl	800287a <_fstat>
 800ab0a:	1c43      	adds	r3, r0, #1
 800ab0c:	d102      	bne.n	800ab14 <_fstat_r+0x1c>
 800ab0e:	682b      	ldr	r3, [r5, #0]
 800ab10:	b103      	cbz	r3, 800ab14 <_fstat_r+0x1c>
 800ab12:	6023      	str	r3, [r4, #0]
 800ab14:	bd38      	pop	{r3, r4, r5, pc}
 800ab16:	bf00      	nop
 800ab18:	2000025c 	.word	0x2000025c

0800ab1c <_isatty_r>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	2300      	movs	r3, #0
 800ab20:	4d05      	ldr	r5, [pc, #20]	; (800ab38 <_isatty_r+0x1c>)
 800ab22:	4604      	mov	r4, r0
 800ab24:	4608      	mov	r0, r1
 800ab26:	602b      	str	r3, [r5, #0]
 800ab28:	f7f7 feb6 	bl	8002898 <_isatty>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d102      	bne.n	800ab36 <_isatty_r+0x1a>
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	b103      	cbz	r3, 800ab36 <_isatty_r+0x1a>
 800ab34:	6023      	str	r3, [r4, #0]
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
 800ab38:	2000025c 	.word	0x2000025c

0800ab3c <_lseek_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	4611      	mov	r1, r2
 800ab44:	2200      	movs	r2, #0
 800ab46:	4d05      	ldr	r5, [pc, #20]	; (800ab5c <_lseek_r+0x20>)
 800ab48:	602a      	str	r2, [r5, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	f7f7 feae 	bl	80028ac <_lseek>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d102      	bne.n	800ab5a <_lseek_r+0x1e>
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	b103      	cbz	r3, 800ab5a <_lseek_r+0x1e>
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	2000025c 	.word	0x2000025c

0800ab60 <_read_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4604      	mov	r4, r0
 800ab64:	4608      	mov	r0, r1
 800ab66:	4611      	mov	r1, r2
 800ab68:	2200      	movs	r2, #0
 800ab6a:	4d05      	ldr	r5, [pc, #20]	; (800ab80 <_read_r+0x20>)
 800ab6c:	602a      	str	r2, [r5, #0]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	f7f7 fe3f 	bl	80027f2 <_read>
 800ab74:	1c43      	adds	r3, r0, #1
 800ab76:	d102      	bne.n	800ab7e <_read_r+0x1e>
 800ab78:	682b      	ldr	r3, [r5, #0]
 800ab7a:	b103      	cbz	r3, 800ab7e <_read_r+0x1e>
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	bd38      	pop	{r3, r4, r5, pc}
 800ab80:	2000025c 	.word	0x2000025c

0800ab84 <_init>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	bf00      	nop
 800ab88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	4770      	bx	lr

0800ab90 <_fini>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	bf00      	nop
 800ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab96:	bc08      	pop	{r3}
 800ab98:	469e      	mov	lr, r3
 800ab9a:	4770      	bx	lr
