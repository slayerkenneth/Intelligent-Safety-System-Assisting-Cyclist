
Intelligent-Safety-System-Assisting-Cyclist.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001037c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  08010568  08010568  00020568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080110e4  080110e4  00030240  2**0
                  CONTENTS
  4 .ARM          00000000  080110e4  080110e4  00030240  2**0
                  CONTENTS
  5 .preinit_array 00000000  080110e4  080110e4  00030240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080110e4  080110e4  000210e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080110e8  080110e8  000210e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  080110ec  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000240  0801132c  00030240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  0801132c  00030594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a8ca  00000000  00000000  00030269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc9  00000000  00000000  0005ab33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  0005e800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001798  00000000  00000000  00060138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d5e  00000000  00000000  000618d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc2e  00000000  00000000  0008362e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be8c0  00000000  00000000  000a325c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161b1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea8  00000000  00000000  00161b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000240 	.word	0x20000240
 8000204:	00000000 	.word	0x00000000
 8000208:	0801054c 	.word	0x0801054c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000244 	.word	0x20000244
 8000224:	0801054c 	.word	0x0801054c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <CountRPM>:
static uint16_t firstDetected;
static uint16_t newDetected;
static float time_diff;

void CountRPM(uint16_t counter)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
	static uint8_t flip = 0;

	if (flip != HAL_GPIO_ReadPin(A3144_Port, A3144_PIN))
 80011f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f6:	4821      	ldr	r0, [pc, #132]	; (800127c <CountRPM+0x94>)
 80011f8:	f003 f966 	bl	80044c8 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <CountRPM+0x98>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d034      	beq.n	8001272 <CountRPM+0x8a>
	{
		flip = HAL_GPIO_ReadPin(A3144_Port, A3144_PIN);
 8001208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120c:	481b      	ldr	r0, [pc, #108]	; (800127c <CountRPM+0x94>)
 800120e:	f003 f95b 	bl	80044c8 <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <CountRPM+0x98>)
 8001218:	701a      	strb	r2, [r3, #0]
		rotCount++;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <CountRPM+0x9c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a18      	ldr	r2, [pc, #96]	; (8001284 <CountRPM+0x9c>)
 8001222:	6013      	str	r3, [r2, #0]

		if (rotCount == 1){
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <CountRPM+0x9c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d103      	bne.n	8001234 <CountRPM+0x4c>
			firstDetected = counter;
 800122c:	4a16      	ldr	r2, [pc, #88]	; (8001288 <CountRPM+0xa0>)
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	8013      	strh	r3, [r2, #0]
			rotSpeed = time_diff / 1000 ;

			rotCount = 0; //reset
		}
	}
}
 8001232:	e01e      	b.n	8001272 <CountRPM+0x8a>
			newDetected = counter;
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <CountRPM+0xa4>)
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	8013      	strh	r3, [r2, #0]
			time_diff = abs(newDetected - firstDetected);
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <CountRPM+0xa4>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <CountRPM+0xa0>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	bfb8      	it	lt
 800124a:	425b      	neglt	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fdb1 	bl	8000db4 <__aeabi_i2f>
 8001252:	4603      	mov	r3, r0
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <CountRPM+0xa8>)
 8001256:	6013      	str	r3, [r2, #0]
			rotSpeed = time_diff / 1000 ;
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <CountRPM+0xa8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	490d      	ldr	r1, [pc, #52]	; (8001294 <CountRPM+0xac>)
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff feb0 	bl	8000fc4 <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <CountRPM+0xb0>)
 800126a:	601a      	str	r2, [r3, #0]
			rotCount = 0; //reset
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <CountRPM+0x9c>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40010c00 	.word	0x40010c00
 8001280:	2000026c 	.word	0x2000026c
 8001284:	20000260 	.word	0x20000260
 8001288:	20000264 	.word	0x20000264
 800128c:	20000266 	.word	0x20000266
 8001290:	20000268 	.word	0x20000268
 8001294:	447a0000 	.word	0x447a0000
 8001298:	2000025c 	.word	0x2000025c
 800129c:	00000000 	.word	0x00000000

080012a0 <GetRotationSpeed>:

float GetRotationSpeed(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
//	static float beforeSpeed = 0;
	static int clear = 0;
	clear++;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <GetRotationSpeed+0x60>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <GetRotationSpeed+0x60>)
 80012ac:	6013      	str	r3, [r2, #0]
//
	if (clear == Time_Out_Period) //Time-out: stopped rotation => reset
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <GetRotationSpeed+0x60>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d115      	bne.n	80012e2 <GetRotationSpeed+0x42>
	{
		clear = 0;
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <GetRotationSpeed+0x60>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
		rotSpeed *= 1.45;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <GetRotationSpeed+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f91d 	bl	8000500 <__aeabi_f2d>
 80012c6:	a30c      	add	r3, pc, #48	; (adr r3, 80012f8 <GetRotationSpeed+0x58>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff f970 	bl	80005b0 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fc62 	bl	8000ba0 <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <GetRotationSpeed+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]
//
//		beforeSpeed = rotSpeed;
//		rotSpeed = 0;
//	}

	return 60 / rotSpeed;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <GetRotationSpeed+0x64>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <GetRotationSpeed+0x68>)
 80012ea:	f7ff fe6b 	bl	8000fc4 <__aeabi_fdiv>
 80012ee:	4603      	mov	r3, r0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	f3af 8000 	nop.w
 80012f8:	33333333 	.word	0x33333333
 80012fc:	3ff73333 	.word	0x3ff73333
 8001300:	20000270 	.word	0x20000270
 8001304:	2000025c 	.word	0x2000025c
 8001308:	42700000 	.word	0x42700000

0800130c <a3144_Init>:

void a3144_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <a3144_Init+0x10>)
 8001312:	f005 fb87 	bl	8006a24 <HAL_TIM_Base_Start_IT>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200002a8 	.word	0x200002a8

08001320 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)   // Interrupt Call
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	static uint16_t counter_for_1s = 0;


	if (htim == &htim3)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d10a      	bne.n	8001346 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		CountRPM(counter_for_1s);
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff57 	bl	80011e8 <CountRPM>
		counter_for_1s++;
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001344:	801a      	strh	r2, [r3, #0]
	}
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002a8 	.word	0x200002a8
 8001354:	20000274 	.word	0x20000274

08001358 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	e002      	b.n	8001368 <Delay+0x10>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3b01      	subs	r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f9      	bne.n	8001362 <Delay+0xa>
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <LCD_INIT>:

void LCD_INIT ( void )
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001380:	2001      	movs	r0, #1
 8001382:	f000 f829 	bl	80013d8 <LCD_BackLed_Control>
	LCD_Rst();
 8001386:	f000 f80f 	bl	80013a8 <LCD_Rst>
	LCD_REG_Config();
 800138a:	f000 f85f 	bl	800144c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800138e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001398:	22f0      	movs	r2, #240	; 0xf0
 800139a:	2100      	movs	r1, #0
 800139c:	2000      	movs	r0, #0
 800139e:	f000 f9e6 	bl	800176e <LCD_Clear>
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <LCD_Rst>:


void LCD_Rst ( void )
{			
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2102      	movs	r1, #2
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <LCD_Rst+0x28>)
 80013b2:	f003 f8a0 	bl	80044f6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <LCD_Rst+0x2c>)
 80013b8:	f7ff ffce 	bl	8001358 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2102      	movs	r1, #2
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <LCD_Rst+0x28>)
 80013c2:	f003 f898 	bl	80044f6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <LCD_Rst+0x2c>)
 80013c8:	f7ff ffc6 	bl	8001358 <Delay>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40011800 	.word	0x40011800
 80013d4:	0002bffc 	.word	0x0002bffc

080013d8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <LCD_BackLed_Control+0x34>)
 80013f0:	f003 f881 	bl	80044f6 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80013f4:	e005      	b.n	8001402 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <LCD_BackLed_Control+0x34>)
 80013fe:	f003 f87a 	bl	80044f6 <HAL_GPIO_WritePin>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40011400 	.word	0x40011400

08001410 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800141a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	8013      	strh	r3, [r2, #0]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <LCD_Write_Data+0x1c>)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	8013      	strh	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	60020000 	.word	0x60020000

0800144c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001450:	20cf      	movs	r0, #207	; 0xcf
 8001452:	f7ff ffdd 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff ffe8 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800145c:	2081      	movs	r0, #129	; 0x81
 800145e:	f7ff ffe5 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001462:	2030      	movs	r0, #48	; 0x30
 8001464:	f7ff ffe2 	bl	800142c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001468:	20ed      	movs	r0, #237	; 0xed
 800146a:	f7ff ffd1 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800146e:	2064      	movs	r0, #100	; 0x64
 8001470:	f7ff ffdc 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001474:	2003      	movs	r0, #3
 8001476:	f7ff ffd9 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800147a:	2012      	movs	r0, #18
 800147c:	f7ff ffd6 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001480:	2081      	movs	r0, #129	; 0x81
 8001482:	f7ff ffd3 	bl	800142c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001486:	20e8      	movs	r0, #232	; 0xe8
 8001488:	f7ff ffc2 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800148c:	2085      	movs	r0, #133	; 0x85
 800148e:	f7ff ffcd 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001492:	2010      	movs	r0, #16
 8001494:	f7ff ffca 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001498:	2078      	movs	r0, #120	; 0x78
 800149a:	f7ff ffc7 	bl	800142c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800149e:	20cb      	movs	r0, #203	; 0xcb
 80014a0:	f7ff ffb6 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80014a4:	2039      	movs	r0, #57	; 0x39
 80014a6:	f7ff ffc1 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80014aa:	202c      	movs	r0, #44	; 0x2c
 80014ac:	f7ff ffbe 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff ffbb 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80014b6:	2034      	movs	r0, #52	; 0x34
 80014b8:	f7ff ffb8 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80014bc:	2002      	movs	r0, #2
 80014be:	f7ff ffb5 	bl	800142c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80014c2:	20f7      	movs	r0, #247	; 0xf7
 80014c4:	f7ff ffa4 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80014c8:	2020      	movs	r0, #32
 80014ca:	f7ff ffaf 	bl	800142c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80014ce:	20ea      	movs	r0, #234	; 0xea
 80014d0:	f7ff ff9e 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff ffa9 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff ffa6 	bl	800142c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80014e0:	20b1      	movs	r0, #177	; 0xb1
 80014e2:	f7ff ff95 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff ffa0 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80014ec:	201b      	movs	r0, #27
 80014ee:	f7ff ff9d 	bl	800142c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80014f2:	20b6      	movs	r0, #182	; 0xb6
 80014f4:	f7ff ff8c 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80014f8:	200a      	movs	r0, #10
 80014fa:	f7ff ff97 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80014fe:	20a2      	movs	r0, #162	; 0xa2
 8001500:	f7ff ff94 	bl	800142c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001504:	20c0      	movs	r0, #192	; 0xc0
 8001506:	f7ff ff83 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800150a:	2035      	movs	r0, #53	; 0x35
 800150c:	f7ff ff8e 	bl	800142c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001510:	20c1      	movs	r0, #193	; 0xc1
 8001512:	f7ff ff7d 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001516:	2011      	movs	r0, #17
 8001518:	f7ff ff88 	bl	800142c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800151c:	20c5      	movs	r0, #197	; 0xc5
 800151e:	f7ff ff77 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001522:	2045      	movs	r0, #69	; 0x45
 8001524:	f7ff ff82 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001528:	2045      	movs	r0, #69	; 0x45
 800152a:	f7ff ff7f 	bl	800142c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800152e:	20c7      	movs	r0, #199	; 0xc7
 8001530:	f7ff ff6e 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001534:	20a2      	movs	r0, #162	; 0xa2
 8001536:	f7ff ff79 	bl	800142c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800153a:	20f2      	movs	r0, #242	; 0xf2
 800153c:	f7ff ff68 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff ff73 	bl	800142c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001546:	2026      	movs	r0, #38	; 0x26
 8001548:	f7ff ff62 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff ff6d 	bl	800142c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001552:	20e0      	movs	r0, #224	; 0xe0
 8001554:	f7ff ff5c 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001558:	200f      	movs	r0, #15
 800155a:	f7ff ff67 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800155e:	2026      	movs	r0, #38	; 0x26
 8001560:	f7ff ff64 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001564:	2024      	movs	r0, #36	; 0x24
 8001566:	f7ff ff61 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800156a:	200b      	movs	r0, #11
 800156c:	f7ff ff5e 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001570:	200e      	movs	r0, #14
 8001572:	f7ff ff5b 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001576:	2009      	movs	r0, #9
 8001578:	f7ff ff58 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800157c:	2054      	movs	r0, #84	; 0x54
 800157e:	f7ff ff55 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001582:	20a8      	movs	r0, #168	; 0xa8
 8001584:	f7ff ff52 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001588:	2046      	movs	r0, #70	; 0x46
 800158a:	f7ff ff4f 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800158e:	200c      	movs	r0, #12
 8001590:	f7ff ff4c 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001594:	2017      	movs	r0, #23
 8001596:	f7ff ff49 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800159a:	2009      	movs	r0, #9
 800159c:	f7ff ff46 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80015a0:	200f      	movs	r0, #15
 80015a2:	f7ff ff43 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80015a6:	2007      	movs	r0, #7
 80015a8:	f7ff ff40 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff ff3d 	bl	800142c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80015b2:	20e1      	movs	r0, #225	; 0xe1
 80015b4:	f7ff ff2c 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff ff37 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80015be:	2019      	movs	r0, #25
 80015c0:	f7ff ff34 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80015c4:	201b      	movs	r0, #27
 80015c6:	f7ff ff31 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80015ca:	2004      	movs	r0, #4
 80015cc:	f7ff ff2e 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80015d0:	2010      	movs	r0, #16
 80015d2:	f7ff ff2b 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80015d6:	2007      	movs	r0, #7
 80015d8:	f7ff ff28 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80015dc:	202a      	movs	r0, #42	; 0x2a
 80015de:	f7ff ff25 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80015e2:	2047      	movs	r0, #71	; 0x47
 80015e4:	f7ff ff22 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80015e8:	2039      	movs	r0, #57	; 0x39
 80015ea:	f7ff ff1f 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80015ee:	2003      	movs	r0, #3
 80015f0:	f7ff ff1c 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80015f4:	2006      	movs	r0, #6
 80015f6:	f7ff ff19 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80015fa:	2006      	movs	r0, #6
 80015fc:	f7ff ff16 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001600:	2030      	movs	r0, #48	; 0x30
 8001602:	f7ff ff13 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001606:	2038      	movs	r0, #56	; 0x38
 8001608:	f7ff ff10 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800160c:	200f      	movs	r0, #15
 800160e:	f7ff ff0d 	bl	800142c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001612:	2036      	movs	r0, #54	; 0x36
 8001614:	f7ff fefc 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001618:	20c8      	movs	r0, #200	; 0xc8
 800161a:	f7ff ff07 	bl	800142c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800161e:	202a      	movs	r0, #42	; 0x2a
 8001620:	f7ff fef6 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff ff01 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fefe 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fefb 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001636:	20ef      	movs	r0, #239	; 0xef
 8001638:	f7ff fef8 	bl	800142c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800163c:	202b      	movs	r0, #43	; 0x2b
 800163e:	f7ff fee7 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff fef2 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff feef 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff feec 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001654:	203f      	movs	r0, #63	; 0x3f
 8001656:	f7ff fee9 	bl	800142c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800165a:	203a      	movs	r0, #58	; 0x3a
 800165c:	f7ff fed8 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001660:	2055      	movs	r0, #85	; 0x55
 8001662:	f7ff fee3 	bl	800142c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001666:	2011      	movs	r0, #17
 8001668:	f7ff fed2 	bl	8001410 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <LCD_REG_Config+0x230>)
 800166e:	f7ff fe73 	bl	8001358 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001672:	2029      	movs	r0, #41	; 0x29
 8001674:	f7ff fecc 	bl	8001410 <LCD_Write_Cmd>
	
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	0002bffc 	.word	0x0002bffc

08001680 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4604      	mov	r4, r0
 8001688:	4608      	mov	r0, r1
 800168a:	4611      	mov	r1, r2
 800168c:	461a      	mov	r2, r3
 800168e:	4623      	mov	r3, r4
 8001690:	80fb      	strh	r3, [r7, #6]
 8001692:	4603      	mov	r3, r0
 8001694:	80bb      	strh	r3, [r7, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	807b      	strh	r3, [r7, #2]
 800169a:	4613      	mov	r3, r2
 800169c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800169e:	202a      	movs	r0, #42	; 0x2a
 80016a0:	f7ff feb6 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff febe 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff feb8 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80016bc:	88fa      	ldrh	r2, [r7, #6]
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	4413      	add	r3, r2
 80016c2:	3b01      	subs	r3, #1
 80016c4:	121b      	asrs	r3, r3, #8
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff feaf 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80016ce:	88fa      	ldrh	r2, [r7, #6]
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	4413      	add	r3, r2
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fea4 	bl	800142c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80016e4:	202b      	movs	r0, #43	; 0x2b
 80016e6:	f7ff fe93 	bl	8001410 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80016ea:	88bb      	ldrh	r3, [r7, #4]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fe9b 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80016f6:	88bb      	ldrh	r3, [r7, #4]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fe95 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001702:	88ba      	ldrh	r2, [r7, #4]
 8001704:	883b      	ldrh	r3, [r7, #0]
 8001706:	4413      	add	r3, r2
 8001708:	3b01      	subs	r3, #1
 800170a:	121b      	asrs	r3, r3, #8
 800170c:	b29b      	uxth	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fe8c 	bl	800142c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001714:	88ba      	ldrh	r2, [r7, #4]
 8001716:	883b      	ldrh	r3, [r7, #0]
 8001718:	4413      	add	r3, r2
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	b29b      	uxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fe81 	bl	800142c <LCD_Write_Data>
	
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}

08001732 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001742:	202c      	movs	r0, #44	; 0x2c
 8001744:	f7ff fe64 	bl	8001410 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	e006      	b.n	800175c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fe6b 	bl	800142c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3301      	adds	r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	d3f4      	bcc.n	800174e <LCD_FillColor+0x1c>
		
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800176e:	b590      	push	{r4, r7, lr}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	4604      	mov	r4, r0
 8001776:	4608      	mov	r0, r1
 8001778:	4611      	mov	r1, r2
 800177a:	461a      	mov	r2, r3
 800177c:	4623      	mov	r3, r4
 800177e:	80fb      	strh	r3, [r7, #6]
 8001780:	4603      	mov	r3, r0
 8001782:	80bb      	strh	r3, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800178c:	883b      	ldrh	r3, [r7, #0]
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	88b9      	ldrh	r1, [r7, #4]
 8001792:	88f8      	ldrh	r0, [r7, #6]
 8001794:	f7ff ff74 	bl	8001680 <LCD_OpenWindow>

	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	883a      	ldrh	r2, [r7, #0]
 800179c:	fb02 f303 	mul.w	r3, r2, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	8b3b      	ldrh	r3, [r7, #24]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f7ff ffc3 	bl	8001732 <LCD_FillColor>
	
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}

080017b4 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
 80017be:	460b      	mov	r3, r1
 80017c0:	80bb      	strh	r3, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	3b20      	subs	r3, #32
 80017ca:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80017cc:	88b9      	ldrh	r1, [r7, #4]
 80017ce:	88f8      	ldrh	r0, [r7, #6]
 80017d0:	2310      	movs	r3, #16
 80017d2:	2208      	movs	r2, #8
 80017d4:	f7ff ff54 	bl	8001680 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80017d8:	202c      	movs	r0, #44	; 0x2c
 80017da:	f7ff fe19 	bl	8001410 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80017de:	2300      	movs	r3, #0
 80017e0:	73bb      	strb	r3, [r7, #14]
 80017e2:	e023      	b.n	800182c <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80017e4:	7b3a      	ldrb	r2, [r7, #12]
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	4914      	ldr	r1, [pc, #80]	; (800183c <LCD_DrawChar+0x88>)
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	440a      	add	r2, r1
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80017f4:	2300      	movs	r3, #0
 80017f6:	737b      	strb	r3, [r7, #13]
 80017f8:	e012      	b.n	8001820 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001804:	201f      	movs	r0, #31
 8001806:	f7ff fe11 	bl	800142c <LCD_Write_Data>
 800180a:	e003      	b.n	8001814 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 800180c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001810:	f7ff fe0c 	bl	800142c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800181a:	7b7b      	ldrb	r3, [r7, #13]
 800181c:	3301      	adds	r3, #1
 800181e:	737b      	strb	r3, [r7, #13]
 8001820:	7b7b      	ldrb	r3, [r7, #13]
 8001822:	2b07      	cmp	r3, #7
 8001824:	d9e9      	bls.n	80017fa <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	3301      	adds	r3, #1
 800182a:	73bb      	strb	r3, [r7, #14]
 800182c:	7bbb      	ldrb	r3, [r7, #14]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	d9d8      	bls.n	80017e4 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	08010700 	.word	0x08010700

08001840 <LCD_DrawString>:



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	603a      	str	r2, [r7, #0]
 800184a:	80fb      	strh	r3, [r7, #6]
 800184c:	460b      	mov	r3, r1
 800184e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001850:	e01c      	b.n	800188c <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2be8      	cmp	r3, #232	; 0xe8
 8001856:	d904      	bls.n	8001862 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001858:	2300      	movs	r3, #0
 800185a:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	3310      	adds	r3, #16
 8001860:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001862:	88bb      	ldrh	r3, [r7, #4]
 8001864:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001868:	d903      	bls.n	8001872 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800186a:	2300      	movs	r3, #0
 800186c:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800186e:	2300      	movs	r3, #0
 8001870:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	88b9      	ldrh	r1, [r7, #4]
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff9a 	bl	80017b4 <LCD_DrawChar>
		
		pStr ++;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	3308      	adds	r3, #8
 800188a:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1de      	bne.n	8001852 <LCD_DrawString+0x12>
		
	}
	
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <LCD_DrawChar_Color>:
{	

}

void LCD_DrawChar_Color ( uint16_t usC, uint16_t usP, const char cChar, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4604      	mov	r4, r0
 80018a8:	4608      	mov	r0, r1
 80018aa:	4611      	mov	r1, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	80fb      	strh	r3, [r7, #6]
 80018b2:	4603      	mov	r3, r0
 80018b4:	80bb      	strh	r3, [r7, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70fb      	strb	r3, [r7, #3]
 80018ba:	4613      	mov	r3, r2
 80018bc:	803b      	strh	r3, [r7, #0]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	3b20      	subs	r3, #32
 80018c2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80018c4:	88b9      	ldrh	r1, [r7, #4]
 80018c6:	88f8      	ldrh	r0, [r7, #6]
 80018c8:	2310      	movs	r3, #16
 80018ca:	2208      	movs	r2, #8
 80018cc:	f7ff fed8 	bl	8001680 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80018d0:	202c      	movs	r0, #44	; 0x2c
 80018d2:	f7ff fd9d 	bl	8001410 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80018d6:	2300      	movs	r3, #0
 80018d8:	73bb      	strb	r3, [r7, #14]
 80018da:	e024      	b.n	8001926 <LCD_DrawChar_Color+0x86>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80018dc:	7b3a      	ldrb	r2, [r7, #12]
 80018de:	7bbb      	ldrb	r3, [r7, #14]
 80018e0:	4915      	ldr	r1, [pc, #84]	; (8001938 <LCD_DrawChar_Color+0x98>)
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	440a      	add	r2, r1
 80018e6:	4413      	add	r3, r2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80018ec:	2300      	movs	r3, #0
 80018ee:	737b      	strb	r3, [r7, #13]
 80018f0:	e013      	b.n	800191a <LCD_DrawChar_Color+0x7a>
		{
			if ( ucTemp & 0x01 )
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <LCD_DrawChar_Color+0x66>
				LCD_Write_Data ( usColor_Foreground );
 80018fc:	8c3b      	ldrh	r3, [r7, #32]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fd94 	bl	800142c <LCD_Write_Data>
 8001904:	e003      	b.n	800190e <LCD_DrawChar_Color+0x6e>
			
			else
				LCD_Write_Data ( usColor_Background );								
 8001906:	883b      	ldrh	r3, [r7, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fd8f 	bl	800142c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001914:	7b7b      	ldrb	r3, [r7, #13]
 8001916:	3301      	adds	r3, #1
 8001918:	737b      	strb	r3, [r7, #13]
 800191a:	7b7b      	ldrb	r3, [r7, #13]
 800191c:	2b07      	cmp	r3, #7
 800191e:	d9e8      	bls.n	80018f2 <LCD_DrawChar_Color+0x52>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	3301      	adds	r3, #1
 8001924:	73bb      	strb	r3, [r7, #14]
 8001926:	7bbb      	ldrb	r3, [r7, #14]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d9d7      	bls.n	80018dc <LCD_DrawChar_Color+0x3c>
			
		}
		
	}
	
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}
 8001936:	bf00      	nop
 8001938:	08010700 	.word	0x08010700

0800193c <LCD_DrawCross>:

void LCD_DrawCross ( uint16_t usX, uint16_t usY )
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af02      	add	r7, sp, #8
 8001942:	4603      	mov	r3, r0
 8001944:	460a      	mov	r2, r1
 8001946:	80fb      	strh	r3, [r7, #6]
 8001948:	4613      	mov	r3, r2
 800194a:	80bb      	strh	r3, [r7, #4]
  LCD_Clear ( usX - 10, usY, 20, 1, RED);
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	3b0a      	subs	r3, #10
 8001950:	b298      	uxth	r0, r3
 8001952:	88b9      	ldrh	r1, [r7, #4]
 8001954:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	2214      	movs	r2, #20
 800195e:	f7ff ff06 	bl	800176e <LCD_Clear>
  LCD_Clear ( usX, usY - 10, 1, 20, RED);
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	3b0a      	subs	r3, #10
 8001966:	b299      	uxth	r1, r3
 8001968:	88f8      	ldrh	r0, [r7, #6]
 800196a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2314      	movs	r3, #20
 8001972:	2201      	movs	r2, #1
 8001974:	f7ff fefb 	bl	800176e <LCD_Clear>
	
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <LCD_DrawString_Color>:


void LCD_DrawString_Color ( uint16_t usC, uint16_t usP, const char * pStr, uint16_t usColor_Background, uint16_t usColor_Foreground )
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b087      	sub	sp, #28
 8001984:	af02      	add	r7, sp, #8
 8001986:	60ba      	str	r2, [r7, #8]
 8001988:	461a      	mov	r2, r3
 800198a:	4603      	mov	r3, r0
 800198c:	81fb      	strh	r3, [r7, #14]
 800198e:	460b      	mov	r3, r1
 8001990:	81bb      	strh	r3, [r7, #12]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001996:	e01f      	b.n	80019d8 <LCD_DrawString_Color+0x58>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001998:	89fb      	ldrh	r3, [r7, #14]
 800199a:	2be8      	cmp	r3, #232	; 0xe8
 800199c:	d904      	bls.n	80019a8 <LCD_DrawString_Color+0x28>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800199e:	2300      	movs	r3, #0
 80019a0:	81fb      	strh	r3, [r7, #14]
			usP += HEIGHT_EN_CHAR;
 80019a2:	89bb      	ldrh	r3, [r7, #12]
 80019a4:	3310      	adds	r3, #16
 80019a6:	81bb      	strh	r3, [r7, #12]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80019a8:	89bb      	ldrh	r3, [r7, #12]
 80019aa:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80019ae:	d903      	bls.n	80019b8 <LCD_DrawString_Color+0x38>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80019b0:	2300      	movs	r3, #0
 80019b2:	81fb      	strh	r3, [r7, #14]
			usP = LCD_DispWindow_Start_PAGE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	81bb      	strh	r3, [r7, #12]
		}
		
		LCD_DrawChar_Color  ( usC, usP, * pStr, usColor_Background, usColor_Foreground );
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	88fc      	ldrh	r4, [r7, #6]
 80019be:	89b9      	ldrh	r1, [r7, #12]
 80019c0:	89f8      	ldrh	r0, [r7, #14]
 80019c2:	8c3b      	ldrh	r3, [r7, #32]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	4623      	mov	r3, r4
 80019c8:	f7ff ff6a 	bl	80018a0 <LCD_DrawChar_Color>
		
		pStr ++;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	3301      	adds	r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
		
		usC += WIDTH_EN_CHAR;
 80019d2:	89fb      	ldrh	r3, [r7, #14]
 80019d4:	3308      	adds	r3, #8
 80019d6:	81fb      	strh	r3, [r7, #14]
	while ( * pStr != '\0' )
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1db      	bne.n	8001998 <LCD_DrawString_Color+0x18>
		
	}
	
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd90      	pop	{r4, r7, pc}
	...

080019ec <LCD_GramScan>:


void LCD_GramScan ( uint8_t ucOption )
{	
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
	switch ( ucOption )
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	f200 80a0 	bhi.w	8001b40 <LCD_GramScan+0x154>
 8001a00:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <LCD_GramScan+0x1c>)
 8001a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a06:	bf00      	nop
 8001a08:	08001a19 	.word	0x08001a19
 8001a0c:	08001a63 	.word	0x08001a63
 8001a10:	08001aad 	.word	0x08001aad
 8001a14:	08001af7 	.word	0x08001af7

//		____ x(240)      
//	 |  
//	 |	y(320)        
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001a18:	2036      	movs	r0, #54	; 0x36
 8001a1a:	f7ff fcf9 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0xC8 );   
 8001a1e:	20c8      	movs	r0, #200	; 0xc8
 8001a20:	f7ff fd04 	bl	800142c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001a24:	202a      	movs	r0, #42	; 0x2a
 8001a26:	f7ff fcf3 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* x start */	
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff fcfe 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fcfb 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );  /* x end */	
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff fcf8 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );
 8001a3c:	20ef      	movs	r0, #239	; 0xef
 8001a3e:	f7ff fcf5 	bl	800142c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001a42:	202b      	movs	r0, #43	; 0x2b
 8001a44:	f7ff fce4 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );	/* y start */  
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fcef 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff fcec 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );	/* y end */   
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7ff fce9 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );
 8001a5a:	203f      	movs	r0, #63	; 0x3f
 8001a5c:	f7ff fce6 	bl	800142c <LCD_Write_Data>
					
		  break;
 8001a60:	e06e      	b.n	8001b40 <LCD_GramScan+0x154>

//		|x(320)            
//		|
//		|___ y(240)
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001a62:	2036      	movs	r0, #54	; 0x36
 8001a64:	f7ff fcd4 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x68 );	
 8001a68:	2068      	movs	r0, #104	; 0x68
 8001a6a:	f7ff fcdf 	bl	800142c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001a6e:	202a      	movs	r0, #42	; 0x2a
 8001a70:	f7ff fcce 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff fcd9 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fcd6 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff fcd3 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001a86:	203f      	movs	r0, #63	; 0x3f
 8001a88:	f7ff fcd0 	bl	800142c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001a8c:	202b      	movs	r0, #43	; 0x2b
 8001a8e:	f7ff fcbf 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fcca 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff fcc7 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff fcc4 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );		
 8001aa4:	20ef      	movs	r0, #239	; 0xef
 8001aa6:	f7ff fcc1 	bl	800142c <LCD_Write_Data>
		
		  break;
 8001aaa:	e049      	b.n	8001b40 <LCD_GramScan+0x154>

//		           |x(320)   
//		           |           
//		y(240) ____|
		
			LCD_Write_Cmd ( 0x36 ); 
 8001aac:	2036      	movs	r0, #54	; 0x36
 8001aae:	f7ff fcaf 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x28 );	
 8001ab2:	2028      	movs	r0, #40	; 0x28
 8001ab4:	f7ff fcba 	bl	800142c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001ab8:	202a      	movs	r0, #42	; 0x2a
 8001aba:	f7ff fca9 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fcb4 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fcb1 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff fcae 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );	
 8001ad0:	203f      	movs	r0, #63	; 0x3f
 8001ad2:	f7ff fcab 	bl	800142c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001ad6:	202b      	movs	r0, #43	; 0x2b
 8001ad8:	f7ff fc9a 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff fca5 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fca2 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff fc9f 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );			
 8001aee:	20ef      	movs	r0, #239	; 0xef
 8001af0:	f7ff fc9c 	bl	800142c <LCD_Write_Data>
		  
		  break;
 8001af4:	e024      	b.n	8001b40 <LCD_GramScan+0x154>

//		|y(320)              
//		|
//		|___ x(240)			
		  
			LCD_Write_Cmd ( 0x36 ); 
 8001af6:	2036      	movs	r0, #54	; 0x36
 8001af8:	f7ff fc8a 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x48 );	
 8001afc:	2048      	movs	r0, #72	; 0x48
 8001afe:	f7ff fc95 	bl	800142c <LCD_Write_Data>
			LCD_Write_Cmd ( 0x2A  ); 
 8001b02:	202a      	movs	r0, #42	; 0x2a
 8001b04:	f7ff fc84 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff fc8f 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff fc8c 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff fc89 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0xEF );	
 8001b1a:	20ef      	movs	r0, #239	; 0xef
 8001b1c:	f7ff fc86 	bl	800142c <LCD_Write_Data>

			LCD_Write_Cmd ( 0x2B ); 
 8001b20:	202b      	movs	r0, #43	; 0x2b
 8001b22:	f7ff fc75 	bl	8001410 <LCD_Write_Cmd>
			LCD_Write_Data ( 0x00 );
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff fc80 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x00 );
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff fc7d 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x01 );
 8001b32:	2001      	movs	r0, #1
 8001b34:	f7ff fc7a 	bl	800142c <LCD_Write_Data>
			LCD_Write_Data ( 0x3F );		
 8001b38:	203f      	movs	r0, #63	; 0x3f
 8001b3a:	f7ff fc77 	bl	800142c <LCD_Write_Data>
		
	    break;
 8001b3e:	bf00      	nop
		
	}
	
	
	/* write gram start */
	LCD_Write_Cmd ( 0x2C );
 8001b40:	202c      	movs	r0, #44	; 0x2c
 8001b42:	f7ff fc65 	bl	8001410 <LCD_Write_Cmd>
	
	
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b54:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8001b58:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	// VL53L1X new Attempt with 07Ver
	uint8_t buff[50];
	VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_Dev_t  vl53l1_c; // center module
	VL53L1_DEV    Dev = &vl53l1_c;
 8001b5a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b5e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b62:	f001 fed7 	bl	8003914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b66:	f000 fb13 	bl	8002190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6a:	f000 fcbf 	bl	80024ec <MX_GPIO_Init>
  MX_FSMC_Init();
 8001b6e:	f000 fd69 	bl	8002644 <MX_FSMC_Init>
  MX_DMA_Init();
 8001b72:	f000 fc9d 	bl	80024b0 <MX_DMA_Init>
  MX_I2C2_Init();
 8001b76:	f000 fb7f 	bl	8002278 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001b7a:	f000 fbab 	bl	80022d4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b7e:	f000 fc49 	bl	8002414 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001b82:	f000 fb4b 	bl	800221c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001b86:	f7ff fbf8 	bl	800137a <LCD_INIT>

  // Init VL53L1X
  Dev->I2cHandle = &hi2c2;
 8001b8a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001b8e:	4ad2      	ldr	r2, [pc, #840]	; (8001ed8 <main+0x388>)
 8001b90:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  Dev->I2cDevAddr = 0x52;
 8001b94:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001b98:	2252      	movs	r2, #82	; 0x52
 8001b9a:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2120      	movs	r1, #32
 8001ba2:	48ce      	ldr	r0, [pc, #824]	; (8001edc <main+0x38c>)
 8001ba4:	f002 fca7 	bl	80044f6 <HAL_GPIO_WritePin>
  HAL_Delay(2); // 2ms reset time
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f001 ff15 	bl	80039d8 <HAL_Delay>
  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_SET);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	48ca      	ldr	r0, [pc, #808]	; (8001edc <main+0x38c>)
 8001bb4:	f002 fc9f 	bl	80044f6 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f001 ff0d 	bl	80039d8 <HAL_Delay>

  //  /*-[ I2C Bus Scanning ]-*/
      uint8_t i=0, ret;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
      char text[100];
      for(i=1; i<128; i++)
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
 8001bca:	e03f      	b.n	8001c4c <main+0xfc>
      {
          ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8001bcc:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	b299      	uxth	r1, r3
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	2203      	movs	r2, #3
 8001bda:	48bf      	ldr	r0, [pc, #764]	; (8001ed8 <main+0x388>)
 8001bdc:	f003 fca8 	bl	8005530 <HAL_I2C_IsDeviceReady>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
          if (ret != HAL_OK) /* No ACK Received At That Address */
 8001be6:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d012      	beq.n	8001c14 <main+0xc4>
          {
        	  sprintf(text, "no %d", i);
 8001bee:	f897 24a7 	ldrb.w	r2, [r7, #1191]	; 0x4a7
 8001bf2:	f107 0320 	add.w	r3, r7, #32
 8001bf6:	49ba      	ldr	r1, [pc, #744]	; (8001ee0 <main+0x390>)
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00c fa27 	bl	800e04c <siprintf>
        	  LCD_DrawString(65, 105, text);
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	461a      	mov	r2, r3
 8001c04:	2169      	movs	r1, #105	; 0x69
 8001c06:	2041      	movs	r0, #65	; 0x41
 8001c08:	f7ff fe1a 	bl	8001840 <LCD_DrawString>
        	  Delay(100000);
 8001c0c:	48b5      	ldr	r0, [pc, #724]	; (8001ee4 <main+0x394>)
 8001c0e:	f7ff fba3 	bl	8001358 <Delay>
 8001c12:	e016      	b.n	8001c42 <main+0xf2>
        	  //println(&huart1,text);
          }
          else if(ret == HAL_OK)
 8001c14:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d112      	bne.n	8001c42 <main+0xf2>
          {
        	  sprintf(text, "%x", i << 1);
 8001c1c:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8001c20:	005a      	lsls	r2, r3, #1
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	49b0      	ldr	r1, [pc, #704]	; (8001ee8 <main+0x398>)
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f00c fa0f 	bl	800e04c <siprintf>
        	  LCD_DrawString(85, 125, text);
 8001c2e:	f107 0320 	add.w	r3, r7, #32
 8001c32:	461a      	mov	r2, r3
 8001c34:	217d      	movs	r1, #125	; 0x7d
 8001c36:	2055      	movs	r0, #85	; 0x55
 8001c38:	f7ff fe02 	bl	8001840 <LCD_DrawString>
        	  Delay(10000000);
 8001c3c:	48ab      	ldr	r0, [pc, #684]	; (8001eec <main+0x39c>)
 8001c3e:	f7ff fb8b 	bl	8001358 <Delay>
      for(i=1; i<128; i++)
 8001c42:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8001c46:	3301      	adds	r3, #1
 8001c48:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
 8001c4c:	f997 34a7 	ldrsb.w	r3, [r7, #1191]	; 0x4a7
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	dabb      	bge.n	8001bcc <main+0x7c>
          }
      }

      Delay(10000);
 8001c54:	f242 7010 	movw	r0, #10000	; 0x2710
 8001c58:	f7ff fb7e 	bl	8001358 <Delay>
//  HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, buff, 1, 0xFFFF );
//  buff[1] = buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
//  buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
//  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 2, 0xFFFF );

  HAL_Delay( 2 );
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f001 febb 	bl	80039d8 <HAL_Delay>
//
  VL53L1_WaitDeviceBooted( Dev );
 8001c62:	f8d7 049c 	ldr.w	r0, [r7, #1180]	; 0x49c
 8001c66:	f005 fefd 	bl	8007a64 <VL53L1_WaitDeviceBooted>
  VL53L1_DataInit( Dev );
 8001c6a:	f8d7 049c 	ldr.w	r0, [r7, #1180]	; 0x49c
 8001c6e:	f005 fea1 	bl	80079b4 <VL53L1_DataInit>
  VL53L1_StaticInit( Dev );
 8001c72:	f8d7 049c 	ldr.w	r0, [r7, #1180]	; 0x49c
 8001c76:	f005 fed6 	bl	8007a26 <VL53L1_StaticInit>
  VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	f8d7 049c 	ldr.w	r0, [r7, #1180]	; 0x49c
 8001c80:	f006 f81e 	bl	8007cc0 <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 8001c84:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001c88:	f8d7 049c 	ldr.w	r0, [r7, #1180]	; 0x49c
 8001c8c:	f006 f88e 	bl	8007dac <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
  VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 8001c90:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c94:	f8d7 049c 	ldr.w	r0, [r7, #1180]	; 0x49c
 8001c98:	f006 fa14 	bl	80080c4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
  VL53L1_StartMeasurement( Dev );
 8001c9c:	f8d7 049c 	ldr.w	r0, [r7, #1180]	; 0x49c
 8001ca0:	f006 fb4e 	bl	8008340 <VL53L1_StartMeasurement>

  // End VL53L1X init

  MPU6050_Initialize(&hi2c2);
 8001ca4:	488c      	ldr	r0, [pc, #560]	; (8001ed8 <main+0x388>)
 8001ca6:	f00b f9a5 	bl	800cff4 <MPU6050_Initialize>
  MPU6050_SetScaleAccelRange(&hi2c2, MPU6050_ACCEL_RANGE_8_G);
 8001caa:	2110      	movs	r1, #16
 8001cac:	488a      	ldr	r0, [pc, #552]	; (8001ed8 <main+0x388>)
 8001cae:	f00b f9ff 	bl	800d0b0 <MPU6050_SetScaleAccelRange>
  MPU6050_SetScaleGyroRange(&hi2c2, MPU6050_GYRO_RANGE_2000_DEG);
 8001cb2:	2118      	movs	r1, #24
 8001cb4:	4888      	ldr	r0, [pc, #544]	; (8001ed8 <main+0x388>)
 8001cb6:	f00b fa17 	bl	800d0e8 <MPU6050_SetScaleGyroRange>

  macXPT2046_CS_DISABLE();
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc0:	488b      	ldr	r0, [pc, #556]	; (8001ef0 <main+0x3a0>)
 8001cc2:	f002 fc18 	bl	80044f6 <HAL_GPIO_WritePin>
//  __HAL_RCC_I2C2_CLK_DISABLE();
//  __HAL_RCC_FSMC_CLK_ENABLE();

//  LCD_INIT();

   Delay(100000);
 8001cc6:	4887      	ldr	r0, [pc, #540]	; (8001ee4 <main+0x394>)
 8001cc8:	f7ff fb46 	bl	8001358 <Delay>

  LCD_Clear (50, 80, 140, 70, RED);
 8001ccc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2346      	movs	r3, #70	; 0x46
 8001cd4:	228c      	movs	r2, #140	; 0x8c
 8001cd6:	2150      	movs	r1, #80	; 0x50
 8001cd8:	2032      	movs	r0, #50	; 0x32
 8001cda:	f7ff fd48 	bl	800176e <LCD_Clear>
  LCD_DrawString(65, 105, "SmartBike DEMO");
 8001cde:	4a85      	ldr	r2, [pc, #532]	; (8001ef4 <main+0x3a4>)
 8001ce0:	2169      	movs	r1, #105	; 0x69
 8001ce2:	2041      	movs	r0, #65	; 0x41
 8001ce4:	f7ff fdac 	bl	8001840 <LCD_DrawString>
  HAL_Delay(1000);
 8001ce8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cec:	f001 fe74 	bl	80039d8 <HAL_Delay>

  while( ! XPT2046_Touch_Calibrate () );
 8001cf0:	bf00      	nop
 8001cf2:	f001 fb21 	bl	8003338 <XPT2046_Touch_Calibrate>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0fa      	beq.n	8001cf2 <main+0x1a2>

  LCD_GramScan ( 1 );
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f7ff fe75 	bl	80019ec <LCD_GramScan>
  LCD_Clear ( 0, 0, 240, 320, WHITE );
 8001d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001d0c:	22f0      	movs	r2, #240	; 0xf0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff fd2c 	bl	800176e <LCD_Clear>
  LCD_Clear ( 90,  230,  60, 60, BLUE	);
 8001d16:	231f      	movs	r3, #31
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	233c      	movs	r3, #60	; 0x3c
 8001d1c:	223c      	movs	r2, #60	; 0x3c
 8001d1e:	21e6      	movs	r1, #230	; 0xe6
 8001d20:	205a      	movs	r0, #90	; 0x5a
 8001d22:	f7ff fd24 	bl	800176e <LCD_Clear>
  LCD_Clear ( 30,  230,  60, 60,  YELLOW);
 8001d26:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	233c      	movs	r3, #60	; 0x3c
 8001d2e:	223c      	movs	r2, #60	; 0x3c
 8001d30:	21e6      	movs	r1, #230	; 0xe6
 8001d32:	201e      	movs	r0, #30
 8001d34:	f7ff fd1b 	bl	800176e <LCD_Clear>
  LCD_Clear ( 150,  230,  60, 60, YELLOW);
 8001d38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	233c      	movs	r3, #60	; 0x3c
 8001d40:	223c      	movs	r2, #60	; 0x3c
 8001d42:	21e6      	movs	r1, #230	; 0xe6
 8001d44:	2096      	movs	r0, #150	; 0x96
 8001d46:	f7ff fd12 	bl	800176e <LCD_Clear>
  char buf[9];
//  char text[10];
  float Ax, Ay, Az, Gx, Gy, Gz;

  strType_XPT2046_Coordinate touchCoordinate[4];
  int touchFlag = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
  int SafetyStatus = 0;	// 0: Save, 1: Caution, 2: Response needed, 3: Danger
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498


  /*
   * Init of RPM Counter with timer and A3144 Hall effect sensor
   * */
  a3144_Init();
 8001d56:	f7ff fad9 	bl	800130c <a3144_Init>
  float rotSpeed = 0;
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
  float tempSpeed = 0;
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Gyro(&hi2c2);
 8001d6a:	485b      	ldr	r0, [pc, #364]	; (8001ed8 <main+0x388>)
 8001d6c:	f00b fb50 	bl	800d410 <MPU6050_Read_Gyro>
	  MPU6050_Read_Accel(&hi2c2);
 8001d70:	4859      	ldr	r0, [pc, #356]	; (8001ed8 <main+0x388>)
 8001d72:	f00b f9d5 	bl	800d120 <MPU6050_Read_Accel>


	  Ax = MPU6050_Ax;
 8001d76:	4b60      	ldr	r3, [pc, #384]	; (8001ef8 <main+0x3a8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
	  Ay = MPU6050_Ay;
 8001d7e:	4b5f      	ldr	r3, [pc, #380]	; (8001efc <main+0x3ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	  Az = MPU6050_Az;
 8001d86:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <main+0x3b0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484

	  Gx = MPU6050_Gx;
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <main+0x3b4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
	  Gy = MPU6050_Gy;
 8001d96:	4b5c      	ldr	r3, [pc, #368]	; (8001f08 <main+0x3b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
	  Gz = MPU6050_Gz;
 8001d9e:	4b5b      	ldr	r3, [pc, #364]	; (8001f0c <main+0x3bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478

	  sprintf(buf, "Ax: %0.2f", Ax);
 8001da6:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001daa:	f7fe fba9 	bl	8000500 <__aeabi_f2d>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	f107 0014 	add.w	r0, r7, #20
 8001db6:	4956      	ldr	r1, [pc, #344]	; (8001f10 <main+0x3c0>)
 8001db8:	f00c f948 	bl	800e04c <siprintf>
	  LCD_DrawString(20, 20, buf);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2114      	movs	r1, #20
 8001dc4:	2014      	movs	r0, #20
 8001dc6:	f7ff fd3b 	bl	8001840 <LCD_DrawString>

	  sprintf(buf, "Ay: %0.2f", Ay);
 8001dca:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 8001dce:	f7fe fb97 	bl	8000500 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	f107 0014 	add.w	r0, r7, #20
 8001dda:	494e      	ldr	r1, [pc, #312]	; (8001f14 <main+0x3c4>)
 8001ddc:	f00c f936 	bl	800e04c <siprintf>
	  LCD_DrawString(20, 40, buf);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	461a      	mov	r2, r3
 8001de6:	2128      	movs	r1, #40	; 0x28
 8001de8:	2014      	movs	r0, #20
 8001dea:	f7ff fd29 	bl	8001840 <LCD_DrawString>

	  sprintf(buf, "Az: %0.2f", Az);
 8001dee:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001df2:	f7fe fb85 	bl	8000500 <__aeabi_f2d>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	f107 0014 	add.w	r0, r7, #20
 8001dfe:	4946      	ldr	r1, [pc, #280]	; (8001f18 <main+0x3c8>)
 8001e00:	f00c f924 	bl	800e04c <siprintf>
	  LCD_DrawString(20, 60, buf);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	461a      	mov	r2, r3
 8001e0a:	213c      	movs	r1, #60	; 0x3c
 8001e0c:	2014      	movs	r0, #20
 8001e0e:	f7ff fd17 	bl	8001840 <LCD_DrawString>

	  sprintf(buf, "Gx: %0.2f", Gx);
 8001e12:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 8001e16:	f7fe fb73 	bl	8000500 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	f107 0014 	add.w	r0, r7, #20
 8001e22:	493e      	ldr	r1, [pc, #248]	; (8001f1c <main+0x3cc>)
 8001e24:	f00c f912 	bl	800e04c <siprintf>
	  LCD_DrawString(20, 80, buf);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2150      	movs	r1, #80	; 0x50
 8001e30:	2014      	movs	r0, #20
 8001e32:	f7ff fd05 	bl	8001840 <LCD_DrawString>

	  sprintf(buf, "Gy: %0.2f", Gy);
 8001e36:	f8d7 047c 	ldr.w	r0, [r7, #1148]	; 0x47c
 8001e3a:	f7fe fb61 	bl	8000500 <__aeabi_f2d>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	f107 0014 	add.w	r0, r7, #20
 8001e46:	4936      	ldr	r1, [pc, #216]	; (8001f20 <main+0x3d0>)
 8001e48:	f00c f900 	bl	800e04c <siprintf>
	  LCD_DrawString(20, 100, buf);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	461a      	mov	r2, r3
 8001e52:	2164      	movs	r1, #100	; 0x64
 8001e54:	2014      	movs	r0, #20
 8001e56:	f7ff fcf3 	bl	8001840 <LCD_DrawString>

	  sprintf(buf, "Gz: %0.2f", Gz);
 8001e5a:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 8001e5e:	f7fe fb4f 	bl	8000500 <__aeabi_f2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	f107 0014 	add.w	r0, r7, #20
 8001e6a:	492e      	ldr	r1, [pc, #184]	; (8001f24 <main+0x3d4>)
 8001e6c:	f00c f8ee 	bl	800e04c <siprintf>
	  LCD_DrawString(20, 120, buf);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	461a      	mov	r2, r3
 8001e76:	2178      	movs	r1, #120	; 0x78
 8001e78:	2014      	movs	r0, #20
 8001e7a:	f7ff fce1 	bl	8001840 <LCD_DrawString>

	  if (Ay < -0.55){
 8001e7e:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 8001e82:	f7fe fb3d 	bl	8000500 <__aeabi_f2d>
 8001e86:	a310      	add	r3, pc, #64	; (adr r3, 8001ec8 <main+0x378>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fe02 	bl	8000a94 <__aeabi_dcmplt>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <main+0x352>
		  LCD_DrawString(80, 140, "Pitch Down");
 8001e96:	4a24      	ldr	r2, [pc, #144]	; (8001f28 <main+0x3d8>)
 8001e98:	218c      	movs	r1, #140	; 0x8c
 8001e9a:	2050      	movs	r0, #80	; 0x50
 8001e9c:	f7ff fcd0 	bl	8001840 <LCD_DrawString>
 8001ea0:	e04b      	b.n	8001f3a <main+0x3ea>
	  } else if (Ay > 0.55){
 8001ea2:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 8001ea6:	f7fe fb2b 	bl	8000500 <__aeabi_f2d>
 8001eaa:	a309      	add	r3, pc, #36	; (adr r3, 8001ed0 <main+0x380>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fe0e 	bl	8000ad0 <__aeabi_dcmpgt>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d03a      	beq.n	8001f30 <main+0x3e0>
		  LCD_DrawString(80, 140, " Pitch up ");
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <main+0x3dc>)
 8001ebc:	218c      	movs	r1, #140	; 0x8c
 8001ebe:	2050      	movs	r0, #80	; 0x50
 8001ec0:	f7ff fcbe 	bl	8001840 <LCD_DrawString>
 8001ec4:	e039      	b.n	8001f3a <main+0x3ea>
 8001ec6:	bf00      	nop
 8001ec8:	9999999a 	.word	0x9999999a
 8001ecc:	bfe19999 	.word	0xbfe19999
 8001ed0:	9999999a 	.word	0x9999999a
 8001ed4:	3fe19999 	.word	0x3fe19999
 8001ed8:	200003ac 	.word	0x200003ac
 8001edc:	40010c00 	.word	0x40010c00
 8001ee0:	08010568 	.word	0x08010568
 8001ee4:	000186a0 	.word	0x000186a0
 8001ee8:	08010570 	.word	0x08010570
 8001eec:	00989680 	.word	0x00989680
 8001ef0:	40011400 	.word	0x40011400
 8001ef4:	08010574 	.word	0x08010574
 8001ef8:	20000308 	.word	0x20000308
 8001efc:	200002f0 	.word	0x200002f0
 8001f00:	20000294 	.word	0x20000294
 8001f04:	2000029c 	.word	0x2000029c
 8001f08:	200002f4 	.word	0x200002f4
 8001f0c:	2000030c 	.word	0x2000030c
 8001f10:	08010584 	.word	0x08010584
 8001f14:	08010590 	.word	0x08010590
 8001f18:	0801059c 	.word	0x0801059c
 8001f1c:	080105a8 	.word	0x080105a8
 8001f20:	080105b4 	.word	0x080105b4
 8001f24:	080105c0 	.word	0x080105c0
 8001f28:	080105cc 	.word	0x080105cc
 8001f2c:	080105d8 	.word	0x080105d8
	  } else{
		  LCD_DrawString(80, 140, "No Pitch  ");
 8001f30:	4a8b      	ldr	r2, [pc, #556]	; (8002160 <main+0x610>)
 8001f32:	218c      	movs	r1, #140	; 0x8c
 8001f34:	2050      	movs	r0, #80	; 0x50
 8001f36:	f7ff fc83 	bl	8001840 <LCD_DrawString>
	  }

	  if (Ax < -0.55){
 8001f3a:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001f3e:	f7fe fadf 	bl	8000500 <__aeabi_f2d>
 8001f42:	a381      	add	r3, pc, #516	; (adr r3, 8002148 <main+0x5f8>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe fda4 	bl	8000a94 <__aeabi_dcmplt>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <main+0x40e>
		  LCD_DrawString(90, 160, " Right ");
 8001f52:	4a84      	ldr	r2, [pc, #528]	; (8002164 <main+0x614>)
 8001f54:	21a0      	movs	r1, #160	; 0xa0
 8001f56:	205a      	movs	r0, #90	; 0x5a
 8001f58:	f7ff fc72 	bl	8001840 <LCD_DrawString>
 8001f5c:	e016      	b.n	8001f8c <main+0x43c>
	  } else if (Ax > 0.55){
 8001f5e:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001f62:	f7fe facd 	bl	8000500 <__aeabi_f2d>
 8001f66:	a37a      	add	r3, pc, #488	; (adr r3, 8002150 <main+0x600>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fdb0 	bl	8000ad0 <__aeabi_dcmpgt>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <main+0x432>
		  LCD_DrawString(90, 160, " Left ");
 8001f76:	4a7c      	ldr	r2, [pc, #496]	; (8002168 <main+0x618>)
 8001f78:	21a0      	movs	r1, #160	; 0xa0
 8001f7a:	205a      	movs	r0, #90	; 0x5a
 8001f7c:	f7ff fc60 	bl	8001840 <LCD_DrawString>
 8001f80:	e004      	b.n	8001f8c <main+0x43c>
	  }	else{
		  LCD_DrawString(90, 160, " Still ");
 8001f82:	4a7a      	ldr	r2, [pc, #488]	; (800216c <main+0x61c>)
 8001f84:	21a0      	movs	r1, #160	; 0xa0
 8001f86:	205a      	movs	r0, #90	; 0x5a
 8001f88:	f7ff fc5a 	bl	8001840 <LCD_DrawString>
	  }

	  if (Az < 0) {
 8001f8c:	f04f 0100 	mov.w	r1, #0
 8001f90:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001f94:	f7ff f900 	bl	8001198 <__aeabi_fcmplt>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <main+0x466>
		  LCD_DrawString_Color(90, 180, " Crash?? ", RED, BLACK);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fa6:	4a72      	ldr	r2, [pc, #456]	; (8002170 <main+0x620>)
 8001fa8:	21b4      	movs	r1, #180	; 0xb4
 8001faa:	205a      	movs	r0, #90	; 0x5a
 8001fac:	f7ff fce8 	bl	8001980 <LCD_DrawString_Color>
		  SafetyStatus = 2;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
	  }


	  HAL_Delay(200);
 8001fb6:	20c8      	movs	r0, #200	; 0xc8
 8001fb8:	f001 fd0e 	bl	80039d8 <HAL_Delay>

	  if ( touchFlag == 0 )
 8001fbc:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d160      	bne.n	8002086 <main+0x536>
	  {
		  if ( XPT2046_Get_TouchedPoint ( & touchCoordinate, & strXPT2046_TouchPara ) )
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	496b      	ldr	r1, [pc, #428]	; (8002174 <main+0x624>)
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f001 fbf5 	bl	80037b8 <XPT2046_Get_TouchedPoint>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d054      	beq.n	800207e <main+0x52e>
		  {
			  if ( ( touchCoordinate->y > 232 ) && ( touchCoordinate->y < 282 ) )
 8001fd4:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001fd8:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8001fdc:	885b      	ldrh	r3, [r3, #2]
 8001fde:	2be8      	cmp	r3, #232	; 0xe8
 8001fe0:	d94d      	bls.n	800207e <main+0x52e>
 8001fe2:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001fe6:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8001fea:	885b      	ldrh	r3, [r3, #2]
 8001fec:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8001ff0:	d245      	bcs.n	800207e <main+0x52e>
			  {
				  if ( ( touchCoordinate->x > 95 ) && ( touchCoordinate->x < 145 ) )
 8001ff2:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001ff6:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	2b5f      	cmp	r3, #95	; 0x5f
 8001ffe:	d920      	bls.n	8002042 <main+0x4f2>
 8002000:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8002004:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	2b90      	cmp	r3, #144	; 0x90
 800200c:	d819      	bhi.n	8002042 <main+0x4f2>
				  {
					  LCD_DrawString(71, 200, "     Reset    ");
 800200e:	4a5a      	ldr	r2, [pc, #360]	; (8002178 <main+0x628>)
 8002010:	21c8      	movs	r1, #200	; 0xc8
 8002012:	2047      	movs	r0, #71	; 0x47
 8002014:	f7ff fc14 	bl	8001840 <LCD_DrawString>
					  SafetyStatus = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
					  LCD_Clear(90, 180, 90, 20, WHITE);
 800201e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2314      	movs	r3, #20
 8002026:	225a      	movs	r2, #90	; 0x5a
 8002028:	21b4      	movs	r1, #180	; 0xb4
 800202a:	205a      	movs	r0, #90	; 0x5a
 800202c:	f7ff fb9f 	bl	800176e <LCD_Clear>
					  LCD_Clear(70, 200, 90, 20, WHITE);
 8002030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2314      	movs	r3, #20
 8002038:	225a      	movs	r2, #90	; 0x5a
 800203a:	21c8      	movs	r1, #200	; 0xc8
 800203c:	2046      	movs	r0, #70	; 0x46
 800203e:	f7ff fb96 	bl	800176e <LCD_Clear>
				  }

				  if (touchCoordinate->x < 90)
 8002042:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8002046:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	2b59      	cmp	r3, #89	; 0x59
 800204e:	d807      	bhi.n	8002060 <main+0x510>
				  {
					  SafetyStatus = 1;
 8002050:	2301      	movs	r3, #1
 8002052:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
					  LCD_DrawString(71, 200, "Turning Left! ");
 8002056:	4a49      	ldr	r2, [pc, #292]	; (800217c <main+0x62c>)
 8002058:	21c8      	movs	r1, #200	; 0xc8
 800205a:	2047      	movs	r0, #71	; 0x47
 800205c:	f7ff fbf0 	bl	8001840 <LCD_DrawString>
				  }

				  if (touchCoordinate->x > 150)
 8002060:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8002064:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	2b96      	cmp	r3, #150	; 0x96
 800206c:	d907      	bls.n	800207e <main+0x52e>
				  {
					  SafetyStatus = 1;
 800206e:	2301      	movs	r3, #1
 8002070:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
					  LCD_DrawString(71, 200, "Turning Right!");
 8002074:	4a42      	ldr	r2, [pc, #264]	; (8002180 <main+0x630>)
 8002076:	21c8      	movs	r1, #200	; 0xc8
 8002078:	2047      	movs	r0, #71	; 0x47
 800207a:	f7ff fbe1 	bl	8001840 <LCD_DrawString>
				  }
			  }

		  }
		  touchFlag = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8002084:	e002      	b.n	800208c <main+0x53c>
	  }
	  else {
//		  LCD_DrawString(70, 200, "..............");
		  touchFlag = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
	  }
	  HAL_Delay(50);
 800208c:	2032      	movs	r0, #50	; 0x32
 800208e:	f001 fca3 	bl	80039d8 <HAL_Delay>



	  rotSpeed = GetRotationSpeed();
 8002092:	f7ff f905 	bl	80012a0 <GetRotationSpeed>
 8002096:	f8c7 0494 	str.w	r0, [r7, #1172]	; 0x494
	  sprintf(buf, "RotSpeed: %0.2f", rotSpeed);
 800209a:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 800209e:	f7fe fa2f 	bl	8000500 <__aeabi_f2d>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	f107 0014 	add.w	r0, r7, #20
 80020aa:	4936      	ldr	r1, [pc, #216]	; (8002184 <main+0x634>)
 80020ac:	f00b ffce 	bl	800e04c <siprintf>
	  LCD_DrawString(30, 0, buf);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	461a      	mov	r2, r3
 80020b6:	2100      	movs	r1, #0
 80020b8:	201e      	movs	r0, #30
 80020ba:	f7ff fbc1 	bl	8001840 <LCD_DrawString>

	  // Get Distance Sensor Data
	  VL53L1_WaitMeasurementDataReady( Dev );
 80020be:	f8d7 049c 	ldr.w	r0, [r7, #1180]	; 0x49c
 80020c2:	f006 f9bf 	bl	8008444 <VL53L1_WaitMeasurementDataReady>

	  VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 80020c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020ca:	4619      	mov	r1, r3
 80020cc:	f8d7 049c 	ldr.w	r0, [r7, #1180]	; 0x49c
 80020d0:	f006 fb72 	bl	80087b8 <VL53L1_GetRangingMeasurementData>

	  sprintf( (char*)buff, "%d, %d, %.2f, %.2f", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 80020d4:	f897 3443 	ldrb.w	r3, [r7, #1091]	; 0x443
 80020d8:	461e      	mov	r6, r3
 80020da:	f9b7 3440 	ldrsh.w	r3, [r7, #1088]	; 0x440
 80020de:	4698      	mov	r8, r3
	  		( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
 80020e0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
	  sprintf( (char*)buff, "%d, %d, %.2f, %.2f", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe f9e9 	bl	80004bc <__aeabi_ui2d>
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <main+0x638>)
 80020f0:	f7fe fb88 	bl	8000804 <__aeabi_ddiv>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4614      	mov	r4, r2
 80020fa:	461d      	mov	r5, r3
	  		( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
 80020fc:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
	  sprintf( (char*)buff, "%d, %d, %.2f, %.2f", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe f9db 	bl	80004bc <__aeabi_ui2d>
 8002106:	a314      	add	r3, pc, #80	; (adr r3, 8002158 <main+0x608>)
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	f7fe fb7a 	bl	8000804 <__aeabi_ddiv>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	f207 4044 	addw	r0, r7, #1092	; 0x444
 8002118:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800211c:	e9cd 4500 	strd	r4, r5, [sp]
 8002120:	4643      	mov	r3, r8
 8002122:	4632      	mov	r2, r6
 8002124:	4919      	ldr	r1, [pc, #100]	; (800218c <main+0x63c>)
 8002126:	f00b ff91 	bl	800e04c <siprintf>

	  VL53L1_ClearInterruptAndStartMeasurement( Dev );
 800212a:	f8d7 049c 	ldr.w	r0, [r7, #1180]	; 0x49c
 800212e:	f006 f973 	bl	8008418 <VL53L1_ClearInterruptAndStartMeasurement>
	  LCD_DrawString(0, 200, buff);
 8002132:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8002136:	461a      	mov	r2, r3
 8002138:	21c8      	movs	r1, #200	; 0xc8
 800213a:	2000      	movs	r0, #0
 800213c:	f7ff fb80 	bl	8001840 <LCD_DrawString>
	  MPU6050_Read_Gyro(&hi2c2);
 8002140:	e613      	b.n	8001d6a <main+0x21a>
 8002142:	bf00      	nop
 8002144:	f3af 8000 	nop.w
 8002148:	9999999a 	.word	0x9999999a
 800214c:	bfe19999 	.word	0xbfe19999
 8002150:	9999999a 	.word	0x9999999a
 8002154:	3fe19999 	.word	0x3fe19999
 8002158:	00000000 	.word	0x00000000
 800215c:	40efe700 	.word	0x40efe700
 8002160:	080105e4 	.word	0x080105e4
 8002164:	080105f0 	.word	0x080105f0
 8002168:	080105f8 	.word	0x080105f8
 800216c:	08010600 	.word	0x08010600
 8002170:	08010608 	.word	0x08010608
 8002174:	20000008 	.word	0x20000008
 8002178:	08010614 	.word	0x08010614
 800217c:	08010624 	.word	0x08010624
 8002180:	08010634 	.word	0x08010634
 8002184:	08010644 	.word	0x08010644
 8002188:	40f00000 	.word	0x40f00000
 800218c:	08010654 	.word	0x08010654

08002190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b090      	sub	sp, #64	; 0x40
 8002194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002196:	f107 0318 	add.w	r3, r7, #24
 800219a:	2228      	movs	r2, #40	; 0x28
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f00b faec 	bl	800d77c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c4:	2302      	movs	r3, #2
 80021c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d4:	f107 0318 	add.w	r3, r7, #24
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 ff81 	bl	80060e0 <HAL_RCC_OscConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80021e4:	f000 faac 	bl	8002740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e8:	230f      	movs	r3, #15
 80021ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ec:	2302      	movs	r3, #2
 80021ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2102      	movs	r1, #2
 8002204:	4618      	mov	r0, r3
 8002206:	f004 f9ed 	bl	80065e4 <HAL_RCC_ClockConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002210:	f000 fa96 	bl	8002740 <Error_Handler>
  }
}
 8002214:	bf00      	nop
 8002216:	3740      	adds	r7, #64	; 0x40
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <MX_I2C1_Init+0x50>)
 8002222:	4a13      	ldr	r2, [pc, #76]	; (8002270 <MX_I2C1_Init+0x54>)
 8002224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <MX_I2C1_Init+0x50>)
 8002228:	4a12      	ldr	r2, [pc, #72]	; (8002274 <MX_I2C1_Init+0x58>)
 800222a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <MX_I2C1_Init+0x50>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <MX_I2C1_Init+0x50>)
 8002234:	2200      	movs	r2, #0
 8002236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <MX_I2C1_Init+0x50>)
 800223a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800223e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <MX_I2C1_Init+0x50>)
 8002242:	2200      	movs	r2, #0
 8002244:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <MX_I2C1_Init+0x50>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <MX_I2C1_Init+0x50>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <MX_I2C1_Init+0x50>)
 8002254:	2200      	movs	r2, #0
 8002256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002258:	4804      	ldr	r0, [pc, #16]	; (800226c <MX_I2C1_Init+0x50>)
 800225a:	f002 f965 	bl	8004528 <HAL_I2C_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002264:	f000 fa6c 	bl	8002740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000358 	.word	0x20000358
 8002270:	40005400 	.word	0x40005400
 8002274:	000186a0 	.word	0x000186a0

08002278 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MX_I2C2_Init+0x50>)
 800227e:	4a13      	ldr	r2, [pc, #76]	; (80022cc <MX_I2C2_Init+0x54>)
 8002280:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_I2C2_Init+0x50>)
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <MX_I2C2_Init+0x58>)
 8002286:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_I2C2_Init+0x50>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_I2C2_Init+0x50>)
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_I2C2_Init+0x50>)
 8002296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800229a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <MX_I2C2_Init+0x50>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_I2C2_Init+0x50>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <MX_I2C2_Init+0x50>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_I2C2_Init+0x50>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <MX_I2C2_Init+0x50>)
 80022b6:	f002 f937 	bl	8004528 <HAL_I2C_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80022c0:	f000 fa3e 	bl	8002740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	200003ac 	.word	0x200003ac
 80022cc:	40005800 	.word	0x40005800
 80022d0:	000186a0 	.word	0x000186a0

080022d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b096      	sub	sp, #88	; 0x58
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	2220      	movs	r2, #32
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f00b fa35 	bl	800d77c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002312:	4b3e      	ldr	r3, [pc, #248]	; (800240c <MX_TIM1_Init+0x138>)
 8002314:	4a3e      	ldr	r2, [pc, #248]	; (8002410 <MX_TIM1_Init+0x13c>)
 8002316:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002318:	4b3c      	ldr	r3, [pc, #240]	; (800240c <MX_TIM1_Init+0x138>)
 800231a:	2200      	movs	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231e:	4b3b      	ldr	r3, [pc, #236]	; (800240c <MX_TIM1_Init+0x138>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72-1;
 8002324:	4b39      	ldr	r3, [pc, #228]	; (800240c <MX_TIM1_Init+0x138>)
 8002326:	2247      	movs	r2, #71	; 0x47
 8002328:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232a:	4b38      	ldr	r3, [pc, #224]	; (800240c <MX_TIM1_Init+0x138>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <MX_TIM1_Init+0x138>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002336:	4b35      	ldr	r3, [pc, #212]	; (800240c <MX_TIM1_Init+0x138>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800233c:	4833      	ldr	r0, [pc, #204]	; (800240c <MX_TIM1_Init+0x138>)
 800233e:	f004 fb22 	bl	8006986 <HAL_TIM_Base_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002348:	f000 f9fa 	bl	8002740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800234c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002350:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002356:	4619      	mov	r1, r3
 8002358:	482c      	ldr	r0, [pc, #176]	; (800240c <MX_TIM1_Init+0x138>)
 800235a:	f004 fde1 	bl	8006f20 <HAL_TIM_ConfigClockSource>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002364:	f000 f9ec 	bl	8002740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002368:	4828      	ldr	r0, [pc, #160]	; (800240c <MX_TIM1_Init+0x138>)
 800236a:	f004 fbbb 	bl	8006ae4 <HAL_TIM_PWM_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002374:	f000 f9e4 	bl	8002740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002378:	2300      	movs	r3, #0
 800237a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002380:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002384:	4619      	mov	r1, r3
 8002386:	4821      	ldr	r0, [pc, #132]	; (800240c <MX_TIM1_Init+0x138>)
 8002388:	f005 f96e 	bl	8007668 <HAL_TIMEx_MasterConfigSynchronization>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002392:	f000 f9d5 	bl	8002740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002396:	2360      	movs	r3, #96	; 0x60
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239e:	2300      	movs	r3, #0
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023a2:	2300      	movs	r3, #0
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b6:	2200      	movs	r2, #0
 80023b8:	4619      	mov	r1, r3
 80023ba:	4814      	ldr	r0, [pc, #80]	; (800240c <MX_TIM1_Init+0x138>)
 80023bc:	f004 fcf2 	bl	8006da4 <HAL_TIM_PWM_ConfigChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80023c6:	f000 f9bb 	bl	8002740 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	4619      	mov	r1, r3
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <MX_TIM1_Init+0x138>)
 80023ee:	f005 f9a7 	bl	8007740 <HAL_TIMEx_ConfigBreakDeadTime>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80023f8:	f000 f9a2 	bl	8002740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023fc:	4803      	ldr	r0, [pc, #12]	; (800240c <MX_TIM1_Init+0x138>)
 80023fe:	f000 faa9 	bl	8002954 <HAL_TIM_MspPostInit>

}
 8002402:	bf00      	nop
 8002404:	3758      	adds	r7, #88	; 0x58
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000448 	.word	0x20000448
 8002410:	40012c00 	.word	0x40012c00

08002414 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800241a:	f107 0308 	add.w	r3, r7, #8
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002428:	463b      	mov	r3, r7
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <MX_TIM3_Init+0x94>)
 8002432:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <MX_TIM3_Init+0x98>)
 8002434:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002436:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <MX_TIM3_Init+0x94>)
 8002438:	2247      	movs	r2, #71	; 0x47
 800243a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <MX_TIM3_Init+0x94>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <MX_TIM3_Init+0x94>)
 8002444:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002448:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <MX_TIM3_Init+0x94>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <MX_TIM3_Init+0x94>)
 8002452:	2280      	movs	r2, #128	; 0x80
 8002454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002456:	4814      	ldr	r0, [pc, #80]	; (80024a8 <MX_TIM3_Init+0x94>)
 8002458:	f004 fa95 	bl	8006986 <HAL_TIM_Base_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002462:	f000 f96d 	bl	8002740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800246c:	f107 0308 	add.w	r3, r7, #8
 8002470:	4619      	mov	r1, r3
 8002472:	480d      	ldr	r0, [pc, #52]	; (80024a8 <MX_TIM3_Init+0x94>)
 8002474:	f004 fd54 	bl	8006f20 <HAL_TIM_ConfigClockSource>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800247e:	f000 f95f 	bl	8002740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800248a:	463b      	mov	r3, r7
 800248c:	4619      	mov	r1, r3
 800248e:	4806      	ldr	r0, [pc, #24]	; (80024a8 <MX_TIM3_Init+0x94>)
 8002490:	f005 f8ea 	bl	8007668 <HAL_TIMEx_MasterConfigSynchronization>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800249a:	f000 f951 	bl	8002740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200002a8 	.word	0x200002a8
 80024ac:	40000400 	.word	0x40000400

080024b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <MX_DMA_Init+0x38>)
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <MX_DMA_Init+0x38>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6153      	str	r3, [r2, #20]
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <MX_DMA_Init+0x38>)
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	200c      	movs	r0, #12
 80024d4:	f001 fb7b 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80024d8:	200c      	movs	r0, #12
 80024da:	f001 fb94 	bl	8003c06 <HAL_NVIC_EnableIRQ>

}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000

080024ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f2:	f107 0318 	add.w	r3, r7, #24
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002500:	4b4c      	ldr	r3, [pc, #304]	; (8002634 <MX_GPIO_Init+0x148>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4a4b      	ldr	r2, [pc, #300]	; (8002634 <MX_GPIO_Init+0x148>)
 8002506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800250a:	6193      	str	r3, [r2, #24]
 800250c:	4b49      	ldr	r3, [pc, #292]	; (8002634 <MX_GPIO_Init+0x148>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <MX_GPIO_Init+0x148>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a45      	ldr	r2, [pc, #276]	; (8002634 <MX_GPIO_Init+0x148>)
 800251e:	f043 0310 	orr.w	r3, r3, #16
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b43      	ldr	r3, [pc, #268]	; (8002634 <MX_GPIO_Init+0x148>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	4b40      	ldr	r3, [pc, #256]	; (8002634 <MX_GPIO_Init+0x148>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a3f      	ldr	r2, [pc, #252]	; (8002634 <MX_GPIO_Init+0x148>)
 8002536:	f043 0308 	orr.w	r3, r3, #8
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <MX_GPIO_Init+0x148>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002548:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <MX_GPIO_Init+0x148>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4a39      	ldr	r2, [pc, #228]	; (8002634 <MX_GPIO_Init+0x148>)
 800254e:	f043 0320 	orr.w	r3, r3, #32
 8002552:	6193      	str	r3, [r2, #24]
 8002554:	4b37      	ldr	r3, [pc, #220]	; (8002634 <MX_GPIO_Init+0x148>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002560:	4b34      	ldr	r3, [pc, #208]	; (8002634 <MX_GPIO_Init+0x148>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	4a33      	ldr	r2, [pc, #204]	; (8002634 <MX_GPIO_Init+0x148>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6193      	str	r3, [r2, #24]
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <MX_GPIO_Init+0x148>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XPT2046_SPI_MOSI_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002578:	2200      	movs	r2, #0
 800257a:	2106      	movs	r1, #6
 800257c:	482e      	ldr	r0, [pc, #184]	; (8002638 <MX_GPIO_Init+0x14c>)
 800257e:	f001 ffba 	bl	80044f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin|XPT2046_SPI_CS_Pin, GPIO_PIN_RESET);
 8002582:	2200      	movs	r2, #0
 8002584:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002588:	482c      	ldr	r0, [pc, #176]	; (800263c <MX_GPIO_Init+0x150>)
 800258a:	f001 ffb4 	bl	80044f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XSHUT_GPIO_Port, XSHUT_Pin, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	2120      	movs	r1, #32
 8002592:	482b      	ldr	r0, [pc, #172]	; (8002640 <MX_GPIO_Init+0x154>)
 8002594:	f001 ffaf 	bl	80044f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XPT2046_SPI_CLK_GPIO_Port, XPT2046_SPI_CLK_Pin, GPIO_PIN_SET);
 8002598:	2201      	movs	r2, #1
 800259a:	2101      	movs	r1, #1
 800259c:	4826      	ldr	r0, [pc, #152]	; (8002638 <MX_GPIO_Init+0x14c>)
 800259e:	f001 ffaa 	bl	80044f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : XPT2046_SPI_MOSI_Pin XPT2046_SPI_CLK_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = XPT2046_SPI_MOSI_Pin|XPT2046_SPI_CLK_Pin|LCD_RST_Pin;
 80025a2:	2307      	movs	r3, #7
 80025a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a6:	2301      	movs	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025b2:	f107 0318 	add.w	r3, r7, #24
 80025b6:	4619      	mov	r1, r3
 80025b8:	481f      	ldr	r0, [pc, #124]	; (8002638 <MX_GPIO_Init+0x14c>)
 80025ba:	f001 fdf1 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : XPT2046_SPI_MISO_Pin */
  GPIO_InitStruct.Pin = XPT2046_SPI_MISO_Pin;
 80025be:	2308      	movs	r3, #8
 80025c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(XPT2046_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 80025ca:	f107 0318 	add.w	r3, r7, #24
 80025ce:	4619      	mov	r1, r3
 80025d0:	4819      	ldr	r0, [pc, #100]	; (8002638 <MX_GPIO_Init+0x14c>)
 80025d2:	f001 fde5 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3144_Pin */
  GPIO_InitStruct.Pin = A3144_Pin;
 80025d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A3144_GPIO_Port, &GPIO_InitStruct);
 80025e4:	f107 0318 	add.w	r3, r7, #24
 80025e8:	4619      	mov	r1, r3
 80025ea:	4815      	ldr	r0, [pc, #84]	; (8002640 <MX_GPIO_Init+0x154>)
 80025ec:	f001 fdd8 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin XPT2046_SPI_CS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|XPT2046_SPI_CS_Pin;
 80025f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002602:	f107 0318 	add.w	r3, r7, #24
 8002606:	4619      	mov	r1, r3
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <MX_GPIO_Init+0x150>)
 800260a:	f001 fdc9 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : XSHUT_Pin */
  GPIO_InitStruct.Pin = XSHUT_Pin;
 800260e:	2320      	movs	r3, #32
 8002610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002612:	2301      	movs	r3, #1
 8002614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	2302      	movs	r3, #2
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XSHUT_GPIO_Port, &GPIO_InitStruct);
 800261e:	f107 0318 	add.w	r3, r7, #24
 8002622:	4619      	mov	r1, r3
 8002624:	4806      	ldr	r0, [pc, #24]	; (8002640 <MX_GPIO_Init+0x154>)
 8002626:	f001 fdbb 	bl	80041a0 <HAL_GPIO_Init>

}
 800262a:	bf00      	nop
 800262c:	3728      	adds	r7, #40	; 0x28
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	40011800 	.word	0x40011800
 800263c:	40011400 	.word	0x40011400
 8002640:	40010c00 	.word	0x40010c00

08002644 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08e      	sub	sp, #56	; 0x38
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	615a      	str	r2, [r3, #20]
 800265c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800265e:	463b      	mov	r3, r7
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
 800266c:	615a      	str	r2, [r3, #20]
 800266e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002670:	4b30      	ldr	r3, [pc, #192]	; (8002734 <MX_FSMC_Init+0xf0>)
 8002672:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002676:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002678:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <MX_FSMC_Init+0xf0>)
 800267a:	4a2f      	ldr	r2, [pc, #188]	; (8002738 <MX_FSMC_Init+0xf4>)
 800267c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800267e:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <MX_FSMC_Init+0xf0>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002684:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <MX_FSMC_Init+0xf0>)
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800268a:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <MX_FSMC_Init+0xf0>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <MX_FSMC_Init+0xf0>)
 8002692:	2210      	movs	r2, #16
 8002694:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002696:	4b27      	ldr	r3, [pc, #156]	; (8002734 <MX_FSMC_Init+0xf0>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <MX_FSMC_Init+0xf0>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <MX_FSMC_Init+0xf0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80026a8:	4b22      	ldr	r3, [pc, #136]	; (8002734 <MX_FSMC_Init+0xf0>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <MX_FSMC_Init+0xf0>)
 80026b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80026b6:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <MX_FSMC_Init+0xf0>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <MX_FSMC_Init+0xf0>)
 80026be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <MX_FSMC_Init+0xf0>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80026ca:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <MX_FSMC_Init+0xf0>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80026d4:	230f      	movs	r3, #15
 80026d6:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 26;
 80026d8:	231a      	movs	r3, #26
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80026e0:	2310      	movs	r3, #16
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80026e4:	2311      	movs	r3, #17
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80026e8:	2300      	movs	r3, #0
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80026f0:	230f      	movs	r3, #15
 80026f2:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 1;
 80026f4:	2301      	movs	r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80026fc:	2310      	movs	r3, #16
 80026fe:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8002700:	2311      	movs	r3, #17
 8002702:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8002708:	463a      	mov	r2, r7
 800270a:	f107 031c 	add.w	r3, r7, #28
 800270e:	4619      	mov	r1, r3
 8002710:	4808      	ldr	r0, [pc, #32]	; (8002734 <MX_FSMC_Init+0xf0>)
 8002712:	f004 f8eb 	bl	80068ec <HAL_SRAM_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 800271c:	f000 f810 	bl	8002740 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <MX_FSMC_Init+0xf8>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	4a05      	ldr	r2, [pc, #20]	; (800273c <MX_FSMC_Init+0xf8>)
 8002726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800272c:	bf00      	nop
 800272e:	3738      	adds	r7, #56	; 0x38
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000400 	.word	0x20000400
 8002738:	a0000104 	.word	0xa0000104
 800273c:	40010000 	.word	0x40010000

08002740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002744:	b672      	cpsid	i
}
 8002746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002748:	e7fe      	b.n	8002748 <Error_Handler+0x8>
	...

0800274c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <HAL_MspInit+0x5c>)
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <HAL_MspInit+0x5c>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6193      	str	r3, [r2, #24]
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_MspInit+0x5c>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <HAL_MspInit+0x5c>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <HAL_MspInit+0x5c>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002774:	61d3      	str	r3, [r2, #28]
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <HAL_MspInit+0x5c>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002782:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <HAL_MspInit+0x60>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	4a04      	ldr	r2, [pc, #16]	; (80027ac <HAL_MspInit+0x60>)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40010000 	.word	0x40010000

080027b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0318 	add.w	r3, r7, #24
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a2b      	ldr	r2, [pc, #172]	; (8002878 <HAL_I2C_MspInit+0xc8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d124      	bne.n	800281a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <HAL_I2C_MspInit+0xcc>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	4a29      	ldr	r2, [pc, #164]	; (800287c <HAL_I2C_MspInit+0xcc>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6193      	str	r3, [r2, #24]
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_I2C_MspInit+0xcc>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027e8:	23c0      	movs	r3, #192	; 0xc0
 80027ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ec:	2312      	movs	r3, #18
 80027ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f4:	f107 0318 	add.w	r3, r7, #24
 80027f8:	4619      	mov	r1, r3
 80027fa:	4821      	ldr	r0, [pc, #132]	; (8002880 <HAL_I2C_MspInit+0xd0>)
 80027fc:	f001 fcd0 	bl	80041a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002800:	4b1e      	ldr	r3, [pc, #120]	; (800287c <HAL_I2C_MspInit+0xcc>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <HAL_I2C_MspInit+0xcc>)
 8002806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800280a:	61d3      	str	r3, [r2, #28]
 800280c:	4b1b      	ldr	r3, [pc, #108]	; (800287c <HAL_I2C_MspInit+0xcc>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002818:	e029      	b.n	800286e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a19      	ldr	r2, [pc, #100]	; (8002884 <HAL_I2C_MspInit+0xd4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d124      	bne.n	800286e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_I2C_MspInit+0xcc>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <HAL_I2C_MspInit+0xcc>)
 800282a:	f043 0308 	orr.w	r3, r3, #8
 800282e:	6193      	str	r3, [r2, #24]
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_I2C_MspInit+0xcc>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 800283c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002842:	2312      	movs	r3, #18
 8002844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002846:	2303      	movs	r3, #3
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284a:	f107 0318 	add.w	r3, r7, #24
 800284e:	4619      	mov	r1, r3
 8002850:	480b      	ldr	r0, [pc, #44]	; (8002880 <HAL_I2C_MspInit+0xd0>)
 8002852:	f001 fca5 	bl	80041a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_I2C_MspInit+0xcc>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <HAL_I2C_MspInit+0xcc>)
 800285c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002860:	61d3      	str	r3, [r2, #28]
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_I2C_MspInit+0xcc>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
}
 800286e:	bf00      	nop
 8002870:	3728      	adds	r7, #40	; 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40005400 	.word	0x40005400
 800287c:	40021000 	.word	0x40021000
 8002880:	40010c00 	.word	0x40010c00
 8002884:	40005800 	.word	0x40005800

08002888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2a      	ldr	r2, [pc, #168]	; (8002940 <HAL_TIM_Base_MspInit+0xb8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d134      	bne.n	8002904 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800289a:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <HAL_TIM_Base_MspInit+0xbc>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	4a29      	ldr	r2, [pc, #164]	; (8002944 <HAL_TIM_Base_MspInit+0xbc>)
 80028a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028a4:	6193      	str	r3, [r2, #24]
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_TIM_Base_MspInit+0xbc>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80028b2:	4b25      	ldr	r3, [pc, #148]	; (8002948 <HAL_TIM_Base_MspInit+0xc0>)
 80028b4:	4a25      	ldr	r2, [pc, #148]	; (800294c <HAL_TIM_Base_MspInit+0xc4>)
 80028b6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028b8:	4b23      	ldr	r3, [pc, #140]	; (8002948 <HAL_TIM_Base_MspInit+0xc0>)
 80028ba:	2210      	movs	r2, #16
 80028bc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_TIM_Base_MspInit+0xc0>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80028c4:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_TIM_Base_MspInit+0xc0>)
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028ca:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <HAL_TIM_Base_MspInit+0xc0>)
 80028cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028d2:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_TIM_Base_MspInit+0xc0>)
 80028d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80028da:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HAL_TIM_Base_MspInit+0xc0>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_TIM_Base_MspInit+0xc0>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80028e6:	4818      	ldr	r0, [pc, #96]	; (8002948 <HAL_TIM_Base_MspInit+0xc0>)
 80028e8:	f001 f9a8 	bl	8003c3c <HAL_DMA_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80028f2:	f7ff ff25 	bl	8002740 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a13      	ldr	r2, [pc, #76]	; (8002948 <HAL_TIM_Base_MspInit+0xc0>)
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24
 80028fc:	4a12      	ldr	r2, [pc, #72]	; (8002948 <HAL_TIM_Base_MspInit+0xc0>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002902:	e018      	b.n	8002936 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a11      	ldr	r2, [pc, #68]	; (8002950 <HAL_TIM_Base_MspInit+0xc8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d113      	bne.n	8002936 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_TIM_Base_MspInit+0xbc>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <HAL_TIM_Base_MspInit+0xbc>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	61d3      	str	r3, [r2, #28]
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_TIM_Base_MspInit+0xbc>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	201d      	movs	r0, #29
 800292c:	f001 f94f 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002930:	201d      	movs	r0, #29
 8002932:	f001 f968 	bl	8003c06 <HAL_NVIC_EnableIRQ>
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40012c00 	.word	0x40012c00
 8002944:	40021000 	.word	0x40021000
 8002948:	20000314 	.word	0x20000314
 800294c:	4002001c 	.word	0x4002001c
 8002950:	40000400 	.word	0x40000400

08002954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0310 	add.w	r3, r7, #16
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <HAL_TIM_MspPostInit+0x5c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d118      	bne.n	80029a6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_TIM_MspPostInit+0x60>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <HAL_TIM_MspPostInit+0x60>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	6193      	str	r3, [r2, #24]
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_TIM_MspPostInit+0x60>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800298c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002990:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2302      	movs	r3, #2
 8002998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	4619      	mov	r1, r3
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <HAL_TIM_MspPostInit+0x64>)
 80029a2:	f001 fbfd 	bl	80041a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029a6:	bf00      	nop
 80029a8:	3720      	adds	r7, #32
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40010800 	.word	0x40010800

080029bc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80029c2:	f107 0308 	add.w	r3, r7, #8
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80029d0:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <HAL_FSMC_MspInit+0x78>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d129      	bne.n	8002a2c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80029d8:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_FSMC_MspInit+0x78>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <HAL_FSMC_MspInit+0x7c>)
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <HAL_FSMC_MspInit+0x7c>)
 80029e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e8:	6153      	str	r3, [r2, #20]
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_FSMC_MspInit+0x7c>)
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80029f6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80029fa:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a04:	f107 0308 	add.w	r3, r7, #8
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480c      	ldr	r0, [pc, #48]	; (8002a3c <HAL_FSMC_MspInit+0x80>)
 8002a0c:	f001 fbc8 	bl	80041a0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002a10:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002a14:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	4619      	mov	r1, r3
 8002a24:	4806      	ldr	r0, [pc, #24]	; (8002a40 <HAL_FSMC_MspInit+0x84>)
 8002a26:	f001 fbbb 	bl	80041a0 <HAL_GPIO_Init>
 8002a2a:	e000      	b.n	8002a2e <HAL_FSMC_MspInit+0x72>
    return;
 8002a2c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000278 	.word	0x20000278
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40011800 	.word	0x40011800
 8002a40:	40011400 	.word	0x40011400

08002a44 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002a4c:	f7ff ffb6 	bl	80029bc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <HardFault_Handler+0x4>

08002a6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a6e:	e7fe      	b.n	8002a6e <MemManage_Handler+0x4>

08002a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <BusFault_Handler+0x4>

08002a76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <UsageFault_Handler+0x4>

08002a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa4:	f000 ff7c 	bl	80039a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002ab0:	4802      	ldr	r0, [pc, #8]	; (8002abc <DMA1_Channel2_IRQHandler+0x10>)
 8002ab2:	f001 f939 	bl	8003d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000314 	.word	0x20000314

08002ac0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ac4:	4802      	ldr	r0, [pc, #8]	; (8002ad0 <TIM3_IRQHandler+0x10>)
 8002ac6:	f004 f865 	bl	8006b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	200002a8 	.word	0x200002a8

08002ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
	return 1;
 8002ad8:	2301      	movs	r3, #1
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <_kill>:

int _kill(int pid, int sig)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002aec:	f00a fe0e 	bl	800d70c <__errno>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2216      	movs	r2, #22
 8002af4:	601a      	str	r2, [r3, #0]
	return -1;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <_exit>:

void _exit (int status)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ffe7 	bl	8002ae2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b14:	e7fe      	b.n	8002b14 <_exit+0x12>

08002b16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e00a      	b.n	8002b3e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b28:	f3af 8000 	nop.w
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	60ba      	str	r2, [r7, #8]
 8002b34:	b2ca      	uxtb	r2, r1
 8002b36:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	dbf0      	blt.n	8002b28 <_read+0x12>
	}

return len;
 8002b46:	687b      	ldr	r3, [r7, #4]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	e009      	b.n	8002b76 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	60ba      	str	r2, [r7, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3301      	adds	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	dbf1      	blt.n	8002b62 <_write+0x12>
	}
	return len;
 8002b7e:	687b      	ldr	r3, [r7, #4]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_close>:

int _close(int file)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	return -1;
 8002b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bae:	605a      	str	r2, [r3, #4]
	return 0;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <_isatty>:

int _isatty(int file)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	return 1;
 8002bc4:	2301      	movs	r3, #1
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
	return 0;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <_sbrk+0x5c>)
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <_sbrk+0x60>)
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <_sbrk+0x64>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <_sbrk+0x64>)
 8002c06:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <_sbrk+0x68>)
 8002c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <_sbrk+0x64>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d207      	bcs.n	8002c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c18:	f00a fd78 	bl	800d70c <__errno>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	220c      	movs	r2, #12
 8002c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c26:	e009      	b.n	8002c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <_sbrk+0x64>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c2e:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <_sbrk+0x64>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <_sbrk+0x64>)
 8002c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20010000 	.word	0x20010000
 8002c48:	00000400 	.word	0x00000400
 8002c4c:	2000027c 	.word	0x2000027c
 8002c50:	20000598 	.word	0x20000598

08002c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	e00a      	b.n	8002c84 <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 8002c6e:	230c      	movs	r3, #12
 8002c70:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 8002c72:	bf00      	nop
 8002c74:	7afb      	ldrb	r3, [r7, #11]
 8002c76:	1e5a      	subs	r2, r3, #1
 8002c78:	72fa      	strb	r2, [r7, #11]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1fa      	bne.n	8002c74 <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3f0      	bcc.n	8002c6e <XPT2046_DelayUS+0xe>

	}
	
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2104      	movs	r1, #4
 8002ca6:	481d      	ldr	r0, [pc, #116]	; (8002d1c <XPT2046_WriteCMD+0x84>)
 8002ca8:	f001 fc25 	bl	80044f6 <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 8002cac:	2200      	movs	r2, #0
 8002cae:	2101      	movs	r1, #1
 8002cb0:	481a      	ldr	r0, [pc, #104]	; (8002d1c <XPT2046_WriteCMD+0x84>)
 8002cb2:	f001 fc20 	bl	80044f6 <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	e027      	b.n	8002d0c <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8002cbc:	79fa      	ldrb	r2, [r7, #7]
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	f1c3 0307 	rsb	r3, r3, #7
 8002cc4:	fa42 f303 	asr.w	r3, r2, r3
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <XPT2046_WriteCMD+0x44>
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	4811      	ldr	r0, [pc, #68]	; (8002d1c <XPT2046_WriteCMD+0x84>)
 8002cd6:	f001 fc0e 	bl	80044f6 <HAL_GPIO_WritePin>
 8002cda:	e004      	b.n	8002ce6 <XPT2046_WriteCMD+0x4e>
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2104      	movs	r1, #4
 8002ce0:	480e      	ldr	r0, [pc, #56]	; (8002d1c <XPT2046_WriteCMD+0x84>)
 8002ce2:	f001 fc08 	bl	80044f6 <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 8002ce6:	2005      	movs	r0, #5
 8002ce8:	f7ff ffba 	bl	8002c60 <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 8002cec:	2201      	movs	r2, #1
 8002cee:	2101      	movs	r1, #1
 8002cf0:	480a      	ldr	r0, [pc, #40]	; (8002d1c <XPT2046_WriteCMD+0x84>)
 8002cf2:	f001 fc00 	bl	80044f6 <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 8002cf6:	2005      	movs	r0, #5
 8002cf8:	f7ff ffb2 	bl	8002c60 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2101      	movs	r1, #1
 8002d00:	4806      	ldr	r0, [pc, #24]	; (8002d1c <XPT2046_WriteCMD+0x84>)
 8002d02:	f001 fbf8 	bl	80044f6 <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	2b07      	cmp	r3, #7
 8002d10:	d9d4      	bls.n	8002cbc <XPT2046_WriteCMD+0x24>
	}
	
}
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40011800 	.word	0x40011800

08002d20 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 8002d26:	2300      	movs	r3, #0
 8002d28:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2104      	movs	r1, #4
 8002d2e:	4819      	ldr	r0, [pc, #100]	; (8002d94 <XPT2046_ReadCMD+0x74>)
 8002d30:	f001 fbe1 	bl	80044f6 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8002d34:	2201      	movs	r2, #1
 8002d36:	2101      	movs	r1, #1
 8002d38:	4816      	ldr	r0, [pc, #88]	; (8002d94 <XPT2046_ReadCMD+0x74>)
 8002d3a:	f001 fbdc 	bl	80044f6 <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 8002d3e:	2300      	movs	r3, #0
 8002d40:	71fb      	strb	r3, [r7, #7]
 8002d42:	e01e      	b.n	8002d82 <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 8002d44:	2200      	movs	r2, #0
 8002d46:	2101      	movs	r1, #1
 8002d48:	4812      	ldr	r0, [pc, #72]	; (8002d94 <XPT2046_ReadCMD+0x74>)
 8002d4a:	f001 fbd4 	bl	80044f6 <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 8002d4e:	2108      	movs	r1, #8
 8002d50:	4810      	ldr	r0, [pc, #64]	; (8002d94 <XPT2046_ReadCMD+0x74>)
 8002d52:	f001 fbb9 	bl	80044c8 <HAL_GPIO_ReadPin>
 8002d56:	4603      	mov	r3, r0
 8002d58:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	f1c3 030b 	rsb	r3, r3, #11
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	b21a      	sxth	r2, r3
 8002d68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	b21b      	sxth	r3, r3
 8002d70:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 8002d72:	2201      	movs	r2, #1
 8002d74:	2101      	movs	r1, #1
 8002d76:	4807      	ldr	r0, [pc, #28]	; (8002d94 <XPT2046_ReadCMD+0x74>)
 8002d78:	f001 fbbd 	bl	80044f6 <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	71fb      	strb	r3, [r7, #7]
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	2b0b      	cmp	r3, #11
 8002d86:	d9dd      	bls.n	8002d44 <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 8002d88:	88bb      	ldrh	r3, [r7, #4]

}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40011800 	.word	0x40011800

08002d98 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff77 	bl	8002c98 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 8002daa:	f7ff ffb9 	bl	8002d20 <XPT2046_ReadCMD>
 8002dae:	4603      	mov	r3, r0
	
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 8002dc2:	2090      	movs	r0, #144	; 0x90
 8002dc4:	f7ff ffe8 	bl	8002d98 <XPT2046_ReadAdc>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f7ff ff47 	bl	8002c60 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 8002dd2:	20d0      	movs	r0, #208	; 0xd0
 8002dd4:	f7ff ffe0 	bl	8002d98 <XPT2046_ReadAdc>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	89fa      	ldrh	r2, [r7, #14]
 8002de0:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	89ba      	ldrh	r2, [r7, #12]
 8002de6:	801a      	strh	r2, [r3, #0]
	
	
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <XPT2046_ReadAdc_Smooth_XY>:
}


#else     
static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b092      	sub	sp, #72	; 0x48
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 8002dfe:	f107 0308 	add.w	r3, r7, #8
 8002e02:	2228      	movs	r2, #40	; 0x28
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f00a fcb8 	bl	800d77c <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 8002e0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e10:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ffce 	bl	8002db8 <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 8002e1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e20:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	3348      	adds	r3, #72	; 0x48
 8002e28:	443b      	add	r3, r7
 8002e2a:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 8002e2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e32:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8002e36:	330a      	adds	r3, #10
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	3348      	adds	r3, #72	; 0x48
 8002e3c:	443b      	add	r3, r7
 8002e3e:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 8002e42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e46:	3301      	adds	r3, #1
 8002e48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 8002e4c:	2110      	movs	r1, #16
 8002e4e:	4871      	ldr	r0, [pc, #452]	; (8003014 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8002e50:	f001 fb3a 	bl	80044c8 <HAL_GPIO_ReadPin>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <XPT2046_ReadAdc_Smooth_XY+0x72>
 8002e5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e5e:	2b09      	cmp	r3, #9
 8002e60:	d9d4      	bls.n	8002e0c <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 8002e62:	2110      	movs	r1, #16
 8002e64:	486b      	ldr	r0, [pc, #428]	; (8003014 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8002e66:	f001 fb2f 	bl	80044c8 <HAL_GPIO_ReadPin>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 8002e70:	4b69      	ldr	r3, [pc, #420]	; (8003018 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 8002e76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e7a:	2b0a      	cmp	r3, #10
 8002e7c:	f040 80c4 	bne.w	8003008 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8002e80:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e84:	643b      	str	r3, [r7, #64]	; 0x40
 8002e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e88:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 8002e8a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
		
		for ( i = 1; i < 10; i ++ )
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002e9a:	e02b      	b.n	8002ef4 <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 8002e9c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	3348      	adds	r3, #72	; 0x48
 8002ea4:	443b      	add	r3, r7
 8002ea6:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	dd08      	ble.n	8002ec4 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8002eb2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	3348      	adds	r3, #72	; 0x48
 8002eba:	443b      	add	r3, r7
 8002ebc:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec2:	e012      	b.n	8002eea <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8002ec4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	3348      	adds	r3, #72	; 0x48
 8002ecc:	443b      	add	r3, r7
 8002ece:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	da07      	bge.n	8002eea <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 8002eda:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	3348      	adds	r3, #72	; 0x48
 8002ee2:	443b      	add	r3, r7
 8002ee4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 8002eea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002ef4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ef8:	2b09      	cmp	r3, #9
 8002efa:	d9cf      	bls.n	8002e9c <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002f02:	e02f      	b.n	8002f64 <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 8002f04:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002f08:	330a      	adds	r3, #10
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	3348      	adds	r3, #72	; 0x48
 8002f0e:	443b      	add	r3, r7
 8002f10:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002f14:	461a      	mov	r2, r3
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	dd09      	ble.n	8002f30 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 8002f1c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002f20:	330a      	adds	r3, #10
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	3348      	adds	r3, #72	; 0x48
 8002f26:	443b      	add	r3, r7
 8002f28:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002f2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f2e:	e014      	b.n	8002f5a <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 8002f30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002f34:	330a      	adds	r3, #10
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	3348      	adds	r3, #72	; 0x48
 8002f3a:	443b      	add	r3, r7
 8002f3c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002f40:	461a      	mov	r2, r3
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	4293      	cmp	r3, r2
 8002f46:	da08      	bge.n	8002f5a <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 8002f48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002f4c:	330a      	adds	r3, #10
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	3348      	adds	r3, #72	; 0x48
 8002f52:	443b      	add	r3, r7
 8002f54:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 8002f5a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002f64:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002f68:	2b09      	cmp	r3, #9
 8002f6a:	d9cb      	bls.n	8002f04 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8002f6c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f76:	4413      	add	r3, r2
 8002f78:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002f82:	4413      	add	r3, r2
 8002f84:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002f88:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8002f8a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8002f8e:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8002f90:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002f94:	4413      	add	r3, r2
 8002f96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002fa6:	441a      	add	r2, r3
 8002fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002faa:	1ad2      	subs	r2, r2, r3
 8002fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8002fb8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002fce:	4413      	add	r3, r2
 8002fd0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002fd4:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8002fd6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8002fda:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8002fdc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8002fec:	4413      	add	r3, r2
 8002fee:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8002ff2:	441a      	add	r2, r3
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	1ad2      	subs	r2, r2, r3
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 8003008:	2300      	movs	r3, #0
	
	
}
 800300a:	4618      	mov	r0, r3
 800300c:	3748      	adds	r7, #72	; 0x48
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40011800 	.word	0x40011800
 8003018:	20000280 	.word	0x20000280

0800301c <XPT2046_Calculate_CalibrationFactor>:
#endif



static uint8_t XPT2046_Calculate_CalibrationFactor ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_Coordinate * pScreenSample, strType_XPT2046_Calibration * pCalibrationFactor )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8003028:	2301      	movs	r3, #1
 800302a:	75fb      	strb	r3, [r7, #23]


	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3308      	adds	r3, #8
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	3204      	adds	r2, #4
 800303e:	8852      	ldrh	r2, [r2, #2]
 8003040:	4611      	mov	r1, r2
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	3208      	adds	r2, #8
 8003046:	8852      	ldrh	r2, [r2, #2]
 8003048:	1a8a      	subs	r2, r1, r2
 800304a:	fb03 f202 	mul.w	r2, r3, r2
									                 ( ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	3304      	adds	r3, #4
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	4619      	mov	r1, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3308      	adds	r3, #8
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	1acb      	subs	r3, r1, r3
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	8849      	ldrh	r1, [r1, #2]
 8003062:	4608      	mov	r0, r1
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	3108      	adds	r1, #8
 8003068:	8849      	ldrh	r1, [r1, #2]
 800306a:	1a41      	subs	r1, r0, r1
 800306c:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor -> Divider =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fa32 	bl	80004dc <__aeabi_i2d>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	
	
	if (  pCalibrationFactor -> Divider == 0  )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	f7fd fcf6 	bl	8000a80 <__aeabi_dcmpeq>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]
 800309e:	e145      	b.n	800332c <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3308      	adds	r3, #8
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	3204      	adds	r2, #4
 80030b2:	8852      	ldrh	r2, [r2, #2]
 80030b4:	4611      	mov	r1, r2
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	3208      	adds	r2, #8
 80030ba:	8852      	ldrh	r2, [r2, #2]
 80030bc:	1a8a      	subs	r2, r1, r2
 80030be:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) );
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3304      	adds	r3, #4
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3308      	adds	r3, #8
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	1acb      	subs	r3, r1, r3
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	8849      	ldrh	r1, [r1, #2]
 80030d6:	4608      	mov	r0, r1
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	3108      	adds	r1, #8
 80030dc:	8849      	ldrh	r1, [r1, #2]
 80030de:	1a41      	subs	r1, r0, r1
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> An =  ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd f9f8 	bl	80004dc <__aeabi_i2d>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	e9c1 2300 	strd	r2, r3, [r1]
		
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	3308      	adds	r3, #8
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	3204      	adds	r2, #4
 8003108:	8812      	ldrh	r2, [r2, #0]
 800310a:	4611      	mov	r1, r2
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	3208      	adds	r2, #8
 8003110:	8812      	ldrh	r2, [r2, #0]
 8003112:	1a8a      	subs	r2, r1, r2
 8003114:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .x - pDisplayCoordinate [ 2 ] .x ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) );
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3308      	adds	r3, #8
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	1acb      	subs	r3, r1, r3
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	3104      	adds	r1, #4
 800312a:	8809      	ldrh	r1, [r1, #0]
 800312c:	4608      	mov	r0, r1
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	3108      	adds	r1, #8
 8003132:	8809      	ldrh	r1, [r1, #0]
 8003134:	1a41      	subs	r1, r0, r1
 8003136:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Bn =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .x - pDisplayCoordinate [ 2 ] .x ) ) - 
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd f9cd 	bl	80004dc <__aeabi_i2d>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	e9c1 2302 	strd	r2, r3, [r1, #8]
		
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	3308      	adds	r3, #8
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	3304      	adds	r3, #4
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	fb03 f202 	mul.w	r2, r3, r2
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	3304      	adds	r3, #4
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	4619      	mov	r1, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3308      	adds	r3, #8
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	8852      	ldrh	r2, [r2, #2]
 8003176:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	4619      	mov	r1, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3308      	adds	r3, #8
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	fb03 f101 	mul.w	r1, r3, r1
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	3308      	adds	r3, #8
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	fb00 f303 	mul.w	r3, r0, r3
 800319a:	1acb      	subs	r3, r1, r3
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	3104      	adds	r1, #4
 80031a0:	8849      	ldrh	r1, [r1, #2]
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 80031a6:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .x - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .x ) * pScreenSample [ 2 ] .y ;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	3304      	adds	r3, #4
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	fb03 f101 	mul.w	r1, r3, r1
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3304      	adds	r3, #4
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	fb00 f303 	mul.w	r3, r0, r3
 80031c8:	1acb      	subs	r3, r1, r3
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	3108      	adds	r1, #8
 80031ce:	8849      	ldrh	r1, [r1, #2]
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .x - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .x ) * pScreenSample [ 1 ] .y +
 80031d4:	4413      	add	r3, r2
		pCalibrationFactor -> Cn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .x - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .x ) * pScreenSample [ 0 ] .y +
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd f980 	bl	80004dc <__aeabi_i2d>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	885b      	ldrh	r3, [r3, #2]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3308      	adds	r3, #8
 80031f0:	885b      	ldrh	r3, [r3, #2]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	3204      	adds	r2, #4
 80031f8:	8852      	ldrh	r2, [r2, #2]
 80031fa:	4611      	mov	r1, r2
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	3208      	adds	r2, #8
 8003200:	8852      	ldrh	r2, [r2, #2]
 8003202:	1a8a      	subs	r2, r1, r2
 8003204:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 0 ] .y - pScreenSample [ 2 ] .y ) ) ;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3304      	adds	r3, #4
 800320c:	885b      	ldrh	r3, [r3, #2]
 800320e:	4619      	mov	r1, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3308      	adds	r3, #8
 8003214:	885b      	ldrh	r3, [r3, #2]
 8003216:	1acb      	subs	r3, r1, r3
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	8849      	ldrh	r1, [r1, #2]
 800321c:	4608      	mov	r0, r1
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	3108      	adds	r1, #8
 8003222:	8849      	ldrh	r1, [r1, #2]
 8003224:	1a41      	subs	r1, r0, r1
 8003226:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Dn =  ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .y - pScreenSample [ 2 ] .y ) ) - 
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd f955 	bl	80004dc <__aeabi_i2d>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	e9c1 2306 	strd	r2, r3, [r1, #24]
		
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3308      	adds	r3, #8
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	3204      	adds	r2, #4
 800324e:	8852      	ldrh	r2, [r2, #2]
 8003250:	4611      	mov	r1, r2
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	3208      	adds	r2, #8
 8003256:	8852      	ldrh	r2, [r2, #2]
 8003258:	1a8a      	subs	r2, r1, r2
 800325a:	fb03 f202 	mul.w	r2, r3, r2
								                ( ( pDisplayCoordinate [ 0 ] .y - pDisplayCoordinate [ 2 ] .y ) *  ( pScreenSample [ 1 ] .x - pScreenSample [ 2 ] .x ) ) ;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	885b      	ldrh	r3, [r3, #2]
 8003262:	4619      	mov	r1, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3308      	adds	r3, #8
 8003268:	885b      	ldrh	r3, [r3, #2]
 800326a:	1acb      	subs	r3, r1, r3
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	3104      	adds	r1, #4
 8003270:	8809      	ldrh	r1, [r1, #0]
 8003272:	4608      	mov	r0, r1
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	3108      	adds	r1, #8
 8003278:	8809      	ldrh	r1, [r1, #0]
 800327a:	1a41      	subs	r1, r0, r1
 800327c:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> En =  ( ( pScreenSample [ 0 ] .x - pScreenSample [ 2 ] .x ) *  ( pDisplayCoordinate [ 1 ] .y - pDisplayCoordinate [ 2 ] .y ) ) - 
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd f92a 	bl	80004dc <__aeabi_i2d>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	e9c1 2308 	strd	r2, r3, [r1, #32]
		

		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3308      	adds	r3, #8
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3304      	adds	r3, #4
 800329e:	885b      	ldrh	r3, [r3, #2]
 80032a0:	fb03 f202 	mul.w	r2, r3, r2
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	3304      	adds	r3, #4
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	4619      	mov	r1, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3308      	adds	r3, #8
 80032b0:	885b      	ldrh	r3, [r3, #2]
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	8852      	ldrh	r2, [r2, #2]
 80032bc:	fb03 f202 	mul.w	r2, r3, r2
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	4619      	mov	r1, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3308      	adds	r3, #8
 80032ca:	885b      	ldrh	r3, [r3, #2]
 80032cc:	fb03 f101 	mul.w	r1, r3, r1
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	3308      	adds	r3, #8
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	885b      	ldrh	r3, [r3, #2]
 80032dc:	fb00 f303 	mul.w	r3, r0, r3
 80032e0:	1acb      	subs	r3, r1, r3
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	3104      	adds	r1, #4
 80032e6:	8849      	ldrh	r1, [r1, #2]
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 80032ec:	441a      	add	r2, r3
								                ( pScreenSample [ 1 ] .x * pDisplayCoordinate [ 0 ] .y - pScreenSample [ 0 ] .x * pDisplayCoordinate [ 1 ] .y ) * pScreenSample [ 2 ] .y;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	3304      	adds	r3, #4
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	4619      	mov	r1, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	885b      	ldrh	r3, [r3, #2]
 80032fa:	fb03 f101 	mul.w	r1, r3, r1
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3304      	adds	r3, #4
 8003308:	885b      	ldrh	r3, [r3, #2]
 800330a:	fb00 f303 	mul.w	r3, r0, r3
 800330e:	1acb      	subs	r3, r1, r3
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	3108      	adds	r1, #8
 8003314:	8849      	ldrh	r1, [r1, #2]
 8003316:	fb01 f303 	mul.w	r3, r1, r3
								                ( pScreenSample [ 0 ] .x * pDisplayCoordinate [ 2 ] .y - pScreenSample [ 2 ] .x * pDisplayCoordinate [ 0 ] .y ) * pScreenSample [ 1 ] .y +
 800331a:	4413      	add	r3, r2
		pCalibrationFactor -> Fn =  ( pScreenSample [ 2 ] .x * pDisplayCoordinate [ 1 ] .y - pScreenSample [ 1 ] .x * pDisplayCoordinate [ 2 ] .y ) * pScreenSample [ 0 ] .y +
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd f8dd 	bl	80004dc <__aeabi_i2d>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			
	}
	
	
	return ucRet;
 800332c:	7dfb      	ldrb	r3, [r7, #23]
	
	
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <XPT2046_Touch_Calibrate>:



uint8_t XPT2046_Touch_Calibrate ( void )
{
 8003338:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800333c:	b0a0      	sub	sp, #128	; 0x80
 800333e:	af02      	add	r7, sp, #8
		uint8_t i;
		
		char cStr [ 10 ];
		
    uint16_t usScreenWidth, usScreenHeigth;
		uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8003346:	2300      	movs	r3, #0
 8003348:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800334c:	2300      	movs	r3, #0
 800334e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8003352:	2300      	movs	r3, #0
 8003354:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		
	  char * pStr = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	66bb      	str	r3, [r7, #104]	; 0x68
	  
	  strType_XPT2046_Calibration CalibrationFactor;
    		

		#if ( macXPT2046_Coordinate_GramScan == 1 ) || ( macXPT2046_Coordinate_GramScan == 4 )
	    usScreenWidth = LCD_Default_Max_Width;
 800335c:	23f0      	movs	r3, #240	; 0xf0
 800335e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	    usScreenHeigth = LCD_Default_Max_Heigth;
 8003362:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003366:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	
	  #endif
		
		

		strCrossCoordinate [ 0 ] .x = usScreenWidth >> 2;
 800336a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	b29b      	uxth	r3, r3
 8003372:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		strCrossCoordinate [ 0 ] .y = usScreenHeigth >> 2;
 8003376:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	b29b      	uxth	r3, r3
 800337e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		
		strCrossCoordinate [ 1 ] .x = strCrossCoordinate [ 0 ] .x;
 8003382:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003386:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		strCrossCoordinate [ 1 ] .y = ( usScreenHeigth * 3 ) >> 2;
 800338a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800338e:	4613      	mov	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	4413      	add	r3, r2
 8003394:	109b      	asrs	r3, r3, #2
 8003396:	b29b      	uxth	r3, r3
 8003398:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		
		strCrossCoordinate [ 2 ] .x = ( usScreenWidth * 3 ) >> 2;
 800339c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	109b      	asrs	r3, r3, #2
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		strCrossCoordinate [ 2 ] .y = strCrossCoordinate [ 1 ] .y;
 80033ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033b2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		
		strCrossCoordinate [ 3 ] .x = strCrossCoordinate [ 2 ] .x;
 80033b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033ba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		strCrossCoordinate [ 3 ] .y = strCrossCoordinate [ 0 ] .y;		
 80033be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  	
			
		LCD_GramScan (1 );
 80033c6:	2001      	movs	r0, #1
 80033c8:	f7fe fb10 	bl	80019ec <LCD_GramScan>
		
		
		for ( i = 0; i < 4; i ++ )
 80033cc:	2300      	movs	r3, #0
 80033ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033d2:	e066      	b.n	80034a2 <XPT2046_Touch_Calibrate+0x16a>
		{ 
			LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );       
 80033d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80033d8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80033dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033e0:	9100      	str	r1, [sp, #0]
 80033e2:	2100      	movs	r1, #0
 80033e4:	2000      	movs	r0, #0
 80033e6:	f7fe f9c2 	bl	800176e <LCD_Clear>
			
			pStr = "Touch Calibrate ......";			
 80033ea:	4bc6      	ldr	r3, [pc, #792]	; (8003704 <XPT2046_Touch_Calibrate+0x3cc>)
 80033ec:	66bb      	str	r3, [r7, #104]	; 0x68
      LCD_DrawString_Color ( ( usScreenWidth - ( strlen ( pStr ) - 7 ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );			
 80033ee:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80033f2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80033f4:	f7fc ff18 	bl	8000228 <strlen>
 80033f8:	4603      	mov	r3, r0
 80033fa:	3b07      	subs	r3, #7
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	1ae3      	subs	r3, r4, r3
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	b298      	uxth	r0, r3
 8003404:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	b299      	uxth	r1, r3
 800340c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003416:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003418:	f7fe fab2 	bl	8001980 <LCD_DrawString_Color>
		
			sprintf ( cStr, "%d", i + 1 );
 800341c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003426:	49b8      	ldr	r1, [pc, #736]	; (8003708 <XPT2046_Touch_Calibrate+0x3d0>)
 8003428:	4618      	mov	r0, r3
 800342a:	f00a fe0f 	bl	800e04c <siprintf>
			LCD_DrawString_Color ( usScreenWidth >> 1, ( usScreenHeigth >> 1 ) - HEIGHT_EN_CHAR, cStr, BACKGROUND, RED );
 800342e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	b298      	uxth	r0, r3
 8003436:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800343a:	085b      	lsrs	r3, r3, #1
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b10      	subs	r3, #16
 8003440:	b299      	uxth	r1, r3
 8003442:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003446:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003450:	f7fe fa96 	bl	8001980 <LCD_DrawString_Color>
		
			XPT2046_DelayUS ( 100000 );		                                                   
 8003454:	48ad      	ldr	r0, [pc, #692]	; (800370c <XPT2046_Touch_Calibrate+0x3d4>)
 8003456:	f7ff fc03 	bl	8002c60 <XPT2046_DelayUS>
			
			LCD_DrawCross ( strCrossCoordinate [ i ] .x, strCrossCoordinate [ i ] .y );  
 800345a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	3378      	adds	r3, #120	; 0x78
 8003462:	443b      	add	r3, r7
 8003464:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003468:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	3378      	adds	r3, #120	; 0x78
 8003470:	443b      	add	r3, r7
 8003472:	f833 3c2e 	ldrh.w	r3, [r3, #-46]
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f7fe fa5f 	bl	800193c <LCD_DrawCross>

			while ( ! XPT2046_ReadAdc_Smooth_XY ( & strScreenSample [ i ] ) );         
 800347e:	bf00      	nop
 8003480:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003484:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fcaf 	bl	8002df0 <XPT2046_ReadAdc_Smooth_XY>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f3      	beq.n	8003480 <XPT2046_Touch_Calibrate+0x148>
		for ( i = 0; i < 4; i ++ )
 8003498:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800349c:	3301      	adds	r3, #1
 800349e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80034a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d994      	bls.n	80033d4 <XPT2046_Touch_Calibrate+0x9c>

		}
		
		
		XPT2046_Calculate_CalibrationFactor ( strCrossCoordinate, strScreenSample, & CalibrationFactor ) ;  	 
 80034aa:	463a      	mov	r2, r7
 80034ac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80034b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fdb1 	bl	800301c <XPT2046_Calculate_CalibrationFactor>
		
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 80034ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	f7fd fadb 	bl	8000a80 <__aeabi_dcmpeq>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f040 8116 	bne.w	80036fe <XPT2046_Touch_Calibrate+0x3c6>
		
			
		usTest_x = ( ( CalibrationFactor .An * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .Bn * strScreenSample [ 3 ] .y ) + CalibrationFactor .Cn ) / CalibrationFactor .Divider;		
 80034d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fc fffe 	bl	80004dc <__aeabi_i2d>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4620      	mov	r0, r4
 80034e6:	4629      	mov	r1, r5
 80034e8:	f7fd f862 	bl	80005b0 <__aeabi_dmul>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4690      	mov	r8, r2
 80034f2:	4699      	mov	r9, r3
 80034f4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fc ffed 	bl	80004dc <__aeabi_i2d>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4620      	mov	r0, r4
 8003508:	4629      	mov	r1, r5
 800350a:	f7fd f851 	bl	80005b0 <__aeabi_dmul>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4640      	mov	r0, r8
 8003514:	4649      	mov	r1, r9
 8003516:	f7fc fe95 	bl	8000244 <__adddf3>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4610      	mov	r0, r2
 8003520:	4619      	mov	r1, r3
 8003522:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003526:	f7fc fe8d 	bl	8000244 <__adddf3>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003536:	f7fd f965 	bl	8000804 <__aeabi_ddiv>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f7fd fb0d 	bl	8000b60 <__aeabi_d2uiz>
 8003546:	4603      	mov	r3, r0
 8003548:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		usTest_y = ( ( CalibrationFactor .Dn * strScreenSample [ 3 ] .x ) + ( CalibrationFactor .En * strScreenSample [ 3 ] .y ) + CalibrationFactor .Fn ) / CalibrationFactor .Divider;   
 800354c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003550:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003554:	4618      	mov	r0, r3
 8003556:	f7fc ffc1 	bl	80004dc <__aeabi_i2d>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4620      	mov	r0, r4
 8003560:	4629      	mov	r1, r5
 8003562:	f7fd f825 	bl	80005b0 <__aeabi_dmul>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4690      	mov	r8, r2
 800356c:	4699      	mov	r9, r3
 800356e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003572:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003576:	4618      	mov	r0, r3
 8003578:	f7fc ffb0 	bl	80004dc <__aeabi_i2d>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4620      	mov	r0, r4
 8003582:	4629      	mov	r1, r5
 8003584:	f7fd f814 	bl	80005b0 <__aeabi_dmul>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4640      	mov	r0, r8
 800358e:	4649      	mov	r1, r9
 8003590:	f7fc fe58 	bl	8000244 <__adddf3>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035a0:	f7fc fe50 	bl	8000244 <__adddf3>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4610      	mov	r0, r2
 80035aa:	4619      	mov	r1, r3
 80035ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035b0:	f7fd f928 	bl	8000804 <__aeabi_ddiv>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7fd fad0 	bl	8000b60 <__aeabi_d2uiz>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		
		usGap_x = ( usTest_x > strCrossCoordinate [ 3 ] .x ) ? ( usTest_x - strCrossCoordinate [ 3 ] .x ) : ( strCrossCoordinate [ 3 ] .x - usTest_x );  
 80035c6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80035ca:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d906      	bls.n	80035e0 <XPT2046_Touch_Calibrate+0x2a8>
 80035d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80035d6:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	b29b      	uxth	r3, r3
 80035de:	e005      	b.n	80035ec <XPT2046_Touch_Calibrate+0x2b4>
 80035e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80035e4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		usGap_y = ( usTest_y > strCrossCoordinate [ 3 ] .y ) ? ( usTest_y - strCrossCoordinate [ 3 ] .y ) : ( strCrossCoordinate [ 3 ] .y - usTest_y );  
 80035f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035f4:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d906      	bls.n	800360a <XPT2046_Touch_Calibrate+0x2d2>
 80035fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003600:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	b29b      	uxth	r3, r3
 8003608:	e005      	b.n	8003616 <XPT2046_Touch_Calibrate+0x2de>
 800360a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800360e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	b29b      	uxth	r3, r3
 8003616:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 800361a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800361e:	2b0a      	cmp	r3, #10
 8003620:	d87c      	bhi.n	800371c <XPT2046_Touch_Calibrate+0x3e4>
 8003622:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003626:	2b0a      	cmp	r3, #10
 8003628:	d878      	bhi.n	800371c <XPT2046_Touch_Calibrate+0x3e4>
		

		strXPT2046_TouchPara .dX_X = ( CalibrationFactor .An * 1.0 ) / CalibrationFactor .Divider;
 800362a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800362e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003632:	f7fd f8e7 	bl	8000804 <__aeabi_ddiv>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4935      	ldr	r1, [pc, #212]	; (8003710 <XPT2046_Touch_Calibrate+0x3d8>)
 800363c:	e9c1 2300 	strd	r2, r3, [r1]
		strXPT2046_TouchPara .dX_Y = ( CalibrationFactor .Bn * 1.0 ) / CalibrationFactor .Divider;
 8003640:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003644:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003648:	f7fd f8dc 	bl	8000804 <__aeabi_ddiv>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	492f      	ldr	r1, [pc, #188]	; (8003710 <XPT2046_Touch_Calibrate+0x3d8>)
 8003652:	e9c1 2302 	strd	r2, r3, [r1, #8]
		strXPT2046_TouchPara .dX   = ( CalibrationFactor .Cn * 1.0 ) / CalibrationFactor .Divider;
 8003656:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800365a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800365e:	f7fd f8d1 	bl	8000804 <__aeabi_ddiv>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	492a      	ldr	r1, [pc, #168]	; (8003710 <XPT2046_Touch_Calibrate+0x3d8>)
 8003668:	e9c1 2304 	strd	r2, r3, [r1, #16]
		
		strXPT2046_TouchPara .dY_X = ( CalibrationFactor .Dn * 1.0 ) / CalibrationFactor .Divider;
 800366c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003670:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003674:	f7fd f8c6 	bl	8000804 <__aeabi_ddiv>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4924      	ldr	r1, [pc, #144]	; (8003710 <XPT2046_Touch_Calibrate+0x3d8>)
 800367e:	e9c1 2306 	strd	r2, r3, [r1, #24]
		strXPT2046_TouchPara .dY_Y = ( CalibrationFactor .En * 1.0 ) / CalibrationFactor .Divider;
 8003682:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003686:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800368a:	f7fd f8bb 	bl	8000804 <__aeabi_ddiv>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	491f      	ldr	r1, [pc, #124]	; (8003710 <XPT2046_Touch_Calibrate+0x3d8>)
 8003694:	e9c1 2308 	strd	r2, r3, [r1, #32]
		strXPT2046_TouchPara .dY   = ( CalibrationFactor .Fn * 1.0 ) / CalibrationFactor .Divider;
 8003698:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800369c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036a0:	f7fd f8b0 	bl	8000804 <__aeabi_ddiv>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4919      	ldr	r1, [pc, #100]	; (8003710 <XPT2046_Touch_Calibrate+0x3d8>)
 80036aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	

	#endif
	
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND );
 80036ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036b2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80036b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036ba:	9100      	str	r1, [sp, #0]
 80036bc:	2100      	movs	r1, #0
 80036be:	2000      	movs	r0, #0
 80036c0:	f7fe f855 	bl	800176e <LCD_Clear>
	
	pStr = "Calibrate Succed";			
 80036c4:	4b13      	ldr	r3, [pc, #76]	; (8003714 <XPT2046_Touch_Calibrate+0x3dc>)
 80036c6:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 80036c8:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 80036cc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80036ce:	f7fc fdab 	bl	8000228 <strlen>
 80036d2:	4603      	mov	r3, r0
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	1ae3      	subs	r3, r4, r3
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	b298      	uxth	r0, r3
 80036dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036e0:	085b      	lsrs	r3, r3, #1
 80036e2:	b299      	uxth	r1, r3
 80036e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036f0:	f7fe f946 	bl	8001980 <LCD_DrawString_Color>

  XPT2046_DelayUS ( 200000 );
 80036f4:	4808      	ldr	r0, [pc, #32]	; (8003718 <XPT2046_Touch_Calibrate+0x3e0>)
 80036f6:	f7ff fab3 	bl	8002c60 <XPT2046_DelayUS>

	return 1;    
 80036fa:	2301      	movs	r3, #1
 80036fc:	e050      	b.n	80037a0 <XPT2046_Touch_Calibrate+0x468>
		if ( CalibrationFactor .Divider == 0 ) goto Failure;
 80036fe:	bf00      	nop
 8003700:	e00d      	b.n	800371e <XPT2046_Touch_Calibrate+0x3e6>
 8003702:	bf00      	nop
 8003704:	08010668 	.word	0x08010668
 8003708:	08010680 	.word	0x08010680
 800370c:	000186a0 	.word	0x000186a0
 8003710:	20000008 	.word	0x20000008
 8003714:	08010684 	.word	0x08010684
 8003718:	00030d40 	.word	0x00030d40
    if ( ( usGap_x > 10 ) || ( usGap_y > 10 ) ) goto Failure;       
 800371c:	bf00      	nop
	

	Failure:
	
	LCD_Clear ( 0, 0, usScreenWidth, usScreenHeigth, BACKGROUND ); 
 800371e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003722:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003726:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800372a:	9100      	str	r1, [sp, #0]
 800372c:	2100      	movs	r1, #0
 800372e:	2000      	movs	r0, #0
 8003730:	f7fe f81d 	bl	800176e <LCD_Clear>
	
	pStr = "Calibrate fail";			
 8003734:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <XPT2046_Touch_Calibrate+0x474>)
 8003736:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED );	
 8003738:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800373c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800373e:	f7fc fd73 	bl	8000228 <strlen>
 8003742:	4603      	mov	r3, r0
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	1ae3      	subs	r3, r4, r3
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	b298      	uxth	r0, r3
 800374c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003750:	085b      	lsrs	r3, r3, #1
 8003752:	b299      	uxth	r1, r3
 8003754:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800375e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003760:	f7fe f90e 	bl	8001980 <LCD_DrawString_Color>

	pStr = "try again";			
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <XPT2046_Touch_Calibrate+0x478>)
 8003766:	66bb      	str	r3, [r7, #104]	; 0x68
	LCD_DrawString_Color ( ( usScreenWidth - strlen ( pStr ) * WIDTH_EN_CHAR ) >> 1, ( usScreenHeigth >> 1 ) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED );				
 8003768:	f8b7 4066 	ldrh.w	r4, [r7, #102]	; 0x66
 800376c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800376e:	f7fc fd5b 	bl	8000228 <strlen>
 8003772:	4603      	mov	r3, r0
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	1ae3      	subs	r3, r4, r3
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	b298      	uxth	r0, r3
 800377c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	b29b      	uxth	r3, r3
 8003784:	3310      	adds	r3, #16
 8003786:	b299      	uxth	r1, r3
 8003788:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003792:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003794:	f7fe f8f4 	bl	8001980 <LCD_DrawString_Color>

	XPT2046_DelayUS ( 1000000 );		
 8003798:	4806      	ldr	r0, [pc, #24]	; (80037b4 <XPT2046_Touch_Calibrate+0x47c>)
 800379a:	f7ff fa61 	bl	8002c60 <XPT2046_DelayUS>
	
	return 0; 
 800379e:	2300      	movs	r3, #0
		
		
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3778      	adds	r7, #120	; 0x78
 80037a4:	46bd      	mov	sp, r7
 80037a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037aa:	bf00      	nop
 80037ac:	08010698 	.word	0x08010698
 80037b0:	080106a8 	.word	0x080106a8
 80037b4:	000f4240 	.word	0x000f4240

080037b8 <XPT2046_Get_TouchedPoint>:

   

uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 80037b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 80037c8:	f107 0308 	add.w	r3, r7, #8
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fb0f 	bl	8002df0 <XPT2046_ReadAdc_Smooth_XY>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d06e      	beq.n	80038b6 <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	e9d3 4500 	ldrd	r4, r5, [r3]
 80037de:	893b      	ldrh	r3, [r7, #8]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fc fe7b 	bl	80004dc <__aeabi_i2d>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4620      	mov	r0, r4
 80037ec:	4629      	mov	r1, r5
 80037ee:	f7fc fedf 	bl	80005b0 <__aeabi_dmul>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4690      	mov	r8, r2
 80037f8:	4699      	mov	r9, r3
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003800:	897b      	ldrh	r3, [r7, #10]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fe6a 	bl	80004dc <__aeabi_i2d>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4620      	mov	r0, r4
 800380e:	4629      	mov	r1, r5
 8003810:	f7fc fece 	bl	80005b0 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4640      	mov	r0, r8
 800381a:	4649      	mov	r1, r9
 800381c:	f7fc fd12 	bl	8000244 <__adddf3>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800382e:	f7fc fd09 	bl	8000244 <__adddf3>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	f7fd f991 	bl	8000b60 <__aeabi_d2uiz>
 800383e:	4603      	mov	r3, r0
 8003840:	b29a      	uxth	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800384c:	893b      	ldrh	r3, [r7, #8]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fe44 	bl	80004dc <__aeabi_i2d>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4620      	mov	r0, r4
 800385a:	4629      	mov	r1, r5
 800385c:	f7fc fea8 	bl	80005b0 <__aeabi_dmul>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4690      	mov	r8, r2
 8003866:	4699      	mov	r9, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800386e:	897b      	ldrh	r3, [r7, #10]
 8003870:	4618      	mov	r0, r3
 8003872:	f7fc fe33 	bl	80004dc <__aeabi_i2d>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4620      	mov	r0, r4
 800387c:	4629      	mov	r1, r5
 800387e:	f7fc fe97 	bl	80005b0 <__aeabi_dmul>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4640      	mov	r0, r8
 8003888:	4649      	mov	r1, r9
 800388a:	f7fc fcdb 	bl	8000244 <__adddf3>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800389c:	f7fc fcd2 	bl	8000244 <__adddf3>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4610      	mov	r0, r2
 80038a6:	4619      	mov	r1, r3
 80038a8:	f7fd f95a 	bl	8000b60 <__aeabi_d2uiz>
 80038ac:	4603      	mov	r3, r0
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	805a      	strh	r2, [r3, #2]
 80038b4:	e001      	b.n	80038ba <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 80038b6:	2300      	movs	r3, #0
 80038b8:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080038c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038c8:	480c      	ldr	r0, [pc, #48]	; (80038fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038ca:	490d      	ldr	r1, [pc, #52]	; (8003900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038cc:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038d0:	e002      	b.n	80038d8 <LoopCopyDataInit>

080038d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038d6:	3304      	adds	r3, #4

080038d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038dc:	d3f9      	bcc.n	80038d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038e0:	4c0a      	ldr	r4, [pc, #40]	; (800390c <LoopFillZerobss+0x22>)
  movs r3, #0
 80038e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038e4:	e001      	b.n	80038ea <LoopFillZerobss>

080038e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038e8:	3204      	adds	r2, #4

080038ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038ec:	d3fb      	bcc.n	80038e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038ee:	f7ff f9b1 	bl	8002c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038f2:	f009 ff11 	bl	800d718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038f6:	f7fe f92b 	bl	8001b50 <main>
  bx lr
 80038fa:	4770      	bx	lr
  ldr r0, =_sdata
 80038fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003900:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8003904:	080110ec 	.word	0x080110ec
  ldr r2, =_sbss
 8003908:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 800390c:	20000594 	.word	0x20000594

08003910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003910:	e7fe      	b.n	8003910 <ADC1_2_IRQHandler>
	...

08003914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_Init+0x28>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a07      	ldr	r2, [pc, #28]	; (800393c <HAL_Init+0x28>)
 800391e:	f043 0310 	orr.w	r3, r3, #16
 8003922:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003924:	2003      	movs	r0, #3
 8003926:	f000 f947 	bl	8003bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800392a:	200f      	movs	r0, #15
 800392c:	f000 f808 	bl	8003940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003930:	f7fe ff0c 	bl	800274c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40022000 	.word	0x40022000

08003940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_InitTick+0x54>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b12      	ldr	r3, [pc, #72]	; (8003998 <HAL_InitTick+0x58>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	4619      	mov	r1, r3
 8003952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003956:	fbb3 f3f1 	udiv	r3, r3, r1
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f95f 	bl	8003c22 <HAL_SYSTICK_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e00e      	b.n	800398c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b0f      	cmp	r3, #15
 8003972:	d80a      	bhi.n	800398a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003974:	2200      	movs	r2, #0
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800397c:	f000 f927 	bl	8003bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003980:	4a06      	ldr	r2, [pc, #24]	; (800399c <HAL_InitTick+0x5c>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e000      	b.n	800398c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000000 	.word	0x20000000
 8003998:	2000003c 	.word	0x2000003c
 800399c:	20000038 	.word	0x20000038

080039a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_IncTick+0x1c>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_IncTick+0x20>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4413      	add	r3, r2
 80039b0:	4a03      	ldr	r2, [pc, #12]	; (80039c0 <HAL_IncTick+0x20>)
 80039b2:	6013      	str	r3, [r2, #0]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr
 80039bc:	2000003c 	.word	0x2000003c
 80039c0:	20000490 	.word	0x20000490

080039c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return uwTick;
 80039c8:	4b02      	ldr	r3, [pc, #8]	; (80039d4 <HAL_GetTick+0x10>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr
 80039d4:	20000490 	.word	0x20000490

080039d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7ff fff0 	bl	80039c4 <HAL_GetTick>
 80039e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f0:	d005      	beq.n	80039fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_Delay+0x44>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039fe:	bf00      	nop
 8003a00:	f7ff ffe0 	bl	80039c4 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d8f7      	bhi.n	8003a00 <HAL_Delay+0x28>
  {
  }
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	2000003c 	.word	0x2000003c

08003a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <__NVIC_SetPriorityGrouping+0x44>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <__NVIC_SetPriorityGrouping+0x44>)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	60d3      	str	r3, [r2, #12]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <__NVIC_GetPriorityGrouping+0x18>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	f003 0307 	and.w	r3, r3, #7
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	db0b      	blt.n	8003aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	f003 021f 	and.w	r2, r3, #31
 8003a9c:	4906      	ldr	r1, [pc, #24]	; (8003ab8 <__NVIC_EnableIRQ+0x34>)
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	e000e100 	.word	0xe000e100

08003abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	6039      	str	r1, [r7, #0]
 8003ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	db0a      	blt.n	8003ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	490c      	ldr	r1, [pc, #48]	; (8003b08 <__NVIC_SetPriority+0x4c>)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	440b      	add	r3, r1
 8003ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae4:	e00a      	b.n	8003afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	4908      	ldr	r1, [pc, #32]	; (8003b0c <__NVIC_SetPriority+0x50>)
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	3b04      	subs	r3, #4
 8003af4:	0112      	lsls	r2, r2, #4
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	440b      	add	r3, r1
 8003afa:	761a      	strb	r2, [r3, #24]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000e100 	.word	0xe000e100
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	; 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f1c3 0307 	rsb	r3, r3, #7
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	bf28      	it	cs
 8003b2e:	2304      	movcs	r3, #4
 8003b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d902      	bls.n	8003b40 <NVIC_EncodePriority+0x30>
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3b03      	subs	r3, #3
 8003b3e:	e000      	b.n	8003b42 <NVIC_EncodePriority+0x32>
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	401a      	ands	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	43d9      	mvns	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b68:	4313      	orrs	r3, r2
         );
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b84:	d301      	bcc.n	8003b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b86:	2301      	movs	r3, #1
 8003b88:	e00f      	b.n	8003baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <SysTick_Config+0x40>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b92:	210f      	movs	r1, #15
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b98:	f7ff ff90 	bl	8003abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <SysTick_Config+0x40>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ba2:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <SysTick_Config+0x40>)
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	e000e010 	.word	0xe000e010

08003bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ff2d 	bl	8003a20 <__NVIC_SetPriorityGrouping>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003be0:	f7ff ff42 	bl	8003a68 <__NVIC_GetPriorityGrouping>
 8003be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff ff90 	bl	8003b10 <NVIC_EncodePriority>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff5f 	bl	8003abc <__NVIC_SetPriority>
}
 8003bfe:	bf00      	nop
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff35 	bl	8003a84 <__NVIC_EnableIRQ>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff ffa2 	bl	8003b74 <SysTick_Config>
 8003c30:	4603      	mov	r3, r0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e059      	b.n	8003d06 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <HAL_DMA_Init+0xd4>)
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d80f      	bhi.n	8003c7e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b2b      	ldr	r3, [pc, #172]	; (8003d14 <HAL_DMA_Init+0xd8>)
 8003c66:	4413      	add	r3, r2
 8003c68:	4a2b      	ldr	r2, [pc, #172]	; (8003d18 <HAL_DMA_Init+0xdc>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	009a      	lsls	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a28      	ldr	r2, [pc, #160]	; (8003d1c <HAL_DMA_Init+0xe0>)
 8003c7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c7c:	e00e      	b.n	8003c9c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <HAL_DMA_Init+0xe4>)
 8003c86:	4413      	add	r3, r2
 8003c88:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <HAL_DMA_Init+0xdc>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	009a      	lsls	r2, r3, #2
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <HAL_DMA_Init+0xe8>)
 8003c9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003cb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003cb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	40020407 	.word	0x40020407
 8003d14:	bffdfff8 	.word	0xbffdfff8
 8003d18:	cccccccd 	.word	0xcccccccd
 8003d1c:	40020000 	.word	0x40020000
 8003d20:	bffdfbf8 	.word	0xbffdfbf8
 8003d24:	40020400 	.word	0x40020400

08003d28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	2204      	movs	r2, #4
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80f1 	beq.w	8003f34 <HAL_DMA_IRQHandler+0x20c>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80eb 	beq.w	8003f34 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d107      	bne.n	8003d7c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0204 	bic.w	r2, r2, #4
 8003d7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b5f      	ldr	r3, [pc, #380]	; (8003f00 <HAL_DMA_IRQHandler+0x1d8>)
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d958      	bls.n	8003e3a <HAL_DMA_IRQHandler+0x112>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a5d      	ldr	r2, [pc, #372]	; (8003f04 <HAL_DMA_IRQHandler+0x1dc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d04f      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x10a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5c      	ldr	r2, [pc, #368]	; (8003f08 <HAL_DMA_IRQHandler+0x1e0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d048      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x106>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a5a      	ldr	r2, [pc, #360]	; (8003f0c <HAL_DMA_IRQHandler+0x1e4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d040      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x100>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a59      	ldr	r2, [pc, #356]	; (8003f10 <HAL_DMA_IRQHandler+0x1e8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d038      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xfa>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a57      	ldr	r2, [pc, #348]	; (8003f14 <HAL_DMA_IRQHandler+0x1ec>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d030      	beq.n	8003e1c <HAL_DMA_IRQHandler+0xf4>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a56      	ldr	r2, [pc, #344]	; (8003f18 <HAL_DMA_IRQHandler+0x1f0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d028      	beq.n	8003e16 <HAL_DMA_IRQHandler+0xee>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a4d      	ldr	r2, [pc, #308]	; (8003f00 <HAL_DMA_IRQHandler+0x1d8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d020      	beq.n	8003e10 <HAL_DMA_IRQHandler+0xe8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a52      	ldr	r2, [pc, #328]	; (8003f1c <HAL_DMA_IRQHandler+0x1f4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d019      	beq.n	8003e0c <HAL_DMA_IRQHandler+0xe4>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a50      	ldr	r2, [pc, #320]	; (8003f20 <HAL_DMA_IRQHandler+0x1f8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d012      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xe0>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a4f      	ldr	r2, [pc, #316]	; (8003f24 <HAL_DMA_IRQHandler+0x1fc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00a      	beq.n	8003e02 <HAL_DMA_IRQHandler+0xda>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a4d      	ldr	r2, [pc, #308]	; (8003f28 <HAL_DMA_IRQHandler+0x200>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d102      	bne.n	8003dfc <HAL_DMA_IRQHandler+0xd4>
 8003df6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dfa:	e01b      	b.n	8003e34 <HAL_DMA_IRQHandler+0x10c>
 8003dfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e00:	e018      	b.n	8003e34 <HAL_DMA_IRQHandler+0x10c>
 8003e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e06:	e015      	b.n	8003e34 <HAL_DMA_IRQHandler+0x10c>
 8003e08:	2340      	movs	r3, #64	; 0x40
 8003e0a:	e013      	b.n	8003e34 <HAL_DMA_IRQHandler+0x10c>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	e011      	b.n	8003e34 <HAL_DMA_IRQHandler+0x10c>
 8003e10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e14:	e00e      	b.n	8003e34 <HAL_DMA_IRQHandler+0x10c>
 8003e16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e1a:	e00b      	b.n	8003e34 <HAL_DMA_IRQHandler+0x10c>
 8003e1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e20:	e008      	b.n	8003e34 <HAL_DMA_IRQHandler+0x10c>
 8003e22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e26:	e005      	b.n	8003e34 <HAL_DMA_IRQHandler+0x10c>
 8003e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e2c:	e002      	b.n	8003e34 <HAL_DMA_IRQHandler+0x10c>
 8003e2e:	2340      	movs	r3, #64	; 0x40
 8003e30:	e000      	b.n	8003e34 <HAL_DMA_IRQHandler+0x10c>
 8003e32:	2304      	movs	r3, #4
 8003e34:	4a3d      	ldr	r2, [pc, #244]	; (8003f2c <HAL_DMA_IRQHandler+0x204>)
 8003e36:	6053      	str	r3, [r2, #4]
 8003e38:	e057      	b.n	8003eea <HAL_DMA_IRQHandler+0x1c2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a31      	ldr	r2, [pc, #196]	; (8003f04 <HAL_DMA_IRQHandler+0x1dc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d04f      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x1bc>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <HAL_DMA_IRQHandler+0x1e0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d048      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x1b8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2e      	ldr	r2, [pc, #184]	; (8003f0c <HAL_DMA_IRQHandler+0x1e4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d040      	beq.n	8003eda <HAL_DMA_IRQHandler+0x1b2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2c      	ldr	r2, [pc, #176]	; (8003f10 <HAL_DMA_IRQHandler+0x1e8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d038      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x1ac>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2b      	ldr	r2, [pc, #172]	; (8003f14 <HAL_DMA_IRQHandler+0x1ec>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d030      	beq.n	8003ece <HAL_DMA_IRQHandler+0x1a6>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <HAL_DMA_IRQHandler+0x1f0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d028      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x1a0>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <HAL_DMA_IRQHandler+0x1d8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d020      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x19a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a25      	ldr	r2, [pc, #148]	; (8003f1c <HAL_DMA_IRQHandler+0x1f4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d019      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x196>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <HAL_DMA_IRQHandler+0x1f8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d012      	beq.n	8003eba <HAL_DMA_IRQHandler+0x192>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <HAL_DMA_IRQHandler+0x1fc>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x18c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a21      	ldr	r2, [pc, #132]	; (8003f28 <HAL_DMA_IRQHandler+0x200>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d102      	bne.n	8003eae <HAL_DMA_IRQHandler+0x186>
 8003ea8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003eac:	e01b      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x1be>
 8003eae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003eb2:	e018      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x1be>
 8003eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eb8:	e015      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x1be>
 8003eba:	2340      	movs	r3, #64	; 0x40
 8003ebc:	e013      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x1be>
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	e011      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x1be>
 8003ec2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ec6:	e00e      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x1be>
 8003ec8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ecc:	e00b      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x1be>
 8003ece:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ed2:	e008      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x1be>
 8003ed4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ed8:	e005      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x1be>
 8003eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ede:	e002      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x1be>
 8003ee0:	2340      	movs	r3, #64	; 0x40
 8003ee2:	e000      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x1be>
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <HAL_DMA_IRQHandler+0x208>)
 8003ee8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8136 	beq.w	8004160 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003efc:	e130      	b.n	8004160 <HAL_DMA_IRQHandler+0x438>
 8003efe:	bf00      	nop
 8003f00:	40020080 	.word	0x40020080
 8003f04:	40020008 	.word	0x40020008
 8003f08:	4002001c 	.word	0x4002001c
 8003f0c:	40020030 	.word	0x40020030
 8003f10:	40020044 	.word	0x40020044
 8003f14:	40020058 	.word	0x40020058
 8003f18:	4002006c 	.word	0x4002006c
 8003f1c:	40020408 	.word	0x40020408
 8003f20:	4002041c 	.word	0x4002041c
 8003f24:	40020430 	.word	0x40020430
 8003f28:	40020444 	.word	0x40020444
 8003f2c:	40020400 	.word	0x40020400
 8003f30:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	2202      	movs	r2, #2
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80dd 	beq.w	8004100 <HAL_DMA_IRQHandler+0x3d8>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80d7 	beq.w	8004100 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 020a 	bic.w	r2, r2, #10
 8003f6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4b7b      	ldr	r3, [pc, #492]	; (800416c <HAL_DMA_IRQHandler+0x444>)
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d958      	bls.n	8004036 <HAL_DMA_IRQHandler+0x30e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a79      	ldr	r2, [pc, #484]	; (8004170 <HAL_DMA_IRQHandler+0x448>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d04f      	beq.n	800402e <HAL_DMA_IRQHandler+0x306>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a78      	ldr	r2, [pc, #480]	; (8004174 <HAL_DMA_IRQHandler+0x44c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d048      	beq.n	800402a <HAL_DMA_IRQHandler+0x302>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a76      	ldr	r2, [pc, #472]	; (8004178 <HAL_DMA_IRQHandler+0x450>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d040      	beq.n	8004024 <HAL_DMA_IRQHandler+0x2fc>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a75      	ldr	r2, [pc, #468]	; (800417c <HAL_DMA_IRQHandler+0x454>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d038      	beq.n	800401e <HAL_DMA_IRQHandler+0x2f6>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a73      	ldr	r2, [pc, #460]	; (8004180 <HAL_DMA_IRQHandler+0x458>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d030      	beq.n	8004018 <HAL_DMA_IRQHandler+0x2f0>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a72      	ldr	r2, [pc, #456]	; (8004184 <HAL_DMA_IRQHandler+0x45c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d028      	beq.n	8004012 <HAL_DMA_IRQHandler+0x2ea>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a69      	ldr	r2, [pc, #420]	; (800416c <HAL_DMA_IRQHandler+0x444>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d020      	beq.n	800400c <HAL_DMA_IRQHandler+0x2e4>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a6e      	ldr	r2, [pc, #440]	; (8004188 <HAL_DMA_IRQHandler+0x460>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d019      	beq.n	8004008 <HAL_DMA_IRQHandler+0x2e0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a6c      	ldr	r2, [pc, #432]	; (800418c <HAL_DMA_IRQHandler+0x464>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d012      	beq.n	8004004 <HAL_DMA_IRQHandler+0x2dc>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6b      	ldr	r2, [pc, #428]	; (8004190 <HAL_DMA_IRQHandler+0x468>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00a      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x2d6>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a69      	ldr	r2, [pc, #420]	; (8004194 <HAL_DMA_IRQHandler+0x46c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d102      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0x2d0>
 8003ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ff6:	e01b      	b.n	8004030 <HAL_DMA_IRQHandler+0x308>
 8003ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ffc:	e018      	b.n	8004030 <HAL_DMA_IRQHandler+0x308>
 8003ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004002:	e015      	b.n	8004030 <HAL_DMA_IRQHandler+0x308>
 8004004:	2320      	movs	r3, #32
 8004006:	e013      	b.n	8004030 <HAL_DMA_IRQHandler+0x308>
 8004008:	2302      	movs	r3, #2
 800400a:	e011      	b.n	8004030 <HAL_DMA_IRQHandler+0x308>
 800400c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004010:	e00e      	b.n	8004030 <HAL_DMA_IRQHandler+0x308>
 8004012:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004016:	e00b      	b.n	8004030 <HAL_DMA_IRQHandler+0x308>
 8004018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800401c:	e008      	b.n	8004030 <HAL_DMA_IRQHandler+0x308>
 800401e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004022:	e005      	b.n	8004030 <HAL_DMA_IRQHandler+0x308>
 8004024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004028:	e002      	b.n	8004030 <HAL_DMA_IRQHandler+0x308>
 800402a:	2320      	movs	r3, #32
 800402c:	e000      	b.n	8004030 <HAL_DMA_IRQHandler+0x308>
 800402e:	2302      	movs	r3, #2
 8004030:	4a59      	ldr	r2, [pc, #356]	; (8004198 <HAL_DMA_IRQHandler+0x470>)
 8004032:	6053      	str	r3, [r2, #4]
 8004034:	e057      	b.n	80040e6 <HAL_DMA_IRQHandler+0x3be>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a4d      	ldr	r2, [pc, #308]	; (8004170 <HAL_DMA_IRQHandler+0x448>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d04f      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x3b8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a4b      	ldr	r2, [pc, #300]	; (8004174 <HAL_DMA_IRQHandler+0x44c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d048      	beq.n	80040dc <HAL_DMA_IRQHandler+0x3b4>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a4a      	ldr	r2, [pc, #296]	; (8004178 <HAL_DMA_IRQHandler+0x450>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d040      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x3ae>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a48      	ldr	r2, [pc, #288]	; (800417c <HAL_DMA_IRQHandler+0x454>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d038      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x3a8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a47      	ldr	r2, [pc, #284]	; (8004180 <HAL_DMA_IRQHandler+0x458>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d030      	beq.n	80040ca <HAL_DMA_IRQHandler+0x3a2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a45      	ldr	r2, [pc, #276]	; (8004184 <HAL_DMA_IRQHandler+0x45c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d028      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x39c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a3d      	ldr	r2, [pc, #244]	; (800416c <HAL_DMA_IRQHandler+0x444>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d020      	beq.n	80040be <HAL_DMA_IRQHandler+0x396>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a41      	ldr	r2, [pc, #260]	; (8004188 <HAL_DMA_IRQHandler+0x460>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d019      	beq.n	80040ba <HAL_DMA_IRQHandler+0x392>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a40      	ldr	r2, [pc, #256]	; (800418c <HAL_DMA_IRQHandler+0x464>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d012      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x38e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a3e      	ldr	r2, [pc, #248]	; (8004190 <HAL_DMA_IRQHandler+0x468>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00a      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x388>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a3d      	ldr	r2, [pc, #244]	; (8004194 <HAL_DMA_IRQHandler+0x46c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d102      	bne.n	80040aa <HAL_DMA_IRQHandler+0x382>
 80040a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040a8:	e01b      	b.n	80040e2 <HAL_DMA_IRQHandler+0x3ba>
 80040aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ae:	e018      	b.n	80040e2 <HAL_DMA_IRQHandler+0x3ba>
 80040b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040b4:	e015      	b.n	80040e2 <HAL_DMA_IRQHandler+0x3ba>
 80040b6:	2320      	movs	r3, #32
 80040b8:	e013      	b.n	80040e2 <HAL_DMA_IRQHandler+0x3ba>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e011      	b.n	80040e2 <HAL_DMA_IRQHandler+0x3ba>
 80040be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040c2:	e00e      	b.n	80040e2 <HAL_DMA_IRQHandler+0x3ba>
 80040c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040c8:	e00b      	b.n	80040e2 <HAL_DMA_IRQHandler+0x3ba>
 80040ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ce:	e008      	b.n	80040e2 <HAL_DMA_IRQHandler+0x3ba>
 80040d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040d4:	e005      	b.n	80040e2 <HAL_DMA_IRQHandler+0x3ba>
 80040d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040da:	e002      	b.n	80040e2 <HAL_DMA_IRQHandler+0x3ba>
 80040dc:	2320      	movs	r3, #32
 80040de:	e000      	b.n	80040e2 <HAL_DMA_IRQHandler+0x3ba>
 80040e0:	2302      	movs	r3, #2
 80040e2:	4a2e      	ldr	r2, [pc, #184]	; (800419c <HAL_DMA_IRQHandler+0x474>)
 80040e4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d034      	beq.n	8004160 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80040fe:	e02f      	b.n	8004160 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	2208      	movs	r2, #8
 8004106:	409a      	lsls	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d028      	beq.n	8004162 <HAL_DMA_IRQHandler+0x43a>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d023      	beq.n	8004162 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 020e 	bic.w	r2, r2, #14
 8004128:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	2101      	movs	r1, #1
 8004134:	fa01 f202 	lsl.w	r2, r1, r2
 8004138:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	4798      	blx	r3
    }
  }
  return;
 8004160:	bf00      	nop
 8004162:	bf00      	nop
}
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40020080 	.word	0x40020080
 8004170:	40020008 	.word	0x40020008
 8004174:	4002001c 	.word	0x4002001c
 8004178:	40020030 	.word	0x40020030
 800417c:	40020044 	.word	0x40020044
 8004180:	40020058 	.word	0x40020058
 8004184:	4002006c 	.word	0x4002006c
 8004188:	40020408 	.word	0x40020408
 800418c:	4002041c 	.word	0x4002041c
 8004190:	40020430 	.word	0x40020430
 8004194:	40020444 	.word	0x40020444
 8004198:	40020400 	.word	0x40020400
 800419c:	40020000 	.word	0x40020000

080041a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b08b      	sub	sp, #44	; 0x2c
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041aa:	2300      	movs	r3, #0
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80041ae:	2300      	movs	r3, #0
 80041b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041b2:	e179      	b.n	80044a8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80041b4:	2201      	movs	r2, #1
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	4013      	ands	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	f040 8168 	bne.w	80044a2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4a96      	ldr	r2, [pc, #600]	; (8004430 <HAL_GPIO_Init+0x290>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d05e      	beq.n	800429a <HAL_GPIO_Init+0xfa>
 80041dc:	4a94      	ldr	r2, [pc, #592]	; (8004430 <HAL_GPIO_Init+0x290>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d875      	bhi.n	80042ce <HAL_GPIO_Init+0x12e>
 80041e2:	4a94      	ldr	r2, [pc, #592]	; (8004434 <HAL_GPIO_Init+0x294>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d058      	beq.n	800429a <HAL_GPIO_Init+0xfa>
 80041e8:	4a92      	ldr	r2, [pc, #584]	; (8004434 <HAL_GPIO_Init+0x294>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d86f      	bhi.n	80042ce <HAL_GPIO_Init+0x12e>
 80041ee:	4a92      	ldr	r2, [pc, #584]	; (8004438 <HAL_GPIO_Init+0x298>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d052      	beq.n	800429a <HAL_GPIO_Init+0xfa>
 80041f4:	4a90      	ldr	r2, [pc, #576]	; (8004438 <HAL_GPIO_Init+0x298>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d869      	bhi.n	80042ce <HAL_GPIO_Init+0x12e>
 80041fa:	4a90      	ldr	r2, [pc, #576]	; (800443c <HAL_GPIO_Init+0x29c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d04c      	beq.n	800429a <HAL_GPIO_Init+0xfa>
 8004200:	4a8e      	ldr	r2, [pc, #568]	; (800443c <HAL_GPIO_Init+0x29c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d863      	bhi.n	80042ce <HAL_GPIO_Init+0x12e>
 8004206:	4a8e      	ldr	r2, [pc, #568]	; (8004440 <HAL_GPIO_Init+0x2a0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d046      	beq.n	800429a <HAL_GPIO_Init+0xfa>
 800420c:	4a8c      	ldr	r2, [pc, #560]	; (8004440 <HAL_GPIO_Init+0x2a0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d85d      	bhi.n	80042ce <HAL_GPIO_Init+0x12e>
 8004212:	2b12      	cmp	r3, #18
 8004214:	d82a      	bhi.n	800426c <HAL_GPIO_Init+0xcc>
 8004216:	2b12      	cmp	r3, #18
 8004218:	d859      	bhi.n	80042ce <HAL_GPIO_Init+0x12e>
 800421a:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <HAL_GPIO_Init+0x80>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	0800429b 	.word	0x0800429b
 8004224:	08004275 	.word	0x08004275
 8004228:	08004287 	.word	0x08004287
 800422c:	080042c9 	.word	0x080042c9
 8004230:	080042cf 	.word	0x080042cf
 8004234:	080042cf 	.word	0x080042cf
 8004238:	080042cf 	.word	0x080042cf
 800423c:	080042cf 	.word	0x080042cf
 8004240:	080042cf 	.word	0x080042cf
 8004244:	080042cf 	.word	0x080042cf
 8004248:	080042cf 	.word	0x080042cf
 800424c:	080042cf 	.word	0x080042cf
 8004250:	080042cf 	.word	0x080042cf
 8004254:	080042cf 	.word	0x080042cf
 8004258:	080042cf 	.word	0x080042cf
 800425c:	080042cf 	.word	0x080042cf
 8004260:	080042cf 	.word	0x080042cf
 8004264:	0800427d 	.word	0x0800427d
 8004268:	08004291 	.word	0x08004291
 800426c:	4a75      	ldr	r2, [pc, #468]	; (8004444 <HAL_GPIO_Init+0x2a4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004272:	e02c      	b.n	80042ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	623b      	str	r3, [r7, #32]
          break;
 800427a:	e029      	b.n	80042d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	3304      	adds	r3, #4
 8004282:	623b      	str	r3, [r7, #32]
          break;
 8004284:	e024      	b.n	80042d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	3308      	adds	r3, #8
 800428c:	623b      	str	r3, [r7, #32]
          break;
 800428e:	e01f      	b.n	80042d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	330c      	adds	r3, #12
 8004296:	623b      	str	r3, [r7, #32]
          break;
 8004298:	e01a      	b.n	80042d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d102      	bne.n	80042a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80042a2:	2304      	movs	r3, #4
 80042a4:	623b      	str	r3, [r7, #32]
          break;
 80042a6:	e013      	b.n	80042d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d105      	bne.n	80042bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042b0:	2308      	movs	r3, #8
 80042b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	611a      	str	r2, [r3, #16]
          break;
 80042ba:	e009      	b.n	80042d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042bc:	2308      	movs	r3, #8
 80042be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	615a      	str	r2, [r3, #20]
          break;
 80042c6:	e003      	b.n	80042d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80042c8:	2300      	movs	r3, #0
 80042ca:	623b      	str	r3, [r7, #32]
          break;
 80042cc:	e000      	b.n	80042d0 <HAL_GPIO_Init+0x130>
          break;
 80042ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2bff      	cmp	r3, #255	; 0xff
 80042d4:	d801      	bhi.n	80042da <HAL_GPIO_Init+0x13a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	e001      	b.n	80042de <HAL_GPIO_Init+0x13e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3304      	adds	r3, #4
 80042de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2bff      	cmp	r3, #255	; 0xff
 80042e4:	d802      	bhi.n	80042ec <HAL_GPIO_Init+0x14c>
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	e002      	b.n	80042f2 <HAL_GPIO_Init+0x152>
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	3b08      	subs	r3, #8
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	210f      	movs	r1, #15
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	401a      	ands	r2, r3
 8004304:	6a39      	ldr	r1, [r7, #32]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	431a      	orrs	r2, r3
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80c1 	beq.w	80044a2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004320:	4b49      	ldr	r3, [pc, #292]	; (8004448 <HAL_GPIO_Init+0x2a8>)
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	4a48      	ldr	r2, [pc, #288]	; (8004448 <HAL_GPIO_Init+0x2a8>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6193      	str	r3, [r2, #24]
 800432c:	4b46      	ldr	r3, [pc, #280]	; (8004448 <HAL_GPIO_Init+0x2a8>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004338:	4a44      	ldr	r2, [pc, #272]	; (800444c <HAL_GPIO_Init+0x2ac>)
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	089b      	lsrs	r3, r3, #2
 800433e:	3302      	adds	r3, #2
 8004340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004344:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	220f      	movs	r2, #15
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4013      	ands	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a3c      	ldr	r2, [pc, #240]	; (8004450 <HAL_GPIO_Init+0x2b0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d01f      	beq.n	80043a4 <HAL_GPIO_Init+0x204>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a3b      	ldr	r2, [pc, #236]	; (8004454 <HAL_GPIO_Init+0x2b4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d019      	beq.n	80043a0 <HAL_GPIO_Init+0x200>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a3a      	ldr	r2, [pc, #232]	; (8004458 <HAL_GPIO_Init+0x2b8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <HAL_GPIO_Init+0x1fc>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a39      	ldr	r2, [pc, #228]	; (800445c <HAL_GPIO_Init+0x2bc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00d      	beq.n	8004398 <HAL_GPIO_Init+0x1f8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a38      	ldr	r2, [pc, #224]	; (8004460 <HAL_GPIO_Init+0x2c0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d007      	beq.n	8004394 <HAL_GPIO_Init+0x1f4>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a37      	ldr	r2, [pc, #220]	; (8004464 <HAL_GPIO_Init+0x2c4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d101      	bne.n	8004390 <HAL_GPIO_Init+0x1f0>
 800438c:	2305      	movs	r3, #5
 800438e:	e00a      	b.n	80043a6 <HAL_GPIO_Init+0x206>
 8004390:	2306      	movs	r3, #6
 8004392:	e008      	b.n	80043a6 <HAL_GPIO_Init+0x206>
 8004394:	2304      	movs	r3, #4
 8004396:	e006      	b.n	80043a6 <HAL_GPIO_Init+0x206>
 8004398:	2303      	movs	r3, #3
 800439a:	e004      	b.n	80043a6 <HAL_GPIO_Init+0x206>
 800439c:	2302      	movs	r3, #2
 800439e:	e002      	b.n	80043a6 <HAL_GPIO_Init+0x206>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <HAL_GPIO_Init+0x206>
 80043a4:	2300      	movs	r3, #0
 80043a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a8:	f002 0203 	and.w	r2, r2, #3
 80043ac:	0092      	lsls	r2, r2, #2
 80043ae:	4093      	lsls	r3, r2
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80043b6:	4925      	ldr	r1, [pc, #148]	; (800444c <HAL_GPIO_Init+0x2ac>)
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	3302      	adds	r3, #2
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d006      	beq.n	80043de <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_GPIO_Init+0x2c8>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4924      	ldr	r1, [pc, #144]	; (8004468 <HAL_GPIO_Init+0x2c8>)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	600b      	str	r3, [r1, #0]
 80043dc:	e006      	b.n	80043ec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <HAL_GPIO_Init+0x2c8>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	43db      	mvns	r3, r3
 80043e6:	4920      	ldr	r1, [pc, #128]	; (8004468 <HAL_GPIO_Init+0x2c8>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d006      	beq.n	8004406 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043f8:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <HAL_GPIO_Init+0x2c8>)
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	491a      	ldr	r1, [pc, #104]	; (8004468 <HAL_GPIO_Init+0x2c8>)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]
 8004404:	e006      	b.n	8004414 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004406:	4b18      	ldr	r3, [pc, #96]	; (8004468 <HAL_GPIO_Init+0x2c8>)
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	43db      	mvns	r3, r3
 800440e:	4916      	ldr	r1, [pc, #88]	; (8004468 <HAL_GPIO_Init+0x2c8>)
 8004410:	4013      	ands	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d025      	beq.n	800446c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HAL_GPIO_Init+0x2c8>)
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	4910      	ldr	r1, [pc, #64]	; (8004468 <HAL_GPIO_Init+0x2c8>)
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	4313      	orrs	r3, r2
 800442a:	608b      	str	r3, [r1, #8]
 800442c:	e025      	b.n	800447a <HAL_GPIO_Init+0x2da>
 800442e:	bf00      	nop
 8004430:	10320000 	.word	0x10320000
 8004434:	10310000 	.word	0x10310000
 8004438:	10220000 	.word	0x10220000
 800443c:	10210000 	.word	0x10210000
 8004440:	10120000 	.word	0x10120000
 8004444:	10110000 	.word	0x10110000
 8004448:	40021000 	.word	0x40021000
 800444c:	40010000 	.word	0x40010000
 8004450:	40010800 	.word	0x40010800
 8004454:	40010c00 	.word	0x40010c00
 8004458:	40011000 	.word	0x40011000
 800445c:	40011400 	.word	0x40011400
 8004460:	40011800 	.word	0x40011800
 8004464:	40011c00 	.word	0x40011c00
 8004468:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800446c:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <HAL_GPIO_Init+0x324>)
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	43db      	mvns	r3, r3
 8004474:	4913      	ldr	r1, [pc, #76]	; (80044c4 <HAL_GPIO_Init+0x324>)
 8004476:	4013      	ands	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d006      	beq.n	8004494 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <HAL_GPIO_Init+0x324>)
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	490e      	ldr	r1, [pc, #56]	; (80044c4 <HAL_GPIO_Init+0x324>)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	60cb      	str	r3, [r1, #12]
 8004492:	e006      	b.n	80044a2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_GPIO_Init+0x324>)
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	43db      	mvns	r3, r3
 800449c:	4909      	ldr	r1, [pc, #36]	; (80044c4 <HAL_GPIO_Init+0x324>)
 800449e:	4013      	ands	r3, r2
 80044a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	3301      	adds	r3, #1
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	fa22 f303 	lsr.w	r3, r2, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f47f ae7e 	bne.w	80041b4 <HAL_GPIO_Init+0x14>
  }
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	372c      	adds	r7, #44	; 0x2c
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	40010400 	.word	0x40010400

080044c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	887b      	ldrh	r3, [r7, #2]
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
 80044e4:	e001      	b.n	80044ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr

080044f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	807b      	strh	r3, [r7, #2]
 8004502:	4613      	mov	r3, r2
 8004504:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004506:	787b      	ldrb	r3, [r7, #1]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800450c:	887a      	ldrh	r2, [r7, #2]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004512:	e003      	b.n	800451c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004514:	887b      	ldrh	r3, [r7, #2]
 8004516:	041a      	lsls	r2, r3, #16
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	611a      	str	r2, [r3, #16]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
	...

08004528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e12b      	b.n	8004792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fe f92e 	bl	80027b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	; 0x24
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800458a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800458c:	f002 f97c 	bl	8006888 <HAL_RCC_GetPCLK1Freq>
 8004590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4a81      	ldr	r2, [pc, #516]	; (800479c <HAL_I2C_Init+0x274>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d807      	bhi.n	80045ac <HAL_I2C_Init+0x84>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a80      	ldr	r2, [pc, #512]	; (80047a0 <HAL_I2C_Init+0x278>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bf94      	ite	ls
 80045a4:	2301      	movls	r3, #1
 80045a6:	2300      	movhi	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e006      	b.n	80045ba <HAL_I2C_Init+0x92>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a7d      	ldr	r2, [pc, #500]	; (80047a4 <HAL_I2C_Init+0x27c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	bf94      	ite	ls
 80045b4:	2301      	movls	r3, #1
 80045b6:	2300      	movhi	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0e7      	b.n	8004792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a78      	ldr	r2, [pc, #480]	; (80047a8 <HAL_I2C_Init+0x280>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	0c9b      	lsrs	r3, r3, #18
 80045cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	4a6a      	ldr	r2, [pc, #424]	; (800479c <HAL_I2C_Init+0x274>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d802      	bhi.n	80045fc <HAL_I2C_Init+0xd4>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	3301      	adds	r3, #1
 80045fa:	e009      	b.n	8004610 <HAL_I2C_Init+0xe8>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	4a69      	ldr	r2, [pc, #420]	; (80047ac <HAL_I2C_Init+0x284>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	099b      	lsrs	r3, r3, #6
 800460e:	3301      	adds	r3, #1
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	430b      	orrs	r3, r1
 8004616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	495c      	ldr	r1, [pc, #368]	; (800479c <HAL_I2C_Init+0x274>)
 800462c:	428b      	cmp	r3, r1
 800462e:	d819      	bhi.n	8004664 <HAL_I2C_Init+0x13c>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1e59      	subs	r1, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	fbb1 f3f3 	udiv	r3, r1, r3
 800463e:	1c59      	adds	r1, r3, #1
 8004640:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004644:	400b      	ands	r3, r1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_I2C_Init+0x138>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1e59      	subs	r1, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	fbb1 f3f3 	udiv	r3, r1, r3
 8004658:	3301      	adds	r3, #1
 800465a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465e:	e051      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 8004660:	2304      	movs	r3, #4
 8004662:	e04f      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d111      	bne.n	8004690 <HAL_I2C_Init+0x168>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1e58      	subs	r0, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	440b      	add	r3, r1
 800467a:	fbb0 f3f3 	udiv	r3, r0, r3
 800467e:	3301      	adds	r3, #1
 8004680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	e012      	b.n	80046b6 <HAL_I2C_Init+0x18e>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1e58      	subs	r0, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	0099      	lsls	r1, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a6:	3301      	adds	r3, #1
 80046a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf0c      	ite	eq
 80046b0:	2301      	moveq	r3, #1
 80046b2:	2300      	movne	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Init+0x196>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e022      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10e      	bne.n	80046e4 <HAL_I2C_Init+0x1bc>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1e58      	subs	r0, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6859      	ldr	r1, [r3, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	440b      	add	r3, r1
 80046d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e2:	e00f      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1e58      	subs	r0, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	0099      	lsls	r1, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046fa:	3301      	adds	r3, #1
 80046fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	6809      	ldr	r1, [r1, #0]
 8004708:	4313      	orrs	r3, r2
 800470a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6911      	ldr	r1, [r2, #16]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68d2      	ldr	r2, [r2, #12]
 800473e:	4311      	orrs	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	430b      	orrs	r3, r1
 8004746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	000186a0 	.word	0x000186a0
 80047a0:	001e847f 	.word	0x001e847f
 80047a4:	003d08ff 	.word	0x003d08ff
 80047a8:	431bde83 	.word	0x431bde83
 80047ac:	10624dd3 	.word	0x10624dd3

080047b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	461a      	mov	r2, r3
 80047bc:	460b      	mov	r3, r1
 80047be:	817b      	strh	r3, [r7, #10]
 80047c0:	4613      	mov	r3, r2
 80047c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047c4:	f7ff f8fe 	bl	80039c4 <HAL_GetTick>
 80047c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	f040 80e0 	bne.w	8004998 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	2319      	movs	r3, #25
 80047de:	2201      	movs	r2, #1
 80047e0:	4970      	ldr	r1, [pc, #448]	; (80049a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f001 faa0 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047ee:	2302      	movs	r3, #2
 80047f0:	e0d3      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_I2C_Master_Transmit+0x50>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e0cc      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ea>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b01      	cmp	r3, #1
 8004814:	d007      	beq.n	8004826 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0201 	orr.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004834:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2221      	movs	r2, #33	; 0x21
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2210      	movs	r2, #16
 8004842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	893a      	ldrh	r2, [r7, #8]
 8004856:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4a50      	ldr	r2, [pc, #320]	; (80049a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004866:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004868:	8979      	ldrh	r1, [r7, #10]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	6a3a      	ldr	r2, [r7, #32]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 ff8c 	bl	800578c <I2C_MasterRequestWrite>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e08d      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004894:	e066      	b.n	8004964 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	6a39      	ldr	r1, [r7, #32]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f001 fb1a 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d107      	bne.n	80048be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e06b      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	781a      	ldrb	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d11b      	bne.n	8004938 <HAL_I2C_Master_Transmit+0x188>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	d017      	beq.n	8004938 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	6a39      	ldr	r1, [r7, #32]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f001 fb0a 	bl	8005f56 <I2C_WaitOnBTFFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00d      	beq.n	8004964 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	2b04      	cmp	r3, #4
 800494e:	d107      	bne.n	8004960 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e01a      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	2b00      	cmp	r3, #0
 800496a:	d194      	bne.n	8004896 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	e000      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004998:	2302      	movs	r3, #2
  }
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	00100002 	.word	0x00100002
 80049a8:	ffff0000 	.word	0xffff0000

080049ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08c      	sub	sp, #48	; 0x30
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	461a      	mov	r2, r3
 80049b8:	460b      	mov	r3, r1
 80049ba:	817b      	strh	r3, [r7, #10]
 80049bc:	4613      	mov	r3, r2
 80049be:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049c4:	f7fe fffe 	bl	80039c4 <HAL_GetTick>
 80049c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	f040 823f 	bne.w	8004e56 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	2319      	movs	r3, #25
 80049de:	2201      	movs	r2, #1
 80049e0:	497f      	ldr	r1, [pc, #508]	; (8004be0 <HAL_I2C_Master_Receive+0x234>)
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f001 f9a0 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
 80049f0:	e232      	b.n	8004e58 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_I2C_Master_Receive+0x54>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e22b      	b.n	8004e58 <HAL_I2C_Master_Receive+0x4ac>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d007      	beq.n	8004a26 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2222      	movs	r2, #34	; 0x22
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2210      	movs	r2, #16
 8004a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	893a      	ldrh	r2, [r7, #8]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4a5f      	ldr	r2, [pc, #380]	; (8004be4 <HAL_I2C_Master_Receive+0x238>)
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a68:	8979      	ldrh	r1, [r7, #10]
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 ff0e 	bl	8005890 <I2C_MasterRequestRead>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e1ec      	b.n	8004e58 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d113      	bne.n	8004aae <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e1c0      	b.n	8004e30 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d11e      	bne.n	8004af4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ac6:	b672      	cpsid	i
}
 8004ac8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004af0:	b662      	cpsie	i
}
 8004af2:	e035      	b.n	8004b60 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d11e      	bne.n	8004b3a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b0c:	b672      	cpsid	i
}
 8004b0e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b36:	b662      	cpsie	i
}
 8004b38:	e012      	b.n	8004b60 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004b60:	e166      	b.n	8004e30 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	f200 811f 	bhi.w	8004daa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d123      	bne.n	8004bbc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f001 fa2d 	bl	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e167      	b.n	8004e58 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bba:	e139      	b.n	8004e30 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d152      	bne.n	8004c6a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	2200      	movs	r2, #0
 8004bcc:	4906      	ldr	r1, [pc, #24]	; (8004be8 <HAL_I2C_Master_Receive+0x23c>)
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f001 f8aa 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e13c      	b.n	8004e58 <HAL_I2C_Master_Receive+0x4ac>
 8004bde:	bf00      	nop
 8004be0:	00100002 	.word	0x00100002
 8004be4:	ffff0000 	.word	0xffff0000
 8004be8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004bec:	b672      	cpsid	i
}
 8004bee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c32:	b662      	cpsie	i
}
 8004c34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c68:	e0e2      	b.n	8004e30 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	2200      	movs	r2, #0
 8004c72:	497b      	ldr	r1, [pc, #492]	; (8004e60 <HAL_I2C_Master_Receive+0x4b4>)
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f001 f857 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0e9      	b.n	8004e58 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c94:	b672      	cpsid	i
}
 8004c96:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cca:	4b66      	ldr	r3, [pc, #408]	; (8004e64 <HAL_I2C_Master_Receive+0x4b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	08db      	lsrs	r3, r3, #3
 8004cd0:	4a65      	ldr	r2, [pc, #404]	; (8004e68 <HAL_I2C_Master_Receive+0x4bc>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	0a1a      	lsrs	r2, r3, #8
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	00da      	lsls	r2, r3, #3
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d118      	bne.n	8004d22 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f043 0220 	orr.w	r2, r3, #32
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004d12:	b662      	cpsie	i
}
 8004d14:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e09a      	b.n	8004e58 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d1d9      	bne.n	8004ce4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d72:	b662      	cpsie	i
}
 8004d74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004da8:	e042      	b.n	8004e30 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f001 f912 	bl	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e04c      	b.n	8004e58 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d118      	bne.n	8004e30 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f47f ae94 	bne.w	8004b62 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e000      	b.n	8004e58 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
  }
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3728      	adds	r7, #40	; 0x28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	00010004 	.word	0x00010004
 8004e64:	20000000 	.word	0x20000000
 8004e68:	14f8b589 	.word	0x14f8b589

08004e6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	4608      	mov	r0, r1
 8004e76:	4611      	mov	r1, r2
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	817b      	strh	r3, [r7, #10]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	813b      	strh	r3, [r7, #8]
 8004e82:	4613      	mov	r3, r2
 8004e84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e86:	f7fe fd9d 	bl	80039c4 <HAL_GetTick>
 8004e8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	f040 80d9 	bne.w	800504c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2319      	movs	r3, #25
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	496d      	ldr	r1, [pc, #436]	; (8005058 <HAL_I2C_Mem_Write+0x1ec>)
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 ff3f 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e0cc      	b.n	800504e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_I2C_Mem_Write+0x56>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e0c5      	b.n	800504e <HAL_I2C_Mem_Write+0x1e2>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d007      	beq.n	8004ee8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2221      	movs	r2, #33	; 0x21
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2240      	movs	r2, #64	; 0x40
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a3a      	ldr	r2, [r7, #32]
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a4d      	ldr	r2, [pc, #308]	; (800505c <HAL_I2C_Mem_Write+0x1f0>)
 8004f28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f2a:	88f8      	ldrh	r0, [r7, #6]
 8004f2c:	893a      	ldrh	r2, [r7, #8]
 8004f2e:	8979      	ldrh	r1, [r7, #10]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	4603      	mov	r3, r0
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fd76 	bl	8005a2c <I2C_RequestMemoryWrite>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d052      	beq.n	8004fec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e081      	b.n	800504e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 ffc0 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00d      	beq.n	8004f76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d107      	bne.n	8004f72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e06b      	b.n	800504e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	781a      	ldrb	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d11b      	bne.n	8004fec <HAL_I2C_Mem_Write+0x180>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d017      	beq.n	8004fec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	781a      	ldrb	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1aa      	bne.n	8004f4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 ffac 	bl	8005f56 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00d      	beq.n	8005020 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	2b04      	cmp	r3, #4
 800500a:	d107      	bne.n	800501c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e016      	b.n	800504e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	00100002 	.word	0x00100002
 800505c:	ffff0000 	.word	0xffff0000

08005060 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08c      	sub	sp, #48	; 0x30
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	4608      	mov	r0, r1
 800506a:	4611      	mov	r1, r2
 800506c:	461a      	mov	r2, r3
 800506e:	4603      	mov	r3, r0
 8005070:	817b      	strh	r3, [r7, #10]
 8005072:	460b      	mov	r3, r1
 8005074:	813b      	strh	r3, [r7, #8]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800507e:	f7fe fca1 	bl	80039c4 <HAL_GetTick>
 8005082:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b20      	cmp	r3, #32
 800508e:	f040 8244 	bne.w	800551a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	2319      	movs	r3, #25
 8005098:	2201      	movs	r2, #1
 800509a:	4982      	ldr	r1, [pc, #520]	; (80052a4 <HAL_I2C_Mem_Read+0x244>)
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fe43 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80050a8:	2302      	movs	r3, #2
 80050aa:	e237      	b.n	800551c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_I2C_Mem_Read+0x5a>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e230      	b.n	800551c <HAL_I2C_Mem_Read+0x4bc>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d007      	beq.n	80050e0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2222      	movs	r2, #34	; 0x22
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2240      	movs	r2, #64	; 0x40
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4a62      	ldr	r2, [pc, #392]	; (80052a8 <HAL_I2C_Mem_Read+0x248>)
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005122:	88f8      	ldrh	r0, [r7, #6]
 8005124:	893a      	ldrh	r2, [r7, #8]
 8005126:	8979      	ldrh	r1, [r7, #10]
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	4603      	mov	r3, r0
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 fd10 	bl	8005b58 <I2C_RequestMemoryRead>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e1ec      	b.n	800551c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005146:	2b00      	cmp	r3, #0
 8005148:	d113      	bne.n	8005172 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e1c0      	b.n	80054f4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005176:	2b01      	cmp	r3, #1
 8005178:	d11e      	bne.n	80051b8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005188:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800518a:	b672      	cpsid	i
}
 800518c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80051b4:	b662      	cpsie	i
}
 80051b6:	e035      	b.n	8005224 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d11e      	bne.n	80051fe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051d0:	b672      	cpsid	i
}
 80051d2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80051fa:	b662      	cpsie	i
}
 80051fc:	e012      	b.n	8005224 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800520c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005224:	e166      	b.n	80054f4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522a:	2b03      	cmp	r3, #3
 800522c:	f200 811f 	bhi.w	800546e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005234:	2b01      	cmp	r3, #1
 8005236:	d123      	bne.n	8005280 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fecb 	bl	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e167      	b.n	800551c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800527e:	e139      	b.n	80054f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005284:	2b02      	cmp	r3, #2
 8005286:	d152      	bne.n	800532e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	2200      	movs	r2, #0
 8005290:	4906      	ldr	r1, [pc, #24]	; (80052ac <HAL_I2C_Mem_Read+0x24c>)
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 fd48 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d008      	beq.n	80052b0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e13c      	b.n	800551c <HAL_I2C_Mem_Read+0x4bc>
 80052a2:	bf00      	nop
 80052a4:	00100002 	.word	0x00100002
 80052a8:	ffff0000 	.word	0xffff0000
 80052ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80052b0:	b672      	cpsid	i
}
 80052b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80052f6:	b662      	cpsie	i
}
 80052f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800532c:	e0e2      	b.n	80054f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005334:	2200      	movs	r2, #0
 8005336:	497b      	ldr	r1, [pc, #492]	; (8005524 <HAL_I2C_Mem_Read+0x4c4>)
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 fcf5 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0e9      	b.n	800551c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005356:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005358:	b672      	cpsid	i
}
 800535a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800538e:	4b66      	ldr	r3, [pc, #408]	; (8005528 <HAL_I2C_Mem_Read+0x4c8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	08db      	lsrs	r3, r3, #3
 8005394:	4a65      	ldr	r2, [pc, #404]	; (800552c <HAL_I2C_Mem_Read+0x4cc>)
 8005396:	fba2 2303 	umull	r2, r3, r2, r3
 800539a:	0a1a      	lsrs	r2, r3, #8
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	00da      	lsls	r2, r3, #3
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d118      	bne.n	80053e6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f043 0220 	orr.w	r2, r3, #32
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80053d6:	b662      	cpsie	i
}
 80053d8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e09a      	b.n	800551c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d1d9      	bne.n	80053a8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005436:	b662      	cpsie	i
}
 8005438:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800546c:	e042      	b.n	80054f4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005470:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fdb0 	bl	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e04c      	b.n	800551c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d118      	bne.n	80054f4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f47f ae94 	bne.w	8005226 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	e000      	b.n	800551c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800551a:	2302      	movs	r3, #2
  }
}
 800551c:	4618      	mov	r0, r3
 800551e:	3728      	adds	r7, #40	; 0x28
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	00010004 	.word	0x00010004
 8005528:	20000000 	.word	0x20000000
 800552c:	14f8b589 	.word	0x14f8b589

08005530 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08a      	sub	sp, #40	; 0x28
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	460b      	mov	r3, r1
 800553e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005540:	f7fe fa40 	bl	80039c4 <HAL_GetTick>
 8005544:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005546:	2301      	movs	r3, #1
 8005548:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b20      	cmp	r3, #32
 8005554:	f040 8111 	bne.w	800577a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	2319      	movs	r3, #25
 800555e:	2201      	movs	r2, #1
 8005560:	4988      	ldr	r1, [pc, #544]	; (8005784 <HAL_I2C_IsDeviceReady+0x254>)
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 fbe0 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800556e:	2302      	movs	r3, #2
 8005570:	e104      	b.n	800577c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_I2C_IsDeviceReady+0x50>
 800557c:	2302      	movs	r3, #2
 800557e:	e0fd      	b.n	800577c <HAL_I2C_IsDeviceReady+0x24c>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b01      	cmp	r3, #1
 8005594:	d007      	beq.n	80055a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0201 	orr.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2224      	movs	r2, #36	; 0x24
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a70      	ldr	r2, [pc, #448]	; (8005788 <HAL_I2C_IsDeviceReady+0x258>)
 80055c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fb9e 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00d      	beq.n	800560e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005600:	d103      	bne.n	800560a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005608:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e0b6      	b.n	800577c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800560e:	897b      	ldrh	r3, [r7, #10]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800561c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800561e:	f7fe f9d1 	bl	80039c4 <HAL_GetTick>
 8005622:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	bf0c      	ite	eq
 8005632:	2301      	moveq	r3, #1
 8005634:	2300      	movne	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005648:	bf0c      	ite	eq
 800564a:	2301      	moveq	r3, #1
 800564c:	2300      	movne	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005652:	e025      	b.n	80056a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005654:	f7fe f9b6 	bl	80039c4 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d302      	bcc.n	800566a <HAL_I2C_IsDeviceReady+0x13a>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d103      	bne.n	8005672 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	22a0      	movs	r2, #160	; 0xa0
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b02      	cmp	r3, #2
 800567e:	bf0c      	ite	eq
 8005680:	2301      	moveq	r3, #1
 8005682:	2300      	movne	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2ba0      	cmp	r3, #160	; 0xa0
 80056aa:	d005      	beq.n	80056b8 <HAL_I2C_IsDeviceReady+0x188>
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d102      	bne.n	80056b8 <HAL_I2C_IsDeviceReady+0x188>
 80056b2:	7dbb      	ldrb	r3, [r7, #22]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0cd      	beq.n	8005654 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d129      	bne.n	8005722 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056de:	2300      	movs	r3, #0
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	2319      	movs	r3, #25
 80056fa:	2201      	movs	r2, #1
 80056fc:	4921      	ldr	r1, [pc, #132]	; (8005784 <HAL_I2C_IsDeviceReady+0x254>)
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 fb12 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e036      	b.n	800577c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	e02c      	b.n	800577c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005730:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800573a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	2319      	movs	r3, #25
 8005742:	2201      	movs	r2, #1
 8005744:	490f      	ldr	r1, [pc, #60]	; (8005784 <HAL_I2C_IsDeviceReady+0x254>)
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 faee 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e012      	b.n	800577c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	3301      	adds	r3, #1
 800575a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	429a      	cmp	r2, r3
 8005762:	f4ff af32 	bcc.w	80055ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800577a:	2302      	movs	r3, #2
  }
}
 800577c:	4618      	mov	r0, r3
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	00100002 	.word	0x00100002
 8005788:	ffff0000 	.word	0xffff0000

0800578c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	607a      	str	r2, [r7, #4]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	460b      	mov	r3, r1
 800579a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d006      	beq.n	80057b6 <I2C_MasterRequestWrite+0x2a>
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d003      	beq.n	80057b6 <I2C_MasterRequestWrite+0x2a>
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057b4:	d108      	bne.n	80057c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	e00b      	b.n	80057e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	2b12      	cmp	r3, #18
 80057ce:	d107      	bne.n	80057e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fa9b 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00d      	beq.n	8005814 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005806:	d103      	bne.n	8005810 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e035      	b.n	8005880 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800581c:	d108      	bne.n	8005830 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800581e:	897b      	ldrh	r3, [r7, #10]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800582c:	611a      	str	r2, [r3, #16]
 800582e:	e01b      	b.n	8005868 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005830:	897b      	ldrh	r3, [r7, #10]
 8005832:	11db      	asrs	r3, r3, #7
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f003 0306 	and.w	r3, r3, #6
 800583a:	b2db      	uxtb	r3, r3
 800583c:	f063 030f 	orn	r3, r3, #15
 8005840:	b2da      	uxtb	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	490e      	ldr	r1, [pc, #56]	; (8005888 <I2C_MasterRequestWrite+0xfc>)
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 fac1 	bl	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e010      	b.n	8005880 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800585e:	897b      	ldrh	r3, [r7, #10]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	4907      	ldr	r1, [pc, #28]	; (800588c <I2C_MasterRequestWrite+0x100>)
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 fab1 	bl	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	00010008 	.word	0x00010008
 800588c:	00010002 	.word	0x00010002

08005890 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	460b      	mov	r3, r1
 800589e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d006      	beq.n	80058ca <I2C_MasterRequestRead+0x3a>
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d003      	beq.n	80058ca <I2C_MasterRequestRead+0x3a>
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058c8:	d108      	bne.n	80058dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e00b      	b.n	80058f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	2b11      	cmp	r3, #17
 80058e2:	d107      	bne.n	80058f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 fa11 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00d      	beq.n	8005928 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800591a:	d103      	bne.n	8005924 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005922:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e079      	b.n	8005a1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005930:	d108      	bne.n	8005944 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005932:	897b      	ldrh	r3, [r7, #10]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	b2da      	uxtb	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	611a      	str	r2, [r3, #16]
 8005942:	e05f      	b.n	8005a04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005944:	897b      	ldrh	r3, [r7, #10]
 8005946:	11db      	asrs	r3, r3, #7
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f003 0306 	and.w	r3, r3, #6
 800594e:	b2db      	uxtb	r3, r3
 8005950:	f063 030f 	orn	r3, r3, #15
 8005954:	b2da      	uxtb	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4930      	ldr	r1, [pc, #192]	; (8005a24 <I2C_MasterRequestRead+0x194>)
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fa37 	bl	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e054      	b.n	8005a1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005972:	897b      	ldrh	r3, [r7, #10]
 8005974:	b2da      	uxtb	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4929      	ldr	r1, [pc, #164]	; (8005a28 <I2C_MasterRequestRead+0x198>)
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fa27 	bl	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e044      	b.n	8005a1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f9af 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00d      	beq.n	80059ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059de:	d103      	bne.n	80059e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e017      	b.n	8005a1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80059ec:	897b      	ldrh	r3, [r7, #10]
 80059ee:	11db      	asrs	r3, r3, #7
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f003 0306 	and.w	r3, r3, #6
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f063 030e 	orn	r3, r3, #14
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4907      	ldr	r1, [pc, #28]	; (8005a28 <I2C_MasterRequestRead+0x198>)
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f9e3 	bl	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	00010008 	.word	0x00010008
 8005a28:	00010002 	.word	0x00010002

08005a2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	817b      	strh	r3, [r7, #10]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	813b      	strh	r3, [r7, #8]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f960 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00d      	beq.n	8005a8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7c:	d103      	bne.n	8005a86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e05f      	b.n	8005b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a8a:	897b      	ldrh	r3, [r7, #10]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	6a3a      	ldr	r2, [r7, #32]
 8005a9e:	492d      	ldr	r1, [pc, #180]	; (8005b54 <I2C_RequestMemoryWrite+0x128>)
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f998 	bl	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e04c      	b.n	8005b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac8:	6a39      	ldr	r1, [r7, #32]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fa02 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00d      	beq.n	8005af2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d107      	bne.n	8005aee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e02b      	b.n	8005b4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005af2:	88fb      	ldrh	r3, [r7, #6]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d105      	bne.n	8005b04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005af8:	893b      	ldrh	r3, [r7, #8]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	611a      	str	r2, [r3, #16]
 8005b02:	e021      	b.n	8005b48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b04:	893b      	ldrh	r3, [r7, #8]
 8005b06:	0a1b      	lsrs	r3, r3, #8
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b14:	6a39      	ldr	r1, [r7, #32]
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f9dc 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00d      	beq.n	8005b3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d107      	bne.n	8005b3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e005      	b.n	8005b4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3e:	893b      	ldrh	r3, [r7, #8]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	00010002 	.word	0x00010002

08005b58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	4608      	mov	r0, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	461a      	mov	r2, r3
 8005b66:	4603      	mov	r3, r0
 8005b68:	817b      	strh	r3, [r7, #10]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	813b      	strh	r3, [r7, #8]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 f8c2 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00d      	beq.n	8005bc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb8:	d103      	bne.n	8005bc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e0aa      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bc6:	897b      	ldrh	r3, [r7, #10]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	6a3a      	ldr	r2, [r7, #32]
 8005bda:	4952      	ldr	r1, [pc, #328]	; (8005d24 <I2C_RequestMemoryRead+0x1cc>)
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f8fa 	bl	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e097      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c04:	6a39      	ldr	r1, [r7, #32]
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 f964 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00d      	beq.n	8005c2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d107      	bne.n	8005c2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e076      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d105      	bne.n	8005c40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c34:	893b      	ldrh	r3, [r7, #8]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	611a      	str	r2, [r3, #16]
 8005c3e:	e021      	b.n	8005c84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c40:	893b      	ldrh	r3, [r7, #8]
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c50:	6a39      	ldr	r1, [r7, #32]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f93e 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00d      	beq.n	8005c7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d107      	bne.n	8005c76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e050      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c7a:	893b      	ldrh	r3, [r7, #8]
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c86:	6a39      	ldr	r1, [r7, #32]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f923 	bl	8005ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00d      	beq.n	8005cb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d107      	bne.n	8005cac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005caa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e035      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f82b 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00d      	beq.n	8005cf4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce6:	d103      	bne.n	8005cf0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e013      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cf4:	897b      	ldrh	r3, [r7, #10]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	f043 0301 	orr.w	r3, r3, #1
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	6a3a      	ldr	r2, [r7, #32]
 8005d08:	4906      	ldr	r1, [pc, #24]	; (8005d24 <I2C_RequestMemoryRead+0x1cc>)
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f863 	bl	8005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	00010002 	.word	0x00010002

08005d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	4613      	mov	r3, r2
 8005d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d38:	e025      	b.n	8005d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d40:	d021      	beq.n	8005d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d42:	f7fd fe3f 	bl	80039c4 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d302      	bcc.n	8005d58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d116      	bne.n	8005d86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	f043 0220 	orr.w	r2, r3, #32
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e023      	b.n	8005dce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	0c1b      	lsrs	r3, r3, #16
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d10d      	bne.n	8005dac <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	43da      	mvns	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bf0c      	ite	eq
 8005da2:	2301      	moveq	r3, #1
 8005da4:	2300      	movne	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	e00c      	b.n	8005dc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	43da      	mvns	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4013      	ands	r3, r2
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bf0c      	ite	eq
 8005dbe:	2301      	moveq	r3, #1
 8005dc0:	2300      	movne	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d0b6      	beq.n	8005d3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
 8005de2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005de4:	e051      	b.n	8005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df4:	d123      	bne.n	8005e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f043 0204 	orr.w	r2, r3, #4
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e046      	b.n	8005ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e44:	d021      	beq.n	8005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e46:	f7fd fdbd 	bl	80039c4 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d116      	bne.n	8005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	f043 0220 	orr.w	r2, r3, #32
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e020      	b.n	8005ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	0c1b      	lsrs	r3, r3, #16
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d10c      	bne.n	8005eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	43da      	mvns	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bf14      	ite	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	2300      	moveq	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	e00b      	b.n	8005ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	43da      	mvns	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf14      	ite	ne
 8005ec0:	2301      	movne	r3, #1
 8005ec2:	2300      	moveq	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d18d      	bne.n	8005de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ee0:	e02d      	b.n	8005f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f8ce 	bl	8006084 <I2C_IsAcknowledgeFailed>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e02d      	b.n	8005f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ef8:	d021      	beq.n	8005f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efa:	f7fd fd63 	bl	80039c4 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d302      	bcc.n	8005f10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d116      	bne.n	8005f3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f043 0220 	orr.w	r2, r3, #32
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e007      	b.n	8005f4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f48:	2b80      	cmp	r3, #128	; 0x80
 8005f4a:	d1ca      	bne.n	8005ee2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f62:	e02d      	b.n	8005fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f88d 	bl	8006084 <I2C_IsAcknowledgeFailed>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e02d      	b.n	8005fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f7a:	d021      	beq.n	8005fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7c:	f7fd fd22 	bl	80039c4 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d116      	bne.n	8005fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	f043 0220 	orr.w	r2, r3, #32
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e007      	b.n	8005fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d1ca      	bne.n	8005f64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fe4:	e042      	b.n	800606c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d119      	bne.n	8006028 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0210 	mvn.w	r2, #16
 8005ffc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e029      	b.n	800607c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006028:	f7fd fccc 	bl	80039c4 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d302      	bcc.n	800603e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d116      	bne.n	800606c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	f043 0220 	orr.w	r2, r3, #32
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e007      	b.n	800607c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d1b5      	bne.n	8005fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800609a:	d11b      	bne.n	80060d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	f043 0204 	orr.w	r2, r3, #4
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	bc80      	pop	{r7}
 80060de:	4770      	bx	lr

080060e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e272      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 8087 	beq.w	800620e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006100:	4b92      	ldr	r3, [pc, #584]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f003 030c 	and.w	r3, r3, #12
 8006108:	2b04      	cmp	r3, #4
 800610a:	d00c      	beq.n	8006126 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800610c:	4b8f      	ldr	r3, [pc, #572]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f003 030c 	and.w	r3, r3, #12
 8006114:	2b08      	cmp	r3, #8
 8006116:	d112      	bne.n	800613e <HAL_RCC_OscConfig+0x5e>
 8006118:	4b8c      	ldr	r3, [pc, #560]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006124:	d10b      	bne.n	800613e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006126:	4b89      	ldr	r3, [pc, #548]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d06c      	beq.n	800620c <HAL_RCC_OscConfig+0x12c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d168      	bne.n	800620c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e24c      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006146:	d106      	bne.n	8006156 <HAL_RCC_OscConfig+0x76>
 8006148:	4b80      	ldr	r3, [pc, #512]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a7f      	ldr	r2, [pc, #508]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 800614e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	e02e      	b.n	80061b4 <HAL_RCC_OscConfig+0xd4>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10c      	bne.n	8006178 <HAL_RCC_OscConfig+0x98>
 800615e:	4b7b      	ldr	r3, [pc, #492]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a7a      	ldr	r2, [pc, #488]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	4b78      	ldr	r3, [pc, #480]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a77      	ldr	r2, [pc, #476]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	e01d      	b.n	80061b4 <HAL_RCC_OscConfig+0xd4>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006180:	d10c      	bne.n	800619c <HAL_RCC_OscConfig+0xbc>
 8006182:	4b72      	ldr	r3, [pc, #456]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a71      	ldr	r2, [pc, #452]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	4b6f      	ldr	r3, [pc, #444]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a6e      	ldr	r2, [pc, #440]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	e00b      	b.n	80061b4 <HAL_RCC_OscConfig+0xd4>
 800619c:	4b6b      	ldr	r3, [pc, #428]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a6a      	ldr	r2, [pc, #424]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 80061a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	4b68      	ldr	r3, [pc, #416]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a67      	ldr	r2, [pc, #412]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 80061ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d013      	beq.n	80061e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061bc:	f7fd fc02 	bl	80039c4 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061c4:	f7fd fbfe 	bl	80039c4 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b64      	cmp	r3, #100	; 0x64
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e200      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d6:	4b5d      	ldr	r3, [pc, #372]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0f0      	beq.n	80061c4 <HAL_RCC_OscConfig+0xe4>
 80061e2:	e014      	b.n	800620e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e4:	f7fd fbee 	bl	80039c4 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061ec:	f7fd fbea 	bl	80039c4 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b64      	cmp	r3, #100	; 0x64
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e1ec      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061fe:	4b53      	ldr	r3, [pc, #332]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f0      	bne.n	80061ec <HAL_RCC_OscConfig+0x10c>
 800620a:	e000      	b.n	800620e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800620c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d063      	beq.n	80062e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800621a:	4b4c      	ldr	r3, [pc, #304]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f003 030c 	and.w	r3, r3, #12
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006226:	4b49      	ldr	r3, [pc, #292]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f003 030c 	and.w	r3, r3, #12
 800622e:	2b08      	cmp	r3, #8
 8006230:	d11c      	bne.n	800626c <HAL_RCC_OscConfig+0x18c>
 8006232:	4b46      	ldr	r3, [pc, #280]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d116      	bne.n	800626c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800623e:	4b43      	ldr	r3, [pc, #268]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <HAL_RCC_OscConfig+0x176>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d001      	beq.n	8006256 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e1c0      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006256:	4b3d      	ldr	r3, [pc, #244]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	4939      	ldr	r1, [pc, #228]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006266:	4313      	orrs	r3, r2
 8006268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800626a:	e03a      	b.n	80062e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d020      	beq.n	80062b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006274:	4b36      	ldr	r3, [pc, #216]	; (8006350 <HAL_RCC_OscConfig+0x270>)
 8006276:	2201      	movs	r2, #1
 8006278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800627a:	f7fd fba3 	bl	80039c4 <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006282:	f7fd fb9f 	bl	80039c4 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e1a1      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006294:	4b2d      	ldr	r3, [pc, #180]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0f0      	beq.n	8006282 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a0:	4b2a      	ldr	r3, [pc, #168]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	4927      	ldr	r1, [pc, #156]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	600b      	str	r3, [r1, #0]
 80062b4:	e015      	b.n	80062e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062b6:	4b26      	ldr	r3, [pc, #152]	; (8006350 <HAL_RCC_OscConfig+0x270>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062bc:	f7fd fb82 	bl	80039c4 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062c4:	f7fd fb7e 	bl	80039c4 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e180      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062d6:	4b1d      	ldr	r3, [pc, #116]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d03a      	beq.n	8006364 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d019      	beq.n	800632a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062f6:	4b17      	ldr	r3, [pc, #92]	; (8006354 <HAL_RCC_OscConfig+0x274>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062fc:	f7fd fb62 	bl	80039c4 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006304:	f7fd fb5e 	bl	80039c4 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e160      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006316:	4b0d      	ldr	r3, [pc, #52]	; (800634c <HAL_RCC_OscConfig+0x26c>)
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f0      	beq.n	8006304 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006322:	2001      	movs	r0, #1
 8006324:	f000 fac4 	bl	80068b0 <RCC_Delay>
 8006328:	e01c      	b.n	8006364 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800632a:	4b0a      	ldr	r3, [pc, #40]	; (8006354 <HAL_RCC_OscConfig+0x274>)
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006330:	f7fd fb48 	bl	80039c4 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006336:	e00f      	b.n	8006358 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006338:	f7fd fb44 	bl	80039c4 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d908      	bls.n	8006358 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e146      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
 800634a:	bf00      	nop
 800634c:	40021000 	.word	0x40021000
 8006350:	42420000 	.word	0x42420000
 8006354:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006358:	4b92      	ldr	r3, [pc, #584]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e9      	bne.n	8006338 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80a6 	beq.w	80064be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006372:	2300      	movs	r3, #0
 8006374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006376:	4b8b      	ldr	r3, [pc, #556]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10d      	bne.n	800639e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006382:	4b88      	ldr	r3, [pc, #544]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	4a87      	ldr	r2, [pc, #540]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800638c:	61d3      	str	r3, [r2, #28]
 800638e:	4b85      	ldr	r3, [pc, #532]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006396:	60bb      	str	r3, [r7, #8]
 8006398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800639a:	2301      	movs	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800639e:	4b82      	ldr	r3, [pc, #520]	; (80065a8 <HAL_RCC_OscConfig+0x4c8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d118      	bne.n	80063dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063aa:	4b7f      	ldr	r3, [pc, #508]	; (80065a8 <HAL_RCC_OscConfig+0x4c8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a7e      	ldr	r2, [pc, #504]	; (80065a8 <HAL_RCC_OscConfig+0x4c8>)
 80063b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063b6:	f7fd fb05 	bl	80039c4 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063be:	f7fd fb01 	bl	80039c4 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b64      	cmp	r3, #100	; 0x64
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e103      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063d0:	4b75      	ldr	r3, [pc, #468]	; (80065a8 <HAL_RCC_OscConfig+0x4c8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0f0      	beq.n	80063be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d106      	bne.n	80063f2 <HAL_RCC_OscConfig+0x312>
 80063e4:	4b6f      	ldr	r3, [pc, #444]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	4a6e      	ldr	r2, [pc, #440]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 80063ea:	f043 0301 	orr.w	r3, r3, #1
 80063ee:	6213      	str	r3, [r2, #32]
 80063f0:	e02d      	b.n	800644e <HAL_RCC_OscConfig+0x36e>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10c      	bne.n	8006414 <HAL_RCC_OscConfig+0x334>
 80063fa:	4b6a      	ldr	r3, [pc, #424]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	4a69      	ldr	r2, [pc, #420]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	6213      	str	r3, [r2, #32]
 8006406:	4b67      	ldr	r3, [pc, #412]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	4a66      	ldr	r2, [pc, #408]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 800640c:	f023 0304 	bic.w	r3, r3, #4
 8006410:	6213      	str	r3, [r2, #32]
 8006412:	e01c      	b.n	800644e <HAL_RCC_OscConfig+0x36e>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2b05      	cmp	r3, #5
 800641a:	d10c      	bne.n	8006436 <HAL_RCC_OscConfig+0x356>
 800641c:	4b61      	ldr	r3, [pc, #388]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	4a60      	ldr	r2, [pc, #384]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006422:	f043 0304 	orr.w	r3, r3, #4
 8006426:	6213      	str	r3, [r2, #32]
 8006428:	4b5e      	ldr	r3, [pc, #376]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	4a5d      	ldr	r2, [pc, #372]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	6213      	str	r3, [r2, #32]
 8006434:	e00b      	b.n	800644e <HAL_RCC_OscConfig+0x36e>
 8006436:	4b5b      	ldr	r3, [pc, #364]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	4a5a      	ldr	r2, [pc, #360]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 800643c:	f023 0301 	bic.w	r3, r3, #1
 8006440:	6213      	str	r3, [r2, #32]
 8006442:	4b58      	ldr	r3, [pc, #352]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	4a57      	ldr	r2, [pc, #348]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006448:	f023 0304 	bic.w	r3, r3, #4
 800644c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d015      	beq.n	8006482 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006456:	f7fd fab5 	bl	80039c4 <HAL_GetTick>
 800645a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800645c:	e00a      	b.n	8006474 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800645e:	f7fd fab1 	bl	80039c4 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	f241 3288 	movw	r2, #5000	; 0x1388
 800646c:	4293      	cmp	r3, r2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e0b1      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006474:	4b4b      	ldr	r3, [pc, #300]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0ee      	beq.n	800645e <HAL_RCC_OscConfig+0x37e>
 8006480:	e014      	b.n	80064ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006482:	f7fd fa9f 	bl	80039c4 <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006488:	e00a      	b.n	80064a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800648a:	f7fd fa9b 	bl	80039c4 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	f241 3288 	movw	r2, #5000	; 0x1388
 8006498:	4293      	cmp	r3, r2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e09b      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064a0:	4b40      	ldr	r3, [pc, #256]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1ee      	bne.n	800648a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d105      	bne.n	80064be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064b2:	4b3c      	ldr	r3, [pc, #240]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	4a3b      	ldr	r2, [pc, #236]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 80064b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8087 	beq.w	80065d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064c8:	4b36      	ldr	r3, [pc, #216]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f003 030c 	and.w	r3, r3, #12
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d061      	beq.n	8006598 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d146      	bne.n	800656a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064dc:	4b33      	ldr	r3, [pc, #204]	; (80065ac <HAL_RCC_OscConfig+0x4cc>)
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e2:	f7fd fa6f 	bl	80039c4 <HAL_GetTick>
 80064e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ea:	f7fd fa6b 	bl	80039c4 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e06d      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064fc:	4b29      	ldr	r3, [pc, #164]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f0      	bne.n	80064ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006510:	d108      	bne.n	8006524 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006512:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	4921      	ldr	r1, [pc, #132]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006520:	4313      	orrs	r3, r2
 8006522:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006524:	4b1f      	ldr	r3, [pc, #124]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a19      	ldr	r1, [r3, #32]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	430b      	orrs	r3, r1
 8006536:	491b      	ldr	r1, [pc, #108]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 8006538:	4313      	orrs	r3, r2
 800653a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800653c:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <HAL_RCC_OscConfig+0x4cc>)
 800653e:	2201      	movs	r2, #1
 8006540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006542:	f7fd fa3f 	bl	80039c4 <HAL_GetTick>
 8006546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006548:	e008      	b.n	800655c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800654a:	f7fd fa3b 	bl	80039c4 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e03d      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800655c:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0f0      	beq.n	800654a <HAL_RCC_OscConfig+0x46a>
 8006568:	e035      	b.n	80065d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800656a:	4b10      	ldr	r3, [pc, #64]	; (80065ac <HAL_RCC_OscConfig+0x4cc>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006570:	f7fd fa28 	bl	80039c4 <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006578:	f7fd fa24 	bl	80039c4 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e026      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800658a:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <HAL_RCC_OscConfig+0x4c4>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f0      	bne.n	8006578 <HAL_RCC_OscConfig+0x498>
 8006596:	e01e      	b.n	80065d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d107      	bne.n	80065b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e019      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
 80065a4:	40021000 	.word	0x40021000
 80065a8:	40007000 	.word	0x40007000
 80065ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <HAL_RCC_OscConfig+0x500>)
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d106      	bne.n	80065d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d001      	beq.n	80065d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	40021000 	.word	0x40021000

080065e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0d0      	b.n	800679a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065f8:	4b6a      	ldr	r3, [pc, #424]	; (80067a4 <HAL_RCC_ClockConfig+0x1c0>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d910      	bls.n	8006628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4b67      	ldr	r3, [pc, #412]	; (80067a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f023 0207 	bic.w	r2, r3, #7
 800660e:	4965      	ldr	r1, [pc, #404]	; (80067a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	4313      	orrs	r3, r2
 8006614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006616:	4b63      	ldr	r3, [pc, #396]	; (80067a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d001      	beq.n	8006628 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e0b8      	b.n	800679a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d020      	beq.n	8006676 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006640:	4b59      	ldr	r3, [pc, #356]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	4a58      	ldr	r2, [pc, #352]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006646:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800664a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006658:	4b53      	ldr	r3, [pc, #332]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	4a52      	ldr	r2, [pc, #328]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 800665e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006662:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006664:	4b50      	ldr	r3, [pc, #320]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	494d      	ldr	r1, [pc, #308]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006672:	4313      	orrs	r3, r2
 8006674:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d040      	beq.n	8006704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d107      	bne.n	800669a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800668a:	4b47      	ldr	r3, [pc, #284]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d115      	bne.n	80066c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e07f      	b.n	800679a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d107      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a2:	4b41      	ldr	r3, [pc, #260]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e073      	b.n	800679a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066b2:	4b3d      	ldr	r3, [pc, #244]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e06b      	b.n	800679a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066c2:	4b39      	ldr	r3, [pc, #228]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f023 0203 	bic.w	r2, r3, #3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	4936      	ldr	r1, [pc, #216]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066d4:	f7fd f976 	bl	80039c4 <HAL_GetTick>
 80066d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066da:	e00a      	b.n	80066f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066dc:	f7fd f972 	bl	80039c4 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e053      	b.n	800679a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066f2:	4b2d      	ldr	r3, [pc, #180]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f003 020c 	and.w	r2, r3, #12
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	429a      	cmp	r2, r3
 8006702:	d1eb      	bne.n	80066dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006704:	4b27      	ldr	r3, [pc, #156]	; (80067a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d210      	bcs.n	8006734 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006712:	4b24      	ldr	r3, [pc, #144]	; (80067a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f023 0207 	bic.w	r2, r3, #7
 800671a:	4922      	ldr	r1, [pc, #136]	; (80067a4 <HAL_RCC_ClockConfig+0x1c0>)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	4313      	orrs	r3, r2
 8006720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006722:	4b20      	ldr	r3, [pc, #128]	; (80067a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d001      	beq.n	8006734 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e032      	b.n	800679a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006740:	4b19      	ldr	r3, [pc, #100]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	4916      	ldr	r1, [pc, #88]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 800674e:	4313      	orrs	r3, r2
 8006750:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	2b00      	cmp	r3, #0
 800675c:	d009      	beq.n	8006772 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800675e:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	490e      	ldr	r1, [pc, #56]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 800676e:	4313      	orrs	r3, r2
 8006770:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006772:	f000 f821 	bl	80067b8 <HAL_RCC_GetSysClockFreq>
 8006776:	4602      	mov	r2, r0
 8006778:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	091b      	lsrs	r3, r3, #4
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	490a      	ldr	r1, [pc, #40]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 8006784:	5ccb      	ldrb	r3, [r1, r3]
 8006786:	fa22 f303 	lsr.w	r3, r2, r3
 800678a:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <HAL_RCC_ClockConfig+0x1cc>)
 800678c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800678e:	4b09      	ldr	r3, [pc, #36]	; (80067b4 <HAL_RCC_ClockConfig+0x1d0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4618      	mov	r0, r3
 8006794:	f7fd f8d4 	bl	8003940 <HAL_InitTick>

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40022000 	.word	0x40022000
 80067a8:	40021000 	.word	0x40021000
 80067ac:	08010cf0 	.word	0x08010cf0
 80067b0:	20000000 	.word	0x20000000
 80067b4:	20000038 	.word	0x20000038

080067b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067b8:	b490      	push	{r4, r7}
 80067ba:	b08a      	sub	sp, #40	; 0x28
 80067bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80067be:	4b29      	ldr	r3, [pc, #164]	; (8006864 <HAL_RCC_GetSysClockFreq+0xac>)
 80067c0:	1d3c      	adds	r4, r7, #4
 80067c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80067c8:	f240 2301 	movw	r3, #513	; 0x201
 80067cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61fb      	str	r3, [r7, #28]
 80067d2:	2300      	movs	r3, #0
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	2300      	movs	r3, #0
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80067e2:	4b21      	ldr	r3, [pc, #132]	; (8006868 <HAL_RCC_GetSysClockFreq+0xb0>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f003 030c 	and.w	r3, r3, #12
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d002      	beq.n	80067f8 <HAL_RCC_GetSysClockFreq+0x40>
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d003      	beq.n	80067fe <HAL_RCC_GetSysClockFreq+0x46>
 80067f6:	e02b      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067f8:	4b1c      	ldr	r3, [pc, #112]	; (800686c <HAL_RCC_GetSysClockFreq+0xb4>)
 80067fa:	623b      	str	r3, [r7, #32]
      break;
 80067fc:	e02b      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	0c9b      	lsrs	r3, r3, #18
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	3328      	adds	r3, #40	; 0x28
 8006808:	443b      	add	r3, r7
 800680a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800680e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d012      	beq.n	8006840 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <HAL_RCC_GetSysClockFreq+0xb0>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	0c5b      	lsrs	r3, r3, #17
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	3328      	adds	r3, #40	; 0x28
 8006826:	443b      	add	r3, r7
 8006828:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800682c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	4a0e      	ldr	r2, [pc, #56]	; (800686c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006832:	fb03 f202 	mul.w	r2, r3, r2
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
 800683e:	e004      	b.n	800684a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	4a0b      	ldr	r2, [pc, #44]	; (8006870 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006844:	fb02 f303 	mul.w	r3, r2, r3
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	623b      	str	r3, [r7, #32]
      break;
 800684e:	e002      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006850:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006852:	623b      	str	r3, [r7, #32]
      break;
 8006854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006856:	6a3b      	ldr	r3, [r7, #32]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3728      	adds	r7, #40	; 0x28
 800685c:	46bd      	mov	sp, r7
 800685e:	bc90      	pop	{r4, r7}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	080106b4 	.word	0x080106b4
 8006868:	40021000 	.word	0x40021000
 800686c:	007a1200 	.word	0x007a1200
 8006870:	003d0900 	.word	0x003d0900

08006874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006878:	4b02      	ldr	r3, [pc, #8]	; (8006884 <HAL_RCC_GetHCLKFreq+0x10>)
 800687a:	681b      	ldr	r3, [r3, #0]
}
 800687c:	4618      	mov	r0, r3
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr
 8006884:	20000000 	.word	0x20000000

08006888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800688c:	f7ff fff2 	bl	8006874 <HAL_RCC_GetHCLKFreq>
 8006890:	4602      	mov	r2, r0
 8006892:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	0a1b      	lsrs	r3, r3, #8
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	4903      	ldr	r1, [pc, #12]	; (80068ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800689e:	5ccb      	ldrb	r3, [r1, r3]
 80068a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40021000 	.word	0x40021000
 80068ac:	08010d00 	.word	0x08010d00

080068b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80068b8:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <RCC_Delay+0x34>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a0a      	ldr	r2, [pc, #40]	; (80068e8 <RCC_Delay+0x38>)
 80068be:	fba2 2303 	umull	r2, r3, r2, r3
 80068c2:	0a5b      	lsrs	r3, r3, #9
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	fb02 f303 	mul.w	r3, r2, r3
 80068ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80068cc:	bf00      	nop
  }
  while (Delay --);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1e5a      	subs	r2, r3, #1
 80068d2:	60fa      	str	r2, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f9      	bne.n	80068cc <RCC_Delay+0x1c>
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr
 80068e4:	20000000 	.word	0x20000000
 80068e8:	10624dd3 	.word	0x10624dd3

080068ec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d004      	beq.n	8006908 <HAL_SRAM_Init+0x1c>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006906:	d101      	bne.n	800690c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e038      	b.n	800697e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d106      	bne.n	8006926 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7fc f88f 	bl	8002a44 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3308      	adds	r3, #8
 800692e:	4619      	mov	r1, r3
 8006930:	4610      	mov	r0, r2
 8006932:	f000 ff69 	bl	8007808 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	461a      	mov	r2, r3
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	f000 ffcb 	bl	80078dc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6858      	ldr	r0, [r3, #4]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	f000 fff6 	bl	8007944 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	6892      	ldr	r2, [r2, #8]
 8006960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	6892      	ldr	r2, [r2, #8]
 800696c:	f041 0101 	orr.w	r1, r1, #1
 8006970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b082      	sub	sp, #8
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e041      	b.n	8006a1c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d106      	bne.n	80069b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fb ff6b 	bl	8002888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2202      	movs	r2, #2
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	3304      	adds	r3, #4
 80069c2:	4619      	mov	r1, r3
 80069c4:	4610      	mov	r0, r2
 80069c6:	f000 fb93 	bl	80070f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d001      	beq.n	8006a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e044      	b.n	8006ac6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1d      	ldr	r2, [pc, #116]	; (8006ad0 <HAL_TIM_Base_Start_IT+0xac>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d018      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x6c>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a1c      	ldr	r2, [pc, #112]	; (8006ad4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d013      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x6c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a70:	d00e      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x6c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d009      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x6c>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a16      	ldr	r2, [pc, #88]	; (8006adc <HAL_TIM_Base_Start_IT+0xb8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d004      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x6c>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d111      	bne.n	8006ab4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b06      	cmp	r3, #6
 8006aa0:	d010      	beq.n	8006ac4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f042 0201 	orr.w	r2, r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab2:	e007      	b.n	8006ac4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0201 	orr.w	r2, r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40013400 	.word	0x40013400
 8006ad8:	40000400 	.word	0x40000400
 8006adc:	40000800 	.word	0x40000800
 8006ae0:	40000c00 	.word	0x40000c00

08006ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e041      	b.n	8006b7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f839 	bl	8006b82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	4619      	mov	r1, r3
 8006b22:	4610      	mov	r0, r2
 8006b24:	f000 fae4 	bl	80070f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d122      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d11b      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0202 	mvn.w	r2, #2
 8006bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa6f 	bl	80070ba <HAL_TIM_IC_CaptureCallback>
 8006bdc:	e005      	b.n	8006bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fa62 	bl	80070a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fa71 	bl	80070cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d122      	bne.n	8006c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d11b      	bne.n	8006c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0204 	mvn.w	r2, #4
 8006c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa45 	bl	80070ba <HAL_TIM_IC_CaptureCallback>
 8006c30:	e005      	b.n	8006c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa38 	bl	80070a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fa47 	bl	80070cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d122      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d11b      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0208 	mvn.w	r2, #8
 8006c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa1b 	bl	80070ba <HAL_TIM_IC_CaptureCallback>
 8006c84:	e005      	b.n	8006c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa0e 	bl	80070a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fa1d 	bl	80070cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0310 	and.w	r3, r3, #16
 8006ca2:	2b10      	cmp	r3, #16
 8006ca4:	d122      	bne.n	8006cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b10      	cmp	r3, #16
 8006cb2:	d11b      	bne.n	8006cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0210 	mvn.w	r2, #16
 8006cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2208      	movs	r2, #8
 8006cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f9f1 	bl	80070ba <HAL_TIM_IC_CaptureCallback>
 8006cd8:	e005      	b.n	8006ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f9e4 	bl	80070a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f9f3 	bl	80070cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d10e      	bne.n	8006d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d107      	bne.n	8006d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f06f 0201 	mvn.w	r2, #1
 8006d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fa fb04 	bl	8001320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d10e      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d30:	2b80      	cmp	r3, #128	; 0x80
 8006d32:	d107      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fd58 	bl	80077f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4e:	2b40      	cmp	r3, #64	; 0x40
 8006d50:	d10e      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5c:	2b40      	cmp	r3, #64	; 0x40
 8006d5e:	d107      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f9b7 	bl	80070de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	d10e      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d107      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0220 	mvn.w	r2, #32
 8006d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fd23 	bl	80077e2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e0ac      	b.n	8006f18 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b0c      	cmp	r3, #12
 8006dca:	f200 809f 	bhi.w	8006f0c <HAL_TIM_PWM_ConfigChannel+0x168>
 8006dce:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006e09 	.word	0x08006e09
 8006dd8:	08006f0d 	.word	0x08006f0d
 8006ddc:	08006f0d 	.word	0x08006f0d
 8006de0:	08006f0d 	.word	0x08006f0d
 8006de4:	08006e49 	.word	0x08006e49
 8006de8:	08006f0d 	.word	0x08006f0d
 8006dec:	08006f0d 	.word	0x08006f0d
 8006df0:	08006f0d 	.word	0x08006f0d
 8006df4:	08006e8b 	.word	0x08006e8b
 8006df8:	08006f0d 	.word	0x08006f0d
 8006dfc:	08006f0d 	.word	0x08006f0d
 8006e00:	08006f0d 	.word	0x08006f0d
 8006e04:	08006ecb 	.word	0x08006ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f9e8 	bl	80071e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0208 	orr.w	r2, r2, #8
 8006e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0204 	bic.w	r2, r2, #4
 8006e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6999      	ldr	r1, [r3, #24]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	619a      	str	r2, [r3, #24]
      break;
 8006e46:	e062      	b.n	8006f0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fa38 	bl	80072c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699a      	ldr	r2, [r3, #24]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6999      	ldr	r1, [r3, #24]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	021a      	lsls	r2, r3, #8
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	619a      	str	r2, [r3, #24]
      break;
 8006e88:	e041      	b.n	8006f0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fa8b 	bl	80073ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f042 0208 	orr.w	r2, r2, #8
 8006ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0204 	bic.w	r2, r2, #4
 8006eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69d9      	ldr	r1, [r3, #28]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	61da      	str	r2, [r3, #28]
      break;
 8006ec8:	e021      	b.n	8006f0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68b9      	ldr	r1, [r7, #8]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fadf 	bl	8007494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69da      	ldr	r2, [r3, #28]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69da      	ldr	r2, [r3, #28]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69d9      	ldr	r1, [r3, #28]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	021a      	lsls	r2, r3, #8
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	61da      	str	r2, [r3, #28]
      break;
 8006f0a:	e000      	b.n	8006f0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006f0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_TIM_ConfigClockSource+0x18>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e0b3      	b.n	80070a0 <HAL_TIM_ConfigClockSource+0x180>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f70:	d03e      	beq.n	8006ff0 <HAL_TIM_ConfigClockSource+0xd0>
 8006f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f76:	f200 8087 	bhi.w	8007088 <HAL_TIM_ConfigClockSource+0x168>
 8006f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7e:	f000 8085 	beq.w	800708c <HAL_TIM_ConfigClockSource+0x16c>
 8006f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f86:	d87f      	bhi.n	8007088 <HAL_TIM_ConfigClockSource+0x168>
 8006f88:	2b70      	cmp	r3, #112	; 0x70
 8006f8a:	d01a      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0xa2>
 8006f8c:	2b70      	cmp	r3, #112	; 0x70
 8006f8e:	d87b      	bhi.n	8007088 <HAL_TIM_ConfigClockSource+0x168>
 8006f90:	2b60      	cmp	r3, #96	; 0x60
 8006f92:	d050      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x116>
 8006f94:	2b60      	cmp	r3, #96	; 0x60
 8006f96:	d877      	bhi.n	8007088 <HAL_TIM_ConfigClockSource+0x168>
 8006f98:	2b50      	cmp	r3, #80	; 0x50
 8006f9a:	d03c      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0xf6>
 8006f9c:	2b50      	cmp	r3, #80	; 0x50
 8006f9e:	d873      	bhi.n	8007088 <HAL_TIM_ConfigClockSource+0x168>
 8006fa0:	2b40      	cmp	r3, #64	; 0x40
 8006fa2:	d058      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x136>
 8006fa4:	2b40      	cmp	r3, #64	; 0x40
 8006fa6:	d86f      	bhi.n	8007088 <HAL_TIM_ConfigClockSource+0x168>
 8006fa8:	2b30      	cmp	r3, #48	; 0x30
 8006faa:	d064      	beq.n	8007076 <HAL_TIM_ConfigClockSource+0x156>
 8006fac:	2b30      	cmp	r3, #48	; 0x30
 8006fae:	d86b      	bhi.n	8007088 <HAL_TIM_ConfigClockSource+0x168>
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d060      	beq.n	8007076 <HAL_TIM_ConfigClockSource+0x156>
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	d867      	bhi.n	8007088 <HAL_TIM_ConfigClockSource+0x168>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d05c      	beq.n	8007076 <HAL_TIM_ConfigClockSource+0x156>
 8006fbc:	2b10      	cmp	r3, #16
 8006fbe:	d05a      	beq.n	8007076 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006fc0:	e062      	b.n	8007088 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	6899      	ldr	r1, [r3, #8]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f000 fb2a 	bl	800762a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fe4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	609a      	str	r2, [r3, #8]
      break;
 8006fee:	e04e      	b.n	800708e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	6899      	ldr	r1, [r3, #8]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f000 fb13 	bl	800762a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007012:	609a      	str	r2, [r3, #8]
      break;
 8007014:	e03b      	b.n	800708e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6859      	ldr	r1, [r3, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	461a      	mov	r2, r3
 8007024:	f000 fa8a 	bl	800753c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2150      	movs	r1, #80	; 0x50
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fae1 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8007034:	e02b      	b.n	800708e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	6859      	ldr	r1, [r3, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	461a      	mov	r2, r3
 8007044:	f000 faa8 	bl	8007598 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2160      	movs	r1, #96	; 0x60
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fad1 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8007054:	e01b      	b.n	800708e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6859      	ldr	r1, [r3, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	461a      	mov	r2, r3
 8007064:	f000 fa6a 	bl	800753c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2140      	movs	r1, #64	; 0x40
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fac1 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8007074:	e00b      	b.n	800708e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f000 fab8 	bl	80075f6 <TIM_ITRx_SetConfig>
        break;
 8007086:	e002      	b.n	800708e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007088:	bf00      	nop
 800708a:	e000      	b.n	800708e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800708c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bc80      	pop	{r7}
 80070b8:	4770      	bx	lr

080070ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr

080070cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	bc80      	pop	{r7}
 80070dc:	4770      	bx	lr

080070de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070e6:	bf00      	nop
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr

080070f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a33      	ldr	r2, [pc, #204]	; (80071d0 <TIM_Base_SetConfig+0xe0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d013      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a32      	ldr	r2, [pc, #200]	; (80071d4 <TIM_Base_SetConfig+0xe4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00f      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007116:	d00b      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a2f      	ldr	r2, [pc, #188]	; (80071d8 <TIM_Base_SetConfig+0xe8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d007      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a2e      	ldr	r2, [pc, #184]	; (80071dc <TIM_Base_SetConfig+0xec>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a2d      	ldr	r2, [pc, #180]	; (80071e0 <TIM_Base_SetConfig+0xf0>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d108      	bne.n	8007142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a22      	ldr	r2, [pc, #136]	; (80071d0 <TIM_Base_SetConfig+0xe0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <TIM_Base_SetConfig+0x82>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a21      	ldr	r2, [pc, #132]	; (80071d4 <TIM_Base_SetConfig+0xe4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00f      	beq.n	8007172 <TIM_Base_SetConfig+0x82>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007158:	d00b      	beq.n	8007172 <TIM_Base_SetConfig+0x82>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a1e      	ldr	r2, [pc, #120]	; (80071d8 <TIM_Base_SetConfig+0xe8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d007      	beq.n	8007172 <TIM_Base_SetConfig+0x82>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a1d      	ldr	r2, [pc, #116]	; (80071dc <TIM_Base_SetConfig+0xec>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d003      	beq.n	8007172 <TIM_Base_SetConfig+0x82>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a1c      	ldr	r2, [pc, #112]	; (80071e0 <TIM_Base_SetConfig+0xf0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d108      	bne.n	8007184 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	4313      	orrs	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <TIM_Base_SetConfig+0xe0>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_Base_SetConfig+0xc8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <TIM_Base_SetConfig+0xe4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d103      	bne.n	80071c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	615a      	str	r2, [r3, #20]
}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bc80      	pop	{r7}
 80071ce:	4770      	bx	lr
 80071d0:	40012c00 	.word	0x40012c00
 80071d4:	40013400 	.word	0x40013400
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	40000c00 	.word	0x40000c00

080071e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	f023 0201 	bic.w	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0303 	bic.w	r3, r3, #3
 800721a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f023 0302 	bic.w	r3, r3, #2
 800722c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a20      	ldr	r2, [pc, #128]	; (80072bc <TIM_OC1_SetConfig+0xd8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d003      	beq.n	8007248 <TIM_OC1_SetConfig+0x64>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a1f      	ldr	r2, [pc, #124]	; (80072c0 <TIM_OC1_SetConfig+0xdc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d10c      	bne.n	8007262 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f023 0308 	bic.w	r3, r3, #8
 800724e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f023 0304 	bic.w	r3, r3, #4
 8007260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a15      	ldr	r2, [pc, #84]	; (80072bc <TIM_OC1_SetConfig+0xd8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d003      	beq.n	8007272 <TIM_OC1_SetConfig+0x8e>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a14      	ldr	r2, [pc, #80]	; (80072c0 <TIM_OC1_SetConfig+0xdc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d111      	bne.n	8007296 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	621a      	str	r2, [r3, #32]
}
 80072b0:	bf00      	nop
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40012c00 	.word	0x40012c00
 80072c0:	40013400 	.word	0x40013400

080072c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	f023 0210 	bic.w	r2, r3, #16
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	021b      	lsls	r3, r3, #8
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4313      	orrs	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f023 0320 	bic.w	r3, r3, #32
 800730e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	4313      	orrs	r3, r2
 800731a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a21      	ldr	r2, [pc, #132]	; (80073a4 <TIM_OC2_SetConfig+0xe0>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_OC2_SetConfig+0x68>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a20      	ldr	r2, [pc, #128]	; (80073a8 <TIM_OC2_SetConfig+0xe4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d10d      	bne.n	8007348 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	011b      	lsls	r3, r3, #4
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a16      	ldr	r2, [pc, #88]	; (80073a4 <TIM_OC2_SetConfig+0xe0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_OC2_SetConfig+0x94>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a15      	ldr	r2, [pc, #84]	; (80073a8 <TIM_OC2_SetConfig+0xe4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d113      	bne.n	8007380 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800735e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	4313      	orrs	r3, r2
 8007372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	621a      	str	r2, [r3, #32]
}
 800739a:	bf00      	nop
 800739c:	371c      	adds	r7, #28
 800739e:	46bd      	mov	sp, r7
 80073a0:	bc80      	pop	{r7}
 80073a2:	4770      	bx	lr
 80073a4:	40012c00 	.word	0x40012c00
 80073a8:	40013400 	.word	0x40013400

080073ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a21      	ldr	r2, [pc, #132]	; (800748c <TIM_OC3_SetConfig+0xe0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d003      	beq.n	8007412 <TIM_OC3_SetConfig+0x66>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a20      	ldr	r2, [pc, #128]	; (8007490 <TIM_OC3_SetConfig+0xe4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d10d      	bne.n	800742e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	4313      	orrs	r3, r2
 8007424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800742c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a16      	ldr	r2, [pc, #88]	; (800748c <TIM_OC3_SetConfig+0xe0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d003      	beq.n	800743e <TIM_OC3_SetConfig+0x92>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a15      	ldr	r2, [pc, #84]	; (8007490 <TIM_OC3_SetConfig+0xe4>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d113      	bne.n	8007466 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800744c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	011b      	lsls	r3, r3, #4
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	4313      	orrs	r3, r2
 8007464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	621a      	str	r2, [r3, #32]
}
 8007480:	bf00      	nop
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	bc80      	pop	{r7}
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40012c00 	.word	0x40012c00
 8007490:	40013400 	.word	0x40013400

08007494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	021b      	lsls	r3, r3, #8
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	031b      	lsls	r3, r3, #12
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a11      	ldr	r2, [pc, #68]	; (8007534 <TIM_OC4_SetConfig+0xa0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d003      	beq.n	80074fc <TIM_OC4_SetConfig+0x68>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a10      	ldr	r2, [pc, #64]	; (8007538 <TIM_OC4_SetConfig+0xa4>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d109      	bne.n	8007510 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	019b      	lsls	r3, r3, #6
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	621a      	str	r2, [r3, #32]
}
 800752a:	bf00      	nop
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	bc80      	pop	{r7}
 8007532:	4770      	bx	lr
 8007534:	40012c00 	.word	0x40012c00
 8007538:	40013400 	.word	0x40013400

0800753c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	f023 0201 	bic.w	r2, r3, #1
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	011b      	lsls	r3, r3, #4
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f023 030a 	bic.w	r3, r3, #10
 8007578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4313      	orrs	r3, r2
 8007580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	bc80      	pop	{r7}
 8007596:	4770      	bx	lr

08007598 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	f023 0210 	bic.w	r2, r3, #16
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	031b      	lsls	r3, r3, #12
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	011b      	lsls	r3, r3, #4
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	621a      	str	r2, [r3, #32]
}
 80075ec:	bf00      	nop
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr

080075f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	f043 0307 	orr.w	r3, r3, #7
 8007618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr

0800762a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800762a:	b480      	push	{r7}
 800762c:	b087      	sub	sp, #28
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
 8007636:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007644:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	021a      	lsls	r2, r3, #8
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	431a      	orrs	r2, r3
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	4313      	orrs	r3, r2
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	4313      	orrs	r3, r2
 8007656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	609a      	str	r2, [r3, #8]
}
 800765e:	bf00      	nop
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr

08007668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800767c:	2302      	movs	r3, #2
 800767e:	e050      	b.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1b      	ldr	r2, [pc, #108]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d018      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a19      	ldr	r2, [pc, #100]	; (8007730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d013      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d6:	d00e      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a15      	ldr	r2, [pc, #84]	; (8007734 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d009      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a14      	ldr	r2, [pc, #80]	; (8007738 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d004      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a12      	ldr	r2, [pc, #72]	; (800773c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d10c      	bne.n	8007710 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	4313      	orrs	r3, r2
 8007706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr
 800772c:	40012c00 	.word	0x40012c00
 8007730:	40013400 	.word	0x40013400
 8007734:	40000400 	.word	0x40000400
 8007738:	40000800 	.word	0x40000800
 800773c:	40000c00 	.word	0x40000c00

08007740 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007758:	2302      	movs	r3, #2
 800775a:	e03d      	b.n	80077d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr

080077e2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077ea:	bf00      	nop
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr

080077f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	bc80      	pop	{r7}
 8007804:	4770      	bx	lr
	...

08007808 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007808:	b480      	push	{r7}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	6812      	ldr	r2, [r2, #0]
 8007820:	f023 0101 	bic.w	r1, r3, #1
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b08      	cmp	r3, #8
 8007830:	d102      	bne.n	8007838 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007832:	2340      	movs	r3, #64	; 0x40
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	e001      	b.n	800783c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007838:	2300      	movs	r3, #0
 800783a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007848:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800784e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007854:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800785a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007860:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007866:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800786c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007872:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8007878:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800787e:	4313      	orrs	r3, r2
 8007880:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	4313      	orrs	r3, r2
 800788a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8007896:	4b10      	ldr	r3, [pc, #64]	; (80078d8 <FSMC_NORSRAM_Init+0xd0>)
 8007898:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078a0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80078a8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	43db      	mvns	r3, r3
 80078b8:	ea02 0103 	and.w	r1, r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	4319      	orrs	r1, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	0008fb7f 	.word	0x0008fb7f

080078dc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	431a      	orrs	r2, r3
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	021b      	lsls	r3, r3, #8
 8007908:	431a      	orrs	r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	431a      	orrs	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	3b01      	subs	r3, #1
 8007918:	051b      	lsls	r3, r3, #20
 800791a:	431a      	orrs	r2, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	3b02      	subs	r3, #2
 8007922:	061b      	lsls	r3, r3, #24
 8007924:	431a      	orrs	r2, r3
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	4313      	orrs	r3, r2
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	3201      	adds	r2, #1
 8007930:	4319      	orrs	r1, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr

08007944 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007958:	d11d      	bne.n	8007996 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007962:	4b13      	ldr	r3, [pc, #76]	; (80079b0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007964:	4013      	ands	r3, r2
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	6811      	ldr	r1, [r2, #0]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	6852      	ldr	r2, [r2, #4]
 800796e:	0112      	lsls	r2, r2, #4
 8007970:	4311      	orrs	r1, r2
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	6892      	ldr	r2, [r2, #8]
 8007976:	0212      	lsls	r2, r2, #8
 8007978:	4311      	orrs	r1, r2
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	6992      	ldr	r2, [r2, #24]
 800797e:	4311      	orrs	r1, r2
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	68d2      	ldr	r2, [r2, #12]
 8007984:	0412      	lsls	r2, r2, #16
 8007986:	430a      	orrs	r2, r1
 8007988:	ea43 0102 	orr.w	r1, r3, r2
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007994:	e005      	b.n	80079a2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800799e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bc80      	pop	{r7}
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	cff00000 	.word	0xcff00000

080079b4 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80079bc:	2300      	movs	r3, #0
 80079be:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 80079c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 80079c8:	2101      	movs	r1, #1
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f001 f858 	bl	8008a80 <VL53L1_data_init>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 80079d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d103      	bne.n	80079e4 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80079e4:	2300      	movs	r3, #0
 80079e6:	73bb      	strb	r3, [r7, #14]
 80079e8:	e012      	b.n	8007a10 <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 80079ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d112      	bne.n	8007a18 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2201      	movs	r2, #1
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fbcf 	bl	800819e <VL53L1_SetLimitCheckEnable>
 8007a00:	4603      	mov	r3, r0
 8007a02:	461a      	mov	r2, r3
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	73bb      	strb	r3, [r7, #14]
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d9e9      	bls.n	80079ea <VL53L1_DataInit+0x36>
 8007a16:	e000      	b.n	8007a1a <VL53L1_DataInit+0x66>
		else
			break;
 8007a18:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2203      	movs	r2, #3
 8007a36:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8007a3a:	2320      	movs	r3, #32
 8007a3c:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	7bba      	ldrb	r2, [r7, #14]
 8007a42:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8007a44:	2108      	movs	r1, #8
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f8f5 	bl	8007c36 <VL53L1_SetPresetMode>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2208      	movs	r2, #8
 8007a54:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 8007a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8007a70:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f005 f83b 	bl	800caf0 <VL53L1_poll_for_boot_completion>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8007a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	603a      	str	r2, [r7, #0]
 8007a96:	71fb      	strb	r3, [r7, #7]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8007aa0:	4a2a      	ldr	r2, [pc, #168]	; (8007b4c <ComputeDevicePresetMode+0xc0>)
 8007aa2:	f107 0310 	add.w	r3, r7, #16
 8007aa6:	6812      	ldr	r2, [r2, #0]
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	8019      	strh	r1, [r3, #0]
 8007aac:	3302      	adds	r3, #2
 8007aae:	0c12      	lsrs	r2, r2, #16
 8007ab0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8007ab2:	4a27      	ldr	r2, [pc, #156]	; (8007b50 <ComputeDevicePresetMode+0xc4>)
 8007ab4:	f107 030c 	add.w	r3, r7, #12
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	4611      	mov	r1, r2
 8007abc:	8019      	strh	r1, [r3, #0]
 8007abe:	3302      	adds	r3, #2
 8007ac0:	0c12      	lsrs	r2, r2, #16
 8007ac2:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8007ac4:	4a23      	ldr	r2, [pc, #140]	; (8007b54 <ComputeDevicePresetMode+0xc8>)
 8007ac6:	f107 0308 	add.w	r3, r7, #8
 8007aca:	6812      	ldr	r2, [r2, #0]
 8007acc:	4611      	mov	r1, r2
 8007ace:	8019      	strh	r1, [r3, #0]
 8007ad0:	3302      	adds	r3, #2
 8007ad2:	0c12      	lsrs	r2, r2, #16
 8007ad4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8007adc:	79bb      	ldrb	r3, [r7, #6]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d002      	beq.n	8007ae8 <ComputeDevicePresetMode+0x5c>
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d003      	beq.n	8007aee <ComputeDevicePresetMode+0x62>
 8007ae6:	e005      	b.n	8007af4 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	75bb      	strb	r3, [r7, #22]
		break;
 8007aec:	e004      	b.n	8007af8 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8007aee:	2301      	movs	r3, #1
 8007af0:	75bb      	strb	r3, [r7, #22]
		break;
 8007af2:	e001      	b.n	8007af8 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8007af4:	2302      	movs	r3, #2
 8007af6:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b08      	cmp	r3, #8
 8007afc:	d015      	beq.n	8007b2a <ComputeDevicePresetMode+0x9e>
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	dc1b      	bgt.n	8007b3a <ComputeDevicePresetMode+0xae>
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d009      	beq.n	8007b1a <ComputeDevicePresetMode+0x8e>
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d117      	bne.n	8007b3a <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8007b0a:	7dbb      	ldrb	r3, [r7, #22]
 8007b0c:	3318      	adds	r3, #24
 8007b0e:	443b      	add	r3, r7
 8007b10:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	701a      	strb	r2, [r3, #0]
		break;
 8007b18:	e011      	b.n	8007b3e <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8007b1a:	7dbb      	ldrb	r3, [r7, #22]
 8007b1c:	3318      	adds	r3, #24
 8007b1e:	443b      	add	r3, r7
 8007b20:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	701a      	strb	r2, [r3, #0]
		break;
 8007b28:	e009      	b.n	8007b3e <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8007b2a:	7dbb      	ldrb	r3, [r7, #22]
 8007b2c:	3318      	adds	r3, #24
 8007b2e:	443b      	add	r3, r7
 8007b30:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	701a      	strb	r2, [r3, #0]
		break;
 8007b38:	e001      	b.n	8007b3e <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8007b3a:	23f8      	movs	r3, #248	; 0xf8
 8007b3c:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8007b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr
 8007b4c:	080106f0 	.word	0x080106f0
 8007b50:	080106f4 	.word	0x080106f4
 8007b54:	080106f8 	.word	0x080106f8

08007b58 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8007b58:	b5b0      	push	{r4, r5, r7, lr}
 8007b5a:	b08e      	sub	sp, #56	; 0x38
 8007b5c:	af04      	add	r7, sp, #16
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	460b      	mov	r3, r1
 8007b64:	72fb      	strb	r3, [r7, #11]
 8007b66:	4613      	mov	r3, r2
 8007b68:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8007b80:	7afb      	ldrb	r3, [r7, #11]
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d002      	beq.n	8007b8c <SetPresetMode+0x34>
 8007b86:	7afb      	ldrb	r3, [r7, #11]
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d103      	bne.n	8007b94 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8007b8c:	2340      	movs	r3, #64	; 0x40
 8007b8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b92:	e002      	b.n	8007b9a <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8007b94:	2320      	movs	r3, #32
 8007b96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8007b9a:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8007b9e:	7ab9      	ldrb	r1, [r7, #10]
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7ff ff72 	bl	8007a8c <ComputeDevicePresetMode>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8007bae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d112      	bne.n	8007bdc <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8007bb6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8007bba:	f107 001c 	add.w	r0, r7, #28
 8007bbe:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8007bc2:	f107 0314 	add.w	r3, r7, #20
 8007bc6:	9301      	str	r3, [sp, #4]
 8007bc8:	f107 0318 	add.w	r3, r7, #24
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	4603      	mov	r3, r0
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f001 fa11 	bl	8008ff8 <VL53L1_get_preset_mode_timing_cfg>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8007bdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d112      	bne.n	8007c0a <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8007be4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8007be8:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8007bea:	69fd      	ldr	r5, [r7, #28]
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	9102      	str	r1, [sp, #8]
 8007bf4:	9201      	str	r2, [sp, #4]
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	462b      	mov	r3, r5
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	4601      	mov	r1, r0
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f001 faa4 	bl	800914c <VL53L1_set_preset_mode>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8007c0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d103      	bne.n	8007c1a <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c18:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8007c1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d103      	bne.n	8007c2a <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	7afa      	ldrb	r2, [r7, #11]
 8007c26:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8007c2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3728      	adds	r7, #40	; 0x28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bdb0      	pop	{r4, r5, r7, pc}

08007c36 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8007c46:	2303      	movs	r3, #3
 8007c48:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f003 fd92 	bl	800b774 <VL53L1_low_power_auto_data_init>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 8007c54:	7bba      	ldrb	r2, [r7, #14]
 8007c56:	78f9      	ldrb	r1, [r7, #3]
 8007c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff ff7b 	bl	8007b58 <SetPresetMode>
 8007c62:	4603      	mov	r3, r0
 8007c64:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8007c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d117      	bne.n	8007c9e <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d005      	beq.n	8007c80 <VL53L1_SetPresetMode+0x4a>
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d002      	beq.n	8007c80 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	2b08      	cmp	r3, #8
 8007c7e:	d107      	bne.n	8007c90 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8007c80:	f24a 0128 	movw	r1, #41000	; 0xa028
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f891 	bl	8007dac <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73fb      	strb	r3, [r7, #15]
 8007c8e:	e006      	b.n	8007c9e <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8007c90:	f248 2135 	movw	r1, #33333	; 0x8235
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f889 	bl	8007dac <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8007c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d106      	bne.n	8007cb4 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8007ca6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa0a 	bl	80080c4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b088      	sub	sp, #32
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8007ce2:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d008      	beq.n	8007cfc <VL53L1_SetDistanceMode+0x3c>
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d005      	beq.n	8007cfc <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d002      	beq.n	8007cfc <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8007cf6:	f06f 0303 	mvn.w	r3, #3
 8007cfa:	e052      	b.n	8007da2 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 8007cfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d107      	bne.n	8007d14 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8007d04:	f107 0308 	add.w	r3, r7, #8
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 f91e 	bl	8008f4c <VL53L1_get_user_zone>
 8007d10:	4603      	mov	r3, r0
 8007d12:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8007d1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10a      	bne.n	8007d38 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8007d22:	f107 0314 	add.w	r3, r7, #20
 8007d26:	f107 0210 	add.w	r2, r7, #16
 8007d2a:	f107 010c 	add.w	r1, r7, #12
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f001 f848 	bl	8008dc4 <VL53L1_get_timeouts_us>
 8007d34:	4603      	mov	r3, r0
 8007d36:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8007d38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d107      	bne.n	8007d50 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 8007d40:	78fa      	ldrb	r2, [r7, #3]
 8007d42:	7fb9      	ldrb	r1, [r7, #30]
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff ff06 	bl	8007b58 <SetPresetMode>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8007d50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	78fa      	ldrb	r2, [r7, #3]
 8007d5c:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8007d60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10e      	bne.n	8007d86 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8007d68:	68f9      	ldr	r1, [r7, #12]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fff0 	bl	8008d54 <VL53L1_set_timeouts_us>
 8007d74:	4603      	mov	r3, r0
 8007d76:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8007d78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d102      	bne.n	8007d86 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8007d86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d107      	bne.n	8007d9e <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8007d8e:	f107 0308 	add.w	r3, r7, #8
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 f8b6 	bl	8008f06 <VL53L1_set_user_zone>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8007d9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3720      	adds	r7, #32
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08c      	sub	sp, #48	; 0x30
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8007dd0:	4b64      	ldr	r3, [pc, #400]	; (8007f64 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 8007dd2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	4a64      	ldr	r2, [pc, #400]	; (8007f68 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d902      	bls.n	8007de2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8007ddc:	23fc      	movs	r3, #252	; 0xfc
 8007dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8007de2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8007dea:	f107 031a 	add.w	r3, r7, #26
 8007dee:	461a      	mov	r2, r3
 8007df0:	2105      	movs	r1, #5
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa8c 	bl	8008310 <VL53L1_GetSequenceStepEnable>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8007dfe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d109      	bne.n	8007e1a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8007e06:	f107 0319 	add.w	r3, r7, #25
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	2106      	movs	r1, #6
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fa7e 	bl	8008310 <VL53L1_GetSequenceStepEnable>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8007e1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10b      	bne.n	8007e3a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8007e22:	f107 0314 	add.w	r3, r7, #20
 8007e26:	f107 0210 	add.w	r2, r7, #16
 8007e2a:	f107 010c 	add.w	r1, r7, #12
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 ffc8 	bl	8008dc4 <VL53L1_get_timeouts_us>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8007e3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f040 8081 	bne.w	8007f46 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8007e4a:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8007e50:	2301      	movs	r3, #1
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8007e54:	7efb      	ldrb	r3, [r7, #27]
 8007e56:	2b08      	cmp	r3, #8
 8007e58:	d026      	beq.n	8007ea8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 8007e5a:	2b08      	cmp	r3, #8
 8007e5c:	dc43      	bgt.n	8007ee6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d00f      	beq.n	8007e82 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d13f      	bne.n	8007ee6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8007e66:	7ebb      	ldrb	r3, [r7, #26]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d002      	beq.n	8007e72 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 8007e6c:	7e7b      	ldrb	r3, [r7, #25]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d103      	bne.n	8007e7a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 8007e72:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e76:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8007e78:	e038      	b.n	8007eec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 8007e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8007e80:	e034      	b.n	8007eec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8007e88:	7ebb      	ldrb	r3, [r7, #26]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d002      	beq.n	8007e94 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8007e8e:	7e7b      	ldrb	r3, [r7, #25]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d103      	bne.n	8007e9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8007e94:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8007e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e9a:	e002      	b.n	8007ea2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 8007e9c:	f245 4360 	movw	r3, #21600	; 0x5460
 8007ea0:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8007ea6:	e021      	b.n	8007eec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8007eae:	23f5      	movs	r3, #245	; 0xf5
 8007eb0:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8007eb2:	f107 0308 	add.w	r3, r7, #8
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f248 0136 	movw	r1, #32822	; 0x8036
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 ffef 	bl	8009ea0 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	dd07      	ble.n	8007ed8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	22f5      	movs	r2, #245	; 0xf5
 8007ecc:	fb02 f303 	mul.w	r3, r2, r3
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8007ede:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8007ee4:	e002      	b.n	8007eec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8007ee6:	23f8      	movs	r3, #248	; 0xf8
 8007ee8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d803      	bhi.n	8007efc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8007ef4:	23fc      	movs	r3, #252	; 0xfc
 8007ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007efa:	e003      	b.n	8007f04 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8007f02:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8007f04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d11c      	bne.n	8007f46 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	69fa      	ldr	r2, [r7, #28]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d203      	bcs.n	8007f1c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8007f14:	23fc      	movs	r3, #252	; 0xfc
 8007f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007f1a:	e00d      	b.n	8007f38 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f24:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8007f26:	68f9      	ldr	r1, [r7, #12]
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 ff11 	bl	8008d54 <VL53L1_set_timeouts_us>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8007f38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d102      	bne.n	8007f46 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8007f46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d103      	bne.n	8007f56 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	683a      	ldr	r2, [r7, #0]
 8007f52:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3730      	adds	r7, #48	; 0x30
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	00086470 	.word	0x00086470
 8007f68:	00989680 	.word	0x00989680

08007f6c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08c      	sub	sp, #48	; 0x30
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8007f9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d109      	bne.n	8007fb6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8007fa2:	f107 031b 	add.w	r3, r7, #27
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	2105      	movs	r1, #5
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f9b0 	bl	8008310 <VL53L1_GetSequenceStepEnable>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8007fb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d109      	bne.n	8007fd2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8007fbe:	f107 031a 	add.w	r3, r7, #26
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	2106      	movs	r1, #6
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f9a2 	bl	8008310 <VL53L1_GetSequenceStepEnable>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8007fd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10b      	bne.n	8007ff2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8007fda:	f107 0310 	add.w	r3, r7, #16
 8007fde:	f107 0214 	add.w	r2, r7, #20
 8007fe2:	f107 010c 	add.w	r1, r7, #12
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 feec 	bl	8008dc4 <VL53L1_get_timeouts_us>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8007ff2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d156      	bne.n	80080a8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8008000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8008004:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008008:	2b08      	cmp	r3, #8
 800800a:	d02a      	beq.n	8008062 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 800800c:	2b08      	cmp	r3, #8
 800800e:	dc47      	bgt.n	80080a0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 8008010:	2b03      	cmp	r3, #3
 8008012:	d012      	beq.n	800803a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8008014:	2b04      	cmp	r3, #4
 8008016:	d143      	bne.n	80080a0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008018:	7efb      	ldrb	r3, [r7, #27]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d002      	beq.n	8008024 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800801e:	7ebb      	ldrb	r3, [r7, #26]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d105      	bne.n	8008030 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800802a:	3308      	adds	r3, #8
 800802c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800802e:	e03c      	b.n	80080aa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008036:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008038:	e037      	b.n	80080aa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800803a:	7efb      	ldrb	r3, [r7, #27]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d002      	beq.n	8008046 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8008040:	7ebb      	ldrb	r3, [r7, #26]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d106      	bne.n	8008054 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800804c:	3334      	adds	r3, #52	; 0x34
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8008052:	e02a      	b.n	80080aa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800805a:	3330      	adds	r3, #48	; 0x30
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008060:	e023      	b.n	80080aa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8008062:	23f5      	movs	r3, #245	; 0xf5
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8008066:	f107 0308 	add.w	r3, r7, #8
 800806a:	461a      	mov	r2, r3
 800806c:	f248 0136 	movw	r1, #32822	; 0x8036
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 ff15 	bl	8009ea0 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	dd07      	ble.n	800808c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	22f5      	movs	r2, #245	; 0xf5
 8008080:	fb02 f303 	mul.w	r3, r2, r3
 8008084:	461a      	mov	r2, r3
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	4413      	add	r3, r2
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8008092:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	005b      	lsls	r3, r3, #1
 8008098:	69fa      	ldr	r2, [r7, #28]
 800809a:	4413      	add	r3, r2
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800809e:	e004      	b.n	80080aa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80080a0:	23f8      	movs	r3, #248	; 0xf8
 80080a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80080a6:	e000      	b.n	80080aa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 80080a8:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 80080aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d102      	bne.n	80080b8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080b6:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80080b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3730      	adds	r7, #48	; 0x30
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	019b      	lsls	r3, r3, #6
 80080da:	4a09      	ldr	r2, [pc, #36]	; (8008100 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 80080dc:	fba2 2303 	umull	r2, r3, r2, r3
 80080e0:	099b      	lsrs	r3, r3, #6
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	4413      	add	r3, r2
 80080e6:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80080e8:	68b9      	ldr	r1, [r7, #8]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fde5 	bl	8008cba <VL53L1_set_inter_measurement_period_ms>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 80080f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	10624dd3 	.word	0x10624dd3

08008104 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8008112:	f107 0308 	add.w	r3, r7, #8
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fdf6 	bl	8008d0a <VL53L1_get_inter_measurement_period_ms>
 800811e:	4603      	mov	r3, r0
 8008120:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	019b      	lsls	r3, r3, #6
 8008128:	4907      	ldr	r1, [pc, #28]	; (8008148 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800812a:	fba1 1303 	umull	r1, r3, r1, r3
 800812e:	099b      	lsrs	r3, r3, #6
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800813a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	10624dd3 	.word	0x10624dd3

0800814c <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	460b      	mov	r3, r1
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800815a:	2300      	movs	r3, #0
 800815c:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800815e:	897b      	ldrh	r3, [r7, #10]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <SetLimitValue+0x1e>
 8008164:	2b01      	cmp	r3, #1
 8008166:	d009      	beq.n	800817c <SetLimitValue+0x30>
 8008168:	e011      	b.n	800818e <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	0b9b      	lsrs	r3, r3, #14
 800816e:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8008170:	8abb      	ldrh	r3, [r7, #20]
 8008172:	4619      	mov	r1, r3
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f001 f974 	bl	8009462 <VL53L1_set_lite_sigma_threshold>
		break;
 800817a:	e00a      	b.n	8008192 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	0a5b      	lsrs	r3, r3, #9
 8008180:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8008182:	8abb      	ldrh	r3, [r7, #20]
 8008184:	4619      	mov	r1, r3
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f001 f995 	bl	80094b6 <VL53L1_set_lite_min_count_rate>
		break;
 800818c:	e001      	b.n	8008192 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800818e:	23fc      	movs	r3, #252	; 0xfc
 8008190:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008192:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	460b      	mov	r3, r1
 80081a8:	807b      	strh	r3, [r7, #2]
 80081aa:	4613      	mov	r3, r2
 80081ac:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80081b6:	887b      	ldrh	r3, [r7, #2]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d902      	bls.n	80081c2 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80081bc:	23fc      	movs	r3, #252	; 0xfc
 80081be:	73fb      	strb	r3, [r7, #15]
 80081c0:	e014      	b.n	80081ec <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 80081c2:	787b      	ldrb	r3, [r7, #1]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d102      	bne.n	80081ce <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60bb      	str	r3, [r7, #8]
 80081cc:	e006      	b.n	80081dc <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80081ce:	887b      	ldrh	r3, [r7, #2]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	33e0      	adds	r3, #224	; 0xe0
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80081dc:	887b      	ldrh	r3, [r7, #2]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff ffb2 	bl	800814c <SetLimitValue>
 80081e8:	4603      	mov	r3, r0
 80081ea:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 80081ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10c      	bne.n	800820e <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80081f4:	787b      	ldrb	r3, [r7, #1]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	bf14      	ite	ne
 80081fa:	2301      	movne	r3, #1
 80081fc:	2300      	moveq	r3, #0
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	887b      	ldrh	r3, [r7, #2]
 8008202:	4611      	mov	r1, r2
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	4413      	add	r3, r2
 8008208:	460a      	mov	r2, r1
 800820a:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800820e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800821a:	b480      	push	{r7}
 800821c:	b087      	sub	sp, #28
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	460b      	mov	r3, r1
 8008224:	607a      	str	r2, [r7, #4]
 8008226:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008228:	2300      	movs	r3, #0
 800822a:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800822c:	897b      	ldrh	r3, [r7, #10]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d905      	bls.n	800823e <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008232:	23fc      	movs	r3, #252	; 0xfc
 8008234:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	701a      	strb	r2, [r3, #0]
 800823c:	e008      	b.n	8008250 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800823e:	897b      	ldrh	r3, [r7, #10]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8008248:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	7dba      	ldrb	r2, [r7, #22]
 800824e:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008250:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008254:	4618      	mov	r0, r3
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr

0800825e <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b088      	sub	sp, #32
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	460b      	mov	r3, r1
 8008268:	607a      	str	r2, [r7, #4]
 800826a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800826c:	2300      	movs	r3, #0
 800826e:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008274:	897b      	ldrh	r3, [r7, #10]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <VL53L1_GetLimitCheckValue+0x22>
 800827a:	2b01      	cmp	r3, #1
 800827c:	d00c      	beq.n	8008298 <VL53L1_GetLimitCheckValue+0x3a>
 800827e:	e017      	b.n	80082b0 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8008280:	f107 0314 	add.w	r3, r7, #20
 8008284:	4619      	mov	r1, r3
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f001 f8d6 	bl	8009438 <VL53L1_get_lite_sigma_threshold>
 800828c:	4603      	mov	r3, r0
 800828e:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8008290:	8abb      	ldrh	r3, [r7, #20]
 8008292:	039b      	lsls	r3, r3, #14
 8008294:	61bb      	str	r3, [r7, #24]
		break;
 8008296:	e00d      	b.n	80082b4 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8008298:	f107 0316 	add.w	r3, r7, #22
 800829c:	4619      	mov	r1, r3
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f001 f8f4 	bl	800948c <VL53L1_get_lite_min_count_rate>
 80082a4:	4603      	mov	r3, r0
 80082a6:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80082a8:	8afb      	ldrh	r3, [r7, #22]
 80082aa:	025b      	lsls	r3, r3, #9
 80082ac:	61bb      	str	r3, [r7, #24]
		break;
 80082ae:	e001      	b.n	80082b4 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80082b0:	23fc      	movs	r3, #252	; 0xfc
 80082b2:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80082b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d123      	bne.n	8008304 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d110      	bne.n	80082e4 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80082c2:	897b      	ldrh	r3, [r7, #10]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	33e0      	adds	r3, #224	; 0xe0
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80082d6:	897b      	ldrh	r3, [r7, #10]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 80082e2:	e00f      	b.n	8008304 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80082ea:	897b      	ldrh	r3, [r7, #10]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	33e0      	adds	r3, #224	; 0xe0
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80082f8:	897b      	ldrh	r3, [r7, #10]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	4413      	add	r3, r2
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8008304:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008308:	4618      	mov	r0, r3
 800830a:	3720      	adds	r7, #32
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	460b      	mov	r3, r1
 800831a:	607a      	str	r2, [r7, #4]
 800831c:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800831e:	2300      	movs	r3, #0
 8008320:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	4619      	mov	r1, r3
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 fdb6 	bl	8008e9a <VL53L1_get_sequence_config_bit>
 800832e:	4603      	mov	r3, r0
 8008330:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8008332:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008348:	2300      	movs	r3, #0
 800834a:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	789b      	ldrb	r3, [r3, #2]
 8008350:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8008352:	7dbb      	ldrb	r3, [r7, #22]
 8008354:	2b40      	cmp	r3, #64	; 0x40
 8008356:	d002      	beq.n	800835e <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fa69 	bl	8008830 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8008364:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 8008366:	7d7b      	ldrb	r3, [r7, #21]
 8008368:	2b63      	cmp	r3, #99	; 0x63
 800836a:	dc12      	bgt.n	8008392 <VL53L1_StartMeasurement+0x52>
 800836c:	2b62      	cmp	r3, #98	; 0x62
 800836e:	da0d      	bge.n	800838c <VL53L1_StartMeasurement+0x4c>
 8008370:	2b05      	cmp	r3, #5
 8008372:	dc0e      	bgt.n	8008392 <VL53L1_StartMeasurement+0x52>
 8008374:	2b04      	cmp	r3, #4
 8008376:	da09      	bge.n	800838c <VL53L1_StartMeasurement+0x4c>
 8008378:	2b02      	cmp	r3, #2
 800837a:	dc02      	bgt.n	8008382 <VL53L1_StartMeasurement+0x42>
 800837c:	2b00      	cmp	r3, #0
 800837e:	da05      	bge.n	800838c <VL53L1_StartMeasurement+0x4c>
 8008380:	e007      	b.n	8008392 <VL53L1_StartMeasurement+0x52>
 8008382:	2b03      	cmp	r3, #3
 8008384:	d105      	bne.n	8008392 <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]
		break;
 800838a:	e004      	b.n	8008396 <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800838c:	23f2      	movs	r3, #242	; 0xf2
 800838e:	75fb      	strb	r3, [r7, #23]
		break;
 8008390:	e001      	b.n	8008396 <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8008392:	23fd      	movs	r3, #253	; 0xfd
 8008394:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 8008396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d11f      	bne.n	80083de <VL53L1_StartMeasurement+0x9e>
 800839e:	7dbb      	ldrb	r3, [r7, #22]
 80083a0:	2b40      	cmp	r3, #64	; 0x40
 80083a2:	d11c      	bne.n	80083de <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80083a4:	f107 0310 	add.w	r3, r7, #16
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff fdde 	bl	8007f6c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80083b0:	4603      	mov	r3, r0
 80083b2:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	4a17      	ldr	r2, [pc, #92]	; (8008414 <VL53L1_StartMeasurement+0xd4>)
 80083b8:	fba2 2303 	umull	r2, r3, r2, r3
 80083bc:	099b      	lsrs	r3, r3, #6
 80083be:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80083c0:	f107 030c 	add.w	r3, r7, #12
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff fe9c 	bl	8008104 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80083cc:	4603      	mov	r3, r0
 80083ce:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	1d1a      	adds	r2, r3, #4
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d901      	bls.n	80083de <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80083da:	23fc      	movs	r3, #252	; 0xfc
 80083dc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 80083de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d107      	bne.n	80083f6 <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 80083e6:	7dbb      	ldrb	r3, [r7, #22]
 80083e8:	2206      	movs	r2, #6
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 f897 	bl	8009520 <VL53L1_init_and_start_range>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 80083f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d103      	bne.n	8008406 <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2204      	movs	r2, #4
 8008402:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8008406:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	10624dd3 	.word	0x10624dd3

08008418 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008420:	2300      	movs	r3, #0
 8008422:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	789b      	ldrb	r3, [r3, #2]
 8008428:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f001 fc04 	bl	8009c3c <VL53L1_clear_interrupt_and_enable_next_range>
 8008434:	4603      	mov	r3, r0
 8008436:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8008438:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800844c:	2300      	movs	r3, #0
 800844e:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 8008450:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f004 fb77 	bl	800cb48 <VL53L1_poll_for_range_completion>
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800845e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800846c:	b480      	push	{r7}
 800846e:	b08d      	sub	sp, #52	; 0x34
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	603a      	str	r2, [r7, #0]
 8008476:	71fb      	strb	r3, [r7, #7]
 8008478:	460b      	mov	r3, r1
 800847a:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800847c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008480:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 8008482:	231e      	movs	r3, #30
 8008484:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8008486:	4b32      	ldr	r3, [pc, #200]	; (8008550 <ComputeRQL+0xe4>)
 8008488:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800848a:	4b32      	ldr	r3, [pc, #200]	; (8008554 <ComputeRQL+0xe8>)
 800848c:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800848e:	f641 139a 	movw	r3, #6554	; 0x199a
 8008492:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d103      	bne.n	80084a2 <ComputeRQL+0x36>
		returnvalue = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084a0:	e04f      	b.n	8008542 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 80084a2:	79bb      	ldrb	r3, [r7, #6]
 80084a4:	2b07      	cmp	r3, #7
 80084a6:	d103      	bne.n	80084b0 <ComputeRQL+0x44>
		returnvalue = 50;
 80084a8:	2332      	movs	r3, #50	; 0x32
 80084aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084ae:	e048      	b.n	8008542 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80084b6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80084ba:	429a      	cmp	r2, r3
 80084bc:	dd03      	ble.n	80084c6 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 80084be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084c0:	041b      	lsls	r3, r3, #16
 80084c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084c4:	e007      	b.n	80084d6 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80084cc:	461a      	mov	r2, r3
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	fb02 f303 	mul.w	r3, r2, r3
 80084d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d020      	beq.n	800851e <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80084e0:	461a      	mov	r2, r3
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	fb02 f303 	mul.w	r3, r2, r3
 80084e8:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	085b      	lsrs	r3, r3, #1
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	4413      	add	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fc:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	041b      	lsls	r3, r3, #16
 8008502:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	429a      	cmp	r2, r3
 800850a:	d804      	bhi.n	8008516 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800850c:	69fa      	ldr	r2, [r7, #28]
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
 8008514:	e006      	b.n	8008524 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8008516:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800851a:	62bb      	str	r3, [r7, #40]	; 0x28
 800851c:	e002      	b.n	8008524 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800851e:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8008522:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	0c1b      	lsrs	r3, r3, #16
 8008528:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800852a:	7bfb      	ldrb	r3, [r7, #15]
 800852c:	2b32      	cmp	r3, #50	; 0x32
 800852e:	d905      	bls.n	800853c <ComputeRQL+0xd0>
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	2b64      	cmp	r3, #100	; 0x64
 8008534:	bf28      	it	cs
 8008536:	2364      	movcs	r3, #100	; 0x64
 8008538:	b2db      	uxtb	r3, r3
 800853a:	e000      	b.n	800853e <ComputeRQL+0xd2>
 800853c:	2332      	movs	r3, #50	; 0x32
 800853e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8008542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008546:	4618      	mov	r0, r3
 8008548:	3734      	adds	r7, #52	; 0x34
 800854a:	46bd      	mov	sp, r7
 800854c:	bc80      	pop	{r7}
 800854e:	4770      	bx	lr
 8008550:	0075b333 	.word	0x0075b333
 8008554:	0030cccd 	.word	0x0030cccd

08008558 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	4603      	mov	r3, r0
 8008560:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	3b04      	subs	r3, #4
 8008566:	2b0f      	cmp	r3, #15
 8008568:	d83d      	bhi.n	80085e6 <ConvertStatusLite+0x8e>
 800856a:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <ConvertStatusLite+0x18>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	080085c3 	.word	0x080085c3
 8008574:	080085bd 	.word	0x080085bd
 8008578:	080085c9 	.word	0x080085c9
 800857c:	080085cf 	.word	0x080085cf
 8008580:	080085db 	.word	0x080085db
 8008584:	080085e1 	.word	0x080085e1
 8008588:	080085e7 	.word	0x080085e7
 800858c:	080085e7 	.word	0x080085e7
 8008590:	080085d5 	.word	0x080085d5
 8008594:	080085e7 	.word	0x080085e7
 8008598:	080085e7 	.word	0x080085e7
 800859c:	080085e7 	.word	0x080085e7
 80085a0:	080085e7 	.word	0x080085e7
 80085a4:	080085e7 	.word	0x080085e7
 80085a8:	080085b1 	.word	0x080085b1
 80085ac:	080085b7 	.word	0x080085b7
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80085b0:	230a      	movs	r3, #10
 80085b2:	73fb      	strb	r3, [r7, #15]
		break;
 80085b4:	e019      	b.n	80085ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80085b6:	2306      	movs	r3, #6
 80085b8:	73fb      	strb	r3, [r7, #15]
		break;
 80085ba:	e016      	b.n	80085ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80085bc:	2304      	movs	r3, #4
 80085be:	73fb      	strb	r3, [r7, #15]
		break;
 80085c0:	e013      	b.n	80085ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80085c2:	2302      	movs	r3, #2
 80085c4:	73fb      	strb	r3, [r7, #15]
		break;
 80085c6:	e010      	b.n	80085ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80085c8:	2301      	movs	r3, #1
 80085ca:	73fb      	strb	r3, [r7, #15]
		break;
 80085cc:	e00d      	b.n	80085ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80085ce:	2307      	movs	r3, #7
 80085d0:	73fb      	strb	r3, [r7, #15]
		break;
 80085d2:	e00a      	b.n	80085ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80085d4:	2309      	movs	r3, #9
 80085d6:	73fb      	strb	r3, [r7, #15]
		break;
 80085d8:	e007      	b.n	80085ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80085da:	2303      	movs	r3, #3
 80085dc:	73fb      	strb	r3, [r7, #15]
		break;
 80085de:	e004      	b.n	80085ea <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73fb      	strb	r3, [r7, #15]
		break;
 80085e4:	e001      	b.n	80085ea <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80085e6:	23ff      	movs	r3, #255	; 0xff
 80085e8:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc80      	pop	{r7}
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop

080085f8 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08c      	sub	sp, #48	; 0x30
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	607b      	str	r3, [r7, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	72fb      	strb	r3, [r7, #11]
 8008606:	4613      	mov	r3, r2
 8008608:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800860a:	2300      	movs	r3, #0
 800860c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800861e:	f003 031f 	and.w	r3, r3, #31
 8008622:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8008626:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800862a:	7afb      	ldrb	r3, [r7, #11]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff ff1c 	bl	800846c <ComputeRQL>
 8008634:	4603      	mov	r3, r0
 8008636:	461a      	mov	r2, r3
 8008638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863a:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008640:	025b      	lsls	r3, r3, #9
 8008642:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008648:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800864e:	025b      	lsls	r3, r3, #9
 8008650:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8008652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008656:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008664:	025b      	lsls	r3, r3, #9
 8008666:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8008668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866a:	6a3a      	ldr	r2, [r7, #32]
 800866c:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8008674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008676:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	2200      	movs	r2, #0
 800867c:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800867e:	7abb      	ldrb	r3, [r7, #10]
 8008680:	2b11      	cmp	r3, #17
 8008682:	d009      	beq.n	8008698 <SetSimpleData+0xa0>
 8008684:	2b11      	cmp	r3, #17
 8008686:	dc0f      	bgt.n	80086a8 <SetSimpleData+0xb0>
 8008688:	2b03      	cmp	r3, #3
 800868a:	dc02      	bgt.n	8008692 <SetSimpleData+0x9a>
 800868c:	2b00      	cmp	r3, #0
 800868e:	dc03      	bgt.n	8008698 <SetSimpleData+0xa0>
 8008690:	e00a      	b.n	80086a8 <SetSimpleData+0xb0>
 8008692:	2b0d      	cmp	r3, #13
 8008694:	d004      	beq.n	80086a0 <SetSimpleData+0xa8>
 8008696:	e007      	b.n	80086a8 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8008698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869a:	2205      	movs	r2, #5
 800869c:	76da      	strb	r2, [r3, #27]
		break;
 800869e:	e006      	b.n	80086ae <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	220d      	movs	r2, #13
 80086a4:	76da      	strb	r2, [r3, #27]
		break;
 80086a6:	e002      	b.n	80086ae <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80086a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086aa:	2200      	movs	r2, #0
 80086ac:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	7edb      	ldrb	r3, [r3, #27]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d108      	bne.n	80086c8 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 80086b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7ff ff4c 	bl	8008558 <ConvertStatusLite>
 80086c0:	4603      	mov	r3, r0
 80086c2:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80086cc:	025b      	lsls	r3, r3, #9
 80086ce:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6a3a      	ldr	r2, [r7, #32]
 80086d4:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086dc:	025b      	lsls	r3, r3, #9
 80086de:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a3a      	ldr	r2, [r7, #32]
 80086e4:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 80086e8:	f107 0314 	add.w	r3, r7, #20
 80086ec:	461a      	mov	r2, r3
 80086ee:	2100      	movs	r1, #0
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff fdb4 	bl	800825e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 80086f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80086fa:	2b06      	cmp	r3, #6
 80086fc:	bf0c      	ite	eq
 80086fe:	2301      	moveq	r3, #1
 8008700:	2300      	movne	r3, #0
 8008702:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8008704:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8008706:	f107 0319 	add.w	r3, r7, #25
 800870a:	461a      	mov	r2, r3
 800870c:	2100      	movs	r1, #0
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff fd83 	bl	800821a <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8008714:	7e7b      	ldrb	r3, [r7, #25]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d104      	bne.n	8008724 <SetSimpleData+0x12c>
 800871a:	7ffb      	ldrb	r3, [r7, #31]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <SetSimpleData+0x12c>
 8008720:	2301      	movs	r3, #1
 8008722:	e000      	b.n	8008726 <SetSimpleData+0x12e>
 8008724:	2300      	movs	r3, #0
 8008726:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	7fba      	ldrb	r2, [r7, #30]
 800872c:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8008730:	f107 0314 	add.w	r3, r7, #20
 8008734:	461a      	mov	r2, r3
 8008736:	2101      	movs	r1, #1
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff fd90 	bl	800825e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800873e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008742:	2b04      	cmp	r3, #4
 8008744:	bf0c      	ite	eq
 8008746:	2301      	moveq	r3, #1
 8008748:	2300      	movne	r3, #0
 800874a:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800874c:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800874e:	f107 0319 	add.w	r3, r7, #25
 8008752:	461a      	mov	r2, r3
 8008754:	2101      	movs	r1, #1
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f7ff fd5f 	bl	800821a <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800875c:	7e7b      	ldrb	r3, [r7, #25]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d104      	bne.n	800876c <SetSimpleData+0x174>
 8008762:	7f7b      	ldrb	r3, [r7, #29]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d101      	bne.n	800876c <SetSimpleData+0x174>
 8008768:	2301      	movs	r3, #1
 800876a:	e000      	b.n	800876e <SetSimpleData+0x176>
 800876c:	2300      	movs	r3, #0
 800876e:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	7fba      	ldrb	r2, [r7, #30]
 8008774:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	8b1b      	ldrh	r3, [r3, #24]
 800877c:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	7edb      	ldrb	r3, [r3, #27]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d110      	bne.n	80087a8 <SetSimpleData+0x1b0>
 8008786:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800878a:	2b00      	cmp	r3, #0
 800878c:	da0c      	bge.n	80087a8 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800878e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8008792:	4b08      	ldr	r3, [pc, #32]	; (80087b4 <SetSimpleData+0x1bc>)
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	429a      	cmp	r2, r3
 8008798:	da03      	bge.n	80087a2 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	220e      	movs	r2, #14
 800879e:	76da      	strb	r2, [r3, #27]
 80087a0:	e002      	b.n	80087a8 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80087a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a4:	2200      	movs	r2, #0
 80087a6:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 80087a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3730      	adds	r7, #48	; 0x30
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	20000040 	.word	0x20000040

080087b8 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b0a8      	sub	sp, #160	; 0xa0
 80087bc:	af02      	add	r7, sp, #8
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 80087c8:	f107 0308 	add.w	r3, r7, #8
 80087cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 80087d0:	221c      	movs	r2, #28
 80087d2:	21ff      	movs	r1, #255	; 0xff
 80087d4:	6838      	ldr	r0, [r7, #0]
 80087d6:	f004 ffd1 	bl	800d77c <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 80087da:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80087de:	2102      	movs	r1, #2
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f001 f9bb 	bl	8009b5c <VL53L1_get_device_results>
 80087e6:	4603      	mov	r3, r0
 80087e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 80087ec:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d117      	bne.n	8008824 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 80087f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087f8:	789a      	ldrb	r2, [r3, #2]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 80087fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008802:	3304      	adds	r3, #4
 8008804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 8008808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800880c:	78da      	ldrb	r2, [r3, #3]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008816:	2101      	movs	r1, #1
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff feed 	bl	80085f8 <SetSimpleData>
 800881e:	4603      	mov	r3, r0
 8008820:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008824:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8008828:	4618      	mov	r0, r3
 800882a:	3798      	adds	r7, #152	; 0x98
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b0c6      	sub	sp, #280	; 0x118
 8008834:	af00      	add	r7, sp, #0
 8008836:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800883a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800883e:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008840:	2300      	movs	r3, #0
 8008842:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800884c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10b      	bne.n	800886c <VL53L1_LoadPatch+0x3c>
		status = VL53L1_WrByte(
 8008854:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008858:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800885c:	2200      	movs	r2, #0
 800885e:	2185      	movs	r1, #133	; 0x85
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	f004 fa4b 	bl	800ccfc <VL53L1_WrByte>
 8008866:	4603      	mov	r3, r0
 8008868:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 800886c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008870:	2b00      	cmp	r3, #0
 8008872:	d106      	bne.n	8008882 <VL53L1_LoadPatch+0x52>
		VL53L1_enable_powerforce(Dev);
 8008874:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008878:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	f002 fd44 	bl	800b30a <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 8008882:	4b7e      	ldr	r3, [pc, #504]	; (8008a7c <VL53L1_LoadPatch+0x24c>)
 8008884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008886:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	switch(patch_tuning) {
 800888a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800888e:	2b03      	cmp	r3, #3
 8008890:	d81a      	bhi.n	80088c8 <VL53L1_LoadPatch+0x98>
 8008892:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <VL53L1_LoadPatch+0x68>)
 8008894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008898:	080088a9 	.word	0x080088a9
 800889c:	080088b1 	.word	0x080088b1
 80088a0:	080088b9 	.word	0x080088b9
 80088a4:	080088c1 	.word	0x080088c1
	case 0:
		patch_power = 0x00;
 80088a8:	2300      	movs	r3, #0
 80088aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80088ae:	e00e      	b.n	80088ce <VL53L1_LoadPatch+0x9e>
	case 1:
		patch_power = 0x10;
 80088b0:	2310      	movs	r3, #16
 80088b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80088b6:	e00a      	b.n	80088ce <VL53L1_LoadPatch+0x9e>
	case 2:
		patch_power = 0x20;
 80088b8:	2320      	movs	r3, #32
 80088ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80088be:	e006      	b.n	80088ce <VL53L1_LoadPatch+0x9e>
	case 3:
		patch_power = 0x40;
 80088c0:	2340      	movs	r3, #64	; 0x40
 80088c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80088c6:	e002      	b.n	80088ce <VL53L1_LoadPatch+0x9e>
	default:
		patch_power = 0x00;
 80088c8:	2300      	movs	r3, #0
 80088ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 80088ce:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d134      	bne.n	8008940 <VL53L1_LoadPatch+0x110>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 80088d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80088da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80088de:	2229      	movs	r2, #41	; 0x29
 80088e0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80088e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80088e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80088ea:	22c9      	movs	r2, #201	; 0xc9
 80088ec:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80088ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80088f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80088f6:	220e      	movs	r2, #14
 80088f8:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80088fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80088fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008902:	2240      	movs	r2, #64	; 0x40
 8008904:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8008906:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800890a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800890e:	2228      	movs	r2, #40	; 0x28
 8008910:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8008912:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008916:	b2da      	uxtb	r2, r3
 8008918:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800891c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008920:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 8008922:	f107 020c 	add.w	r2, r7, #12
 8008926:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800892a:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800892e:	2306      	movs	r3, #6
 8008930:	f240 4176 	movw	r1, #1142	; 0x476
 8008934:	6800      	ldr	r0, [r0, #0]
 8008936:	f004 f975 	bl	800cc24 <VL53L1_WriteMulti>
 800893a:	4603      	mov	r3, r0
 800893c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 8008940:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008944:	2b00      	cmp	r3, #0
 8008946:	d132      	bne.n	80089ae <VL53L1_LoadPatch+0x17e>
		comms_buffer[0] = 0x03;
 8008948:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800894c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008950:	2203      	movs	r2, #3
 8008952:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8008954:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008958:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800895c:	226d      	movs	r2, #109	; 0x6d
 800895e:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8008960:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008964:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008968:	2203      	movs	r2, #3
 800896a:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800896c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008970:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008974:	226f      	movs	r2, #111	; 0x6f
 8008976:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8008978:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800897c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008980:	2207      	movs	r2, #7
 8008982:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8008984:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008988:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800898c:	2229      	movs	r2, #41	; 0x29
 800898e:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 8008990:	f107 020c 	add.w	r2, r7, #12
 8008994:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008998:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800899c:	2306      	movs	r3, #6
 800899e:	f240 4196 	movw	r1, #1174	; 0x496
 80089a2:	6800      	ldr	r0, [r0, #0]
 80089a4:	f004 f93e 	bl	800cc24 <VL53L1_WriteMulti>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 80089ae:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d11a      	bne.n	80089ec <VL53L1_LoadPatch+0x1bc>
		comms_buffer[0] = 0x00;
 80089b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80089ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80089be:	2200      	movs	r2, #0
 80089c0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80089c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80089c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80089ca:	2207      	movs	r2, #7
 80089cc:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 80089ce:	f107 020c 	add.w	r2, r7, #12
 80089d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80089d6:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80089da:	2302      	movs	r3, #2
 80089dc:	f240 4172 	movw	r1, #1138	; 0x472
 80089e0:	6800      	ldr	r0, [r0, #0]
 80089e2:	f004 f91f 	bl	800cc24 <VL53L1_WriteMulti>
 80089e6:	4603      	mov	r3, r0
 80089e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 80089ec:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d11a      	bne.n	8008a2a <VL53L1_LoadPatch+0x1fa>
		comms_buffer[0] = 0x00;
 80089f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80089f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80089fc:	2200      	movs	r2, #0
 80089fe:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8008a00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a08:	2207      	movs	r2, #7
 8008a0a:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8008a0c:	f107 020c 	add.w	r2, r7, #12
 8008a10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a14:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8008a18:	2302      	movs	r3, #2
 8008a1a:	f240 4174 	movw	r1, #1140	; 0x474
 8008a1e:	6800      	ldr	r0, [r0, #0]
 8008a20:	f004 f900 	bl	800cc24 <VL53L1_WriteMulti>
 8008a24:	4603      	mov	r3, r0
 8008a26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 8008a2a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10c      	bne.n	8008a4c <VL53L1_LoadPatch+0x21c>
		status = VL53L1_WrByte(
 8008a32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8008a40:	6818      	ldr	r0, [r3, #0]
 8008a42:	f004 f95b 	bl	800ccfc <VL53L1_WrByte>
 8008a46:	4603      	mov	r3, r0
 8008a48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 8008a4c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10b      	bne.n	8008a6c <VL53L1_LoadPatch+0x23c>
		status = VL53L1_WrByte(
 8008a54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a58:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	2185      	movs	r1, #133	; 0x85
 8008a60:	6818      	ldr	r0, [r3, #0]
 8008a62:	f004 f94b 	bl	800ccfc <VL53L1_WrByte>
 8008a66:	4603      	mov	r3, r0
 8008a68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 8008a6c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000040 	.word	0x20000040

08008a80 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8008a80:	b5b0      	push	{r4, r5, r7, lr}
 8008a82:	b088      	sub	sp, #32
 8008a84:	af04      	add	r7, sp, #16
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8008a94:	2162      	movs	r1, #98	; 0x62
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f002 f8fb 	bl	800ac92 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ac0:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008ac8:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8008ad0:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2264      	movs	r2, #100	; 0x64
 8008ad6:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008ade:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f240 72db 	movw	r2, #2011	; 0x7db
 8008aee:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f002 f8b2 	bl	800ac5c <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d008      	beq.n	8008b10 <VL53L1_data_init+0x90>
 8008afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d104      	bne.n	8008b10 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f857 	bl	8008bba <VL53L1_read_p2p_data>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 fbe6 	bl	800a2e8 <VL53L1_init_refspadchar_config_struct>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008b26:	4618      	mov	r0, r3
 8008b28:	f001 fc01 	bl	800a32e <VL53L1_init_ssc_config_struct>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f103 0242 	add.w	r2, r3, #66	; 0x42
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4610      	mov	r0, r2
 8008b40:	f001 fc15 	bl	800a36e <VL53L1_init_xtalk_config_struct>
 8008b44:	4603      	mov	r3, r0
 8008b46:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 fc6f 	bl	800a432 <VL53L1_init_offset_cal_config_struct>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	33a4      	adds	r3, #164	; 0xa4
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f001 fc8e 	bl	800a47e <VL53L1_init_tuning_parm_storage_struct>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8008b66:	2120      	movs	r1, #32
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fcb9 	bl	80094e0 <VL53L1_set_vhv_loopbound>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8008b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d116      	bne.n	8008ba8 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	7858      	ldrb	r0, [r3, #1]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	8b1c      	ldrh	r4, [r3, #24]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	689d      	ldr	r5, [r3, #8]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	6912      	ldr	r2, [r2, #16]
 8008b8e:	68b9      	ldr	r1, [r7, #8]
 8008b90:	6949      	ldr	r1, [r1, #20]
 8008b92:	9102      	str	r1, [sp, #8]
 8008b94:	9201      	str	r2, [sp, #4]
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	462b      	mov	r3, r5
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	4601      	mov	r1, r0
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fad4 	bl	800914c <VL53L1_set_preset_mode>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f002 fde3 	bl	800b774 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8008bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bdb0      	pop	{r4, r5, r7, pc}

08008bba <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8008bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d108      	bne.n	8008be4 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f002 ff61 	bl	800baa2 <VL53L1_get_static_nvm_managed>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8008be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d107      	bne.n	8008bfc <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	3342      	adds	r3, #66	; 0x42
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f003 f893 	bl	800bd1e <VL53L1_get_customer_nvm_managed>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8008bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d115      	bne.n	8008c30 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f003 ff44 	bl	800ca9a <VL53L1_get_nvm_copy_data>
 8008c12:	4603      	mov	r3, r0
 8008c14:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8008c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d108      	bne.n	8008c30 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	33f0      	adds	r3, #240	; 0xf0
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	f002 f991 	bl	800af52 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8008c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d109      	bne.n	8008c4c <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8008c3e:	461a      	mov	r2, r3
 8008c40:	21de      	movs	r1, #222	; 0xde
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f004 f8b8 	bl	800cdb8 <VL53L1_RdWord>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8008c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c56:	d204      	bcs.n	8008c62 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8008c5e:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8008c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d107      	bne.n	8008c7a <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	339e      	adds	r3, #158	; 0x9e
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f98d 	bl	8008f90 <VL53L1_get_mode_mitigation_roi>
 8008c76:	4603      	mov	r3, r0
 8008c78:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d114      	bne.n	8008cae <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10f      	bne.n	8008cae <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8008c94:	011b      	lsls	r3, r3, #4
 8008c96:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8008ca4:	011b      	lsls	r3, r3, #4
 8008ca6:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8008cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008cd6:	23f1      	movs	r3, #241	; 0xf1
 8008cd8:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8008cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10c      	bne.n	8008cfc <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8008cee:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8008cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bc80      	pop	{r7}
 8008d08:	4770      	bx	lr

08008d0a <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008d26:	23f1      	movs	r3, #241	; 0xf1
 8008d28:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8008d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d109      	bne.n	8008d46 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8008d3e:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8008d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bc80      	pop	{r7}
 8008d52:	4770      	bx	lr

08008d54 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008d74:	23f1      	movs	r3, #241	; 0xf1
 8008d76:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8008d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d11b      	bne.n	8008db8 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 8008da4:	9201      	str	r2, [sp, #4]
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	460b      	mov	r3, r1
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	68b8      	ldr	r0, [r7, #8]
 8008db0:	f002 fc15 	bl	800b5de <VL53L1_calc_timeout_register_values>
 8008db4:	4603      	mov	r3, r0
 8008db6:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8008db8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008dec:	23f1      	movs	r3, #241	; 0xf1
 8008dee:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8008df0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d14a      	bne.n	8008e8e <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 8008e04:	4619      	mov	r1, r3
 8008e06:	4610      	mov	r0, r2
 8008e08:	f002 fa91 	bl	800b32e <VL53L1_calc_macro_period_us>
 8008e0c:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 8008e14:	6979      	ldr	r1, [r7, #20]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f002 fb48 	bl	800b4ac <VL53L1_calc_timeout_us>
 8008e1c:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 8008e28:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8008e2a:	8a7b      	ldrh	r3, [r7, #18]
 8008e2c:	021b      	lsls	r3, r3, #8
 8008e2e:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8008e36:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8008e38:	4413      	add	r3, r2
 8008e3a:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8008e3c:	8a7b      	ldrh	r3, [r7, #18]
 8008e3e:	6979      	ldr	r1, [r7, #20]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f002 fb73 	bl	800b52c <VL53L1_calc_decoded_timeout_us>
 8008e46:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 8008e52:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8008e54:	8a7b      	ldrh	r3, [r7, #18]
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8008e60:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8008e62:	4413      	add	r3, r2
 8008e64:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8008e66:	8a7b      	ldrh	r3, [r7, #18]
 8008e68:	6979      	ldr	r1, [r7, #20]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f002 fb5e 	bl	800b52c <VL53L1_calc_decoded_timeout_us>
 8008e70:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8008e8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b087      	sub	sp, #28
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	60f8      	str	r0, [r7, #12]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	607a      	str	r2, [r7, #4]
 8008ea6:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8008eb4:	7afb      	ldrb	r3, [r7, #11]
 8008eb6:	2b07      	cmp	r3, #7
 8008eb8:	d81c      	bhi.n	8008ef4 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8008eba:	7afb      	ldrb	r3, [r7, #11]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d004      	beq.n	8008eca <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8008ec0:	7afb      	ldrb	r3, [r7, #11]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec8:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 8008ed0:	7dbb      	ldrb	r3, [r7, #22]
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8008eda:	7afb      	ldrb	r3, [r7, #11]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00b      	beq.n	8008ef8 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	7afb      	ldrb	r3, [r7, #11]
 8008ee8:	fa42 f303 	asr.w	r3, r2, r3
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	e001      	b.n	8008ef8 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8008ef4:	23fc      	movs	r3, #252	; 0xfc
 8008ef6:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8008ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	371c      	adds	r7, #28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bc80      	pop	{r7}
 8008f04:	4770      	bx	lr

08008f06 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	7858      	ldrb	r0, [r3, #1]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	7819      	ldrb	r1, [r3, #0]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 8008f26:	461a      	mov	r2, r3
 8008f28:	f002 fbd2 	bl	800b6d0 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	7898      	ldrb	r0, [r3, #2]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	78d9      	ldrb	r1, [r3, #3]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f002 fc05 	bl	800b74a <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8008f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	3301      	adds	r3, #1
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	f002 fcb6 	bl	800b8dc <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	1c99      	adds	r1, r3, #2
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	3303      	adds	r3, #3
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f002 fbcc 	bl	800b71c <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8008f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 8008fb4:	f107 020e 	add.w	r2, r7, #14
 8008fb8:	f107 010d 	add.w	r1, r7, #13
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f002 fc8d 	bl	800b8dc <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8008fc2:	7bba      	ldrb	r2, [r7, #14]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8008fc8:	7b7a      	ldrb	r2, [r7, #13]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 8008fd4:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	091b      	lsrs	r3, r3, #4
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
 8008fe2:	f003 030f 	and.w	r3, r3, #15
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8008fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	607a      	str	r2, [r7, #4]
 8009002:	603b      	str	r3, [r7, #0]
 8009004:	460b      	mov	r3, r1
 8009006:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009008:	2300      	movs	r3, #0
 800900a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8009010:	7afb      	ldrb	r3, [r7, #11]
 8009012:	3b01      	subs	r3, #1
 8009014:	2b25      	cmp	r3, #37	; 0x25
 8009016:	f200 808e 	bhi.w	8009136 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800901a:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	080090b9 	.word	0x080090b9
 8009024:	080090b9 	.word	0x080090b9
 8009028:	080090b9 	.word	0x080090b9
 800902c:	080090b9 	.word	0x080090b9
 8009030:	080090b9 	.word	0x080090b9
 8009034:	080090e3 	.word	0x080090e3
 8009038:	080090e3 	.word	0x080090e3
 800903c:	080090e3 	.word	0x080090e3
 8009040:	08009137 	.word	0x08009137
 8009044:	08009137 	.word	0x08009137
 8009048:	08009137 	.word	0x08009137
 800904c:	08009137 	.word	0x08009137
 8009050:	08009137 	.word	0x08009137
 8009054:	08009137 	.word	0x08009137
 8009058:	08009137 	.word	0x08009137
 800905c:	08009137 	.word	0x08009137
 8009060:	080090b9 	.word	0x080090b9
 8009064:	080090e3 	.word	0x080090e3
 8009068:	08009137 	.word	0x08009137
 800906c:	08009137 	.word	0x08009137
 8009070:	08009137 	.word	0x08009137
 8009074:	08009137 	.word	0x08009137
 8009078:	08009137 	.word	0x08009137
 800907c:	08009137 	.word	0x08009137
 8009080:	08009137 	.word	0x08009137
 8009084:	08009137 	.word	0x08009137
 8009088:	08009137 	.word	0x08009137
 800908c:	08009137 	.word	0x08009137
 8009090:	08009137 	.word	0x08009137
 8009094:	08009137 	.word	0x08009137
 8009098:	08009137 	.word	0x08009137
 800909c:	08009137 	.word	0x08009137
 80090a0:	08009137 	.word	0x08009137
 80090a4:	08009137 	.word	0x08009137
 80090a8:	08009137 	.word	0x08009137
 80090ac:	0800910d 	.word	0x0800910d
 80090b0:	0800910d 	.word	0x0800910d
 80090b4:	0800910d 	.word	0x0800910d
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	601a      	str	r2, [r3, #0]
	break;
 80090e0:	e02c      	b.n	800913c <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	601a      	str	r2, [r3, #0]
	break;
 800910a:	e017      	b.n	800913c <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	601a      	str	r2, [r3, #0]
	break;
 8009134:	e002      	b.n	800913c <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009136:	23fc      	movs	r3, #252	; 0xfc
 8009138:	75fb      	strb	r3, [r7, #23]
		break;
 800913a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800913c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009140:	4618      	mov	r0, r3
 8009142:	371c      	adds	r7, #28
 8009144:	46bd      	mov	sp, r7
 8009146:	bc80      	pop	{r7}
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop

0800914c <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b092      	sub	sp, #72	; 0x48
 8009150:	af04      	add	r7, sp, #16
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	607b      	str	r3, [r7, #4]
 8009156:	460b      	mov	r3, r1
 8009158:	72fb      	strb	r3, [r7, #11]
 800915a:	4613      	mov	r3, r2
 800915c:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800915e:	2300      	movs	r3, #0
 8009160:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800916e:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009176:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8009178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800917e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8009186:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8009188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800918e:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8009190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009192:	33a4      	adds	r3, #164	; 0xa4
 8009194:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800919c:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	7afa      	ldrb	r2, [r7, #11]
 80091a2:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091a8:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091ae:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091b4:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 80091b6:	2103      	movs	r1, #3
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f001 fd6a 	bl	800ac92 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 80091be:	7afb      	ldrb	r3, [r7, #11]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	2b25      	cmp	r3, #37	; 0x25
 80091c4:	f200 810c 	bhi.w	80093e0 <VL53L1_set_preset_mode+0x294>
 80091c8:	a201      	add	r2, pc, #4	; (adr r2, 80091d0 <VL53L1_set_preset_mode+0x84>)
 80091ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ce:	bf00      	nop
 80091d0:	08009269 	.word	0x08009269
 80091d4:	08009285 	.word	0x08009285
 80091d8:	080092a1 	.word	0x080092a1
 80091dc:	080092bd 	.word	0x080092bd
 80091e0:	080092d9 	.word	0x080092d9
 80091e4:	080092f5 	.word	0x080092f5
 80091e8:	08009311 	.word	0x08009311
 80091ec:	0800932d 	.word	0x0800932d
 80091f0:	080093e1 	.word	0x080093e1
 80091f4:	080093e1 	.word	0x080093e1
 80091f8:	080093e1 	.word	0x080093e1
 80091fc:	080093e1 	.word	0x080093e1
 8009200:	080093e1 	.word	0x080093e1
 8009204:	080093e1 	.word	0x080093e1
 8009208:	080093e1 	.word	0x080093e1
 800920c:	080093e1 	.word	0x080093e1
 8009210:	08009349 	.word	0x08009349
 8009214:	08009365 	.word	0x08009365
 8009218:	080093e1 	.word	0x080093e1
 800921c:	080093e1 	.word	0x080093e1
 8009220:	080093e1 	.word	0x080093e1
 8009224:	080093e1 	.word	0x080093e1
 8009228:	080093e1 	.word	0x080093e1
 800922c:	080093e1 	.word	0x080093e1
 8009230:	080093e1 	.word	0x080093e1
 8009234:	080093e1 	.word	0x080093e1
 8009238:	080093e1 	.word	0x080093e1
 800923c:	080093e1 	.word	0x080093e1
 8009240:	080093e1 	.word	0x080093e1
 8009244:	080093e1 	.word	0x080093e1
 8009248:	080093e1 	.word	0x080093e1
 800924c:	080093e1 	.word	0x080093e1
 8009250:	080093e1 	.word	0x080093e1
 8009254:	080093e1 	.word	0x080093e1
 8009258:	080093e1 	.word	0x080093e1
 800925c:	08009381 	.word	0x08009381
 8009260:	080093a1 	.word	0x080093a1
 8009264:	080093c1 	.word	0x080093c1

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	9301      	str	r3, [sp, #4]
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009276:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009278:	f001 f98f 	bl	800a59a <VL53L1_preset_mode_standard_ranging>
 800927c:	4603      	mov	r3, r0
 800927e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009282:	e0b1      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	9301      	str	r3, [sp, #4]
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009292:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009294:	f001 fa9e 	bl	800a7d4 <VL53L1_preset_mode_standard_ranging_short_range>
 8009298:	4603      	mov	r3, r0
 800929a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800929e:	e0a3      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092b0:	f001 fad1 	bl	800a856 <VL53L1_preset_mode_standard_ranging_long_range>
 80092b4:	4603      	mov	r3, r0
 80092b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80092ba:	e095      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	9301      	str	r3, [sp, #4]
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092cc:	f001 fb04 	bl	800a8d8 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80092d6:	e087      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	9301      	str	r3, [sp, #4]
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092e8:	f001 fb1b 	bl	800a922 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 80092ec:	4603      	mov	r3, r0
 80092ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80092f2:	e079      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	9301      	str	r3, [sp, #4]
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009304:	f001 fb32 	bl	800a96c <VL53L1_preset_mode_timed_ranging>
 8009308:	4603      	mov	r3, r0
 800930a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800930e:	e06b      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800931e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009320:	f001 fb5e 	bl	800a9e0 <VL53L1_preset_mode_timed_ranging_short_range>
 8009324:	4603      	mov	r3, r0
 8009326:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800932a:	e05d      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800933a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800933c:	f001 fb8a 	bl	800aa54 <VL53L1_preset_mode_timed_ranging_long_range>
 8009340:	4603      	mov	r3, r0
 8009342:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009346:	e04f      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	9301      	str	r3, [sp, #4]
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009358:	f001 fc5e 	bl	800ac18 <VL53L1_preset_mode_olt>
 800935c:	4603      	mov	r3, r0
 800935e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009362:	e041      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	9301      	str	r3, [sp, #4]
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009374:	f001 fc1a 	bl	800abac <VL53L1_preset_mode_singleshot_ranging>
 8009378:	4603      	mov	r3, r0
 800937a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800937e:	e033      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	9302      	str	r3, [sp, #8]
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009394:	f001 fbbe 	bl	800ab14 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8009398:	4603      	mov	r3, r0
 800939a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800939e:	e023      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093b4:	f001 fb88 	bl	800aac8 <VL53L1_preset_mode_low_power_auto_ranging>
 80093b8:	4603      	mov	r3, r0
 80093ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80093be:	e013      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	9302      	str	r3, [sp, #8]
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093d4:	f001 fbc4 	bl	800ab60 <VL53L1_preset_mode_low_power_auto_long_ranging>
 80093d8:	4603      	mov	r3, r0
 80093da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80093de:	e003      	b.n	80093e8 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80093e0:	23fc      	movs	r3, #252	; 0xfc
 80093e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 80093e6:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 80093e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d105      	bne.n	80093fc <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 80093f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f2:	893a      	ldrh	r2, [r7, #8]
 80093f4:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	893a      	ldrh	r2, [r7, #8]
 80093fa:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 80093fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009400:	2b00      	cmp	r3, #0
 8009402:	d108      	bne.n	8009416 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8009404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009408:	6879      	ldr	r1, [r7, #4]
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f7ff fca2 	bl	8008d54 <VL53L1_set_timeouts_us>
 8009410:	4603      	mov	r3, r0
 8009412:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8009416:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800941e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f7ff fc4a 	bl	8008cba <VL53L1_set_inter_measurement_period_ms>
 8009426:	4603      	mov	r3, r0
 8009428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800942c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009430:	4618      	mov	r0, r3
 8009432:	3738      	adds	r7, #56	; 0x38
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009442:	2300      	movs	r3, #0
 8009444:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8009454:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	bc80      	pop	{r7}
 8009460:	4770      	bx	lr

08009462 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8009462:	b480      	push	{r7}
 8009464:	b085      	sub	sp, #20
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	460b      	mov	r3, r1
 800946c:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	887a      	ldrh	r2, [r7, #2]
 800947a:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800947e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	bc80      	pop	{r7}
 800948a:	4770      	bx	lr

0800948c <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009496:	2300      	movs	r3, #0
 8009498:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80094a8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bc80      	pop	{r7}
 80094b4:	4770      	bx	lr

080094b6 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b085      	sub	sp, #20
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	460b      	mov	r3, r1
 80094c0:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094c2:	2300      	movs	r3, #0
 80094c4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	887a      	ldrh	r2, [r7, #2]
 80094ce:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 80094d2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	bc80      	pop	{r7}
 80094de:	4770      	bx	lr

080094e0 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80094fa:	f003 0303 	and.w	r3, r3, #3
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	b2db      	uxtb	r3, r3
 8009506:	4413      	add	r3, r2
 8009508:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8009510:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8009514:	4618      	mov	r0, r3
 8009516:	3714      	adds	r7, #20
 8009518:	46bd      	mov	sp, r7
 800951a:	bc80      	pop	{r7}
 800951c:	4770      	bx	lr
	...

08009520 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b0d0      	sub	sp, #320	; 0x140
 8009524:	af00      	add	r7, sp, #0
 8009526:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800952a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800952e:	6018      	str	r0, [r3, #0]
 8009530:	4608      	mov	r0, r1
 8009532:	4611      	mov	r1, r2
 8009534:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009538:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800953c:	4602      	mov	r2, r0
 800953e:	701a      	strb	r2, [r3, #0]
 8009540:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009544:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8009548:	460a      	mov	r2, r1
 800954a:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800954c:	2300      	movs	r3, #0
 800954e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009552:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009556:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8009560:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009564:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009568:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800956c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009570:	3342      	adds	r3, #66	; 0x42
 8009572:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8009576:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800957a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800957e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8009582:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009586:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800958a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800958e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009592:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8009596:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800959a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800959e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80095a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80095a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80095aa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80095ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 80095b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80095b6:	332c      	adds	r3, #44	; 0x2c
 80095b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 80095bc:	f107 030c 	add.w	r3, r7, #12
 80095c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 80095d0:	2300      	movs	r3, #0
 80095d2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 80095dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80095e0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80095e4:	f2a2 123d 	subw	r2, r2, #317	; 0x13d
 80095e8:	7812      	ldrb	r2, [r2, #0]
 80095ea:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 80095ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f0:	791b      	ldrb	r3, [r3, #4]
 80095f2:	b25b      	sxtb	r3, r3
 80095f4:	f003 030f 	and.w	r3, r3, #15
 80095f8:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80095fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80095fe:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8009602:	f993 3000 	ldrsb.w	r3, [r3]
 8009606:	4313      	orrs	r3, r2
 8009608:	b25b      	sxtb	r3, r3
 800960a:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800960c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009610:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8009612:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009616:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800961a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800961e:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8009622:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009626:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800962a:	2bff      	cmp	r3, #255	; 0xff
 800962c:	d104      	bne.n	8009638 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800962e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009632:	2200      	movs	r2, #0
 8009634:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8009638:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800963c:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8009640:	2b01      	cmp	r3, #1
 8009642:	d139      	bne.n	80096b8 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8009644:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009648:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800964c:	2b00      	cmp	r3, #0
 800964e:	d133      	bne.n	80096b8 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8009650:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009654:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8009658:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800965c:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8009660:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009664:	2220      	movs	r2, #32
 8009666:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800966a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800966e:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8009672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10c      	bne.n	8009694 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800967a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800967e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8009682:	b29b      	uxth	r3, r3
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	b29b      	uxth	r3, r3
 8009688:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800968a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800968e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8009692:	e004      	b.n	800969e <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8009694:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009698:	2200      	movs	r2, #0
 800969a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800969e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80096a2:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	2b04      	cmp	r3, #4
 80096aa:	d805      	bhi.n	80096b8 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 80096ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80096b0:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80096b4:	2205      	movs	r2, #5
 80096b6:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80096b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096bc:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d113      	bne.n	80096ec <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80096c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096c8:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d10d      	bne.n	80096ec <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 80096d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096d4:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 80096d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096dc:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 80096e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80096e4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80096e8:	2206      	movs	r2, #6
 80096ea:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 80096ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80096f0:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	2b05      	cmp	r3, #5
 80096fa:	d827      	bhi.n	800974c <VL53L1_init_and_start_range+0x22c>
 80096fc:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <VL53L1_init_and_start_range+0x1e4>)
 80096fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009702:	bf00      	nop
 8009704:	08009745 	.word	0x08009745
 8009708:	0800973d 	.word	0x0800973d
 800970c:	08009735 	.word	0x08009735
 8009710:	0800972d 	.word	0x0800972d
 8009714:	08009725 	.word	0x08009725
 8009718:	0800971d 	.word	0x0800971d
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800971c:	2301      	movs	r3, #1
 800971e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8009722:	e017      	b.n	8009754 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8009724:	230d      	movs	r3, #13
 8009726:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800972a:	e013      	b.n	8009754 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800972c:	2324      	movs	r3, #36	; 0x24
 800972e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8009732:	e00f      	b.n	8009754 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8009734:	2344      	movs	r3, #68	; 0x44
 8009736:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800973a:	e00b      	b.n	8009754 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800973c:	235a      	movs	r3, #90	; 0x5a
 800973e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8009742:	e007      	b.n	8009754 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8009744:	2371      	movs	r3, #113	; 0x71
 8009746:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800974a:	e003      	b.n	8009754 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800974c:	2383      	movs	r3, #131	; 0x83
 800974e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8009752:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8009754:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8009758:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800975c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 8009760:	f107 030c 	add.w	r3, r7, #12
 8009764:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8009768:	2300      	movs	r3, #0
 800976a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800976e:	e00b      	b.n	8009788 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 8009770:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800977a:	2200      	movs	r2, #0
 800977c:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800977e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8009782:	3301      	adds	r3, #1
 8009784:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8009788:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800978c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8009790:	429a      	cmp	r2, r3
 8009792:	d3ed      	bcc.n	8009770 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8009794:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009798:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b05      	cmp	r3, #5
 80097a0:	d917      	bls.n	80097d2 <VL53L1_init_and_start_range+0x2b2>
 80097a2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d113      	bne.n	80097d2 <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80097aa:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80097ae:	f1c3 0301 	rsb	r3, r3, #1
 80097b2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80097b6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 80097ba:	f107 020c 	add.w	r2, r7, #12
 80097be:	4413      	add	r3, r2
 80097c0:	461a      	mov	r2, r3
 80097c2:	210b      	movs	r1, #11
 80097c4:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80097c8:	f002 f8b6 	bl	800b938 <VL53L1_i2c_encode_static_nvm_managed>
 80097cc:	4603      	mov	r3, r0
 80097ce:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80097d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80097d6:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2b04      	cmp	r3, #4
 80097de:	d917      	bls.n	8009810 <VL53L1_init_and_start_range+0x2f0>
 80097e0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d113      	bne.n	8009810 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80097e8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80097ec:	f1c3 030d 	rsb	r3, r3, #13
 80097f0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80097f4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 80097f8:	f107 020c 	add.w	r2, r7, #12
 80097fc:	4413      	add	r3, r2
 80097fe:	461a      	mov	r2, r3
 8009800:	2117      	movs	r1, #23
 8009802:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8009806:	f002 f973 	bl	800baf0 <VL53L1_i2c_encode_customer_nvm_managed>
 800980a:	4603      	mov	r3, r0
 800980c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8009810:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009814:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	2b03      	cmp	r3, #3
 800981c:	d917      	bls.n	800984e <VL53L1_init_and_start_range+0x32e>
 800981e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8009822:	2b00      	cmp	r3, #0
 8009824:	d113      	bne.n	800984e <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8009826:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800982a:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800982e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8009832:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8009836:	f107 020c 	add.w	r2, r7, #12
 800983a:	4413      	add	r3, r2
 800983c:	461a      	mov	r2, r3
 800983e:	2120      	movs	r1, #32
 8009840:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8009844:	f002 fa92 	bl	800bd6c <VL53L1_i2c_encode_static_config>
 8009848:	4603      	mov	r3, r0
 800984a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800984e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009852:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2b02      	cmp	r3, #2
 800985a:	d917      	bls.n	800988c <VL53L1_init_and_start_range+0x36c>
 800985c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8009860:	2b00      	cmp	r3, #0
 8009862:	d113      	bne.n	800988c <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009864:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8009868:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800986c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8009870:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8009874:	f107 020c 	add.w	r2, r7, #12
 8009878:	4413      	add	r3, r2
 800987a:	461a      	mov	r2, r3
 800987c:	2116      	movs	r1, #22
 800987e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8009882:	f002 fb56 	bl	800bf32 <VL53L1_i2c_encode_general_config>
 8009886:	4603      	mov	r3, r0
 8009888:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800988c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009890:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d917      	bls.n	80098ca <VL53L1_init_and_start_range+0x3aa>
 800989a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d113      	bne.n	80098ca <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80098a2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80098a6:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80098aa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80098ae:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 80098b2:	f107 020c 	add.w	r2, r7, #12
 80098b6:	4413      	add	r3, r2
 80098b8:	461a      	mov	r2, r3
 80098ba:	2117      	movs	r1, #23
 80098bc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80098c0:	f002 fbbb 	bl	800c03a <VL53L1_i2c_encode_timing_config>
 80098c4:	4603      	mov	r3, r0
 80098c6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80098ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80098ce:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d036      	beq.n	8009946 <VL53L1_init_and_start_range+0x426>
 80098d8:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d132      	bne.n	8009946 <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80098e0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80098e4:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 80098e8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 80098ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f0:	791b      	ldrb	r3, [r3, #4]
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d017      	beq.n	800992a <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 80098fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80098fe:	789b      	ldrb	r3, [r3, #2]
 8009900:	f043 0301 	orr.w	r3, r3, #1
 8009904:	b2da      	uxtb	r2, r3
 8009906:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800990a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800990c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009910:	789b      	ldrb	r3, [r3, #2]
 8009912:	f043 0301 	orr.w	r3, r3, #1
 8009916:	b2da      	uxtb	r2, r3
 8009918:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800991c:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800991e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009922:	789a      	ldrb	r2, [r3, #2]
 8009924:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009928:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800992a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800992e:	f107 020c 	add.w	r2, r7, #12
 8009932:	4413      	add	r3, r2
 8009934:	461a      	mov	r2, r3
 8009936:	2112      	movs	r1, #18
 8009938:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800993c:	f002 fbff 	bl	800c13e <VL53L1_i2c_encode_dynamic_config>
 8009940:	4603      	mov	r3, r0
 8009942:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 8009946:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800994a:	2b00      	cmp	r3, #0
 800994c:	d113      	bne.n	8009976 <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 800994e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8009952:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8009956:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800995a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800995e:	f107 020c 	add.w	r2, r7, #12
 8009962:	4413      	add	r3, r2
 8009964:	461a      	mov	r2, r3
 8009966:	2105      	movs	r1, #5
 8009968:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800996c:	f002 fc6c 	bl	800c248 <VL53L1_i2c_encode_system_control>
 8009970:	4603      	mov	r3, r0
 8009972:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8009976:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10f      	bne.n	800999e <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 800997e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8009982:	f107 020c 	add.w	r2, r7, #12
 8009986:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800998a:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800998e:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 8009992:	6800      	ldr	r0, [r0, #0]
 8009994:	f003 f946 	bl	800cc24 <VL53L1_WriteMulti>
 8009998:	4603      	mov	r3, r0
 800999a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800999e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d109      	bne.n	80099ba <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80099a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80099aa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80099ae:	6818      	ldr	r0, [r3, #0]
 80099b0:	f001 f998 	bl	800ace4 <VL53L1_update_ll_driver_rd_state>
 80099b4:	4603      	mov	r3, r0
 80099b6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 80099ba:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d109      	bne.n	80099d6 <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80099c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80099c6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80099ca:	6818      	ldr	r0, [r3, #0]
 80099cc:	f001 fa5c 	bl	800ae88 <VL53L1_update_ll_driver_cfg_state>
 80099d0:	4603      	mov	r3, r0
 80099d2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 80099d6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 80099da:	4618      	mov	r0, r3
 80099dc:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b0c8      	sub	sp, #288	; 0x120
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80099ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80099f2:	6018      	str	r0, [r3, #0]
 80099f4:	460a      	mov	r2, r1
 80099f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80099fa:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80099fe:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009a00:	2300      	movs	r3, #0
 8009a02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009a06:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009a0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8009a14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009a18:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 8009a1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8009a20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009a24:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009a28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8009a2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009a30:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8009a34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8009a38:	2388      	movs	r3, #136	; 0x88
 8009a3a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8009a4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009a4e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d008      	beq.n	8009a6a <VL53L1_get_measurement_results+0x86>
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d10d      	bne.n	8009a78 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8009a5c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8009a60:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8009a64:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8009a68:	e00a      	b.n	8009a80 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8009a6a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8009a6e:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8009a72:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8009a76:	e003      	b.n	8009a80 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 8009a78:	232c      	movs	r3, #44	; 0x2c
 8009a7a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8009a7e:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009a80:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10f      	bne.n	8009aa8 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 8009a88:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8009a8c:	f107 0208 	add.w	r2, r7, #8
 8009a90:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8009a94:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8009a98:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8009a9c:	6800      	ldr	r0, [r0, #0]
 8009a9e:	f003 f8f7 	bl	800cc90 <VL53L1_ReadMulti>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8009aa8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009aac:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d917      	bls.n	8009ae6 <VL53L1_get_measurement_results+0x102>
 8009ab6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d113      	bne.n	8009ae6 <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009abe:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8009ac2:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8009ac6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8009aca:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8009ace:	f107 0208 	add.w	r2, r7, #8
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009ad8:	4619      	mov	r1, r3
 8009ada:	2038      	movs	r0, #56	; 0x38
 8009adc:	f002 fd45 	bl	800c56a <VL53L1_i2c_decode_debug_results>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8009ae6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8009aea:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d017      	beq.n	8009b24 <VL53L1_get_measurement_results+0x140>
 8009af4:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d113      	bne.n	8009b24 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8009afc:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8009b00:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8009b04:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8009b08:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 8009b0c:	f107 0208 	add.w	r2, r7, #8
 8009b10:	4413      	add	r3, r2
 8009b12:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8009b16:	4619      	mov	r1, r3
 8009b18:	2021      	movs	r0, #33	; 0x21
 8009b1a:	f002 fcc5 	bl	800c4a8 <VL53L1_i2c_decode_core_results>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8009b24:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d110      	bne.n	8009b4e <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8009b32:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8009b36:	f107 0208 	add.w	r2, r7, #8
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009b40:	4619      	mov	r1, r3
 8009b42:	202c      	movs	r0, #44	; 0x2c
 8009b44:	f002 fbba 	bl	800c2bc <VL53L1_i2c_decode_system_results>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009b4e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	460b      	mov	r3, r1
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8009b78:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009b7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d106      	bne.n	8009b94 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 8009b86:	7afb      	ldrb	r3, [r7, #11]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f7ff ff2a 	bl	80099e4 <VL53L1_get_measurement_results>
 8009b90:	4603      	mov	r3, r0
 8009b92:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8009b94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10c      	bne.n	8009bb6 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	f000 f85d 	bl	8009c70 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d11f      	bne.n	8009c00 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8009bc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10e      	bne.n	8009be6 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d109      	bne.n	8009be6 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f001 fe19 	bl	800b80a <VL53L1_low_power_auto_setup_manual_calibration>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 8009be4:	e00c      	b.n	8009c00 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8009be6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d108      	bne.n	8009c00 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d103      	bne.n	8009c00 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 8009c14:	2284      	movs	r2, #132	; 0x84
 8009c16:	6939      	ldr	r1, [r7, #16]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f003 fda1 	bl	800d760 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 8009c1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d104      	bne.n	8009c30 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f001 f8e4 	bl	800adf4 <VL53L1_check_ll_driver_rd_state>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8009c30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3720      	adds	r7, #32
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d107      	bne.n	8009c64 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	2203      	movs	r2, #3
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7ff fc60 	bl	8009520 <VL53L1_init_and_start_range>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8009c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b089      	sub	sp, #36	; 0x24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	78da      	ldrb	r2, [r3, #3]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	3304      	adds	r3, #4
 8009c96:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8009c98:	2300      	movs	r3, #0
 8009c9a:	77fb      	strb	r3, [r7, #31]
 8009c9c:	e0d0      	b.n	8009e40 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	7ffa      	ldrb	r2, [r7, #31]
 8009ca2:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	78db      	ldrb	r3, [r3, #3]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10a      	bne.n	8009cc8 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	785b      	ldrb	r3, [r3, #1]
 8009cb6:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8009cba:	2b09      	cmp	r3, #9
 8009cbc:	d104      	bne.n	8009cc8 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	2213      	movs	r2, #19
 8009cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cc6:	e007      	b.n	8009cd8 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	785b      	ldrb	r3, [r3, #1]
 8009ccc:	f003 031f 	and.w	r3, r3, #31
 8009cd0:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 8009cd8:	7ffb      	ldrb	r3, [r7, #31]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d05d      	beq.n	8009d9e <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 8009ce2:	e0a7      	b.n	8009e34 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	789b      	ldrb	r3, [r3, #2]
 8009ce8:	2b07      	cmp	r3, #7
 8009cea:	d104      	bne.n	8009cf6 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	821a      	strh	r2, [r3, #16]
 8009cf4:	e00c      	b.n	8009d10 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	789b      	ldrb	r3, [r3, #2]
 8009cfa:	2b08      	cmp	r3, #8
 8009cfc:	d104      	bne.n	8009d08 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	821a      	strh	r2, [r3, #16]
 8009d06:	e003      	b.n	8009d10 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	895b      	ldrh	r3, [r3, #10]
 8009d2c:	015b      	lsls	r3, r3, #5
 8009d2e:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d36:	d302      	bcc.n	8009d3e <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8009d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d3c:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 8009d52:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	fb02 f303 	mul.w	r3, r2, r3
 8009d5c:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d64:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	da01      	bge.n	8009d70 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 8009d6c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8009d70:	12db      	asrs	r3, r3, #11
 8009d72:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	b21a      	sxth	r2, r3
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	621a      	str	r2, [r3, #32]

			break;
 8009d9c:	e04a      	b.n	8009e34 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009db4:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	8bdb      	ldrh	r3, [r3, #30]
 8009dc2:	015b      	lsls	r3, r3, #5
 8009dc4:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dcc:	d302      	bcc.n	8009dd4 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 8009dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009dd2:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 8009de8:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	fb02 f303 	mul.w	r3, r2, r3
 8009df2:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dfa:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	da01      	bge.n	8009e06 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 8009e02:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8009e06:	12db      	asrs	r3, r3, #11
 8009e08:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	b21a      	sxth	r2, r3
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	621a      	str	r2, [r3, #32]

			break;
 8009e32:	bf00      	nop
		}

		pdata++;
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	3340      	adds	r3, #64	; 0x40
 8009e38:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8009e3a:	7ffb      	ldrb	r3, [r7, #31]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	77fb      	strb	r3, [r7, #31]
 8009e40:	7ffb      	ldrb	r3, [r7, #31]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	f67f af2b 	bls.w	8009c9e <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	785b      	ldrb	r3, [r3, #1]
 8009e52:	f003 031f 	and.w	r3, r3, #31
 8009e56:	2b11      	cmp	r3, #17
 8009e58:	bf8c      	ite	hi
 8009e5a:	2201      	movhi	r2, #1
 8009e5c:	2200      	movls	r2, #0
 8009e5e:	b2d2      	uxtb	r2, r2
 8009e60:	2a00      	cmp	r2, #0
 8009e62:	d116      	bne.n	8009e92 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 8009e64:	2201      	movs	r2, #1
 8009e66:	409a      	lsls	r2, r3
 8009e68:	4b0c      	ldr	r3, [pc, #48]	; (8009e9c <VL53L1_copy_sys_and_core_results_to_range_results+0x22c>)
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	bf14      	ite	ne
 8009e70:	2301      	movne	r3, #1
 8009e72:	2300      	moveq	r3, #0
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00b      	beq.n	8009e92 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	785b      	ldrb	r3, [r3, #1]
 8009e7e:	f003 031f 	and.w	r3, r3, #31
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 8009e90:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8009e92:	bf00      	nop
 8009e94:	3724      	adds	r7, #36	; 0x24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bc80      	pop	{r7}
 8009e9a:	4770      	bx	lr
 8009e9c:	0002200e 	.word	0x0002200e

08009ea0 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8009eb6:	897b      	ldrh	r3, [r7, #10]
 8009eb8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009ebc:	2b38      	cmp	r3, #56	; 0x38
 8009ebe:	f200 8204 	bhi.w	800a2ca <VL53L1_get_tuning_parm+0x42a>
 8009ec2:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <VL53L1_get_tuning_parm+0x28>)
 8009ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec8:	08009fad 	.word	0x08009fad
 8009ecc:	08009fbb 	.word	0x08009fbb
 8009ed0:	08009fc9 	.word	0x08009fc9
 8009ed4:	08009fd7 	.word	0x08009fd7
 8009ed8:	08009fe5 	.word	0x08009fe5
 8009edc:	08009ff3 	.word	0x08009ff3
 8009ee0:	0800a001 	.word	0x0800a001
 8009ee4:	0800a00f 	.word	0x0800a00f
 8009ee8:	0800a01d 	.word	0x0800a01d
 8009eec:	0800a02b 	.word	0x0800a02b
 8009ef0:	0800a039 	.word	0x0800a039
 8009ef4:	0800a047 	.word	0x0800a047
 8009ef8:	0800a055 	.word	0x0800a055
 8009efc:	0800a063 	.word	0x0800a063
 8009f00:	0800a071 	.word	0x0800a071
 8009f04:	0800a07f 	.word	0x0800a07f
 8009f08:	0800a08d 	.word	0x0800a08d
 8009f0c:	0800a09b 	.word	0x0800a09b
 8009f10:	0800a0a9 	.word	0x0800a0a9
 8009f14:	0800a0b7 	.word	0x0800a0b7
 8009f18:	0800a0c5 	.word	0x0800a0c5
 8009f1c:	0800a0d3 	.word	0x0800a0d3
 8009f20:	0800a0e1 	.word	0x0800a0e1
 8009f24:	0800a0ef 	.word	0x0800a0ef
 8009f28:	0800a0fd 	.word	0x0800a0fd
 8009f2c:	0800a10b 	.word	0x0800a10b
 8009f30:	0800a119 	.word	0x0800a119
 8009f34:	0800a127 	.word	0x0800a127
 8009f38:	0800a135 	.word	0x0800a135
 8009f3c:	0800a143 	.word	0x0800a143
 8009f40:	0800a151 	.word	0x0800a151
 8009f44:	0800a15f 	.word	0x0800a15f
 8009f48:	0800a16d 	.word	0x0800a16d
 8009f4c:	0800a17b 	.word	0x0800a17b
 8009f50:	0800a189 	.word	0x0800a189
 8009f54:	0800a197 	.word	0x0800a197
 8009f58:	0800a1a5 	.word	0x0800a1a5
 8009f5c:	0800a1b3 	.word	0x0800a1b3
 8009f60:	0800a1c1 	.word	0x0800a1c1
 8009f64:	0800a1cf 	.word	0x0800a1cf
 8009f68:	0800a1dd 	.word	0x0800a1dd
 8009f6c:	0800a1eb 	.word	0x0800a1eb
 8009f70:	0800a1f9 	.word	0x0800a1f9
 8009f74:	0800a207 	.word	0x0800a207
 8009f78:	0800a215 	.word	0x0800a215
 8009f7c:	0800a223 	.word	0x0800a223
 8009f80:	0800a231 	.word	0x0800a231
 8009f84:	0800a23f 	.word	0x0800a23f
 8009f88:	0800a24d 	.word	0x0800a24d
 8009f8c:	0800a25b 	.word	0x0800a25b
 8009f90:	0800a269 	.word	0x0800a269
 8009f94:	0800a277 	.word	0x0800a277
 8009f98:	0800a285 	.word	0x0800a285
 8009f9c:	0800a293 	.word	0x0800a293
 8009fa0:	0800a2a1 	.word	0x0800a2a1
 8009fa4:	0800a2af 	.word	0x0800a2af
 8009fa8:	0800a2bd 	.word	0x0800a2bd

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8009fb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	601a      	str	r2, [r3, #0]
	break;
 8009fb8:	e18e      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8009fc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	601a      	str	r2, [r3, #0]
	break;
 8009fc6:	e187      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8009fce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	601a      	str	r2, [r3, #0]
	break;
 8009fd4:	e180      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009fdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	601a      	str	r2, [r3, #0]
	break;
 8009fe2:	e179      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009fea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	601a      	str	r2, [r3, #0]
	break;
 8009ff0:	e172      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8009ff8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	601a      	str	r2, [r3, #0]
	break;
 8009ffe:	e16b      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a006:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	601a      	str	r2, [r3, #0]
	break;
 800a00c:	e164      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800a014:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	601a      	str	r2, [r3, #0]
	break;
 800a01a:	e15d      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800a022:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	601a      	str	r2, [r3, #0]
	break;
 800a028:	e156      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800a030:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	601a      	str	r2, [r3, #0]
	break;
 800a036:	e14f      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800a03e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	601a      	str	r2, [r3, #0]
	break;
 800a044:	e148      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800a04c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	601a      	str	r2, [r3, #0]
	break;
 800a052:	e141      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800a05a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	601a      	str	r2, [r3, #0]
	break;
 800a060:	e13a      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800a068:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	601a      	str	r2, [r3, #0]
	break;
 800a06e:	e133      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800a076:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	601a      	str	r2, [r3, #0]
	break;
 800a07c:	e12c      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a084:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	601a      	str	r2, [r3, #0]
	break;
 800a08a:	e125      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800a092:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	601a      	str	r2, [r3, #0]
	break;
 800a098:	e11e      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800a0a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
	break;
 800a0a6:	e117      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800a0ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	601a      	str	r2, [r3, #0]
	break;
 800a0b4:	e110      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800a0bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	601a      	str	r2, [r3, #0]
	break;
 800a0c2:	e109      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800a0ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	601a      	str	r2, [r3, #0]
	break;
 800a0d0:	e102      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800a0d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	601a      	str	r2, [r3, #0]
	break;
 800a0de:	e0fb      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800a0e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	601a      	str	r2, [r3, #0]
	break;
 800a0ec:	e0f4      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800a0f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	601a      	str	r2, [r3, #0]
	break;
 800a0fa:	e0ed      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800a102:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	601a      	str	r2, [r3, #0]
	break;
 800a108:	e0e6      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800a110:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	601a      	str	r2, [r3, #0]
	break;
 800a116:	e0df      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800a11e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	601a      	str	r2, [r3, #0]
	break;
 800a124:	e0d8      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800a12c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	601a      	str	r2, [r3, #0]
	break;
 800a132:	e0d1      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800a13a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	601a      	str	r2, [r3, #0]
	break;
 800a140:	e0ca      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a148:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	601a      	str	r2, [r3, #0]
	break;
 800a14e:	e0c3      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800a156:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	601a      	str	r2, [r3, #0]
	break;
 800a15c:	e0bc      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800a164:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	601a      	str	r2, [r3, #0]
	break;
 800a16a:	e0b5      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a172:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	601a      	str	r2, [r3, #0]
	break;
 800a178:	e0ae      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800a180:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	601a      	str	r2, [r3, #0]
	break;
 800a186:	e0a7      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800a18e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	601a      	str	r2, [r3, #0]
	break;
 800a194:	e0a0      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800a19c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	601a      	str	r2, [r3, #0]
	break;
 800a1a2:	e099      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800a1aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	601a      	str	r2, [r3, #0]
	break;
 800a1b0:	e092      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a1b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	601a      	str	r2, [r3, #0]
	break;
 800a1be:	e08b      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a1c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	601a      	str	r2, [r3, #0]
	break;
 800a1cc:	e084      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a1d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	601a      	str	r2, [r3, #0]
	break;
 800a1da:	e07d      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800a1e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	601a      	str	r2, [r3, #0]
	break;
 800a1e8:	e076      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800a1f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	601a      	str	r2, [r3, #0]
	break;
 800a1f6:	e06f      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800a1fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	601a      	str	r2, [r3, #0]
	break;
 800a204:	e068      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800a20c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	601a      	str	r2, [r3, #0]
	break;
 800a212:	e061      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800a21a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	601a      	str	r2, [r3, #0]
	break;
 800a220:	e05a      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800a228:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	601a      	str	r2, [r3, #0]
	break;
 800a22e:	e053      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800a236:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	601a      	str	r2, [r3, #0]
	break;
 800a23c:	e04c      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800a244:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	601a      	str	r2, [r3, #0]
	break;
 800a24a:	e045      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a252:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	601a      	str	r2, [r3, #0]
	break;
 800a258:	e03e      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a260:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	601a      	str	r2, [r3, #0]
	break;
 800a266:	e037      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a26e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	601a      	str	r2, [r3, #0]
	break;
 800a274:	e030      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a27c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	601a      	str	r2, [r3, #0]
	break;
 800a282:	e029      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a28a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	601a      	str	r2, [r3, #0]
	break;
 800a290:	e022      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a298:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	601a      	str	r2, [r3, #0]
	break;
 800a29e:	e01b      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800a2a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	601a      	str	r2, [r3, #0]
	break;
 800a2ac:	e014      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	601a      	str	r2, [r3, #0]
	break;
 800a2ba:	e00d      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a2c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	601a      	str	r2, [r3, #0]
	break;
 800a2c8:	e006      	b.n	800a2d8 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a2d0:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a2d2:	23fc      	movs	r3, #252	; 0xfc
 800a2d4:	75fb      	strb	r3, [r7, #23]
	break;
 800a2d6:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800a2d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	371c      	adds	r7, #28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bc80      	pop	{r7}
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop

0800a2e8 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2208      	movs	r2, #8
 800a2f8:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	220b      	movs	r2, #11
 800a2fe:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a306:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800a30e:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800a316:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800a31e:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800a320:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	bc80      	pop	{r7}
 800a32c:	4770      	bx	lr

0800a32e <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800a32e:	b480      	push	{r7}
 800a330:	b085      	sub	sp, #20
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a336:	2300      	movs	r3, #0
 800a338:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2212      	movs	r2, #18
 800a344:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	220f      	movs	r2, #15
 800a34a:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800a358:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	220c      	movs	r2, #12
 800a35e:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800a360:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	bc80      	pop	{r7}
 800a36c:	4770      	bx	lr

0800a36e <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b084      	sub	sp, #16
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a378:	2300      	movs	r3, #0
 800a37a:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	895b      	ldrh	r3, [r3, #10]
 800a380:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	895b      	ldrh	r3, [r3, #10]
 800a39e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2240      	movs	r2, #64	; 0x40
 800a3c2:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10d      	bne.n	800a3e8 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d108      	bne.n	800a3e8 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d103      	bne.n	800a3e8 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	741a      	strb	r2, [r3, #16]
 800a3e6:	e002      	b.n	800a3ee <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800a3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d114      	bne.n	800a420 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d110      	bne.n	800a420 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	6818      	ldr	r0, [r3, #0]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	7d1b      	ldrb	r3, [r3, #20]
 800a412:	f000 ffbb 	bl	800b38c <VL53L1_calc_range_ignore_threshold>
 800a416:	4603      	mov	r3, r0
 800a418:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	82da      	strh	r2, [r3, #22]
 800a41e:	e002      	b.n	800a426 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	2200      	movs	r2, #0
 800a424:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800a426:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800a432:	b480      	push	{r7}
 800a434:	b085      	sub	sp, #20
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a43a:	2300      	movs	r3, #0
 800a43c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800a444:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a44c:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800a454:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800a45c:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2208      	movs	r2, #8
 800a462:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2228      	movs	r2, #40	; 0x28
 800a468:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2209      	movs	r2, #9
 800a46e:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800a470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	bc80      	pop	{r7}
 800a47c:	4770      	bx	lr

0800a47e <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a486:	2300      	movs	r3, #0
 800a488:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f248 0203 	movw	r2, #32771	; 0x8003
 800a490:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f248 0201 	movw	r2, #32769	; 0x8001
 800a498:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f248 0241 	movw	r2, #32833	; 0x8041
 800a4a0:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	220e      	movs	r2, #14
 800a4a6:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	220a      	movs	r2, #10
 800a4ac:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2206      	movs	r2, #6
 800a4b2:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	220e      	movs	r2, #14
 800a4b8:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	220a      	movs	r2, #10
 800a4be:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2206      	movs	r2, #6
 800a4c4:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2221      	movs	r2, #33	; 0x21
 800a4d0:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800a4e4:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800a4ec:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800a4f4:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	22c0      	movs	r2, #192	; 0xc0
 800a4fa:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	22c0      	movs	r2, #192	; 0xc0
 800a500:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	22c0      	movs	r2, #192	; 0xc0
 800a506:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2208      	movs	r2, #8
 800a50c:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2210      	movs	r2, #16
 800a512:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800a542:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800a54a:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f248 0230 	movw	r2, #32816	; 0x8030
 800a552:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a55a:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a562:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a56a:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f24f 6218 	movw	r2, #63000	; 0xf618
 800a572:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800a57a:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a582:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800a58a:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800a58c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3714      	adds	r7, #20
 800a594:	46bd      	mov	sp, r7
 800a596:	bc80      	pop	{r7}
 800a598:	4770      	bx	lr

0800a59a <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b087      	sub	sp, #28
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	60f8      	str	r0, [r7, #12]
 800a5a2:	60b9      	str	r1, [r7, #8]
 800a5a4:	607a      	str	r2, [r7, #4]
 800a5a6:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800a5b2:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2211      	movs	r2, #17
 800a5f4:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2202      	movs	r2, #2
 800a606:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2208      	movs	r2, #8
 800a60c:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800a614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a616:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2201      	movs	r2, #1
 800a632:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	22ff      	movs	r2, #255	; 0xff
 800a64a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2200      	movs	r2, #0
 800a672:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2200      	movs	r2, #0
 800a678:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	2220      	movs	r2, #32
 800a67e:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	220b      	movs	r2, #11
 800a684:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800a686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a688:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	2202      	movs	r2, #2
 800a692:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	220d      	movs	r2, #13
 800a698:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800a69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69c:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800a6c0:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2238      	movs	r2, #56	; 0x38
 800a6cc:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	22ff      	movs	r2, #255	; 0xff
 800a6d2:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	221a      	movs	r2, #26
 800a6e4:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2220      	movs	r2, #32
 800a6f0:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	22cc      	movs	r2, #204	; 0xcc
 800a6fc:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	220b      	movs	r2, #11
 800a702:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	22f5      	movs	r2, #245	; 0xf5
 800a70e:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2209      	movs	r2, #9
 800a714:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a718:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2208      	movs	r2, #8
 800a72a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2278      	movs	r2, #120	; 0x78
 800a730:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2201      	movs	r2, #1
 800a742:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2200      	movs	r2, #0
 800a748:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	2200      	movs	r2, #0
 800a74e:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	2200      	movs	r2, #0
 800a754:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	220b      	movs	r2, #11
 800a764:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2209      	movs	r2, #9
 800a76a:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	2201      	movs	r2, #1
 800a780:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a784:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	22c7      	movs	r2, #199	; 0xc7
 800a79a:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	22ff      	movs	r2, #255	; 0xff
 800a7a0:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	22db      	movs	r2, #219	; 0xdb
 800a7a6:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	2221      	movs	r2, #33	; 0x21
 800a7c4:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800a7c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	371c      	adds	r7, #28
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bc80      	pop	{r7}
 800a7d2:	4770      	bx	lr

0800a7d4 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af02      	add	r7, sp, #8
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	9301      	str	r3, [sp, #4]
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	68b9      	ldr	r1, [r7, #8]
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f7ff fed0 	bl	800a59a <VL53L1_preset_mode_standard_ranging>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800a7fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d121      	bne.n	800a84a <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2207      	movs	r2, #7
 800a80a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2205      	movs	r2, #5
 800a810:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81c:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2208      	movs	r2, #8
 800a826:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2238      	movs	r2, #56	; 0x38
 800a82c:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2207      	movs	r2, #7
 800a832:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2205      	movs	r2, #5
 800a838:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800a83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83c:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800a84a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3718      	adds	r7, #24
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b088      	sub	sp, #32
 800a85a:	af02      	add	r7, sp, #8
 800a85c:	60f8      	str	r0, [r7, #12]
 800a85e:	60b9      	str	r1, [r7, #8]
 800a860:	607a      	str	r2, [r7, #4]
 800a862:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a864:	2300      	movs	r3, #0
 800a866:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800a868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	68b9      	ldr	r1, [r7, #8]
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff fe8f 	bl	800a59a <VL53L1_preset_mode_standard_ranging>
 800a87c:	4603      	mov	r3, r0
 800a87e:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800a880:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d121      	bne.n	800a8cc <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	220f      	movs	r2, #15
 800a88c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	220d      	movs	r2, #13
 800a892:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2208      	movs	r2, #8
 800a8a8:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	22b8      	movs	r2, #184	; 0xb8
 800a8ae:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	220f      	movs	r2, #15
 800a8b4:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	220d      	movs	r2, #13
 800a8ba:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8be:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800a8cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b088      	sub	sp, #32
 800a8dc:	af02      	add	r7, sp, #8
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	9301      	str	r3, [sp, #4]
 800a8ee:	6a3b      	ldr	r3, [r7, #32]
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	68b9      	ldr	r1, [r7, #8]
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f7ff fe4e 	bl	800a59a <VL53L1_preset_mode_standard_ranging>
 800a8fe:	4603      	mov	r3, r0
 800a900:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800a902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d105      	bne.n	800a916 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2202      	movs	r2, #2
 800a90e:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	223b      	movs	r2, #59	; 0x3b
 800a914:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b088      	sub	sp, #32
 800a926:	af02      	add	r7, sp, #8
 800a928:	60f8      	str	r0, [r7, #12]
 800a92a:	60b9      	str	r1, [r7, #8]
 800a92c:	607a      	str	r2, [r7, #4]
 800a92e:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a930:	2300      	movs	r3, #0
 800a932:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	6a3b      	ldr	r3, [r7, #32]
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f7ff fe29 	bl	800a59a <VL53L1_preset_mode_standard_ranging>
 800a948:	4603      	mov	r3, r0
 800a94a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800a94c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d105      	bne.n	800a960 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2202      	movs	r2, #2
 800a958:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	225b      	movs	r2, #91	; 0x5b
 800a95e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a960:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af02      	add	r7, sp, #8
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
 800a978:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a97a:	2300      	movs	r3, #0
 800a97c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	9301      	str	r3, [sp, #4]
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	68b9      	ldr	r1, [r7, #8]
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f7ff fe04 	bl	800a59a <VL53L1_preset_mode_standard_ranging>
 800a992:	4603      	mov	r3, r0
 800a994:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800a996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d11a      	bne.n	800a9d4 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	22b1      	movs	r2, #177	; 0xb1
 800a9ae:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	22d4      	movs	r2, #212	; 0xd4
 800a9ba:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a9c2:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	2240      	movs	r2, #64	; 0x40
 800a9d2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a9d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3718      	adds	r7, #24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af02      	add	r7, sp, #8
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	9301      	str	r3, [sp, #4]
 800a9f6:	6a3b      	ldr	r3, [r7, #32]
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	68b9      	ldr	r1, [r7, #8]
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f7ff fee7 	bl	800a7d4 <VL53L1_preset_mode_standard_ranging_short_range>
 800aa06:	4603      	mov	r3, r0
 800aa08:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800aa0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d11a      	bne.n	800aa48 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2200      	movs	r2, #0
 800aa16:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2284      	movs	r2, #132	; 0x84
 800aa22:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	22b1      	movs	r2, #177	; 0xb1
 800aa2e:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800aa36:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	2240      	movs	r2, #64	; 0x40
 800aa46:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800aa48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b088      	sub	sp, #32
 800aa58:	af02      	add	r7, sp, #8
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
 800aa60:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aa62:	2300      	movs	r3, #0
 800aa64:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	9300      	str	r3, [sp, #0]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	68b9      	ldr	r1, [r7, #8]
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f7ff feee 	bl	800a856 <VL53L1_preset_mode_standard_ranging_long_range>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800aa7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d11a      	bne.n	800aabc <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2297      	movs	r2, #151	; 0x97
 800aa96:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	22b1      	movs	r2, #177	; 0xb1
 800aaa2:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800aaaa:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	2240      	movs	r2, #64	; 0x40
 800aaba:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800aabc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3718      	adds	r7, #24
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b088      	sub	sp, #32
 800aacc:	af02      	add	r7, sp, #8
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
 800aad4:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aad6:	2300      	movs	r3, #0
 800aad8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	6a3b      	ldr	r3, [r7, #32]
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	68b9      	ldr	r1, [r7, #8]
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f7ff ff3f 	bl	800a96c <VL53L1_preset_mode_timed_ranging>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800aaf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d106      	bne.n	800ab08 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800aafa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	68b8      	ldr	r0, [r7, #8]
 800ab00:	f000 fe6b 	bl	800b7da <VL53L1_config_low_power_auto_mode>
 800ab04:	4603      	mov	r3, r0
 800ab06:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ab08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3718      	adds	r7, #24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b088      	sub	sp, #32
 800ab18:	af02      	add	r7, sp, #8
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	68b9      	ldr	r1, [r7, #8]
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f7ff ff53 	bl	800a9e0 <VL53L1_preset_mode_timed_ranging_short_range>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800ab3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d106      	bne.n	800ab54 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800ab46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	68b8      	ldr	r0, [r7, #8]
 800ab4c:	f000 fe45 	bl	800b7da <VL53L1_config_low_power_auto_mode>
 800ab50:	4603      	mov	r3, r0
 800ab52:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800ab54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b088      	sub	sp, #32
 800ab64:	af02      	add	r7, sp, #8
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	9301      	str	r3, [sp, #4]
 800ab76:	6a3b      	ldr	r3, [r7, #32]
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	68b9      	ldr	r1, [r7, #8]
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7ff ff67 	bl	800aa54 <VL53L1_preset_mode_timed_ranging_long_range>
 800ab86:	4603      	mov	r3, r0
 800ab88:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800ab8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d106      	bne.n	800aba0 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800ab92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	68b8      	ldr	r0, [r7, #8]
 800ab98:	f000 fe1f 	bl	800b7da <VL53L1_config_low_power_auto_mode>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800aba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b088      	sub	sp, #32
 800abb0:	af02      	add	r7, sp, #8
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800abba:	2300      	movs	r3, #0
 800abbc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc0:	9301      	str	r3, [sp, #4]
 800abc2:	6a3b      	ldr	r3, [r7, #32]
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	68b9      	ldr	r1, [r7, #8]
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f7ff fce4 	bl	800a59a <VL53L1_preset_mode_standard_ranging>
 800abd2:	4603      	mov	r3, r0
 800abd4:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800abd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d116      	bne.n	800ac0c <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2200      	movs	r2, #0
 800abe2:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	22b1      	movs	r2, #177	; 0xb1
 800abee:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	22d4      	movs	r2, #212	; 0xd4
 800abfa:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfe:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800ac06:	6a3b      	ldr	r3, [r7, #32]
 800ac08:	2210      	movs	r2, #16
 800ac0a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800ac0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3718      	adds	r7, #24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af02      	add	r7, sp, #8
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
 800ac24:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ac26:	2300      	movs	r3, #0
 800ac28:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	9301      	str	r3, [sp, #4]
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	68b9      	ldr	r1, [r7, #8]
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f7ff fcae 	bl	800a59a <VL53L1_preset_mode_standard_ranging>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800ac42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d102      	bne.n	800ac50 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800ac50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3718      	adds	r7, #24
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	220d      	movs	r2, #13
 800ac7c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f640 028e 	movw	r2, #2190	; 0x88e
 800ac86:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ac88:	bf00      	nop
 800ac8a:	3714      	adds	r7, #20
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bc80      	pop	{r7}
 800ac90:	4770      	bx	lr

0800ac92 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b085      	sub	sp, #20
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	332c      	adds	r3, #44	; 0x2c
 800aca6:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	78fa      	ldrb	r2, [r7, #3]
 800acac:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	2200      	movs	r2, #0
 800acb2:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2202      	movs	r2, #2
 800acb8:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2200      	movs	r2, #0
 800acbe:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	78fa      	ldrb	r2, [r7, #3]
 800acc4:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2200      	movs	r2, #0
 800acca:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2202      	movs	r2, #2
 800acd0:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	2200      	movs	r2, #0
 800acd6:	71da      	strb	r2, [r3, #7]

}
 800acd8:	bf00      	nop
 800acda:	3714      	adds	r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	bc80      	pop	{r7}
 800ace0:	4770      	bx	lr
	...

0800ace4 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800acec:	2300      	movs	r3, #0
 800acee:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	332c      	adds	r3, #44	; 0x2c
 800acf8:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800ad00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10c      	bne.n	800ad22 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2203      	movs	r2, #3
 800ad0c:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2202      	movs	r2, #2
 800ad18:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	71da      	strb	r2, [r3, #7]
 800ad20:	e060      	b.n	800ade4 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	795b      	ldrb	r3, [r3, #5]
 800ad26:	2bff      	cmp	r3, #255	; 0xff
 800ad28:	d103      	bne.n	800ad32 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2280      	movs	r2, #128	; 0x80
 800ad2e:	715a      	strb	r2, [r3, #5]
 800ad30:	e005      	b.n	800ad3e <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	795b      	ldrb	r3, [r3, #5]
 800ad36:	3301      	adds	r3, #1
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	799b      	ldrb	r3, [r3, #6]
 800ad42:	f083 0302 	eor.w	r3, r3, #2
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	791b      	ldrb	r3, [r3, #4]
 800ad50:	3b03      	subs	r3, #3
 800ad52:	2b05      	cmp	r3, #5
 800ad54:	d839      	bhi.n	800adca <VL53L1_update_ll_driver_rd_state+0xe6>
 800ad56:	a201      	add	r2, pc, #4	; (adr r2, 800ad5c <VL53L1_update_ll_driver_rd_state+0x78>)
 800ad58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5c:	0800ad75 	.word	0x0800ad75
 800ad60:	0800adcb 	.word	0x0800adcb
 800ad64:	0800adcb 	.word	0x0800adcb
 800ad68:	0800ad9f 	.word	0x0800ad9f
 800ad6c:	0800adad 	.word	0x0800adad
 800ad70:	0800adb5 	.word	0x0800adb5

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800ad7a:	f003 0302 	and.w	r3, r3, #2
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	dd03      	ble.n	800ad8a <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2206      	movs	r2, #6
 800ad86:	711a      	strb	r2, [r3, #4]
 800ad88:	e002      	b.n	800ad90 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2208      	movs	r2, #8
 800ad8e:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	71da      	strb	r2, [r3, #7]

		break;
 800ad9c:	e022      	b.n	800ade4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2208      	movs	r2, #8
 800ada8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800adaa:	e01b      	b.n	800ade4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2208      	movs	r2, #8
 800adb0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800adb2:	e017      	b.n	800ade4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	79db      	ldrb	r3, [r3, #7]
 800adb8:	f083 0301 	eor.w	r3, r3, #1
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2208      	movs	r2, #8
 800adc6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800adc8:	e00c      	b.n	800ade4 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2203      	movs	r2, #3
 800adce:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2202      	movs	r2, #2
 800adda:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	71da      	strb	r2, [r3, #7]

		break;
 800ade2:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800ade4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	371c      	adds	r7, #28
 800adec:	46bd      	mov	sp, r7
 800adee:	bc80      	pop	{r7}
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop

0800adf4 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b089      	sub	sp, #36	; 0x24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800adfc:	2300      	movs	r3, #0
 800adfe:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	332c      	adds	r3, #44	; 0x2c
 800ae08:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800ae10:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800ae12:	2300      	movs	r3, #0
 800ae14:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800ae22:	f003 031f 	and.w	r3, r3, #31
 800ae26:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	78db      	ldrb	r3, [r3, #3]
 800ae2c:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800ae32:	111b      	asrs	r3, r3, #4
 800ae34:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800ae36:	f003 0302 	and.w	r3, r3, #2
 800ae3a:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800ae42:	f003 0320 	and.w	r3, r3, #32
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d017      	beq.n	800ae7a <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	791b      	ldrb	r3, [r3, #4]
 800ae4e:	2b06      	cmp	r3, #6
 800ae50:	d105      	bne.n	800ae5e <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	2b12      	cmp	r3, #18
 800ae56:	d010      	beq.n	800ae7a <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800ae58:	23ef      	movs	r3, #239	; 0xef
 800ae5a:	77fb      	strb	r3, [r7, #31]
 800ae5c:	e00d      	b.n	800ae7a <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	795b      	ldrb	r3, [r3, #5]
 800ae62:	7bba      	ldrb	r2, [r7, #14]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d001      	beq.n	800ae6c <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800ae68:	23ee      	movs	r3, #238	; 0xee
 800ae6a:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	799b      	ldrb	r3, [r3, #6]
 800ae70:	7b7a      	ldrb	r2, [r7, #13]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d001      	beq.n	800ae7a <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800ae76:	23ed      	movs	r3, #237	; 0xed
 800ae78:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800ae7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3724      	adds	r7, #36	; 0x24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bc80      	pop	{r7}
 800ae86:	4770      	bx	lr

0800ae88 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800ae90:	2300      	movs	r3, #0
 800ae92:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	332c      	adds	r3, #44	; 0x2c
 800ae9c:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800aea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10c      	bne.n	800aec6 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2203      	movs	r2, #3
 800aeb0:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2202      	movs	r2, #2
 800aebc:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	70da      	strb	r2, [r3, #3]
 800aec4:	e03e      	b.n	800af44 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	785b      	ldrb	r3, [r3, #1]
 800aeca:	2bff      	cmp	r3, #255	; 0xff
 800aecc:	d103      	bne.n	800aed6 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2280      	movs	r2, #128	; 0x80
 800aed2:	705a      	strb	r2, [r3, #1]
 800aed4:	e005      	b.n	800aee2 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	785b      	ldrb	r3, [r3, #1]
 800aeda:	3301      	adds	r3, #1
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	789b      	ldrb	r3, [r3, #2]
 800aee6:	f083 0302 	eor.w	r3, r3, #2
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	2b03      	cmp	r3, #3
 800aef6:	d002      	beq.n	800aefe <VL53L1_update_ll_driver_cfg_state+0x76>
 800aef8:	2b04      	cmp	r3, #4
 800aefa:	d00e      	beq.n	800af1a <VL53L1_update_ll_driver_cfg_state+0x92>
 800aefc:	e015      	b.n	800af2a <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	78db      	ldrb	r3, [r3, #3]
 800af02:	f083 0301 	eor.w	r3, r3, #1
 800af06:	b2da      	uxtb	r2, r3
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2201      	movs	r2, #1
 800af10:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2204      	movs	r2, #4
 800af16:	701a      	strb	r2, [r3, #0]
		break;
 800af18:	e014      	b.n	800af44 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	78db      	ldrb	r3, [r3, #3]
 800af1e:	f083 0301 	eor.w	r3, r3, #1
 800af22:	b2da      	uxtb	r2, r3
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	70da      	strb	r2, [r3, #3]

		break;
 800af28:	e00c      	b.n	800af44 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2203      	movs	r2, #3
 800af2e:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2202      	movs	r2, #2
 800af3a:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	70da      	strb	r2, [r3, #3]

		break;
 800af42:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800af44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	371c      	adds	r7, #28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bc80      	pop	{r7}
 800af50:	4770      	bx	lr

0800af52 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	7c1a      	ldrb	r2, [r3, #16]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	3301      	adds	r3, #1
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	7c52      	ldrb	r2, [r2, #17]
 800af6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	3302      	adds	r3, #2
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	7c92      	ldrb	r2, [r2, #18]
 800af76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	3303      	adds	r3, #3
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	7cd2      	ldrb	r2, [r2, #19]
 800af80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	3304      	adds	r3, #4
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	7d12      	ldrb	r2, [r2, #20]
 800af8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	3305      	adds	r3, #5
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	7d52      	ldrb	r2, [r2, #21]
 800af94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	3306      	adds	r3, #6
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	7d92      	ldrb	r2, [r2, #22]
 800af9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	3307      	adds	r3, #7
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	7dd2      	ldrb	r2, [r2, #23]
 800afa8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	3308      	adds	r3, #8
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	7e12      	ldrb	r2, [r2, #24]
 800afb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	3309      	adds	r3, #9
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	7e52      	ldrb	r2, [r2, #25]
 800afbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	330a      	adds	r3, #10
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	7e92      	ldrb	r2, [r2, #26]
 800afc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	330b      	adds	r3, #11
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	7ed2      	ldrb	r2, [r2, #27]
 800afd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	330c      	adds	r3, #12
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	7f12      	ldrb	r2, [r2, #28]
 800afda:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	330d      	adds	r3, #13
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	7f52      	ldrb	r2, [r2, #29]
 800afe4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	330e      	adds	r3, #14
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	7f92      	ldrb	r2, [r2, #30]
 800afee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	330f      	adds	r3, #15
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	7fd2      	ldrb	r2, [r2, #31]
 800aff8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	3310      	adds	r3, #16
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b004:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	3311      	adds	r3, #17
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b010:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	3312      	adds	r3, #18
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800b01c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	3313      	adds	r3, #19
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800b028:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	3314      	adds	r3, #20
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b034:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	3315      	adds	r3, #21
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b040:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	3316      	adds	r3, #22
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800b04c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	3317      	adds	r3, #23
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800b058:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	3318      	adds	r3, #24
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800b064:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	3319      	adds	r3, #25
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800b070:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	331a      	adds	r3, #26
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800b07c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	331b      	adds	r3, #27
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800b088:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	331c      	adds	r3, #28
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b094:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	331d      	adds	r3, #29
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800b0a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	331e      	adds	r3, #30
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800b0ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	331f      	adds	r3, #31
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800b0b8:	701a      	strb	r2, [r3, #0]
}
 800b0ba:	bf00      	nop
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bc80      	pop	{r7}
 800b0c2:	4770      	bx	lr

0800b0c4 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	603a      	str	r2, [r7, #0]
 800b0ce:	80fb      	strh	r3, [r7, #6]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800b0dc:	88fb      	ldrh	r3, [r7, #6]
 800b0de:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	81fb      	strh	r3, [r7, #14]
 800b0e4:	e00e      	b.n	800b104 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800b0e6:	88ba      	ldrh	r2, [r7, #4]
 800b0e8:	89fb      	ldrh	r3, [r7, #14]
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	683a      	ldr	r2, [r7, #0]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	89ba      	ldrh	r2, [r7, #12]
 800b0f4:	b2d2      	uxtb	r2, r2
 800b0f6:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800b0f8:	89bb      	ldrh	r3, [r7, #12]
 800b0fa:	0a1b      	lsrs	r3, r3, #8
 800b0fc:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800b0fe:	89fb      	ldrh	r3, [r7, #14]
 800b100:	3301      	adds	r3, #1
 800b102:	81fb      	strh	r3, [r7, #14]
 800b104:	89fa      	ldrh	r2, [r7, #14]
 800b106:	88bb      	ldrh	r3, [r7, #4]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d3ec      	bcc.n	800b0e6 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800b10c:	bf00      	nop
 800b10e:	bf00      	nop
 800b110:	3714      	adds	r7, #20
 800b112:	46bd      	mov	sp, r7
 800b114:	bc80      	pop	{r7}
 800b116:	4770      	bx	lr

0800b118 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	4603      	mov	r3, r0
 800b120:	6039      	str	r1, [r7, #0]
 800b122:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800b124:	2300      	movs	r3, #0
 800b126:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800b128:	e00a      	b.n	800b140 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800b12a:	89fb      	ldrh	r3, [r7, #14]
 800b12c:	021b      	lsls	r3, r3, #8
 800b12e:	b21a      	sxth	r2, r3
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	1c59      	adds	r1, r3, #1
 800b134:	6039      	str	r1, [r7, #0]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	b21b      	sxth	r3, r3
 800b13a:	4313      	orrs	r3, r2
 800b13c:	b21b      	sxth	r3, r3
 800b13e:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800b140:	88fb      	ldrh	r3, [r7, #6]
 800b142:	1e5a      	subs	r2, r3, #1
 800b144:	80fa      	strh	r2, [r7, #6]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1ef      	bne.n	800b12a <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800b14a:	89fb      	ldrh	r3, [r7, #14]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	bc80      	pop	{r7}
 800b154:	4770      	bx	lr

0800b156 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b156:	b480      	push	{r7}
 800b158:	b085      	sub	sp, #20
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	4603      	mov	r3, r0
 800b15e:	603a      	str	r2, [r7, #0]
 800b160:	80fb      	strh	r3, [r7, #6]
 800b162:	460b      	mov	r3, r1
 800b164:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800b16e:	88fb      	ldrh	r3, [r7, #6]
 800b170:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800b172:	2300      	movs	r3, #0
 800b174:	81fb      	strh	r3, [r7, #14]
 800b176:	e00f      	b.n	800b198 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800b178:	88ba      	ldrh	r2, [r7, #4]
 800b17a:	89fb      	ldrh	r3, [r7, #14]
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	3b01      	subs	r3, #1
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	4413      	add	r3, r2
 800b184:	89ba      	ldrh	r2, [r7, #12]
 800b186:	b2d2      	uxtb	r2, r2
 800b188:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800b18a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b18e:	121b      	asrs	r3, r3, #8
 800b190:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800b192:	89fb      	ldrh	r3, [r7, #14]
 800b194:	3301      	adds	r3, #1
 800b196:	81fb      	strh	r3, [r7, #14]
 800b198:	89fa      	ldrh	r2, [r7, #14]
 800b19a:	88bb      	ldrh	r3, [r7, #4]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d3eb      	bcc.n	800b178 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800b1a0:	bf00      	nop
 800b1a2:	bf00      	nop
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bc80      	pop	{r7}
 800b1aa:	4770      	bx	lr

0800b1ac <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	6039      	str	r1, [r7, #0]
 800b1b6:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	b25b      	sxtb	r3, r3
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	da0e      	bge.n	800b1e4 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800b1c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1ca:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800b1cc:	e00a      	b.n	800b1e4 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800b1ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	b21a      	sxth	r2, r3
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	1c59      	adds	r1, r3, #1
 800b1da:	6039      	str	r1, [r7, #0]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	b21b      	sxth	r3, r3
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800b1e4:	88fb      	ldrh	r3, [r7, #6]
 800b1e6:	1e5a      	subs	r2, r3, #1
 800b1e8:	80fa      	strh	r2, [r7, #6]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1ef      	bne.n	800b1ce <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800b1ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3714      	adds	r7, #20
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bc80      	pop	{r7}
 800b1fa:	4770      	bx	lr

0800b1fc <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b087      	sub	sp, #28
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	460b      	mov	r3, r1
 800b206:	607a      	str	r2, [r7, #4]
 800b208:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800b216:	2300      	movs	r3, #0
 800b218:	82fb      	strh	r3, [r7, #22]
 800b21a:	e00e      	b.n	800b23a <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800b21c:	897a      	ldrh	r2, [r7, #10]
 800b21e:	8afb      	ldrh	r3, [r7, #22]
 800b220:	1ad3      	subs	r3, r2, r3
 800b222:	3b01      	subs	r3, #1
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	4413      	add	r3, r2
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	b2d2      	uxtb	r2, r2
 800b22c:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	0a1b      	lsrs	r3, r3, #8
 800b232:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800b234:	8afb      	ldrh	r3, [r7, #22]
 800b236:	3301      	adds	r3, #1
 800b238:	82fb      	strh	r3, [r7, #22]
 800b23a:	8afa      	ldrh	r2, [r7, #22]
 800b23c:	897b      	ldrh	r3, [r7, #10]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d3ec      	bcc.n	800b21c <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800b242:	bf00      	nop
 800b244:	bf00      	nop
 800b246:	371c      	adds	r7, #28
 800b248:	46bd      	mov	sp, r7
 800b24a:	bc80      	pop	{r7}
 800b24c:	4770      	bx	lr

0800b24e <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b24e:	b480      	push	{r7}
 800b250:	b085      	sub	sp, #20
 800b252:	af00      	add	r7, sp, #0
 800b254:	4603      	mov	r3, r0
 800b256:	6039      	str	r1, [r7, #0]
 800b258:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800b25a:	2300      	movs	r3, #0
 800b25c:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800b25e:	e007      	b.n	800b270 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	021a      	lsls	r2, r3, #8
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	1c59      	adds	r1, r3, #1
 800b268:	6039      	str	r1, [r7, #0]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	1e5a      	subs	r2, r3, #1
 800b274:	80fa      	strh	r2, [r7, #6]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1f2      	bne.n	800b260 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800b27a:	68fb      	ldr	r3, [r7, #12]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	bc80      	pop	{r7}
 800b284:	4770      	bx	lr

0800b286 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b286:	b480      	push	{r7}
 800b288:	b085      	sub	sp, #20
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	4603      	mov	r3, r0
 800b28e:	6039      	str	r1, [r7, #0]
 800b290:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800b292:	2300      	movs	r3, #0
 800b294:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	b25b      	sxtb	r3, r3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	da0b      	bge.n	800b2b8 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800b2a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2a4:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800b2a6:	e007      	b.n	800b2b8 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	021a      	lsls	r2, r3, #8
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	1c59      	adds	r1, r3, #1
 800b2b0:	6039      	str	r1, [r7, #0]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800b2b8:	88fb      	ldrh	r3, [r7, #6]
 800b2ba:	1e5a      	subs	r2, r3, #1
 800b2bc:	80fa      	strh	r2, [r7, #6]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1f2      	bne.n	800b2a8 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bc80      	pop	{r7}
 800b2cc:	4770      	bx	lr

0800b2ce <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	78fa      	ldrb	r2, [r7, #3]
 800b2e6:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	2183      	movs	r1, #131	; 0x83
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f001 fd01 	bl	800ccfc <VL53L1_WrByte>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800b2fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b312:	2300      	movs	r3, #0
 800b314:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800b316:	2101      	movs	r1, #1
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f7ff ffd8 	bl	800b2ce <VL53L1_set_powerforce_register>
 800b31e:	4603      	mov	r3, r0
 800b320:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b322:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b086      	sub	sp, #24
 800b332:	af00      	add	r7, sp, #0
 800b334:	4603      	mov	r3, r0
 800b336:	460a      	mov	r2, r1
 800b338:	80fb      	strh	r3, [r7, #6]
 800b33a:	4613      	mov	r3, r2
 800b33c:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800b33e:	2300      	movs	r3, #0
 800b340:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800b342:	2300      	movs	r3, #0
 800b344:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800b346:	2300      	movs	r3, #0
 800b348:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b34a:	88fb      	ldrh	r3, [r7, #6]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 faa0 	bl	800b892 <VL53L1_calc_pll_period_us>
 800b352:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800b354:	797b      	ldrb	r3, [r7, #5]
 800b356:	4618      	mov	r0, r3
 800b358:	f000 faae 	bl	800b8b8 <VL53L1_decode_vcsel_period>
 800b35c:	4603      	mov	r3, r0
 800b35e:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	4613      	mov	r3, r2
 800b364:	00db      	lsls	r3, r3, #3
 800b366:	4413      	add	r3, r2
 800b368:	021b      	lsls	r3, r3, #8
 800b36a:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	099b      	lsrs	r3, r3, #6
 800b370:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800b372:	7cfa      	ldrb	r2, [r7, #19]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	fb02 f303 	mul.w	r3, r2, r3
 800b37a:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	099b      	lsrs	r3, r3, #6
 800b380:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800b382:	68fb      	ldr	r3, [r7, #12]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3718      	adds	r7, #24
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b089      	sub	sp, #36	; 0x24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	4608      	mov	r0, r1
 800b396:	4611      	mov	r1, r2
 800b398:	461a      	mov	r2, r3
 800b39a:	4603      	mov	r3, r0
 800b39c:	817b      	strh	r3, [r7, #10]
 800b39e:	460b      	mov	r3, r1
 800b3a0:	813b      	strh	r3, [r7, #8]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	011b      	lsls	r3, r3, #4
 800b3be:	4a23      	ldr	r2, [pc, #140]	; (800b44c <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b3c0:	fb82 1203 	smull	r1, r2, r2, r3
 800b3c4:	1192      	asrs	r2, r2, #6
 800b3c6:	17db      	asrs	r3, r3, #31
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800b3cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	da03      	bge.n	800b3dc <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800b3d4:	897b      	ldrh	r3, [r7, #10]
 800b3d6:	425b      	negs	r3, r3
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800b3dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	da03      	bge.n	800b3ec <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800b3e4:	893b      	ldrh	r3, [r7, #8]
 800b3e6:	425b      	negs	r3, r3
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800b3ec:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b3f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	015b      	lsls	r3, r3, #5
 800b3f8:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	4a13      	ldr	r2, [pc, #76]	; (800b44c <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b3fe:	fb82 1203 	smull	r1, r2, r2, r3
 800b402:	1192      	asrs	r2, r2, #6
 800b404:	17db      	asrs	r3, r3, #31
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	4413      	add	r3, r2
 800b410:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800b412:	79fa      	ldrb	r2, [r7, #7]
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	fb02 f303 	mul.w	r3, r2, r3
 800b41a:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	3310      	adds	r3, #16
 800b420:	2b00      	cmp	r3, #0
 800b422:	da00      	bge.n	800b426 <VL53L1_calc_range_ignore_threshold+0x9a>
 800b424:	331f      	adds	r3, #31
 800b426:	115b      	asrs	r3, r3, #5
 800b428:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b430:	db03      	blt.n	800b43a <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800b432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b436:	83fb      	strh	r3, [r7, #30]
 800b438:	e001      	b.n	800b43e <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800b43e:	8bfb      	ldrh	r3, [r7, #30]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3724      	adds	r7, #36	; 0x24
 800b444:	46bd      	mov	sp, r7
 800b446:	bc80      	pop	{r7}
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	10624dd3 	.word	0x10624dd3

0800b450 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	031a      	lsls	r2, r3, #12
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	085b      	lsrs	r3, r3, #1
 800b466:	441a      	add	r2, r3
	timeout_mclks   =
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b46e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800b470:	68fb      	ldr	r3, [r7, #12]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	bc80      	pop	{r7}
 800b47a:	4770      	bx	lr

0800b47c <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff ffdd 	bl	800b450 <VL53L1_calc_timeout_mclks>
 800b496:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f000 f860 	bl	800b55e <VL53L1_encode_timeout>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800b4a2:	897b      	ldrh	r3, [r7, #10]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800b4ac:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b4b0:	b087      	sub	sp, #28
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800b4bc:	f04f 0000 	mov.w	r0, #0
 800b4c0:	f04f 0100 	mov.w	r1, #0
 800b4c4:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	4688      	mov	r8, r1
 800b4ce:	4681      	mov	r9, r0
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	fb04 f009 	mul.w	r0, r4, r9
 800b4dc:	fb08 f105 	mul.w	r1, r8, r5
 800b4e0:	4401      	add	r1, r0
 800b4e2:	fba8 2304 	umull	r2, r3, r8, r4
 800b4e6:	4419      	add	r1, r3
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800b4ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800b4f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b4f6:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800b4fa:	f143 0b00 	adc.w	fp, r3, #0
 800b4fe:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800b502:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b506:	f04f 0200 	mov.w	r2, #0
 800b50a:	f04f 0300 	mov.w	r3, #0
 800b50e:	0b02      	lsrs	r2, r0, #12
 800b510:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b514:	0b0b      	lsrs	r3, r1, #12
 800b516:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800b51e:	697b      	ldr	r3, [r7, #20]
}
 800b520:	4618      	mov	r0, r3
 800b522:	371c      	adds	r7, #28
 800b524:	46bd      	mov	sp, r7
 800b526:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b52a:	4770      	bx	lr

0800b52c <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	4603      	mov	r3, r0
 800b534:	6039      	str	r1, [r7, #0]
 800b536:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800b540:	88fb      	ldrh	r3, [r7, #6]
 800b542:	4618      	mov	r0, r3
 800b544:	f000 f836 	bl	800b5b4 <VL53L1_decode_timeout>
 800b548:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f7ff ffad 	bl	800b4ac <VL53L1_calc_timeout_us>
 800b552:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800b554:	68bb      	ldr	r3, [r7, #8]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800b55e:	b480      	push	{r7}
 800b560:	b087      	sub	sp, #28
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800b566:	2300      	movs	r3, #0
 800b568:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b56a:	2300      	movs	r3, #0
 800b56c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b56e:	2300      	movs	r3, #0
 800b570:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d017      	beq.n	800b5a8 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b57e:	e005      	b.n	800b58c <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	085b      	lsrs	r3, r3, #1
 800b584:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b586:	89fb      	ldrh	r3, [r7, #14]
 800b588:	3301      	adds	r3, #1
 800b58a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1f4      	bne.n	800b580 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b596:	89fb      	ldrh	r3, [r7, #14]
 800b598:	021b      	lsls	r3, r3, #8
 800b59a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b5a4:	4413      	add	r3, r2
 800b5a6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b5a8:	8afb      	ldrh	r3, [r7, #22]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	371c      	adds	r7, #28
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bc80      	pop	{r7}
 800b5b2:	4770      	bx	lr

0800b5b4 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b5c2:	88fb      	ldrh	r3, [r7, #6]
 800b5c4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b5c6:	88fa      	ldrh	r2, [r7, #6]
 800b5c8:	0a12      	lsrs	r2, r2, #8
 800b5ca:	b292      	uxth	r2, r2
 800b5cc:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bc80      	pop	{r7}
 800b5dc:	4770      	bx	lr

0800b5de <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b088      	sub	sp, #32
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	60b9      	str	r1, [r7, #8]
 800b5e8:	607a      	str	r2, [r7, #4]
 800b5ea:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800b5fc:	887b      	ldrh	r3, [r7, #2]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d102      	bne.n	800b608 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b602:	23f1      	movs	r3, #241	; 0xf1
 800b604:	77fb      	strb	r3, [r7, #31]
 800b606:	e05d      	b.n	800b6c4 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60a:	799a      	ldrb	r2, [r3, #6]
 800b60c:	887b      	ldrh	r3, [r7, #2]
 800b60e:	4611      	mov	r1, r2
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff fe8c 	bl	800b32e <VL53L1_calc_macro_period_us>
 800b616:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800b618:	6979      	ldr	r1, [r7, #20]
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f7ff ff18 	bl	800b450 <VL53L1_calc_timeout_mclks>
 800b620:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	2bff      	cmp	r3, #255	; 0xff
 800b626:	d901      	bls.n	800b62c <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800b628:	23ff      	movs	r3, #255	; 0xff
 800b62a:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800b630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b632:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b634:	6979      	ldr	r1, [r7, #20]
 800b636:	68b8      	ldr	r0, [r7, #8]
 800b638:	f7ff ff20 	bl	800b47c <VL53L1_calc_encoded_timeout>
 800b63c:	4603      	mov	r3, r0
 800b63e:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b640:	8a7b      	ldrh	r3, [r7, #18]
 800b642:	0a1b      	lsrs	r3, r3, #8
 800b644:	b29b      	uxth	r3, r3
 800b646:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b64c:	8a7b      	ldrh	r3, [r7, #18]
 800b64e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b652:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b654:	6979      	ldr	r1, [r7, #20]
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7ff ff10 	bl	800b47c <VL53L1_calc_encoded_timeout>
 800b65c:	4603      	mov	r3, r0
 800b65e:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b660:	8a7b      	ldrh	r3, [r7, #18]
 800b662:	0a1b      	lsrs	r3, r3, #8
 800b664:	b29b      	uxth	r3, r3
 800b666:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800b668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b66c:	8a7b      	ldrh	r3, [r7, #18]
 800b66e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800b670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b672:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b676:	7a5a      	ldrb	r2, [r3, #9]
 800b678:	887b      	ldrh	r3, [r7, #2]
 800b67a:	4611      	mov	r1, r2
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7ff fe56 	bl	800b32e <VL53L1_calc_macro_period_us>
 800b682:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800b684:	6979      	ldr	r1, [r7, #20]
 800b686:	68b8      	ldr	r0, [r7, #8]
 800b688:	f7ff fef8 	bl	800b47c <VL53L1_calc_encoded_timeout>
 800b68c:	4603      	mov	r3, r0
 800b68e:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b690:	8a7b      	ldrh	r3, [r7, #18]
 800b692:	0a1b      	lsrs	r3, r3, #8
 800b694:	b29b      	uxth	r3, r3
 800b696:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800b698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b69c:	8a7b      	ldrh	r3, [r7, #18]
 800b69e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800b6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a2:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800b6a4:	6979      	ldr	r1, [r7, #20]
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff fee8 	bl	800b47c <VL53L1_calc_encoded_timeout>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b6b0:	8a7b      	ldrh	r3, [r7, #18]
 800b6b2:	0a1b      	lsrs	r3, r3, #8
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ba:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b6bc:	8a7b      	ldrh	r3, [r7, #18]
 800b6be:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800b6c4:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3720      	adds	r7, #32
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	603a      	str	r2, [r7, #0]
 800b6da:	71fb      	strb	r3, [r7, #7]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800b6e0:	79fb      	ldrb	r3, [r7, #7]
 800b6e2:	2b07      	cmp	r3, #7
 800b6e4:	d90a      	bls.n	800b6fc <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800b6e6:	79bb      	ldrb	r3, [r7, #6]
 800b6e8:	00db      	lsls	r3, r3, #3
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	79fb      	ldrb	r3, [r7, #7]
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	3b71      	subs	r3, #113	; 0x71
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800b6fa:	e00a      	b.n	800b712 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800b6fc:	79bb      	ldrb	r3, [r7, #6]
 800b6fe:	f1c3 030f 	rsb	r3, r3, #15
 800b702:	b2db      	uxtb	r3, r3
 800b704:	00db      	lsls	r3, r3, #3
 800b706:	b2da      	uxtb	r2, r3
 800b708:	79fb      	ldrb	r3, [r7, #7]
 800b70a:	4413      	add	r3, r2
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	701a      	strb	r2, [r3, #0]
}
 800b712:	bf00      	nop
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	bc80      	pop	{r7}
 800b71a:	4770      	bx	lr

0800b71c <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
 800b72c:	091b      	lsrs	r3, r3, #4
 800b72e:	b2da      	uxtb	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
 800b736:	f003 030f 	and.w	r3, r3, #15
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	701a      	strb	r2, [r3, #0]

}
 800b740:	bf00      	nop
 800b742:	3714      	adds	r7, #20
 800b744:	46bd      	mov	sp, r7
 800b746:	bc80      	pop	{r7}
 800b748:	4770      	bx	lr

0800b74a <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b083      	sub	sp, #12
 800b74e:	af00      	add	r7, sp, #0
 800b750:	4603      	mov	r3, r0
 800b752:	603a      	str	r2, [r7, #0]
 800b754:	71fb      	strb	r3, [r7, #7]
 800b756:	460b      	mov	r3, r1
 800b758:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800b75a:	79bb      	ldrb	r3, [r7, #6]
 800b75c:	011b      	lsls	r3, r3, #4
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	79fb      	ldrb	r3, [r7, #7]
 800b762:	4413      	add	r3, r2
 800b764:	b2da      	uxtb	r2, r3
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	701a      	strb	r2, [r3, #0]

}
 800b76a:	bf00      	nop
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	bc80      	pop	{r7}
 800b772:	4770      	bx	lr

0800b774 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b77c:	2300      	movs	r3, #0
 800b77e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2203      	movs	r2, #3
 800b788:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	2200      	movs	r2, #0
 800b790:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2200      	movs	r2, #0
 800b798:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800b7cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bc80      	pop	{r7}
 800b7d8:	4770      	bx	lr

0800b7da <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b087      	sub	sp, #28
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	60f8      	str	r0, [r7, #12]
 800b7e2:	60b9      	str	r1, [r7, #8]
 800b7e4:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	229b      	movs	r2, #155	; 0x9b
 800b7fa:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800b7fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b800:	4618      	mov	r0, r3
 800b802:	371c      	adds	r7, #28
 800b804:	46bd      	mov	sp, r7
 800b806:	bc80      	pop	{r7}
 800b808:	4770      	bx	lr

0800b80a <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b085      	sub	sp, #20
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b816:	2300      	movs	r3, #0
 800b818:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800b838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b84a:	f003 0303 	and.w	r3, r3, #3
 800b84e:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b85a:	4413      	add	r3, r2
 800b85c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800b884:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bc80      	pop	{r7}
 800b890:	4770      	bx	lr

0800b892 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b892:	b480      	push	{r7}
 800b894:	b085      	sub	sp, #20
 800b896:	af00      	add	r7, sp, #0
 800b898:	4603      	mov	r3, r0
 800b89a:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b8a0:	88fb      	ldrh	r3, [r7, #6]
 800b8a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b8a6:	fb92 f3f3 	sdiv	r3, r2, r3
 800b8aa:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bc80      	pop	{r7}
 800b8b6:	4770      	bx	lr

0800b8b8 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4603      	mov	r3, r0
 800b8c0:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b8c6:	79fb      	ldrb	r3, [r7, #7]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3714      	adds	r7, #20
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bc80      	pop	{r7}
 800b8da:	4770      	bx	lr

0800b8dc <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800b8ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	da10      	bge.n	800b914 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800b8f2:	7bfb      	ldrb	r3, [r7, #15]
 800b8f4:	43db      	mvns	r3, r3
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	f003 0307 	and.w	r3, r3, #7
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	3308      	adds	r3, #8
 800b900:	b2da      	uxtb	r2, r3
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800b906:	7bfb      	ldrb	r3, [r7, #15]
 800b908:	3b80      	subs	r3, #128	; 0x80
 800b90a:	10db      	asrs	r3, r3, #3
 800b90c:	b2da      	uxtb	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800b912:	e00c      	b.n	800b92e <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800b914:	7bfb      	ldrb	r3, [r7, #15]
 800b916:	f003 0307 	and.w	r3, r3, #7
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800b920:	7bfb      	ldrb	r3, [r7, #15]
 800b922:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800b926:	10db      	asrs	r3, r3, #3
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	701a      	strb	r2, [r3, #0]
}
 800b92e:	bf00      	nop
 800b930:	3714      	adds	r7, #20
 800b932:	46bd      	mov	sp, r7
 800b934:	bc80      	pop	{r7}
 800b936:	4770      	bx	lr

0800b938 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	460b      	mov	r3, r1
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b946:	2300      	movs	r3, #0
 800b948:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800b94a:	897b      	ldrh	r3, [r7, #10]
 800b94c:	2b0a      	cmp	r3, #10
 800b94e:	d802      	bhi.n	800b956 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800b950:	f06f 0309 	mvn.w	r3, #9
 800b954:	e047      	b.n	800b9e6 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b95e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800b96c:	f002 020f 	and.w	r2, r2, #15
 800b970:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800b972:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800b97c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b980:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800b982:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800b98c:	f002 0203 	and.w	r2, r2, #3
 800b990:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800b992:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800b99c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b9a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800b9a2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	88d8      	ldrh	r0, [r3, #6]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	3305      	adds	r3, #5
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	2102      	movs	r1, #2
 800b9b0:	f7ff fb88 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800b9bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800b9c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800b9d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b9d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800b9d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800b9e0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800b9e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3718      	adds	r7, #24
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b086      	sub	sp, #24
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	60b9      	str	r1, [r7, #8]
 800b9f8:	607a      	str	r2, [r7, #4]
 800b9fa:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800ba00:	89fb      	ldrh	r3, [r7, #14]
 800ba02:	2b0a      	cmp	r3, #10
 800ba04:	d802      	bhi.n	800ba0c <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ba06:	f06f 0309 	mvn.w	r3, #9
 800ba0a:	e046      	b.n	800ba9a <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba14:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	f003 030f 	and.w	r3, r3, #15
 800ba24:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	3302      	adds	r3, #2
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba34:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	3303      	adds	r3, #3
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	f003 0303 	and.w	r3, r3, #3
 800ba44:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba54:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	3305      	adds	r3, #5
 800ba5e:	4619      	mov	r1, r3
 800ba60:	2002      	movs	r0, #2
 800ba62:	f7ff fb59 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800ba66:	4603      	mov	r3, r0
 800ba68:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	79da      	ldrb	r2, [r3, #7]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	7a1a      	ldrb	r2, [r3, #8]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	3309      	adds	r3, #9
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba88:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	7a9a      	ldrb	r2, [r3, #10]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800ba96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3718      	adds	r7, #24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b086      	sub	sp, #24
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800baac:	2300      	movs	r3, #0
 800baae:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800bab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d108      	bne.n	800baca <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800bab8:	f107 020c 	add.w	r2, r7, #12
 800babc:	230b      	movs	r3, #11
 800babe:	2101      	movs	r1, #1
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f001 f8e5 	bl	800cc90 <VL53L1_ReadMulti>
 800bac6:	4603      	mov	r3, r0
 800bac8:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800baca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d108      	bne.n	800bae4 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800bad2:	f107 030c 	add.w	r3, r7, #12
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	4619      	mov	r1, r3
 800bada:	200b      	movs	r0, #11
 800badc:	f7ff ff87 	bl	800b9ee <VL53L1_i2c_decode_static_nvm_managed>
 800bae0:	4603      	mov	r3, r0
 800bae2:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800bae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3718      	adds	r7, #24
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	460b      	mov	r3, r1
 800bafa:	607a      	str	r2, [r7, #4]
 800bafc:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bafe:	2300      	movs	r3, #0
 800bb00:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800bb02:	897b      	ldrh	r3, [r7, #10]
 800bb04:	2b16      	cmp	r3, #22
 800bb06:	d802      	bhi.n	800bb0e <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800bb08:	f06f 0309 	mvn.w	r3, #9
 800bb0c:	e076      	b.n	800bbfc <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800bb1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800bb28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800bb2e:	68fa      	ldr	r2, [r7, #12]
 800bb30:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800bb32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800bb3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800bb46:	f002 020f 	and.w	r2, r2, #15
 800bb4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800bb4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800bb56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800bb60:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800bb64:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800bb66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800bb70:	f002 0203 	and.w	r2, r2, #3
 800bb74:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800bb76:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	8958      	ldrh	r0, [r3, #10]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	3309      	adds	r3, #9
 800bb80:	461a      	mov	r2, r3
 800bb82:	2102      	movs	r1, #2
 800bb84:	f7ff fa9e 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	330b      	adds	r3, #11
 800bb92:	461a      	mov	r2, r3
 800bb94:	2102      	movs	r1, #2
 800bb96:	f7ff fade 	bl	800b156 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	330d      	adds	r3, #13
 800bba4:	461a      	mov	r2, r3
 800bba6:	2102      	movs	r1, #2
 800bba8:	f7ff fad5 	bl	800b156 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	8a18      	ldrh	r0, [r3, #16]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	330f      	adds	r3, #15
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	2102      	movs	r1, #2
 800bbb8:	f7ff fa84 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800bbc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbc6:	b218      	sxth	r0, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	3311      	adds	r3, #17
 800bbcc:	461a      	mov	r2, r3
 800bbce:	2102      	movs	r1, #2
 800bbd0:	f7ff fac1 	bl	800b156 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	3313      	adds	r3, #19
 800bbde:	461a      	mov	r2, r3
 800bbe0:	2102      	movs	r1, #2
 800bbe2:	f7ff fab8 	bl	800b156 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	3315      	adds	r3, #21
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	2102      	movs	r1, #2
 800bbf4:	f7ff faaf 	bl	800b156 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800bbf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
 800bc10:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bc12:	2300      	movs	r3, #0
 800bc14:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800bc16:	89fb      	ldrh	r3, [r7, #14]
 800bc18:	2b16      	cmp	r3, #22
 800bc1a:	d802      	bhi.n	800bc22 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800bc1c:	f06f 0309 	mvn.w	r3, #9
 800bc20:	e079      	b.n	800bd16 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	785a      	ldrb	r2, [r3, #1]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	789a      	ldrb	r2, [r3, #2]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	78da      	ldrb	r2, [r3, #3]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	791a      	ldrb	r2, [r3, #4]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	3305      	adds	r3, #5
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	f003 030f 	and.w	r3, r3, #15
 800bc54:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	799a      	ldrb	r2, [r3, #6]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	3307      	adds	r3, #7
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc6c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	3308      	adds	r3, #8
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	f003 0303 	and.w	r3, r3, #3
 800bc7c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	3309      	adds	r3, #9
 800bc86:	4619      	mov	r1, r3
 800bc88:	2002      	movs	r0, #2
 800bc8a:	f7ff fa45 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	330b      	adds	r3, #11
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	2002      	movs	r0, #2
 800bc9e:	f7ff fa85 	bl	800b1ac <VL53L1_i2c_decode_int16_t>
 800bca2:	4603      	mov	r3, r0
 800bca4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	330d      	adds	r3, #13
 800bcae:	4619      	mov	r1, r3
 800bcb0:	2002      	movs	r0, #2
 800bcb2:	f7ff fa7b 	bl	800b1ac <VL53L1_i2c_decode_int16_t>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	330f      	adds	r3, #15
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	2002      	movs	r0, #2
 800bcc6:	f7ff fa27 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800bcca:	4603      	mov	r3, r0
 800bccc:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	3311      	adds	r3, #17
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	2002      	movs	r0, #2
 800bcda:	f7ff fa67 	bl	800b1ac <VL53L1_i2c_decode_int16_t>
 800bcde:	4603      	mov	r3, r0
 800bce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bce4:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	3313      	adds	r3, #19
 800bcee:	4619      	mov	r1, r3
 800bcf0:	2002      	movs	r0, #2
 800bcf2:	f7ff fa5b 	bl	800b1ac <VL53L1_i2c_decode_int16_t>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	3315      	adds	r3, #21
 800bd02:	4619      	mov	r1, r3
 800bd04:	2002      	movs	r0, #2
 800bd06:	f7ff fa51 	bl	800b1ac <VL53L1_i2c_decode_int16_t>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800bd12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3718      	adds	r7, #24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b088      	sub	sp, #32
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800bd2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d108      	bne.n	800bd46 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800bd34:	f107 0208 	add.w	r2, r7, #8
 800bd38:	2317      	movs	r3, #23
 800bd3a:	210d      	movs	r1, #13
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 ffa7 	bl	800cc90 <VL53L1_ReadMulti>
 800bd42:	4603      	mov	r3, r0
 800bd44:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800bd46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d108      	bne.n	800bd60 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800bd4e:	f107 0308 	add.w	r3, r7, #8
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	4619      	mov	r1, r3
 800bd56:	2017      	movs	r0, #23
 800bd58:	f7ff ff54 	bl	800bc04 <VL53L1_i2c_decode_customer_nvm_managed>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800bd60:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3720      	adds	r7, #32
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	460b      	mov	r3, r1
 800bd76:	607a      	str	r2, [r7, #4]
 800bd78:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800bd7e:	897b      	ldrh	r3, [r7, #10]
 800bd80:	2b1f      	cmp	r3, #31
 800bd82:	d802      	bhi.n	800bd8a <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800bd84:	f06f 0309 	mvn.w	r3, #9
 800bd88:	e0cf      	b.n	800bf2a <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	2102      	movs	r1, #2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff f996 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800bda0:	f002 0201 	and.w	r2, r2, #1
 800bda4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800bda6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800bdb0:	f002 020f 	and.w	r2, r2, #15
 800bdb4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800bdb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800bdc0:	f002 020f 	and.w	r2, r2, #15
 800bdc4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800bdc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800bdd0:	f002 021f 	and.w	r2, r2, #31
 800bdd4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800bdd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800bde0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bde4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800bde6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800bdf0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bdf4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800bdf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800be00:	f002 0201 	and.w	r2, r2, #1
 800be04:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800be06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800be10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800be1a:	f002 0201 	and.w	r2, r2, #1
 800be1e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800be20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800be2a:	f002 0203 	and.w	r2, r2, #3
 800be2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800be30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800be3a:	f002 021f 	and.w	r2, r2, #31
 800be3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800be40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800be4a:	f002 0203 	and.w	r2, r2, #3
 800be4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800be50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800be5a:	f002 0203 	and.w	r2, r2, #3
 800be5e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800be60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800be6a:	f002 0207 	and.w	r2, r2, #7
 800be6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800be70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800be7a:	f002 021f 	and.w	r2, r2, #31
 800be7e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800be80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800be8a:	f002 0201 	and.w	r2, r2, #1
 800be8e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800be90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800be9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800bea4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800beae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800beb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800bec2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800becc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	8b18      	ldrh	r0, [r3, #24]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3318      	adds	r3, #24
 800bed6:	461a      	mov	r2, r3
 800bed8:	2102      	movs	r1, #2
 800beda:	f7ff f8f3 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800bee6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800bef0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800befa:	f002 020f 	and.w	r2, r2, #15
 800befe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800bf00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800bf0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800bf14:	f002 020f 	and.w	r2, r2, #15
 800bf18:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800bf1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800bf24:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800bf26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b086      	sub	sp, #24
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	60f8      	str	r0, [r7, #12]
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	607a      	str	r2, [r7, #4]
 800bf3e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bf40:	2300      	movs	r3, #0
 800bf42:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800bf44:	897b      	ldrh	r3, [r7, #10]
 800bf46:	2b15      	cmp	r3, #21
 800bf48:	d802      	bhi.n	800bf50 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800bf4a:	f06f 0309 	mvn.w	r3, #9
 800bf4e:	e070      	b.n	800c032 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800bf60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800bf6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800bf74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bf78:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800bf7a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800bf80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf84:	b298      	uxth	r0, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	3304      	adds	r3, #4
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	2102      	movs	r1, #2
 800bf8e:	f7ff f899 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800bf9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bf9e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800bfa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800bfaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800bfb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800bfbe:	f002 0201 	and.w	r2, r2, #1
 800bfc2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800bfc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800bfce:	f002 0207 	and.w	r2, r2, #7
 800bfd2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800bfd4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	8998      	ldrh	r0, [r3, #12]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	330c      	adds	r3, #12
 800bfde:	461a      	mov	r2, r3
 800bfe0:	2102      	movs	r1, #2
 800bfe2:	f7ff f86f 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	89d8      	ldrh	r0, [r3, #14]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	330e      	adds	r3, #14
 800bfee:	461a      	mov	r2, r3
 800bff0:	2102      	movs	r1, #2
 800bff2:	f7ff f867 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	8a18      	ldrh	r0, [r3, #16]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3310      	adds	r3, #16
 800bffe:	461a      	mov	r2, r3
 800c000:	2102      	movs	r1, #2
 800c002:	f7ff f85f 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800c00e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800c018:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800c022:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800c02c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800c02e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3718      	adds	r7, #24
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b086      	sub	sp, #24
 800c03e:	af00      	add	r7, sp, #0
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	460b      	mov	r3, r1
 800c044:	607a      	str	r2, [r7, #4]
 800c046:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c048:	2300      	movs	r3, #0
 800c04a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800c04c:	897b      	ldrh	r3, [r7, #10]
 800c04e:	2b16      	cmp	r3, #22
 800c050:	d802      	bhi.n	800c058 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c052:	f06f 0309 	mvn.w	r3, #9
 800c056:	e06e      	b.n	800c136 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	f003 030f 	and.w	r3, r3, #15
 800c060:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800c06e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800c078:	f002 020f 	and.w	r2, r2, #15
 800c07c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800c07e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800c084:	68fa      	ldr	r2, [r7, #12]
 800c086:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800c088:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800c092:	f002 020f 	and.w	r2, r2, #15
 800c096:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800c098:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800c0a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800c0ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800c0b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800c0b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800c0bc:	f002 020f 	and.w	r2, r2, #15
 800c0c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800c0c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800c0cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800c0d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800c0da:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800c0dc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	8958      	ldrh	r0, [r3, #10]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	330a      	adds	r3, #10
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	2102      	movs	r1, #2
 800c0ea:	f7fe ffeb 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	8998      	ldrh	r0, [r3, #12]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	330c      	adds	r3, #12
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	2102      	movs	r1, #2
 800c0fa:	f7fe ffe3 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800c106:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800c110:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6918      	ldr	r0, [r3, #16]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3312      	adds	r3, #18
 800c11a:	461a      	mov	r2, r3
 800c11c:	2104      	movs	r1, #4
 800c11e:	f7ff f86d 	bl	800b1fc <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800c12a:	f002 0201 	and.w	r2, r2, #1
 800c12e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800c130:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800c132:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3718      	adds	r7, #24
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b086      	sub	sp, #24
 800c142:	af00      	add	r7, sp, #0
 800c144:	60f8      	str	r0, [r7, #12]
 800c146:	460b      	mov	r3, r1
 800c148:	607a      	str	r2, [r7, #4]
 800c14a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c14c:	2300      	movs	r3, #0
 800c14e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800c150:	897b      	ldrh	r3, [r7, #10]
 800c152:	2b11      	cmp	r3, #17
 800c154:	d802      	bhi.n	800c15c <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c156:	f06f 0309 	mvn.w	r3, #9
 800c15a:	e071      	b.n	800c240 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	f003 0303 	and.w	r3, r3, #3
 800c164:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	8858      	ldrh	r0, [r3, #2]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	3301      	adds	r3, #1
 800c172:	461a      	mov	r2, r3
 800c174:	2102      	movs	r1, #2
 800c176:	f7fe ffa5 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	8898      	ldrh	r0, [r3, #4]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	3303      	adds	r3, #3
 800c182:	461a      	mov	r2, r3
 800c184:	2102      	movs	r1, #2
 800c186:	f7fe ff9d 	bl	800b0c4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800c192:	f002 0201 	and.w	r2, r2, #1
 800c196:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800c198:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800c1a2:	f002 0207 	and.w	r2, r2, #7
 800c1a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800c1a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800c1b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800c1bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800c1c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c1ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800c1cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800c1d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c1da:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800c1dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800c1e6:	f002 0203 	and.w	r2, r2, #3
 800c1ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800c1ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800c1f6:	f002 0203 	and.w	r2, r2, #3
 800c1fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800c1fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800c206:	f002 020f 	and.w	r2, r2, #15
 800c20a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800c20c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800c216:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800c220:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800c22a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800c234:	f002 0203 	and.w	r2, r2, #3
 800c238:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800c23a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800c23c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3718      	adds	r7, #24
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800c248:	b480      	push	{r7}
 800c24a:	b087      	sub	sp, #28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	460b      	mov	r3, r1
 800c252:	607a      	str	r2, [r7, #4]
 800c254:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c256:	2300      	movs	r3, #0
 800c258:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800c25a:	897b      	ldrh	r3, [r7, #10]
 800c25c:	2b04      	cmp	r3, #4
 800c25e:	d802      	bhi.n	800c266 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c260:	f06f 0309 	mvn.w	r3, #9
 800c264:	e025      	b.n	800c2b2 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	f003 0301 	and.w	r3, r3, #1
 800c26e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800c27c:	f002 0201 	and.w	r2, r2, #1
 800c280:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800c282:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800c28c:	f002 0201 	and.w	r2, r2, #1
 800c290:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800c292:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800c29c:	f002 0203 	and.w	r2, r2, #3
 800c2a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800c2a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800c2ac:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800c2ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	371c      	adds	r7, #28
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bc80      	pop	{r7}
 800c2ba:	4770      	bx	lr

0800c2bc <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b086      	sub	sp, #24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
 800c2c8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800c2ce:	89fb      	ldrh	r3, [r7, #14]
 800c2d0:	2b2b      	cmp	r3, #43	; 0x2b
 800c2d2:	d802      	bhi.n	800c2da <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c2d4:	f06f 0309 	mvn.w	r3, #9
 800c2d8:	e0e2      	b.n	800c4a0 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2e2:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	785a      	ldrb	r2, [r3, #1]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	3302      	adds	r3, #2
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	f003 030f 	and.w	r3, r3, #15
 800c2fa:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	78da      	ldrb	r2, [r3, #3]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	3304      	adds	r3, #4
 800c30c:	4619      	mov	r1, r3
 800c30e:	2002      	movs	r0, #2
 800c310:	f7fe ff02 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c314:	4603      	mov	r3, r0
 800c316:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	3306      	adds	r3, #6
 800c320:	4619      	mov	r1, r3
 800c322:	2002      	movs	r0, #2
 800c324:	f7fe fef8 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c328:	4603      	mov	r3, r0
 800c32a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	3308      	adds	r3, #8
 800c334:	4619      	mov	r1, r3
 800c336:	2002      	movs	r0, #2
 800c338:	f7fe feee 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c33c:	4603      	mov	r3, r0
 800c33e:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	330a      	adds	r3, #10
 800c348:	4619      	mov	r1, r3
 800c34a:	2002      	movs	r0, #2
 800c34c:	f7fe fee4 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c350:	4603      	mov	r3, r0
 800c352:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	330c      	adds	r3, #12
 800c35c:	4619      	mov	r1, r3
 800c35e:	2002      	movs	r0, #2
 800c360:	f7fe feda 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c364:	4603      	mov	r3, r0
 800c366:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	330e      	adds	r3, #14
 800c370:	4619      	mov	r1, r3
 800c372:	2002      	movs	r0, #2
 800c374:	f7fe fed0 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c378:	4603      	mov	r3, r0
 800c37a:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	3310      	adds	r3, #16
 800c384:	4619      	mov	r1, r3
 800c386:	2002      	movs	r0, #2
 800c388:	f7fe fec6 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c38c:	4603      	mov	r3, r0
 800c38e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	3312      	adds	r3, #18
 800c398:	4619      	mov	r1, r3
 800c39a:	2002      	movs	r0, #2
 800c39c:	f7fe febc 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	3314      	adds	r3, #20
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	2002      	movs	r0, #2
 800c3b0:	f7fe feb2 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	3316      	adds	r3, #22
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	2002      	movs	r0, #2
 800c3c4:	f7fe fea8 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	3318      	adds	r3, #24
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	2002      	movs	r0, #2
 800c3d8:	f7fe fe9e 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	331a      	adds	r3, #26
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	2002      	movs	r0, #2
 800c3ec:	f7fe fe94 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	331c      	adds	r3, #28
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	2002      	movs	r0, #2
 800c400:	f7fe fe8a 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c404:	4603      	mov	r3, r0
 800c406:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	331e      	adds	r3, #30
 800c410:	4619      	mov	r1, r3
 800c412:	2002      	movs	r0, #2
 800c414:	f7fe fe80 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c418:	4603      	mov	r3, r0
 800c41a:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	3320      	adds	r3, #32
 800c424:	4619      	mov	r1, r3
 800c426:	2002      	movs	r0, #2
 800c428:	f7fe fe76 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c42c:	4603      	mov	r3, r0
 800c42e:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	3322      	adds	r3, #34	; 0x22
 800c438:	4619      	mov	r1, r3
 800c43a:	2002      	movs	r0, #2
 800c43c:	f7fe fe6c 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c440:	4603      	mov	r3, r0
 800c442:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	3324      	adds	r3, #36	; 0x24
 800c44c:	4619      	mov	r1, r3
 800c44e:	2002      	movs	r0, #2
 800c450:	f7fe fe62 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c454:	4603      	mov	r3, r0
 800c456:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	3326      	adds	r3, #38	; 0x26
 800c460:	4619      	mov	r1, r3
 800c462:	2002      	movs	r0, #2
 800c464:	f7fe fe58 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c468:	4603      	mov	r3, r0
 800c46a:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	3328      	adds	r3, #40	; 0x28
 800c474:	4619      	mov	r1, r3
 800c476:	2002      	movs	r0, #2
 800c478:	f7fe fe4e 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c47c:	4603      	mov	r3, r0
 800c47e:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800c49c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3718      	adds	r7, #24
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800c4ba:	89fb      	ldrh	r3, [r7, #14]
 800c4bc:	2b20      	cmp	r3, #32
 800c4be:	d802      	bhi.n	800c4c6 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c4c0:	f06f 0309 	mvn.w	r3, #9
 800c4c4:	e04d      	b.n	800c562 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800c4c6:	68b9      	ldr	r1, [r7, #8]
 800c4c8:	2004      	movs	r0, #4
 800c4ca:	f7fe fec0 	bl	800b24e <VL53L1_i2c_decode_uint32_t>
 800c4ce:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	4619      	mov	r1, r3
 800c4da:	2004      	movs	r0, #4
 800c4dc:	f7fe feb7 	bl	800b24e <VL53L1_i2c_decode_uint32_t>
 800c4e0:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	3308      	adds	r3, #8
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	2004      	movs	r0, #4
 800c4ee:	f7fe feca 	bl	800b286 <VL53L1_i2c_decode_int32_t>
 800c4f2:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	330c      	adds	r3, #12
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	2004      	movs	r0, #4
 800c500:	f7fe fea5 	bl	800b24e <VL53L1_i2c_decode_uint32_t>
 800c504:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	3310      	adds	r3, #16
 800c50e:	4619      	mov	r1, r3
 800c510:	2004      	movs	r0, #4
 800c512:	f7fe fe9c 	bl	800b24e <VL53L1_i2c_decode_uint32_t>
 800c516:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	3314      	adds	r3, #20
 800c520:	4619      	mov	r1, r3
 800c522:	2004      	movs	r0, #4
 800c524:	f7fe fe93 	bl	800b24e <VL53L1_i2c_decode_uint32_t>
 800c528:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	3318      	adds	r3, #24
 800c532:	4619      	mov	r1, r3
 800c534:	2004      	movs	r0, #4
 800c536:	f7fe fea6 	bl	800b286 <VL53L1_i2c_decode_int32_t>
 800c53a:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	331c      	adds	r3, #28
 800c544:	4619      	mov	r1, r3
 800c546:	2004      	movs	r0, #4
 800c548:	f7fe fe81 	bl	800b24e <VL53L1_i2c_decode_uint32_t>
 800c54c:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800c55e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b086      	sub	sp, #24
 800c56e:	af00      	add	r7, sp, #0
 800c570:	4603      	mov	r3, r0
 800c572:	60b9      	str	r1, [r7, #8]
 800c574:	607a      	str	r2, [r7, #4]
 800c576:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c578:	2300      	movs	r3, #0
 800c57a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800c57c:	89fb      	ldrh	r3, [r7, #14]
 800c57e:	2b37      	cmp	r3, #55	; 0x37
 800c580:	d802      	bhi.n	800c588 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c582:	f06f 0309 	mvn.w	r3, #9
 800c586:	e15e      	b.n	800c846 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800c588:	68b9      	ldr	r1, [r7, #8]
 800c58a:	2002      	movs	r0, #2
 800c58c:	f7fe fdc4 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c590:	4603      	mov	r3, r0
 800c592:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	3302      	adds	r3, #2
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5a2:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	3303      	adds	r3, #3
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5b2:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	f003 0303 	and.w	r3, r3, #3
 800c5c2:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	3305      	adds	r3, #5
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	f003 0301 	and.w	r3, r3, #1
 800c5d2:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	3306      	adds	r3, #6
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5e2:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	3307      	adds	r3, #7
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5f2:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	3308      	adds	r3, #8
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	2002      	movs	r0, #2
 800c600:	f7fe fd8a 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c604:	4603      	mov	r3, r0
 800c606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c60a:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	330a      	adds	r3, #10
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	f003 0303 	and.w	r3, r3, #3
 800c61a:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	330b      	adds	r3, #11
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	f003 0303 	and.w	r3, r3, #3
 800c62a:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	330c      	adds	r3, #12
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	f003 030f 	and.w	r3, r3, #15
 800c63a:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	330d      	adds	r3, #13
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	f003 0307 	and.w	r3, r3, #7
 800c64a:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	330e      	adds	r3, #14
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	330f      	adds	r3, #15
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	f003 0303 	and.w	r3, r3, #3
 800c66a:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	7c1a      	ldrb	r2, [r3, #16]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	7c5a      	ldrb	r2, [r3, #17]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	3312      	adds	r3, #18
 800c684:	4619      	mov	r1, r3
 800c686:	2002      	movs	r0, #2
 800c688:	f7fe fd46 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c68c:	4603      	mov	r3, r0
 800c68e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c692:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	3316      	adds	r3, #22
 800c69c:	4619      	mov	r1, r3
 800c69e:	2002      	movs	r0, #2
 800c6a0:	f7fe fd3a 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	3318      	adds	r3, #24
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	2002      	movs	r0, #2
 800c6b4:	f7fe fd30 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	331a      	adds	r3, #26
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	f003 0301 	and.w	r3, r3, #1
 800c6ca:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	331b      	adds	r3, #27
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	f003 0307 	and.w	r3, r3, #7
 800c6da:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	7f1a      	ldrb	r2, [r3, #28]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	7f5a      	ldrb	r2, [r3, #29]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	331e      	adds	r3, #30
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6fa:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	331f      	adds	r3, #31
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c70a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	3320      	adds	r3, #32
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	f003 0303 	and.w	r3, r3, #3
 800c71a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	3321      	adds	r3, #33	; 0x21
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	f003 030f 	and.w	r3, r3, #15
 800c72a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	3325      	adds	r3, #37	; 0x25
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	f003 0301 	and.w	r3, r3, #1
 800c75e:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	3326      	adds	r3, #38	; 0x26
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	f003 0303 	and.w	r3, r3, #3
 800c770:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	3327      	adds	r3, #39	; 0x27
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	f003 031f 	and.w	r3, r3, #31
 800c782:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	3328      	adds	r3, #40	; 0x28
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	f003 031f 	and.w	r3, r3, #31
 800c794:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	3329      	adds	r3, #41	; 0x29
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	f003 031f 	and.w	r3, r3, #31
 800c7a6:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	332a      	adds	r3, #42	; 0x2a
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	f003 0301 	and.w	r3, r3, #1
 800c7b8:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	332b      	adds	r3, #43	; 0x2b
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	f003 0301 	and.w	r3, r3, #1
 800c7ca:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	332c      	adds	r3, #44	; 0x2c
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	f003 0303 	and.w	r3, r3, #3
 800c7dc:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	332d      	adds	r3, #45	; 0x2d
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7ee:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	332e      	adds	r3, #46	; 0x2e
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	2004      	movs	r0, #4
 800c7fe:	f7fe fd26 	bl	800b24e <VL53L1_i2c_decode_uint32_t>
 800c802:	4603      	mov	r3, r0
 800c804:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	3332      	adds	r3, #50	; 0x32
 800c810:	4619      	mov	r1, r3
 800c812:	2004      	movs	r0, #4
 800c814:	f7fe fd1b 	bl	800b24e <VL53L1_i2c_decode_uint32_t>
 800c818:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	3336      	adds	r3, #54	; 0x36
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	f003 0301 	and.w	r3, r3, #1
 800c828:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	3337      	adds	r3, #55	; 0x37
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	f003 0301 	and.w	r3, r3, #1
 800c83a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800c842:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b086      	sub	sp, #24
 800c852:	af00      	add	r7, sp, #0
 800c854:	4603      	mov	r3, r0
 800c856:	60b9      	str	r1, [r7, #8]
 800c858:	607a      	str	r2, [r7, #4]
 800c85a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c85c:	2300      	movs	r3, #0
 800c85e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800c860:	89fb      	ldrh	r3, [r7, #14]
 800c862:	2b30      	cmp	r3, #48	; 0x30
 800c864:	d802      	bhi.n	800c86c <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c866:	f06f 0309 	mvn.w	r3, #9
 800c86a:	e112      	b.n	800ca92 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	785a      	ldrb	r2, [r3, #1]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	789a      	ldrb	r2, [r3, #2]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	3303      	adds	r3, #3
 800c888:	4619      	mov	r1, r3
 800c88a:	2002      	movs	r0, #2
 800c88c:	f7fe fc44 	bl	800b118 <VL53L1_i2c_decode_uint16_t>
 800c890:	4603      	mov	r3, r0
 800c892:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	3305      	adds	r3, #5
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8a2:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	3306      	adds	r3, #6
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	f003 0307 	and.w	r3, r3, #7
 800c8b2:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	3307      	adds	r3, #7
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	f003 0307 	and.w	r3, r3, #7
 800c8c2:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	3308      	adds	r3, #8
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8d2:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	3309      	adds	r3, #9
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8e2:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	330a      	adds	r3, #10
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	f003 0301 	and.w	r3, r3, #1
 800c8f2:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	330b      	adds	r3, #11
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c902:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	330c      	adds	r3, #12
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	f003 0301 	and.w	r3, r3, #1
 800c912:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	330d      	adds	r3, #13
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c922:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	330e      	adds	r3, #14
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c932:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	7bda      	ldrb	r2, [r3, #15]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	7c1a      	ldrb	r2, [r3, #16]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	7c5a      	ldrb	r2, [r3, #17]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	7c9a      	ldrb	r2, [r3, #18]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	7cda      	ldrb	r2, [r3, #19]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	7d1a      	ldrb	r2, [r3, #20]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	7d5a      	ldrb	r2, [r3, #21]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	7d9a      	ldrb	r2, [r3, #22]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	7dda      	ldrb	r2, [r3, #23]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	7e1a      	ldrb	r2, [r3, #24]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	7e5a      	ldrb	r2, [r3, #25]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	7e9a      	ldrb	r2, [r3, #26]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	7eda      	ldrb	r2, [r3, #27]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	7f1a      	ldrb	r2, [r3, #28]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	7f5a      	ldrb	r2, [r3, #29]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	7f9a      	ldrb	r2, [r3, #30]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	7fda      	ldrb	r2, [r3, #31]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800ca8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3718      	adds	r7, #24
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b090      	sub	sp, #64	; 0x40
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
 800caa2:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800caa4:	2300      	movs	r3, #0
 800caa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800caaa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10a      	bne.n	800cac8 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800cab2:	f107 020c 	add.w	r2, r7, #12
 800cab6:	2331      	movs	r3, #49	; 0x31
 800cab8:	f240 110f 	movw	r1, #271	; 0x10f
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 f8e7 	bl	800cc90 <VL53L1_ReadMulti>
 800cac2:	4603      	mov	r3, r0
 800cac4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800cac8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d109      	bne.n	800cae4 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800cad0:	f107 030c 	add.w	r3, r7, #12
 800cad4:	683a      	ldr	r2, [r7, #0]
 800cad6:	4619      	mov	r1, r3
 800cad8:	2031      	movs	r0, #49	; 0x31
 800cada:	f7ff feb8 	bl	800c84e <VL53L1_i2c_decode_nvm_copy_data>
 800cade:	4603      	mov	r3, r0
 800cae0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800cae4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3740      	adds	r7, #64	; 0x40
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af02      	add	r7, sp, #8
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800cafa:	2300      	movs	r3, #0
 800cafc:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800cafe:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f9b6 	bl	800ce74 <VL53L1_WaitUs>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800cb0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10b      	bne.n	800cb2c <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800cb14:	2301      	movs	r3, #1
 800cb16:	9301      	str	r3, [sp, #4]
 800cb18:	2301      	movs	r3, #1
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	22e5      	movs	r2, #229	; 0xe5
 800cb20:	6839      	ldr	r1, [r7, #0]
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 f9bc 	bl	800cea0 <VL53L1_WaitValueMaskEx>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800cb2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d103      	bne.n	800cb3c <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800cb34:	2103      	movs	r1, #3
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7fe f8ab 	bl	800ac92 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800cb3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3710      	adds	r7, #16
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b088      	sub	sp, #32
 800cb4c:	af02      	add	r7, sp, #8
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cb52:	2300      	movs	r3, #0
 800cb54:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800cb68:	f003 0310 	and.w	r3, r3, #16
 800cb6c:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d102      	bne.n	800cb7a <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 800cb74:	2301      	movs	r3, #1
 800cb76:	75fb      	strb	r3, [r7, #23]
 800cb78:	e001      	b.n	800cb7e <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 800cb7e:	7dfb      	ldrb	r3, [r7, #23]
 800cb80:	2201      	movs	r2, #1
 800cb82:	9201      	str	r2, [sp, #4]
 800cb84:	2201      	movs	r2, #1
 800cb86:	9200      	str	r2, [sp, #0]
 800cb88:	2231      	movs	r2, #49	; 0x31
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 f987 	bl	800cea0 <VL53L1_WaitValueMaskEx>
 800cb92:	4603      	mov	r3, r0
 800cb94:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 800cb96:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3718      	adds	r7, #24
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b088      	sub	sp, #32
 800cba6:	af02      	add	r7, sp, #8
 800cba8:	60f8      	str	r0, [r7, #12]
 800cbaa:	60b9      	str	r1, [r7, #8]
 800cbac:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	330a      	adds	r3, #10
 800cbb2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800cbc0:	b299      	uxth	r1, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	9300      	str	r3, [sp, #0]
 800cbca:	4613      	mov	r3, r2
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	f7f7 fdef 	bl	80047b0 <HAL_I2C_Master_Transmit>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800cbd6:	693b      	ldr	r3, [r7, #16]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3718      	adds	r7, #24
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b088      	sub	sp, #32
 800cbe4:	af02      	add	r7, sp, #8
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	330a      	adds	r3, #10
 800cbf0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800cbfe:	f043 0301 	orr.w	r3, r3, #1
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	b299      	uxth	r1, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	68ba      	ldr	r2, [r7, #8]
 800cc12:	f7f7 fecb 	bl	80049ac <HAL_I2C_Master_Receive>
 800cc16:	4603      	mov	r3, r0
 800cc18:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800cc1a:	693b      	ldr	r3, [r7, #16]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3718      	adds	r7, #24
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b086      	sub	sp, #24
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	607a      	str	r2, [r7, #4]
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	460b      	mov	r3, r1
 800cc32:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800cc34:	2300      	movs	r3, #0
 800cc36:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2bff      	cmp	r3, #255	; 0xff
 800cc3c:	d902      	bls.n	800cc44 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800cc3e:	f06f 0303 	mvn.w	r3, #3
 800cc42:	e01d      	b.n	800cc80 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800cc44:	897b      	ldrh	r3, [r7, #10]
 800cc46:	0a1b      	lsrs	r3, r3, #8
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	b2da      	uxtb	r2, r3
 800cc4c:	4b0e      	ldr	r3, [pc, #56]	; (800cc88 <VL53L1_WriteMulti+0x64>)
 800cc4e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800cc50:	897b      	ldrh	r3, [r7, #10]
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	4b0c      	ldr	r3, [pc, #48]	; (800cc88 <VL53L1_WriteMulti+0x64>)
 800cc56:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800cc58:	683a      	ldr	r2, [r7, #0]
 800cc5a:	6879      	ldr	r1, [r7, #4]
 800cc5c:	480b      	ldr	r0, [pc, #44]	; (800cc8c <VL53L1_WriteMulti+0x68>)
 800cc5e:	f000 fd7f 	bl	800d760 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	3302      	adds	r3, #2
 800cc66:	461a      	mov	r2, r3
 800cc68:	4907      	ldr	r1, [pc, #28]	; (800cc88 <VL53L1_WriteMulti+0x64>)
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f7ff ff99 	bl	800cba2 <_I2CWrite>
 800cc70:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d001      	beq.n	800cc7c <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800cc78:	23f3      	movs	r3, #243	; 0xf3
 800cc7a:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800cc7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3718      	adds	r7, #24
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	20000494 	.word	0x20000494
 800cc8c:	20000496 	.word	0x20000496

0800cc90 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	607a      	str	r2, [r7, #4]
 800cc9a:	603b      	str	r3, [r7, #0]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800cca0:	2300      	movs	r3, #0
 800cca2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800cca4:	897b      	ldrh	r3, [r7, #10]
 800cca6:	0a1b      	lsrs	r3, r3, #8
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	b2da      	uxtb	r2, r3
 800ccac:	4b12      	ldr	r3, [pc, #72]	; (800ccf8 <VL53L1_ReadMulti+0x68>)
 800ccae:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800ccb0:	897b      	ldrh	r3, [r7, #10]
 800ccb2:	b2da      	uxtb	r2, r3
 800ccb4:	4b10      	ldr	r3, [pc, #64]	; (800ccf8 <VL53L1_ReadMulti+0x68>)
 800ccb6:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ccb8:	2202      	movs	r2, #2
 800ccba:	490f      	ldr	r1, [pc, #60]	; (800ccf8 <VL53L1_ReadMulti+0x68>)
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f7ff ff70 	bl	800cba2 <_I2CWrite>
 800ccc2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d002      	beq.n	800ccd0 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ccca:	23f3      	movs	r3, #243	; 0xf3
 800cccc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ccce:	e00c      	b.n	800ccea <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ccd0:	683a      	ldr	r2, [r7, #0]
 800ccd2:	6879      	ldr	r1, [r7, #4]
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f7ff ff83 	bl	800cbe0 <_I2CRead>
 800ccda:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d002      	beq.n	800cce8 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800cce2:	23f3      	movs	r3, #243	; 0xf3
 800cce4:	75fb      	strb	r3, [r7, #23]
 800cce6:	e000      	b.n	800ccea <VL53L1_ReadMulti+0x5a>
    }
done:
 800cce8:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800ccea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	20000494 	.word	0x20000494

0800ccfc <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	460b      	mov	r3, r1
 800cd06:	807b      	strh	r3, [r7, #2]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800cd10:	887b      	ldrh	r3, [r7, #2]
 800cd12:	0a1b      	lsrs	r3, r3, #8
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <VL53L1_WrByte+0x50>)
 800cd1a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800cd1c:	887b      	ldrh	r3, [r7, #2]
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <VL53L1_WrByte+0x50>)
 800cd22:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800cd24:	4a09      	ldr	r2, [pc, #36]	; (800cd4c <VL53L1_WrByte+0x50>)
 800cd26:	787b      	ldrb	r3, [r7, #1]
 800cd28:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800cd2a:	2203      	movs	r2, #3
 800cd2c:	4907      	ldr	r1, [pc, #28]	; (800cd4c <VL53L1_WrByte+0x50>)
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff ff37 	bl	800cba2 <_I2CWrite>
 800cd34:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800cd3c:	23f3      	movs	r3, #243	; 0xf3
 800cd3e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800cd40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	20000494 	.word	0x20000494

0800cd50 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	460b      	mov	r3, r1
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800cd62:	897b      	ldrh	r3, [r7, #10]
 800cd64:	0a1b      	lsrs	r3, r3, #8
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	b2da      	uxtb	r2, r3
 800cd6a:	4b12      	ldr	r3, [pc, #72]	; (800cdb4 <VL53L1_RdByte+0x64>)
 800cd6c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800cd6e:	897b      	ldrh	r3, [r7, #10]
 800cd70:	b2da      	uxtb	r2, r3
 800cd72:	4b10      	ldr	r3, [pc, #64]	; (800cdb4 <VL53L1_RdByte+0x64>)
 800cd74:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800cd76:	2202      	movs	r2, #2
 800cd78:	490e      	ldr	r1, [pc, #56]	; (800cdb4 <VL53L1_RdByte+0x64>)
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f7ff ff11 	bl	800cba2 <_I2CWrite>
 800cd80:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d002      	beq.n	800cd8e <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800cd88:	23f3      	movs	r3, #243	; 0xf3
 800cd8a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cd8c:	e00c      	b.n	800cda8 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800cd8e:	2201      	movs	r2, #1
 800cd90:	6879      	ldr	r1, [r7, #4]
 800cd92:	68f8      	ldr	r0, [r7, #12]
 800cd94:	f7ff ff24 	bl	800cbe0 <_I2CRead>
 800cd98:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d002      	beq.n	800cda6 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800cda0:	23f3      	movs	r3, #243	; 0xf3
 800cda2:	75fb      	strb	r3, [r7, #23]
 800cda4:	e000      	b.n	800cda8 <VL53L1_RdByte+0x58>
    }
done:
 800cda6:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800cda8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3718      	adds	r7, #24
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	20000494 	.word	0x20000494

0800cdb8 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	607a      	str	r2, [r7, #4]
 800cdc4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800cdca:	897b      	ldrh	r3, [r7, #10]
 800cdcc:	0a1b      	lsrs	r3, r3, #8
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	b2da      	uxtb	r2, r3
 800cdd2:	4b18      	ldr	r3, [pc, #96]	; (800ce34 <VL53L1_RdWord+0x7c>)
 800cdd4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800cdd6:	897b      	ldrh	r3, [r7, #10]
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	4b16      	ldr	r3, [pc, #88]	; (800ce34 <VL53L1_RdWord+0x7c>)
 800cddc:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800cdde:	2202      	movs	r2, #2
 800cde0:	4914      	ldr	r1, [pc, #80]	; (800ce34 <VL53L1_RdWord+0x7c>)
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f7ff fedd 	bl	800cba2 <_I2CWrite>
 800cde8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d002      	beq.n	800cdf6 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800cdf0:	23f3      	movs	r3, #243	; 0xf3
 800cdf2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cdf4:	e017      	b.n	800ce26 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800cdf6:	2202      	movs	r2, #2
 800cdf8:	490e      	ldr	r1, [pc, #56]	; (800ce34 <VL53L1_RdWord+0x7c>)
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f7ff fef0 	bl	800cbe0 <_I2CRead>
 800ce00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ce08:	23f3      	movs	r3, #243	; 0xf3
 800ce0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ce0c:	e00b      	b.n	800ce26 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ce0e:	4b09      	ldr	r3, [pc, #36]	; (800ce34 <VL53L1_RdWord+0x7c>)
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	021b      	lsls	r3, r3, #8
 800ce16:	b29a      	uxth	r2, r3
 800ce18:	4b06      	ldr	r3, [pc, #24]	; (800ce34 <VL53L1_RdWord+0x7c>)
 800ce1a:	785b      	ldrb	r3, [r3, #1]
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	4413      	add	r3, r2
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800ce26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3718      	adds	r7, #24
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	20000494 	.word	0x20000494

0800ce38 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800ce40:	2300      	movs	r3, #0
 800ce42:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800ce4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3714      	adds	r7, #20
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bc80      	pop	{r7}
 800ce56:	4770      	bx	lr

0800ce58 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7f6 fdb7 	bl	80039d8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	4a06      	ldr	r2, [pc, #24]	; (800ce9c <VL53L1_WaitUs+0x28>)
 800ce82:	fb82 1203 	smull	r1, r2, r2, r3
 800ce86:	1192      	asrs	r2, r2, #6
 800ce88:	17db      	asrs	r3, r3, #31
 800ce8a:	1ad3      	subs	r3, r2, r3
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7f6 fda3 	bl	80039d8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800ce92:	2300      	movs	r3, #0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	10624dd3 	.word	0x10624dd3

0800cea0 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800cea0:	b590      	push	{r4, r7, lr}
 800cea2:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800ceac:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800ceb0:	6020      	str	r0, [r4, #0]
 800ceb2:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800ceb6:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800ceba:	6001      	str	r1, [r0, #0]
 800cebc:	4619      	mov	r1, r3
 800cebe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800cec2:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800cec6:	801a      	strh	r2, [r3, #0]
 800cec8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800cecc:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 800ced0:	460a      	mov	r2, r1
 800ced2:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800ced4:	2300      	movs	r3, #0
 800ced6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800ceda:	2300      	movs	r3, #0
 800cedc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800cee0:	2300      	movs	r3, #0
 800cee2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800cef8:	f107 0310 	add.w	r3, r7, #16
 800cefc:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cf00:	493b      	ldr	r1, [pc, #236]	; (800cff0 <VL53L1_WaitValueMaskEx+0x150>)
 800cf02:	4618      	mov	r0, r3
 800cf04:	f001 f8c2 	bl	800e08c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800cf08:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7ff ff93 	bl	800ce38 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800cf12:	e049      	b.n	800cfa8 <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800cf14:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d110      	bne.n	800cf3e <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 800cf1c:	f207 2213 	addw	r2, r7, #531	; 0x213
 800cf20:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800cf24:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800cf28:	8819      	ldrh	r1, [r3, #0]
 800cf2a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800cf2e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800cf32:	6818      	ldr	r0, [r3, #0]
 800cf34:	f7ff ff0c 	bl	800cd50 <VL53L1_RdByte>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800cf3e:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800cf42:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800cf46:	4013      	ands	r3, r2
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800cf4e:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 800cf52:	7812      	ldrb	r2, [r2, #0]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d102      	bne.n	800cf5e <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800cf5e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d114      	bne.n	800cf90 <VL53L1_WaitValueMaskEx+0xf0>
 800cf66:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d110      	bne.n	800cf90 <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 800cf6e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00c      	beq.n	800cf90 <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800cf76:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800cf7a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800cf7e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800cf82:	4611      	mov	r1, r2
 800cf84:	6818      	ldr	r0, [r3, #0]
 800cf86:	f7ff ff67 	bl	800ce58 <VL53L1_WaitMs>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800cf90:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7ff ff4f 	bl	800ce38 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800cf9a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800cf9e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800cfa8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10c      	bne.n	800cfca <VL53L1_WaitValueMaskEx+0x12a>
 800cfb0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800cfb4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800cfb8:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d203      	bcs.n	800cfca <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 800cfc2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d0a4      	beq.n	800cf14 <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800cfca:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d106      	bne.n	800cfe0 <VL53L1_WaitValueMaskEx+0x140>
 800cfd2:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d102      	bne.n	800cfe0 <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 800cfda:	23f9      	movs	r3, #249	; 0xf9
 800cfdc:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800cfe0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd90      	pop	{r4, r7, pc}
 800cfee:	bf00      	nop
 800cff0:	080106fc 	.word	0x080106fc

0800cff4 <MPU6050_Initialize>:
/* Includes */
#include "MPU6050.h"
#include "stm32f1xx.h"

/////functions////
void MPU6050_Initialize(I2C_HandleTypeDef *handle_i2c) {
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b088      	sub	sp, #32
 800cff8:	af04      	add	r7, sp, #16
 800cffa:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &check, 1,10000);
 800cffc:	f242 7310 	movw	r3, #10000	; 0x2710
 800d000:	9302      	str	r3, [sp, #8]
 800d002:	2301      	movs	r3, #1
 800d004:	9301      	str	r3, [sp, #4]
 800d006:	f107 030f 	add.w	r3, r7, #15
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	2301      	movs	r3, #1
 800d00e:	2275      	movs	r2, #117	; 0x75
 800d010:	21d0      	movs	r1, #208	; 0xd0
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f7f8 f824 	bl	8005060 <HAL_I2C_Mem_Read>

	if (check == 0x68) {
 800d018:	7bfb      	ldrb	r3, [r7, #15]
 800d01a:	2b68      	cmp	r3, #104	; 0x68
 800d01c:	d13f      	bne.n	800d09e <MPU6050_Initialize+0xaa>

		Data = 0;
 800d01e:	2300      	movs	r3, #0
 800d020:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &Data, 1,10000);
 800d022:	f242 7310 	movw	r3, #10000	; 0x2710
 800d026:	9302      	str	r3, [sp, #8]
 800d028:	2301      	movs	r3, #1
 800d02a:	9301      	str	r3, [sp, #4]
 800d02c:	f107 030e 	add.w	r3, r7, #14
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	2301      	movs	r3, #1
 800d034:	226b      	movs	r2, #107	; 0x6b
 800d036:	21d0      	movs	r1, #208	; 0xd0
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f7f7 ff17 	bl	8004e6c <HAL_I2C_Mem_Write>

		Data = 0x07;
 800d03e:	2307      	movs	r3, #7
 800d040:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_SMPLRT_DIV, 1, &Data, 1,10000);
 800d042:	f242 7310 	movw	r3, #10000	; 0x2710
 800d046:	9302      	str	r3, [sp, #8]
 800d048:	2301      	movs	r3, #1
 800d04a:	9301      	str	r3, [sp, #4]
 800d04c:	f107 030e 	add.w	r3, r7, #14
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	2301      	movs	r3, #1
 800d054:	2219      	movs	r2, #25
 800d056:	21d0      	movs	r1, #208	; 0xd0
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f7f7 ff07 	bl	8004e6c <HAL_I2C_Mem_Write>

		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1, MPU6050_ACCEL_RANGE_2_G, 1,10000);
 800d05e:	f242 7310 	movw	r3, #10000	; 0x2710
 800d062:	9302      	str	r3, [sp, #8]
 800d064:	2301      	movs	r3, #1
 800d066:	9301      	str	r3, [sp, #4]
 800d068:	2300      	movs	r3, #0
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	2301      	movs	r3, #1
 800d06e:	221c      	movs	r2, #28
 800d070:	21d0      	movs	r1, #208	; 0xd0
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f7f7 fefa 	bl	8004e6c <HAL_I2C_Mem_Write>
		MPU6050_AFS_SEL=MPU6050_ACCEL_RANGE_2_G;
 800d078:	4b0b      	ldr	r3, [pc, #44]	; (800d0a8 <MPU6050_Initialize+0xb4>)
 800d07a:	2200      	movs	r2, #0
 800d07c:	701a      	strb	r2, [r3, #0]

		HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1, MPU6050_GYRO_RANGE_250_DEG, 1, 10000);
 800d07e:	f242 7310 	movw	r3, #10000	; 0x2710
 800d082:	9302      	str	r3, [sp, #8]
 800d084:	2301      	movs	r3, #1
 800d086:	9301      	str	r3, [sp, #4]
 800d088:	2300      	movs	r3, #0
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	2301      	movs	r3, #1
 800d08e:	221b      	movs	r2, #27
 800d090:	21d0      	movs	r1, #208	; 0xd0
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7f7 feea 	bl	8004e6c <HAL_I2C_Mem_Write>
		MPU6050_FS_SEL=MPU6050_GYRO_RANGE_250_DEG;
 800d098:	4b04      	ldr	r3, [pc, #16]	; (800d0ac <MPU6050_Initialize+0xb8>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	701a      	strb	r2, [r3, #0]
	}

}
 800d09e:	bf00      	nop
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20000298 	.word	0x20000298
 800d0ac:	20000310 	.word	0x20000310

0800d0b0 <MPU6050_SetScaleAccelRange>:
void MPU6050_Read_DeviceID(I2C_HandleTypeDef *handle_i2c){
    HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &MPU6050_Dev_ID, 1, 10000);
}

void MPU6050_SetScaleAccelRange(I2C_HandleTypeDef *handle_i2c,mpu6050_accel_range_t MPU6050_ACCEL_RANGE_X_G)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b086      	sub	sp, #24
 800d0b4:	af04      	add	r7, sp, #16
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, 1,&MPU6050_ACCEL_RANGE_X_G, 1,10000);
 800d0bc:	f242 7310 	movw	r3, #10000	; 0x2710
 800d0c0:	9302      	str	r3, [sp, #8]
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	9301      	str	r3, [sp, #4]
 800d0c6:	1cfb      	adds	r3, r7, #3
 800d0c8:	9300      	str	r3, [sp, #0]
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	221c      	movs	r2, #28
 800d0ce:	21d0      	movs	r1, #208	; 0xd0
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f7f7 fecb 	bl	8004e6c <HAL_I2C_Mem_Write>
	MPU6050_AFS_SEL=MPU6050_ACCEL_RANGE_X_G;
 800d0d6:	78fa      	ldrb	r2, [r7, #3]
 800d0d8:	4b02      	ldr	r3, [pc, #8]	; (800d0e4 <MPU6050_SetScaleAccelRange+0x34>)
 800d0da:	701a      	strb	r2, [r3, #0]
}
 800d0dc:	bf00      	nop
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	20000298 	.word	0x20000298

0800d0e8 <MPU6050_SetScaleGyroRange>:


void MPU6050_SetScaleGyroRange(I2C_HandleTypeDef *handle_i2c,MPU6050_gyro_range_t MPU6050_GYRO_RANGE_XXX_DEG)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af04      	add	r7, sp, #16
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(handle_i2c, MPU6050_ADDR, MPU6050_GYRO_CONFIG, 1,&MPU6050_GYRO_RANGE_XXX_DEG, 1,10000);
 800d0f4:	f242 7310 	movw	r3, #10000	; 0x2710
 800d0f8:	9302      	str	r3, [sp, #8]
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	9301      	str	r3, [sp, #4]
 800d0fe:	1cfb      	adds	r3, r7, #3
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	2301      	movs	r3, #1
 800d104:	221b      	movs	r2, #27
 800d106:	21d0      	movs	r1, #208	; 0xd0
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7f7 feaf 	bl	8004e6c <HAL_I2C_Mem_Write>
	MPU6050_FS_SEL=MPU6050_GYRO_RANGE_XXX_DEG;
 800d10e:	78fa      	ldrb	r2, [r7, #3]
 800d110:	4b02      	ldr	r3, [pc, #8]	; (800d11c <MPU6050_SetScaleGyroRange+0x34>)
 800d112:	701a      	strb	r2, [r3, #0]
}
 800d114:	bf00      	nop
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	20000310 	.word	0x20000310

0800d120 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *handle_i2c) {
 800d120:	b580      	push	{r7, lr}
 800d122:	b088      	sub	sp, #32
 800d124:	af04      	add	r7, sp, #16
 800d126:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, Rec_Data, 6,10000);
 800d128:	f242 7310 	movw	r3, #10000	; 0x2710
 800d12c:	9302      	str	r3, [sp, #8]
 800d12e:	2306      	movs	r3, #6
 800d130:	9301      	str	r3, [sp, #4]
 800d132:	f107 0308 	add.w	r3, r7, #8
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	2301      	movs	r3, #1
 800d13a:	223b      	movs	r2, #59	; 0x3b
 800d13c:	21d0      	movs	r1, #208	; 0xd0
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7f7 ff8e 	bl	8005060 <HAL_I2C_Mem_Read>

	MPU6050_Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800d144:	7a3b      	ldrb	r3, [r7, #8]
 800d146:	021b      	lsls	r3, r3, #8
 800d148:	b21a      	sxth	r2, r3
 800d14a:	7a7b      	ldrb	r3, [r7, #9]
 800d14c:	b21b      	sxth	r3, r3
 800d14e:	4313      	orrs	r3, r2
 800d150:	b21a      	sxth	r2, r3
 800d152:	4ba3      	ldr	r3, [pc, #652]	; (800d3e0 <MPU6050_Read_Accel+0x2c0>)
 800d154:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800d156:	7abb      	ldrb	r3, [r7, #10]
 800d158:	021b      	lsls	r3, r3, #8
 800d15a:	b21a      	sxth	r2, r3
 800d15c:	7afb      	ldrb	r3, [r7, #11]
 800d15e:	b21b      	sxth	r3, r3
 800d160:	4313      	orrs	r3, r2
 800d162:	b21a      	sxth	r2, r3
 800d164:	4b9f      	ldr	r3, [pc, #636]	; (800d3e4 <MPU6050_Read_Accel+0x2c4>)
 800d166:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800d168:	7b3b      	ldrb	r3, [r7, #12]
 800d16a:	021b      	lsls	r3, r3, #8
 800d16c:	b21a      	sxth	r2, r3
 800d16e:	7b7b      	ldrb	r3, [r7, #13]
 800d170:	b21b      	sxth	r3, r3
 800d172:	4313      	orrs	r3, r2
 800d174:	b21a      	sxth	r2, r3
 800d176:	4b9c      	ldr	r3, [pc, #624]	; (800d3e8 <MPU6050_Read_Accel+0x2c8>)
 800d178:	801a      	strh	r2, [r3, #0]
	0 ±2g 16384 LSB/g
	1 ±4g 8192 LSB/g
	2 ±8g 4096 LSB/g
	3 ±16g 2048 LSB/g
	 */
	switch (MPU6050_AFS_SEL) {
 800d17a:	4b9c      	ldr	r3, [pc, #624]	; (800d3ec <MPU6050_Read_Accel+0x2cc>)
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	2b18      	cmp	r3, #24
 800d180:	f200 812a 	bhi.w	800d3d8 <MPU6050_Read_Accel+0x2b8>
 800d184:	a201      	add	r2, pc, #4	; (adr r2, 800d18c <MPU6050_Read_Accel+0x6c>)
 800d186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18a:	bf00      	nop
 800d18c:	0800d1f1 	.word	0x0800d1f1
 800d190:	0800d3d9 	.word	0x0800d3d9
 800d194:	0800d3d9 	.word	0x0800d3d9
 800d198:	0800d3d9 	.word	0x0800d3d9
 800d19c:	0800d3d9 	.word	0x0800d3d9
 800d1a0:	0800d3d9 	.word	0x0800d3d9
 800d1a4:	0800d3d9 	.word	0x0800d3d9
 800d1a8:	0800d3d9 	.word	0x0800d3d9
 800d1ac:	0800d26b 	.word	0x0800d26b
 800d1b0:	0800d3d9 	.word	0x0800d3d9
 800d1b4:	0800d3d9 	.word	0x0800d3d9
 800d1b8:	0800d3d9 	.word	0x0800d3d9
 800d1bc:	0800d3d9 	.word	0x0800d3d9
 800d1c0:	0800d3d9 	.word	0x0800d3d9
 800d1c4:	0800d3d9 	.word	0x0800d3d9
 800d1c8:	0800d3d9 	.word	0x0800d3d9
 800d1cc:	0800d2e5 	.word	0x0800d2e5
 800d1d0:	0800d3d9 	.word	0x0800d3d9
 800d1d4:	0800d3d9 	.word	0x0800d3d9
 800d1d8:	0800d3d9 	.word	0x0800d3d9
 800d1dc:	0800d3d9 	.word	0x0800d3d9
 800d1e0:	0800d3d9 	.word	0x0800d3d9
 800d1e4:	0800d3d9 	.word	0x0800d3d9
 800d1e8:	0800d3d9 	.word	0x0800d3d9
 800d1ec:	0800d35f 	.word	0x0800d35f
	case 0x00://0
		MPU6050_Ax = MPU6050_Accel_X_RAW / 16384.0;
 800d1f0:	4b7b      	ldr	r3, [pc, #492]	; (800d3e0 <MPU6050_Read_Accel+0x2c0>)
 800d1f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f3 f970 	bl	80004dc <__aeabi_i2d>
 800d1fc:	f04f 0200 	mov.w	r2, #0
 800d200:	4b7b      	ldr	r3, [pc, #492]	; (800d3f0 <MPU6050_Read_Accel+0x2d0>)
 800d202:	f7f3 faff 	bl	8000804 <__aeabi_ddiv>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4610      	mov	r0, r2
 800d20c:	4619      	mov	r1, r3
 800d20e:	f7f3 fcc7 	bl	8000ba0 <__aeabi_d2f>
 800d212:	4603      	mov	r3, r0
 800d214:	4a77      	ldr	r2, [pc, #476]	; (800d3f4 <MPU6050_Read_Accel+0x2d4>)
 800d216:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 16384.0;
 800d218:	4b72      	ldr	r3, [pc, #456]	; (800d3e4 <MPU6050_Read_Accel+0x2c4>)
 800d21a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d21e:	4618      	mov	r0, r3
 800d220:	f7f3 f95c 	bl	80004dc <__aeabi_i2d>
 800d224:	f04f 0200 	mov.w	r2, #0
 800d228:	4b71      	ldr	r3, [pc, #452]	; (800d3f0 <MPU6050_Read_Accel+0x2d0>)
 800d22a:	f7f3 faeb 	bl	8000804 <__aeabi_ddiv>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	4610      	mov	r0, r2
 800d234:	4619      	mov	r1, r3
 800d236:	f7f3 fcb3 	bl	8000ba0 <__aeabi_d2f>
 800d23a:	4603      	mov	r3, r0
 800d23c:	4a6e      	ldr	r2, [pc, #440]	; (800d3f8 <MPU6050_Read_Accel+0x2d8>)
 800d23e:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 16384.0;
 800d240:	4b69      	ldr	r3, [pc, #420]	; (800d3e8 <MPU6050_Read_Accel+0x2c8>)
 800d242:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d246:	4618      	mov	r0, r3
 800d248:	f7f3 f948 	bl	80004dc <__aeabi_i2d>
 800d24c:	f04f 0200 	mov.w	r2, #0
 800d250:	4b67      	ldr	r3, [pc, #412]	; (800d3f0 <MPU6050_Read_Accel+0x2d0>)
 800d252:	f7f3 fad7 	bl	8000804 <__aeabi_ddiv>
 800d256:	4602      	mov	r2, r0
 800d258:	460b      	mov	r3, r1
 800d25a:	4610      	mov	r0, r2
 800d25c:	4619      	mov	r1, r3
 800d25e:	f7f3 fc9f 	bl	8000ba0 <__aeabi_d2f>
 800d262:	4603      	mov	r3, r0
 800d264:	4a65      	ldr	r2, [pc, #404]	; (800d3fc <MPU6050_Read_Accel+0x2dc>)
 800d266:	6013      	str	r3, [r2, #0]

		break;
 800d268:	e0b6      	b.n	800d3d8 <MPU6050_Read_Accel+0x2b8>
	case 0x08://1
		MPU6050_Ax = MPU6050_Accel_X_RAW / 8192.0;
 800d26a:	4b5d      	ldr	r3, [pc, #372]	; (800d3e0 <MPU6050_Read_Accel+0x2c0>)
 800d26c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d270:	4618      	mov	r0, r3
 800d272:	f7f3 f933 	bl	80004dc <__aeabi_i2d>
 800d276:	f04f 0200 	mov.w	r2, #0
 800d27a:	4b61      	ldr	r3, [pc, #388]	; (800d400 <MPU6050_Read_Accel+0x2e0>)
 800d27c:	f7f3 fac2 	bl	8000804 <__aeabi_ddiv>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4610      	mov	r0, r2
 800d286:	4619      	mov	r1, r3
 800d288:	f7f3 fc8a 	bl	8000ba0 <__aeabi_d2f>
 800d28c:	4603      	mov	r3, r0
 800d28e:	4a59      	ldr	r2, [pc, #356]	; (800d3f4 <MPU6050_Read_Accel+0x2d4>)
 800d290:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 8192.0;
 800d292:	4b54      	ldr	r3, [pc, #336]	; (800d3e4 <MPU6050_Read_Accel+0x2c4>)
 800d294:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d298:	4618      	mov	r0, r3
 800d29a:	f7f3 f91f 	bl	80004dc <__aeabi_i2d>
 800d29e:	f04f 0200 	mov.w	r2, #0
 800d2a2:	4b57      	ldr	r3, [pc, #348]	; (800d400 <MPU6050_Read_Accel+0x2e0>)
 800d2a4:	f7f3 faae 	bl	8000804 <__aeabi_ddiv>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	f7f3 fc76 	bl	8000ba0 <__aeabi_d2f>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	4a50      	ldr	r2, [pc, #320]	; (800d3f8 <MPU6050_Read_Accel+0x2d8>)
 800d2b8:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 8192.0;
 800d2ba:	4b4b      	ldr	r3, [pc, #300]	; (800d3e8 <MPU6050_Read_Accel+0x2c8>)
 800d2bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7f3 f90b 	bl	80004dc <__aeabi_i2d>
 800d2c6:	f04f 0200 	mov.w	r2, #0
 800d2ca:	4b4d      	ldr	r3, [pc, #308]	; (800d400 <MPU6050_Read_Accel+0x2e0>)
 800d2cc:	f7f3 fa9a 	bl	8000804 <__aeabi_ddiv>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	f7f3 fc62 	bl	8000ba0 <__aeabi_d2f>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	4a47      	ldr	r2, [pc, #284]	; (800d3fc <MPU6050_Read_Accel+0x2dc>)
 800d2e0:	6013      	str	r3, [r2, #0]

		break;
 800d2e2:	e079      	b.n	800d3d8 <MPU6050_Read_Accel+0x2b8>
	case 0x10://2
		MPU6050_Ax = MPU6050_Accel_X_RAW / 4096.0;
 800d2e4:	4b3e      	ldr	r3, [pc, #248]	; (800d3e0 <MPU6050_Read_Accel+0x2c0>)
 800d2e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7f3 f8f6 	bl	80004dc <__aeabi_i2d>
 800d2f0:	f04f 0200 	mov.w	r2, #0
 800d2f4:	4b43      	ldr	r3, [pc, #268]	; (800d404 <MPU6050_Read_Accel+0x2e4>)
 800d2f6:	f7f3 fa85 	bl	8000804 <__aeabi_ddiv>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	4610      	mov	r0, r2
 800d300:	4619      	mov	r1, r3
 800d302:	f7f3 fc4d 	bl	8000ba0 <__aeabi_d2f>
 800d306:	4603      	mov	r3, r0
 800d308:	4a3a      	ldr	r2, [pc, #232]	; (800d3f4 <MPU6050_Read_Accel+0x2d4>)
 800d30a:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 4096.0;
 800d30c:	4b35      	ldr	r3, [pc, #212]	; (800d3e4 <MPU6050_Read_Accel+0x2c4>)
 800d30e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d312:	4618      	mov	r0, r3
 800d314:	f7f3 f8e2 	bl	80004dc <__aeabi_i2d>
 800d318:	f04f 0200 	mov.w	r2, #0
 800d31c:	4b39      	ldr	r3, [pc, #228]	; (800d404 <MPU6050_Read_Accel+0x2e4>)
 800d31e:	f7f3 fa71 	bl	8000804 <__aeabi_ddiv>
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	4610      	mov	r0, r2
 800d328:	4619      	mov	r1, r3
 800d32a:	f7f3 fc39 	bl	8000ba0 <__aeabi_d2f>
 800d32e:	4603      	mov	r3, r0
 800d330:	4a31      	ldr	r2, [pc, #196]	; (800d3f8 <MPU6050_Read_Accel+0x2d8>)
 800d332:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 4096.0;
 800d334:	4b2c      	ldr	r3, [pc, #176]	; (800d3e8 <MPU6050_Read_Accel+0x2c8>)
 800d336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7f3 f8ce 	bl	80004dc <__aeabi_i2d>
 800d340:	f04f 0200 	mov.w	r2, #0
 800d344:	4b2f      	ldr	r3, [pc, #188]	; (800d404 <MPU6050_Read_Accel+0x2e4>)
 800d346:	f7f3 fa5d 	bl	8000804 <__aeabi_ddiv>
 800d34a:	4602      	mov	r2, r0
 800d34c:	460b      	mov	r3, r1
 800d34e:	4610      	mov	r0, r2
 800d350:	4619      	mov	r1, r3
 800d352:	f7f3 fc25 	bl	8000ba0 <__aeabi_d2f>
 800d356:	4603      	mov	r3, r0
 800d358:	4a28      	ldr	r2, [pc, #160]	; (800d3fc <MPU6050_Read_Accel+0x2dc>)
 800d35a:	6013      	str	r3, [r2, #0]

		break;
 800d35c:	e03c      	b.n	800d3d8 <MPU6050_Read_Accel+0x2b8>
	case 0x18://3
		MPU6050_Ax = MPU6050_Accel_X_RAW / 2048.0;
 800d35e:	4b20      	ldr	r3, [pc, #128]	; (800d3e0 <MPU6050_Read_Accel+0x2c0>)
 800d360:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d364:	4618      	mov	r0, r3
 800d366:	f7f3 f8b9 	bl	80004dc <__aeabi_i2d>
 800d36a:	f04f 0200 	mov.w	r2, #0
 800d36e:	4b26      	ldr	r3, [pc, #152]	; (800d408 <MPU6050_Read_Accel+0x2e8>)
 800d370:	f7f3 fa48 	bl	8000804 <__aeabi_ddiv>
 800d374:	4602      	mov	r2, r0
 800d376:	460b      	mov	r3, r1
 800d378:	4610      	mov	r0, r2
 800d37a:	4619      	mov	r1, r3
 800d37c:	f7f3 fc10 	bl	8000ba0 <__aeabi_d2f>
 800d380:	4603      	mov	r3, r0
 800d382:	4a1c      	ldr	r2, [pc, #112]	; (800d3f4 <MPU6050_Read_Accel+0x2d4>)
 800d384:	6013      	str	r3, [r2, #0]
		MPU6050_Ay = MPU6050_Accel_Y_RAW / 2048.0;
 800d386:	4b17      	ldr	r3, [pc, #92]	; (800d3e4 <MPU6050_Read_Accel+0x2c4>)
 800d388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7f3 f8a5 	bl	80004dc <__aeabi_i2d>
 800d392:	f04f 0200 	mov.w	r2, #0
 800d396:	4b1c      	ldr	r3, [pc, #112]	; (800d408 <MPU6050_Read_Accel+0x2e8>)
 800d398:	f7f3 fa34 	bl	8000804 <__aeabi_ddiv>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	f7f3 fbfc 	bl	8000ba0 <__aeabi_d2f>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	4a13      	ldr	r2, [pc, #76]	; (800d3f8 <MPU6050_Read_Accel+0x2d8>)
 800d3ac:	6013      	str	r3, [r2, #0]
		MPU6050_Az = MPU6050_Accel_Z_RAW / 2048.0;
 800d3ae:	4b0e      	ldr	r3, [pc, #56]	; (800d3e8 <MPU6050_Read_Accel+0x2c8>)
 800d3b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7f3 f891 	bl	80004dc <__aeabi_i2d>
 800d3ba:	f04f 0200 	mov.w	r2, #0
 800d3be:	4b12      	ldr	r3, [pc, #72]	; (800d408 <MPU6050_Read_Accel+0x2e8>)
 800d3c0:	f7f3 fa20 	bl	8000804 <__aeabi_ddiv>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	f7f3 fbe8 	bl	8000ba0 <__aeabi_d2f>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	4a0a      	ldr	r2, [pc, #40]	; (800d3fc <MPU6050_Read_Accel+0x2dc>)
 800d3d4:	6013      	str	r3, [r2, #0]

		break;
 800d3d6:	bf00      	nop
	}
}
 800d3d8:	bf00      	nop
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	20000300 	.word	0x20000300
 800d3e4:	20000302 	.word	0x20000302
 800d3e8:	200002a0 	.word	0x200002a0
 800d3ec:	20000298 	.word	0x20000298
 800d3f0:	40d00000 	.word	0x40d00000
 800d3f4:	20000308 	.word	0x20000308
 800d3f8:	200002f0 	.word	0x200002f0
 800d3fc:	20000294 	.word	0x20000294
 800d400:	40c00000 	.word	0x40c00000
 800d404:	40b00000 	.word	0x40b00000
 800d408:	40a00000 	.word	0x40a00000
 800d40c:	00000000 	.word	0x00000000

0800d410 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(I2C_HandleTypeDef *handle_i2c) {
 800d410:	b580      	push	{r7, lr}
 800d412:	b088      	sub	sp, #32
 800d414:	af04      	add	r7, sp, #16
 800d416:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(handle_i2c, MPU6050_ADDR, MPU6050_GYRO_XOUT_H, 1, Rec_Data, 6,10000);
 800d418:	f242 7310 	movw	r3, #10000	; 0x2710
 800d41c:	9302      	str	r3, [sp, #8]
 800d41e:	2306      	movs	r3, #6
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	f107 0308 	add.w	r3, r7, #8
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	2301      	movs	r3, #1
 800d42a:	2243      	movs	r2, #67	; 0x43
 800d42c:	21d0      	movs	r1, #208	; 0xd0
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f7f7 fe16 	bl	8005060 <HAL_I2C_Mem_Read>

	MPU6050_Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800d434:	7a3b      	ldrb	r3, [r7, #8]
 800d436:	021b      	lsls	r3, r3, #8
 800d438:	b21a      	sxth	r2, r3
 800d43a:	7a7b      	ldrb	r3, [r7, #9]
 800d43c:	b21b      	sxth	r3, r3
 800d43e:	4313      	orrs	r3, r2
 800d440:	b21a      	sxth	r2, r3
 800d442:	4bab      	ldr	r3, [pc, #684]	; (800d6f0 <MPU6050_Read_Gyro+0x2e0>)
 800d444:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800d446:	7abb      	ldrb	r3, [r7, #10]
 800d448:	021b      	lsls	r3, r3, #8
 800d44a:	b21a      	sxth	r2, r3
 800d44c:	7afb      	ldrb	r3, [r7, #11]
 800d44e:	b21b      	sxth	r3, r3
 800d450:	4313      	orrs	r3, r2
 800d452:	b21a      	sxth	r2, r3
 800d454:	4ba7      	ldr	r3, [pc, #668]	; (800d6f4 <MPU6050_Read_Gyro+0x2e4>)
 800d456:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800d458:	7b3b      	ldrb	r3, [r7, #12]
 800d45a:	021b      	lsls	r3, r3, #8
 800d45c:	b21a      	sxth	r2, r3
 800d45e:	7b7b      	ldrb	r3, [r7, #13]
 800d460:	b21b      	sxth	r3, r3
 800d462:	4313      	orrs	r3, r2
 800d464:	b21a      	sxth	r2, r3
 800d466:	4ba4      	ldr	r3, [pc, #656]	; (800d6f8 <MPU6050_Read_Gyro+0x2e8>)
 800d468:	801a      	strh	r2, [r3, #0]
	1 ± 500 °/s 65.5 LSB/°/s
	2 ± 1000 °/s 32.8 LSB/°/s
	3 ± 2000 °/s 16.4 LSB/°/s
	 */

	switch (MPU6050_FS_SEL) {
 800d46a:	4ba4      	ldr	r3, [pc, #656]	; (800d6fc <MPU6050_Read_Gyro+0x2ec>)
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	2b18      	cmp	r3, #24
 800d470:	f200 812a 	bhi.w	800d6c8 <MPU6050_Read_Gyro+0x2b8>
 800d474:	a201      	add	r2, pc, #4	; (adr r2, 800d47c <MPU6050_Read_Gyro+0x6c>)
 800d476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d47a:	bf00      	nop
 800d47c:	0800d4e1 	.word	0x0800d4e1
 800d480:	0800d6c9 	.word	0x0800d6c9
 800d484:	0800d6c9 	.word	0x0800d6c9
 800d488:	0800d6c9 	.word	0x0800d6c9
 800d48c:	0800d6c9 	.word	0x0800d6c9
 800d490:	0800d6c9 	.word	0x0800d6c9
 800d494:	0800d6c9 	.word	0x0800d6c9
 800d498:	0800d6c9 	.word	0x0800d6c9
 800d49c:	0800d55b 	.word	0x0800d55b
 800d4a0:	0800d6c9 	.word	0x0800d6c9
 800d4a4:	0800d6c9 	.word	0x0800d6c9
 800d4a8:	0800d6c9 	.word	0x0800d6c9
 800d4ac:	0800d6c9 	.word	0x0800d6c9
 800d4b0:	0800d6c9 	.word	0x0800d6c9
 800d4b4:	0800d6c9 	.word	0x0800d6c9
 800d4b8:	0800d6c9 	.word	0x0800d6c9
 800d4bc:	0800d5d5 	.word	0x0800d5d5
 800d4c0:	0800d6c9 	.word	0x0800d6c9
 800d4c4:	0800d6c9 	.word	0x0800d6c9
 800d4c8:	0800d6c9 	.word	0x0800d6c9
 800d4cc:	0800d6c9 	.word	0x0800d6c9
 800d4d0:	0800d6c9 	.word	0x0800d6c9
 800d4d4:	0800d6c9 	.word	0x0800d6c9
 800d4d8:	0800d6c9 	.word	0x0800d6c9
 800d4dc:	0800d64f 	.word	0x0800d64f
	case 0x00://0
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 131.0;
 800d4e0:	4b83      	ldr	r3, [pc, #524]	; (800d6f0 <MPU6050_Read_Gyro+0x2e0>)
 800d4e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7f2 fff8 	bl	80004dc <__aeabi_i2d>
 800d4ec:	a378      	add	r3, pc, #480	; (adr r3, 800d6d0 <MPU6050_Read_Gyro+0x2c0>)
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	f7f3 f987 	bl	8000804 <__aeabi_ddiv>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	f7f3 fb4f 	bl	8000ba0 <__aeabi_d2f>
 800d502:	4603      	mov	r3, r0
 800d504:	4a7e      	ldr	r2, [pc, #504]	; (800d700 <MPU6050_Read_Gyro+0x2f0>)
 800d506:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 131.0;
 800d508:	4b7a      	ldr	r3, [pc, #488]	; (800d6f4 <MPU6050_Read_Gyro+0x2e4>)
 800d50a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d50e:	4618      	mov	r0, r3
 800d510:	f7f2 ffe4 	bl	80004dc <__aeabi_i2d>
 800d514:	a36e      	add	r3, pc, #440	; (adr r3, 800d6d0 <MPU6050_Read_Gyro+0x2c0>)
 800d516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51a:	f7f3 f973 	bl	8000804 <__aeabi_ddiv>
 800d51e:	4602      	mov	r2, r0
 800d520:	460b      	mov	r3, r1
 800d522:	4610      	mov	r0, r2
 800d524:	4619      	mov	r1, r3
 800d526:	f7f3 fb3b 	bl	8000ba0 <__aeabi_d2f>
 800d52a:	4603      	mov	r3, r0
 800d52c:	4a75      	ldr	r2, [pc, #468]	; (800d704 <MPU6050_Read_Gyro+0x2f4>)
 800d52e:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 131.0;
 800d530:	4b71      	ldr	r3, [pc, #452]	; (800d6f8 <MPU6050_Read_Gyro+0x2e8>)
 800d532:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d536:	4618      	mov	r0, r3
 800d538:	f7f2 ffd0 	bl	80004dc <__aeabi_i2d>
 800d53c:	a364      	add	r3, pc, #400	; (adr r3, 800d6d0 <MPU6050_Read_Gyro+0x2c0>)
 800d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d542:	f7f3 f95f 	bl	8000804 <__aeabi_ddiv>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	4610      	mov	r0, r2
 800d54c:	4619      	mov	r1, r3
 800d54e:	f7f3 fb27 	bl	8000ba0 <__aeabi_d2f>
 800d552:	4603      	mov	r3, r0
 800d554:	4a6c      	ldr	r2, [pc, #432]	; (800d708 <MPU6050_Read_Gyro+0x2f8>)
 800d556:	6013      	str	r3, [r2, #0]
		break;
 800d558:	e0b6      	b.n	800d6c8 <MPU6050_Read_Gyro+0x2b8>
	case 0x08://1
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 65.5;
 800d55a:	4b65      	ldr	r3, [pc, #404]	; (800d6f0 <MPU6050_Read_Gyro+0x2e0>)
 800d55c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d560:	4618      	mov	r0, r3
 800d562:	f7f2 ffbb 	bl	80004dc <__aeabi_i2d>
 800d566:	a35c      	add	r3, pc, #368	; (adr r3, 800d6d8 <MPU6050_Read_Gyro+0x2c8>)
 800d568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56c:	f7f3 f94a 	bl	8000804 <__aeabi_ddiv>
 800d570:	4602      	mov	r2, r0
 800d572:	460b      	mov	r3, r1
 800d574:	4610      	mov	r0, r2
 800d576:	4619      	mov	r1, r3
 800d578:	f7f3 fb12 	bl	8000ba0 <__aeabi_d2f>
 800d57c:	4603      	mov	r3, r0
 800d57e:	4a60      	ldr	r2, [pc, #384]	; (800d700 <MPU6050_Read_Gyro+0x2f0>)
 800d580:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 65.5;
 800d582:	4b5c      	ldr	r3, [pc, #368]	; (800d6f4 <MPU6050_Read_Gyro+0x2e4>)
 800d584:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d588:	4618      	mov	r0, r3
 800d58a:	f7f2 ffa7 	bl	80004dc <__aeabi_i2d>
 800d58e:	a352      	add	r3, pc, #328	; (adr r3, 800d6d8 <MPU6050_Read_Gyro+0x2c8>)
 800d590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d594:	f7f3 f936 	bl	8000804 <__aeabi_ddiv>
 800d598:	4602      	mov	r2, r0
 800d59a:	460b      	mov	r3, r1
 800d59c:	4610      	mov	r0, r2
 800d59e:	4619      	mov	r1, r3
 800d5a0:	f7f3 fafe 	bl	8000ba0 <__aeabi_d2f>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	4a57      	ldr	r2, [pc, #348]	; (800d704 <MPU6050_Read_Gyro+0x2f4>)
 800d5a8:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 65.5;
 800d5aa:	4b53      	ldr	r3, [pc, #332]	; (800d6f8 <MPU6050_Read_Gyro+0x2e8>)
 800d5ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7f2 ff93 	bl	80004dc <__aeabi_i2d>
 800d5b6:	a348      	add	r3, pc, #288	; (adr r3, 800d6d8 <MPU6050_Read_Gyro+0x2c8>)
 800d5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5bc:	f7f3 f922 	bl	8000804 <__aeabi_ddiv>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	460b      	mov	r3, r1
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	f7f3 faea 	bl	8000ba0 <__aeabi_d2f>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	4a4e      	ldr	r2, [pc, #312]	; (800d708 <MPU6050_Read_Gyro+0x2f8>)
 800d5d0:	6013      	str	r3, [r2, #0]
		break;
 800d5d2:	e079      	b.n	800d6c8 <MPU6050_Read_Gyro+0x2b8>
	case 0x10://2
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 32.8;
 800d5d4:	4b46      	ldr	r3, [pc, #280]	; (800d6f0 <MPU6050_Read_Gyro+0x2e0>)
 800d5d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7f2 ff7e 	bl	80004dc <__aeabi_i2d>
 800d5e0:	a33f      	add	r3, pc, #252	; (adr r3, 800d6e0 <MPU6050_Read_Gyro+0x2d0>)
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	f7f3 f90d 	bl	8000804 <__aeabi_ddiv>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	4610      	mov	r0, r2
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	f7f3 fad5 	bl	8000ba0 <__aeabi_d2f>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	4a41      	ldr	r2, [pc, #260]	; (800d700 <MPU6050_Read_Gyro+0x2f0>)
 800d5fa:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 32.8;
 800d5fc:	4b3d      	ldr	r3, [pc, #244]	; (800d6f4 <MPU6050_Read_Gyro+0x2e4>)
 800d5fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d602:	4618      	mov	r0, r3
 800d604:	f7f2 ff6a 	bl	80004dc <__aeabi_i2d>
 800d608:	a335      	add	r3, pc, #212	; (adr r3, 800d6e0 <MPU6050_Read_Gyro+0x2d0>)
 800d60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60e:	f7f3 f8f9 	bl	8000804 <__aeabi_ddiv>
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	4610      	mov	r0, r2
 800d618:	4619      	mov	r1, r3
 800d61a:	f7f3 fac1 	bl	8000ba0 <__aeabi_d2f>
 800d61e:	4603      	mov	r3, r0
 800d620:	4a38      	ldr	r2, [pc, #224]	; (800d704 <MPU6050_Read_Gyro+0x2f4>)
 800d622:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 32.8;
 800d624:	4b34      	ldr	r3, [pc, #208]	; (800d6f8 <MPU6050_Read_Gyro+0x2e8>)
 800d626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7f2 ff56 	bl	80004dc <__aeabi_i2d>
 800d630:	a32b      	add	r3, pc, #172	; (adr r3, 800d6e0 <MPU6050_Read_Gyro+0x2d0>)
 800d632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d636:	f7f3 f8e5 	bl	8000804 <__aeabi_ddiv>
 800d63a:	4602      	mov	r2, r0
 800d63c:	460b      	mov	r3, r1
 800d63e:	4610      	mov	r0, r2
 800d640:	4619      	mov	r1, r3
 800d642:	f7f3 faad 	bl	8000ba0 <__aeabi_d2f>
 800d646:	4603      	mov	r3, r0
 800d648:	4a2f      	ldr	r2, [pc, #188]	; (800d708 <MPU6050_Read_Gyro+0x2f8>)
 800d64a:	6013      	str	r3, [r2, #0]
		break;
 800d64c:	e03c      	b.n	800d6c8 <MPU6050_Read_Gyro+0x2b8>
	case 0x18://3
		MPU6050_Gx = MPU6050_Gyro_X_RAW / 16.4;
 800d64e:	4b28      	ldr	r3, [pc, #160]	; (800d6f0 <MPU6050_Read_Gyro+0x2e0>)
 800d650:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d654:	4618      	mov	r0, r3
 800d656:	f7f2 ff41 	bl	80004dc <__aeabi_i2d>
 800d65a:	a323      	add	r3, pc, #140	; (adr r3, 800d6e8 <MPU6050_Read_Gyro+0x2d8>)
 800d65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d660:	f7f3 f8d0 	bl	8000804 <__aeabi_ddiv>
 800d664:	4602      	mov	r2, r0
 800d666:	460b      	mov	r3, r1
 800d668:	4610      	mov	r0, r2
 800d66a:	4619      	mov	r1, r3
 800d66c:	f7f3 fa98 	bl	8000ba0 <__aeabi_d2f>
 800d670:	4603      	mov	r3, r0
 800d672:	4a23      	ldr	r2, [pc, #140]	; (800d700 <MPU6050_Read_Gyro+0x2f0>)
 800d674:	6013      	str	r3, [r2, #0]
		MPU6050_Gy = MPU6050_Gyro_Y_RAW / 16.4;
 800d676:	4b1f      	ldr	r3, [pc, #124]	; (800d6f4 <MPU6050_Read_Gyro+0x2e4>)
 800d678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7f2 ff2d 	bl	80004dc <__aeabi_i2d>
 800d682:	a319      	add	r3, pc, #100	; (adr r3, 800d6e8 <MPU6050_Read_Gyro+0x2d8>)
 800d684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d688:	f7f3 f8bc 	bl	8000804 <__aeabi_ddiv>
 800d68c:	4602      	mov	r2, r0
 800d68e:	460b      	mov	r3, r1
 800d690:	4610      	mov	r0, r2
 800d692:	4619      	mov	r1, r3
 800d694:	f7f3 fa84 	bl	8000ba0 <__aeabi_d2f>
 800d698:	4603      	mov	r3, r0
 800d69a:	4a1a      	ldr	r2, [pc, #104]	; (800d704 <MPU6050_Read_Gyro+0x2f4>)
 800d69c:	6013      	str	r3, [r2, #0]
		MPU6050_Gz = MPU6050_Gyro_Z_RAW / 16.4;
 800d69e:	4b16      	ldr	r3, [pc, #88]	; (800d6f8 <MPU6050_Read_Gyro+0x2e8>)
 800d6a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7f2 ff19 	bl	80004dc <__aeabi_i2d>
 800d6aa:	a30f      	add	r3, pc, #60	; (adr r3, 800d6e8 <MPU6050_Read_Gyro+0x2d8>)
 800d6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b0:	f7f3 f8a8 	bl	8000804 <__aeabi_ddiv>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	f7f3 fa70 	bl	8000ba0 <__aeabi_d2f>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	4a11      	ldr	r2, [pc, #68]	; (800d708 <MPU6050_Read_Gyro+0x2f8>)
 800d6c4:	6013      	str	r3, [r2, #0]
		break;
 800d6c6:	bf00      	nop
	}
}
 800d6c8:	bf00      	nop
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	00000000 	.word	0x00000000
 800d6d4:	40606000 	.word	0x40606000
 800d6d8:	00000000 	.word	0x00000000
 800d6dc:	40506000 	.word	0x40506000
 800d6e0:	66666666 	.word	0x66666666
 800d6e4:	40406666 	.word	0x40406666
 800d6e8:	66666666 	.word	0x66666666
 800d6ec:	40306666 	.word	0x40306666
 800d6f0:	20000304 	.word	0x20000304
 800d6f4:	200002f8 	.word	0x200002f8
 800d6f8:	200002a4 	.word	0x200002a4
 800d6fc:	20000310 	.word	0x20000310
 800d700:	2000029c 	.word	0x2000029c
 800d704:	200002f4 	.word	0x200002f4
 800d708:	2000030c 	.word	0x2000030c

0800d70c <__errno>:
 800d70c:	4b01      	ldr	r3, [pc, #4]	; (800d714 <__errno+0x8>)
 800d70e:	6818      	ldr	r0, [r3, #0]
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	20000070 	.word	0x20000070

0800d718 <__libc_init_array>:
 800d718:	b570      	push	{r4, r5, r6, lr}
 800d71a:	2600      	movs	r6, #0
 800d71c:	4d0c      	ldr	r5, [pc, #48]	; (800d750 <__libc_init_array+0x38>)
 800d71e:	4c0d      	ldr	r4, [pc, #52]	; (800d754 <__libc_init_array+0x3c>)
 800d720:	1b64      	subs	r4, r4, r5
 800d722:	10a4      	asrs	r4, r4, #2
 800d724:	42a6      	cmp	r6, r4
 800d726:	d109      	bne.n	800d73c <__libc_init_array+0x24>
 800d728:	f002 ff10 	bl	801054c <_init>
 800d72c:	2600      	movs	r6, #0
 800d72e:	4d0a      	ldr	r5, [pc, #40]	; (800d758 <__libc_init_array+0x40>)
 800d730:	4c0a      	ldr	r4, [pc, #40]	; (800d75c <__libc_init_array+0x44>)
 800d732:	1b64      	subs	r4, r4, r5
 800d734:	10a4      	asrs	r4, r4, #2
 800d736:	42a6      	cmp	r6, r4
 800d738:	d105      	bne.n	800d746 <__libc_init_array+0x2e>
 800d73a:	bd70      	pop	{r4, r5, r6, pc}
 800d73c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d740:	4798      	blx	r3
 800d742:	3601      	adds	r6, #1
 800d744:	e7ee      	b.n	800d724 <__libc_init_array+0xc>
 800d746:	f855 3b04 	ldr.w	r3, [r5], #4
 800d74a:	4798      	blx	r3
 800d74c:	3601      	adds	r6, #1
 800d74e:	e7f2      	b.n	800d736 <__libc_init_array+0x1e>
 800d750:	080110e4 	.word	0x080110e4
 800d754:	080110e4 	.word	0x080110e4
 800d758:	080110e4 	.word	0x080110e4
 800d75c:	080110e8 	.word	0x080110e8

0800d760 <memcpy>:
 800d760:	440a      	add	r2, r1
 800d762:	4291      	cmp	r1, r2
 800d764:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d768:	d100      	bne.n	800d76c <memcpy+0xc>
 800d76a:	4770      	bx	lr
 800d76c:	b510      	push	{r4, lr}
 800d76e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d772:	4291      	cmp	r1, r2
 800d774:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d778:	d1f9      	bne.n	800d76e <memcpy+0xe>
 800d77a:	bd10      	pop	{r4, pc}

0800d77c <memset>:
 800d77c:	4603      	mov	r3, r0
 800d77e:	4402      	add	r2, r0
 800d780:	4293      	cmp	r3, r2
 800d782:	d100      	bne.n	800d786 <memset+0xa>
 800d784:	4770      	bx	lr
 800d786:	f803 1b01 	strb.w	r1, [r3], #1
 800d78a:	e7f9      	b.n	800d780 <memset+0x4>

0800d78c <__cvt>:
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d792:	461f      	mov	r7, r3
 800d794:	bfbb      	ittet	lt
 800d796:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d79a:	461f      	movlt	r7, r3
 800d79c:	2300      	movge	r3, #0
 800d79e:	232d      	movlt	r3, #45	; 0x2d
 800d7a0:	b088      	sub	sp, #32
 800d7a2:	4614      	mov	r4, r2
 800d7a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d7a8:	7013      	strb	r3, [r2, #0]
 800d7aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d7ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d7b0:	f023 0820 	bic.w	r8, r3, #32
 800d7b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d7b8:	d005      	beq.n	800d7c6 <__cvt+0x3a>
 800d7ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d7be:	d100      	bne.n	800d7c2 <__cvt+0x36>
 800d7c0:	3501      	adds	r5, #1
 800d7c2:	2302      	movs	r3, #2
 800d7c4:	e000      	b.n	800d7c8 <__cvt+0x3c>
 800d7c6:	2303      	movs	r3, #3
 800d7c8:	aa07      	add	r2, sp, #28
 800d7ca:	9204      	str	r2, [sp, #16]
 800d7cc:	aa06      	add	r2, sp, #24
 800d7ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d7d2:	e9cd 3500 	strd	r3, r5, [sp]
 800d7d6:	4622      	mov	r2, r4
 800d7d8:	463b      	mov	r3, r7
 800d7da:	f000 fcf9 	bl	800e1d0 <_dtoa_r>
 800d7de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	d102      	bne.n	800d7ec <__cvt+0x60>
 800d7e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d7e8:	07db      	lsls	r3, r3, #31
 800d7ea:	d522      	bpl.n	800d832 <__cvt+0xa6>
 800d7ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d7f0:	eb06 0905 	add.w	r9, r6, r5
 800d7f4:	d110      	bne.n	800d818 <__cvt+0x8c>
 800d7f6:	7833      	ldrb	r3, [r6, #0]
 800d7f8:	2b30      	cmp	r3, #48	; 0x30
 800d7fa:	d10a      	bne.n	800d812 <__cvt+0x86>
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	2300      	movs	r3, #0
 800d800:	4620      	mov	r0, r4
 800d802:	4639      	mov	r1, r7
 800d804:	f7f3 f93c 	bl	8000a80 <__aeabi_dcmpeq>
 800d808:	b918      	cbnz	r0, 800d812 <__cvt+0x86>
 800d80a:	f1c5 0501 	rsb	r5, r5, #1
 800d80e:	f8ca 5000 	str.w	r5, [sl]
 800d812:	f8da 3000 	ldr.w	r3, [sl]
 800d816:	4499      	add	r9, r3
 800d818:	2200      	movs	r2, #0
 800d81a:	2300      	movs	r3, #0
 800d81c:	4620      	mov	r0, r4
 800d81e:	4639      	mov	r1, r7
 800d820:	f7f3 f92e 	bl	8000a80 <__aeabi_dcmpeq>
 800d824:	b108      	cbz	r0, 800d82a <__cvt+0x9e>
 800d826:	f8cd 901c 	str.w	r9, [sp, #28]
 800d82a:	2230      	movs	r2, #48	; 0x30
 800d82c:	9b07      	ldr	r3, [sp, #28]
 800d82e:	454b      	cmp	r3, r9
 800d830:	d307      	bcc.n	800d842 <__cvt+0xb6>
 800d832:	4630      	mov	r0, r6
 800d834:	9b07      	ldr	r3, [sp, #28]
 800d836:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d838:	1b9b      	subs	r3, r3, r6
 800d83a:	6013      	str	r3, [r2, #0]
 800d83c:	b008      	add	sp, #32
 800d83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d842:	1c59      	adds	r1, r3, #1
 800d844:	9107      	str	r1, [sp, #28]
 800d846:	701a      	strb	r2, [r3, #0]
 800d848:	e7f0      	b.n	800d82c <__cvt+0xa0>

0800d84a <__exponent>:
 800d84a:	4603      	mov	r3, r0
 800d84c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d84e:	2900      	cmp	r1, #0
 800d850:	f803 2b02 	strb.w	r2, [r3], #2
 800d854:	bfb6      	itet	lt
 800d856:	222d      	movlt	r2, #45	; 0x2d
 800d858:	222b      	movge	r2, #43	; 0x2b
 800d85a:	4249      	neglt	r1, r1
 800d85c:	2909      	cmp	r1, #9
 800d85e:	7042      	strb	r2, [r0, #1]
 800d860:	dd2b      	ble.n	800d8ba <__exponent+0x70>
 800d862:	f10d 0407 	add.w	r4, sp, #7
 800d866:	46a4      	mov	ip, r4
 800d868:	270a      	movs	r7, #10
 800d86a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d86e:	460a      	mov	r2, r1
 800d870:	46a6      	mov	lr, r4
 800d872:	fb07 1516 	mls	r5, r7, r6, r1
 800d876:	2a63      	cmp	r2, #99	; 0x63
 800d878:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800d87c:	4631      	mov	r1, r6
 800d87e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d882:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d886:	dcf0      	bgt.n	800d86a <__exponent+0x20>
 800d888:	3130      	adds	r1, #48	; 0x30
 800d88a:	f1ae 0502 	sub.w	r5, lr, #2
 800d88e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d892:	4629      	mov	r1, r5
 800d894:	1c44      	adds	r4, r0, #1
 800d896:	4561      	cmp	r1, ip
 800d898:	d30a      	bcc.n	800d8b0 <__exponent+0x66>
 800d89a:	f10d 0209 	add.w	r2, sp, #9
 800d89e:	eba2 020e 	sub.w	r2, r2, lr
 800d8a2:	4565      	cmp	r5, ip
 800d8a4:	bf88      	it	hi
 800d8a6:	2200      	movhi	r2, #0
 800d8a8:	4413      	add	r3, r2
 800d8aa:	1a18      	subs	r0, r3, r0
 800d8ac:	b003      	add	sp, #12
 800d8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8b4:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d8b8:	e7ed      	b.n	800d896 <__exponent+0x4c>
 800d8ba:	2330      	movs	r3, #48	; 0x30
 800d8bc:	3130      	adds	r1, #48	; 0x30
 800d8be:	7083      	strb	r3, [r0, #2]
 800d8c0:	70c1      	strb	r1, [r0, #3]
 800d8c2:	1d03      	adds	r3, r0, #4
 800d8c4:	e7f1      	b.n	800d8aa <__exponent+0x60>
	...

0800d8c8 <_printf_float>:
 800d8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8cc:	b091      	sub	sp, #68	; 0x44
 800d8ce:	460c      	mov	r4, r1
 800d8d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d8d4:	4616      	mov	r6, r2
 800d8d6:	461f      	mov	r7, r3
 800d8d8:	4605      	mov	r5, r0
 800d8da:	f001 fa67 	bl	800edac <_localeconv_r>
 800d8de:	6803      	ldr	r3, [r0, #0]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d8e4:	f7f2 fca0 	bl	8000228 <strlen>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	930e      	str	r3, [sp, #56]	; 0x38
 800d8ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d8f0:	900a      	str	r0, [sp, #40]	; 0x28
 800d8f2:	3307      	adds	r3, #7
 800d8f4:	f023 0307 	bic.w	r3, r3, #7
 800d8f8:	f103 0208 	add.w	r2, r3, #8
 800d8fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d900:	f8d4 b000 	ldr.w	fp, [r4]
 800d904:	f8c8 2000 	str.w	r2, [r8]
 800d908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d910:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800d914:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800d918:	930b      	str	r3, [sp, #44]	; 0x2c
 800d91a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d91e:	4640      	mov	r0, r8
 800d920:	4b9c      	ldr	r3, [pc, #624]	; (800db94 <_printf_float+0x2cc>)
 800d922:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d924:	f7f3 f8de 	bl	8000ae4 <__aeabi_dcmpun>
 800d928:	bb70      	cbnz	r0, 800d988 <_printf_float+0xc0>
 800d92a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d92e:	4640      	mov	r0, r8
 800d930:	4b98      	ldr	r3, [pc, #608]	; (800db94 <_printf_float+0x2cc>)
 800d932:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d934:	f7f3 f8b8 	bl	8000aa8 <__aeabi_dcmple>
 800d938:	bb30      	cbnz	r0, 800d988 <_printf_float+0xc0>
 800d93a:	2200      	movs	r2, #0
 800d93c:	2300      	movs	r3, #0
 800d93e:	4640      	mov	r0, r8
 800d940:	4651      	mov	r1, sl
 800d942:	f7f3 f8a7 	bl	8000a94 <__aeabi_dcmplt>
 800d946:	b110      	cbz	r0, 800d94e <_printf_float+0x86>
 800d948:	232d      	movs	r3, #45	; 0x2d
 800d94a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d94e:	4b92      	ldr	r3, [pc, #584]	; (800db98 <_printf_float+0x2d0>)
 800d950:	4892      	ldr	r0, [pc, #584]	; (800db9c <_printf_float+0x2d4>)
 800d952:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d956:	bf94      	ite	ls
 800d958:	4698      	movls	r8, r3
 800d95a:	4680      	movhi	r8, r0
 800d95c:	2303      	movs	r3, #3
 800d95e:	f04f 0a00 	mov.w	sl, #0
 800d962:	6123      	str	r3, [r4, #16]
 800d964:	f02b 0304 	bic.w	r3, fp, #4
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	4633      	mov	r3, r6
 800d96c:	4621      	mov	r1, r4
 800d96e:	4628      	mov	r0, r5
 800d970:	9700      	str	r7, [sp, #0]
 800d972:	aa0f      	add	r2, sp, #60	; 0x3c
 800d974:	f000 f9d4 	bl	800dd20 <_printf_common>
 800d978:	3001      	adds	r0, #1
 800d97a:	f040 8090 	bne.w	800da9e <_printf_float+0x1d6>
 800d97e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d982:	b011      	add	sp, #68	; 0x44
 800d984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d988:	4642      	mov	r2, r8
 800d98a:	4653      	mov	r3, sl
 800d98c:	4640      	mov	r0, r8
 800d98e:	4651      	mov	r1, sl
 800d990:	f7f3 f8a8 	bl	8000ae4 <__aeabi_dcmpun>
 800d994:	b148      	cbz	r0, 800d9aa <_printf_float+0xe2>
 800d996:	f1ba 0f00 	cmp.w	sl, #0
 800d99a:	bfb8      	it	lt
 800d99c:	232d      	movlt	r3, #45	; 0x2d
 800d99e:	4880      	ldr	r0, [pc, #512]	; (800dba0 <_printf_float+0x2d8>)
 800d9a0:	bfb8      	it	lt
 800d9a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d9a6:	4b7f      	ldr	r3, [pc, #508]	; (800dba4 <_printf_float+0x2dc>)
 800d9a8:	e7d3      	b.n	800d952 <_printf_float+0x8a>
 800d9aa:	6863      	ldr	r3, [r4, #4]
 800d9ac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d9b0:	1c5a      	adds	r2, r3, #1
 800d9b2:	d142      	bne.n	800da3a <_printf_float+0x172>
 800d9b4:	2306      	movs	r3, #6
 800d9b6:	6063      	str	r3, [r4, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	9206      	str	r2, [sp, #24]
 800d9bc:	aa0e      	add	r2, sp, #56	; 0x38
 800d9be:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d9c2:	aa0d      	add	r2, sp, #52	; 0x34
 800d9c4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d9c8:	9203      	str	r2, [sp, #12]
 800d9ca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d9ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d9d2:	6023      	str	r3, [r4, #0]
 800d9d4:	6863      	ldr	r3, [r4, #4]
 800d9d6:	4642      	mov	r2, r8
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	4628      	mov	r0, r5
 800d9dc:	4653      	mov	r3, sl
 800d9de:	910b      	str	r1, [sp, #44]	; 0x2c
 800d9e0:	f7ff fed4 	bl	800d78c <__cvt>
 800d9e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9e6:	4680      	mov	r8, r0
 800d9e8:	2947      	cmp	r1, #71	; 0x47
 800d9ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d9ec:	d108      	bne.n	800da00 <_printf_float+0x138>
 800d9ee:	1cc8      	adds	r0, r1, #3
 800d9f0:	db02      	blt.n	800d9f8 <_printf_float+0x130>
 800d9f2:	6863      	ldr	r3, [r4, #4]
 800d9f4:	4299      	cmp	r1, r3
 800d9f6:	dd40      	ble.n	800da7a <_printf_float+0x1b2>
 800d9f8:	f1a9 0902 	sub.w	r9, r9, #2
 800d9fc:	fa5f f989 	uxtb.w	r9, r9
 800da00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800da04:	d81f      	bhi.n	800da46 <_printf_float+0x17e>
 800da06:	464a      	mov	r2, r9
 800da08:	3901      	subs	r1, #1
 800da0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800da0e:	910d      	str	r1, [sp, #52]	; 0x34
 800da10:	f7ff ff1b 	bl	800d84a <__exponent>
 800da14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da16:	4682      	mov	sl, r0
 800da18:	1813      	adds	r3, r2, r0
 800da1a:	2a01      	cmp	r2, #1
 800da1c:	6123      	str	r3, [r4, #16]
 800da1e:	dc02      	bgt.n	800da26 <_printf_float+0x15e>
 800da20:	6822      	ldr	r2, [r4, #0]
 800da22:	07d2      	lsls	r2, r2, #31
 800da24:	d501      	bpl.n	800da2a <_printf_float+0x162>
 800da26:	3301      	adds	r3, #1
 800da28:	6123      	str	r3, [r4, #16]
 800da2a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d09b      	beq.n	800d96a <_printf_float+0xa2>
 800da32:	232d      	movs	r3, #45	; 0x2d
 800da34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da38:	e797      	b.n	800d96a <_printf_float+0xa2>
 800da3a:	2947      	cmp	r1, #71	; 0x47
 800da3c:	d1bc      	bne.n	800d9b8 <_printf_float+0xf0>
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d1ba      	bne.n	800d9b8 <_printf_float+0xf0>
 800da42:	2301      	movs	r3, #1
 800da44:	e7b7      	b.n	800d9b6 <_printf_float+0xee>
 800da46:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800da4a:	d118      	bne.n	800da7e <_printf_float+0x1b6>
 800da4c:	2900      	cmp	r1, #0
 800da4e:	6863      	ldr	r3, [r4, #4]
 800da50:	dd0b      	ble.n	800da6a <_printf_float+0x1a2>
 800da52:	6121      	str	r1, [r4, #16]
 800da54:	b913      	cbnz	r3, 800da5c <_printf_float+0x194>
 800da56:	6822      	ldr	r2, [r4, #0]
 800da58:	07d0      	lsls	r0, r2, #31
 800da5a:	d502      	bpl.n	800da62 <_printf_float+0x19a>
 800da5c:	3301      	adds	r3, #1
 800da5e:	440b      	add	r3, r1
 800da60:	6123      	str	r3, [r4, #16]
 800da62:	f04f 0a00 	mov.w	sl, #0
 800da66:	65a1      	str	r1, [r4, #88]	; 0x58
 800da68:	e7df      	b.n	800da2a <_printf_float+0x162>
 800da6a:	b913      	cbnz	r3, 800da72 <_printf_float+0x1aa>
 800da6c:	6822      	ldr	r2, [r4, #0]
 800da6e:	07d2      	lsls	r2, r2, #31
 800da70:	d501      	bpl.n	800da76 <_printf_float+0x1ae>
 800da72:	3302      	adds	r3, #2
 800da74:	e7f4      	b.n	800da60 <_printf_float+0x198>
 800da76:	2301      	movs	r3, #1
 800da78:	e7f2      	b.n	800da60 <_printf_float+0x198>
 800da7a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800da7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da80:	4299      	cmp	r1, r3
 800da82:	db05      	blt.n	800da90 <_printf_float+0x1c8>
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	6121      	str	r1, [r4, #16]
 800da88:	07d8      	lsls	r0, r3, #31
 800da8a:	d5ea      	bpl.n	800da62 <_printf_float+0x19a>
 800da8c:	1c4b      	adds	r3, r1, #1
 800da8e:	e7e7      	b.n	800da60 <_printf_float+0x198>
 800da90:	2900      	cmp	r1, #0
 800da92:	bfcc      	ite	gt
 800da94:	2201      	movgt	r2, #1
 800da96:	f1c1 0202 	rsble	r2, r1, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	e7e0      	b.n	800da60 <_printf_float+0x198>
 800da9e:	6823      	ldr	r3, [r4, #0]
 800daa0:	055a      	lsls	r2, r3, #21
 800daa2:	d407      	bmi.n	800dab4 <_printf_float+0x1ec>
 800daa4:	6923      	ldr	r3, [r4, #16]
 800daa6:	4642      	mov	r2, r8
 800daa8:	4631      	mov	r1, r6
 800daaa:	4628      	mov	r0, r5
 800daac:	47b8      	blx	r7
 800daae:	3001      	adds	r0, #1
 800dab0:	d12b      	bne.n	800db0a <_printf_float+0x242>
 800dab2:	e764      	b.n	800d97e <_printf_float+0xb6>
 800dab4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dab8:	f240 80dd 	bls.w	800dc76 <_printf_float+0x3ae>
 800dabc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dac0:	2200      	movs	r2, #0
 800dac2:	2300      	movs	r3, #0
 800dac4:	f7f2 ffdc 	bl	8000a80 <__aeabi_dcmpeq>
 800dac8:	2800      	cmp	r0, #0
 800daca:	d033      	beq.n	800db34 <_printf_float+0x26c>
 800dacc:	2301      	movs	r3, #1
 800dace:	4631      	mov	r1, r6
 800dad0:	4628      	mov	r0, r5
 800dad2:	4a35      	ldr	r2, [pc, #212]	; (800dba8 <_printf_float+0x2e0>)
 800dad4:	47b8      	blx	r7
 800dad6:	3001      	adds	r0, #1
 800dad8:	f43f af51 	beq.w	800d97e <_printf_float+0xb6>
 800dadc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dae0:	429a      	cmp	r2, r3
 800dae2:	db02      	blt.n	800daea <_printf_float+0x222>
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	07d8      	lsls	r0, r3, #31
 800dae8:	d50f      	bpl.n	800db0a <_printf_float+0x242>
 800daea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800daee:	4631      	mov	r1, r6
 800daf0:	4628      	mov	r0, r5
 800daf2:	47b8      	blx	r7
 800daf4:	3001      	adds	r0, #1
 800daf6:	f43f af42 	beq.w	800d97e <_printf_float+0xb6>
 800dafa:	f04f 0800 	mov.w	r8, #0
 800dafe:	f104 091a 	add.w	r9, r4, #26
 800db02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db04:	3b01      	subs	r3, #1
 800db06:	4543      	cmp	r3, r8
 800db08:	dc09      	bgt.n	800db1e <_printf_float+0x256>
 800db0a:	6823      	ldr	r3, [r4, #0]
 800db0c:	079b      	lsls	r3, r3, #30
 800db0e:	f100 8102 	bmi.w	800dd16 <_printf_float+0x44e>
 800db12:	68e0      	ldr	r0, [r4, #12]
 800db14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db16:	4298      	cmp	r0, r3
 800db18:	bfb8      	it	lt
 800db1a:	4618      	movlt	r0, r3
 800db1c:	e731      	b.n	800d982 <_printf_float+0xba>
 800db1e:	2301      	movs	r3, #1
 800db20:	464a      	mov	r2, r9
 800db22:	4631      	mov	r1, r6
 800db24:	4628      	mov	r0, r5
 800db26:	47b8      	blx	r7
 800db28:	3001      	adds	r0, #1
 800db2a:	f43f af28 	beq.w	800d97e <_printf_float+0xb6>
 800db2e:	f108 0801 	add.w	r8, r8, #1
 800db32:	e7e6      	b.n	800db02 <_printf_float+0x23a>
 800db34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db36:	2b00      	cmp	r3, #0
 800db38:	dc38      	bgt.n	800dbac <_printf_float+0x2e4>
 800db3a:	2301      	movs	r3, #1
 800db3c:	4631      	mov	r1, r6
 800db3e:	4628      	mov	r0, r5
 800db40:	4a19      	ldr	r2, [pc, #100]	; (800dba8 <_printf_float+0x2e0>)
 800db42:	47b8      	blx	r7
 800db44:	3001      	adds	r0, #1
 800db46:	f43f af1a 	beq.w	800d97e <_printf_float+0xb6>
 800db4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800db4e:	4313      	orrs	r3, r2
 800db50:	d102      	bne.n	800db58 <_printf_float+0x290>
 800db52:	6823      	ldr	r3, [r4, #0]
 800db54:	07d9      	lsls	r1, r3, #31
 800db56:	d5d8      	bpl.n	800db0a <_printf_float+0x242>
 800db58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db5c:	4631      	mov	r1, r6
 800db5e:	4628      	mov	r0, r5
 800db60:	47b8      	blx	r7
 800db62:	3001      	adds	r0, #1
 800db64:	f43f af0b 	beq.w	800d97e <_printf_float+0xb6>
 800db68:	f04f 0900 	mov.w	r9, #0
 800db6c:	f104 0a1a 	add.w	sl, r4, #26
 800db70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db72:	425b      	negs	r3, r3
 800db74:	454b      	cmp	r3, r9
 800db76:	dc01      	bgt.n	800db7c <_printf_float+0x2b4>
 800db78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db7a:	e794      	b.n	800daa6 <_printf_float+0x1de>
 800db7c:	2301      	movs	r3, #1
 800db7e:	4652      	mov	r2, sl
 800db80:	4631      	mov	r1, r6
 800db82:	4628      	mov	r0, r5
 800db84:	47b8      	blx	r7
 800db86:	3001      	adds	r0, #1
 800db88:	f43f aef9 	beq.w	800d97e <_printf_float+0xb6>
 800db8c:	f109 0901 	add.w	r9, r9, #1
 800db90:	e7ee      	b.n	800db70 <_printf_float+0x2a8>
 800db92:	bf00      	nop
 800db94:	7fefffff 	.word	0x7fefffff
 800db98:	08010d0c 	.word	0x08010d0c
 800db9c:	08010d10 	.word	0x08010d10
 800dba0:	08010d18 	.word	0x08010d18
 800dba4:	08010d14 	.word	0x08010d14
 800dba8:	08010d1c 	.word	0x08010d1c
 800dbac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	bfa8      	it	ge
 800dbb4:	461a      	movge	r2, r3
 800dbb6:	2a00      	cmp	r2, #0
 800dbb8:	4691      	mov	r9, r2
 800dbba:	dc37      	bgt.n	800dc2c <_printf_float+0x364>
 800dbbc:	f04f 0b00 	mov.w	fp, #0
 800dbc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbc4:	f104 021a 	add.w	r2, r4, #26
 800dbc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800dbcc:	ebaa 0309 	sub.w	r3, sl, r9
 800dbd0:	455b      	cmp	r3, fp
 800dbd2:	dc33      	bgt.n	800dc3c <_printf_float+0x374>
 800dbd4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	db3b      	blt.n	800dc54 <_printf_float+0x38c>
 800dbdc:	6823      	ldr	r3, [r4, #0]
 800dbde:	07da      	lsls	r2, r3, #31
 800dbe0:	d438      	bmi.n	800dc54 <_printf_float+0x38c>
 800dbe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbe4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dbe6:	eba3 020a 	sub.w	r2, r3, sl
 800dbea:	eba3 0901 	sub.w	r9, r3, r1
 800dbee:	4591      	cmp	r9, r2
 800dbf0:	bfa8      	it	ge
 800dbf2:	4691      	movge	r9, r2
 800dbf4:	f1b9 0f00 	cmp.w	r9, #0
 800dbf8:	dc34      	bgt.n	800dc64 <_printf_float+0x39c>
 800dbfa:	f04f 0800 	mov.w	r8, #0
 800dbfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc02:	f104 0a1a 	add.w	sl, r4, #26
 800dc06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dc0a:	1a9b      	subs	r3, r3, r2
 800dc0c:	eba3 0309 	sub.w	r3, r3, r9
 800dc10:	4543      	cmp	r3, r8
 800dc12:	f77f af7a 	ble.w	800db0a <_printf_float+0x242>
 800dc16:	2301      	movs	r3, #1
 800dc18:	4652      	mov	r2, sl
 800dc1a:	4631      	mov	r1, r6
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	47b8      	blx	r7
 800dc20:	3001      	adds	r0, #1
 800dc22:	f43f aeac 	beq.w	800d97e <_printf_float+0xb6>
 800dc26:	f108 0801 	add.w	r8, r8, #1
 800dc2a:	e7ec      	b.n	800dc06 <_printf_float+0x33e>
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	4631      	mov	r1, r6
 800dc30:	4642      	mov	r2, r8
 800dc32:	4628      	mov	r0, r5
 800dc34:	47b8      	blx	r7
 800dc36:	3001      	adds	r0, #1
 800dc38:	d1c0      	bne.n	800dbbc <_printf_float+0x2f4>
 800dc3a:	e6a0      	b.n	800d97e <_printf_float+0xb6>
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	4631      	mov	r1, r6
 800dc40:	4628      	mov	r0, r5
 800dc42:	920b      	str	r2, [sp, #44]	; 0x2c
 800dc44:	47b8      	blx	r7
 800dc46:	3001      	adds	r0, #1
 800dc48:	f43f ae99 	beq.w	800d97e <_printf_float+0xb6>
 800dc4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc4e:	f10b 0b01 	add.w	fp, fp, #1
 800dc52:	e7b9      	b.n	800dbc8 <_printf_float+0x300>
 800dc54:	4631      	mov	r1, r6
 800dc56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	47b8      	blx	r7
 800dc5e:	3001      	adds	r0, #1
 800dc60:	d1bf      	bne.n	800dbe2 <_printf_float+0x31a>
 800dc62:	e68c      	b.n	800d97e <_printf_float+0xb6>
 800dc64:	464b      	mov	r3, r9
 800dc66:	4631      	mov	r1, r6
 800dc68:	4628      	mov	r0, r5
 800dc6a:	eb08 020a 	add.w	r2, r8, sl
 800dc6e:	47b8      	blx	r7
 800dc70:	3001      	adds	r0, #1
 800dc72:	d1c2      	bne.n	800dbfa <_printf_float+0x332>
 800dc74:	e683      	b.n	800d97e <_printf_float+0xb6>
 800dc76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc78:	2a01      	cmp	r2, #1
 800dc7a:	dc01      	bgt.n	800dc80 <_printf_float+0x3b8>
 800dc7c:	07db      	lsls	r3, r3, #31
 800dc7e:	d537      	bpl.n	800dcf0 <_printf_float+0x428>
 800dc80:	2301      	movs	r3, #1
 800dc82:	4642      	mov	r2, r8
 800dc84:	4631      	mov	r1, r6
 800dc86:	4628      	mov	r0, r5
 800dc88:	47b8      	blx	r7
 800dc8a:	3001      	adds	r0, #1
 800dc8c:	f43f ae77 	beq.w	800d97e <_printf_float+0xb6>
 800dc90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc94:	4631      	mov	r1, r6
 800dc96:	4628      	mov	r0, r5
 800dc98:	47b8      	blx	r7
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	f43f ae6f 	beq.w	800d97e <_printf_float+0xb6>
 800dca0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dca4:	2200      	movs	r2, #0
 800dca6:	2300      	movs	r3, #0
 800dca8:	f7f2 feea 	bl	8000a80 <__aeabi_dcmpeq>
 800dcac:	b9d8      	cbnz	r0, 800dce6 <_printf_float+0x41e>
 800dcae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcb0:	f108 0201 	add.w	r2, r8, #1
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	4631      	mov	r1, r6
 800dcb8:	4628      	mov	r0, r5
 800dcba:	47b8      	blx	r7
 800dcbc:	3001      	adds	r0, #1
 800dcbe:	d10e      	bne.n	800dcde <_printf_float+0x416>
 800dcc0:	e65d      	b.n	800d97e <_printf_float+0xb6>
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	464a      	mov	r2, r9
 800dcc6:	4631      	mov	r1, r6
 800dcc8:	4628      	mov	r0, r5
 800dcca:	47b8      	blx	r7
 800dccc:	3001      	adds	r0, #1
 800dcce:	f43f ae56 	beq.w	800d97e <_printf_float+0xb6>
 800dcd2:	f108 0801 	add.w	r8, r8, #1
 800dcd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	4543      	cmp	r3, r8
 800dcdc:	dcf1      	bgt.n	800dcc2 <_printf_float+0x3fa>
 800dcde:	4653      	mov	r3, sl
 800dce0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dce4:	e6e0      	b.n	800daa8 <_printf_float+0x1e0>
 800dce6:	f04f 0800 	mov.w	r8, #0
 800dcea:	f104 091a 	add.w	r9, r4, #26
 800dcee:	e7f2      	b.n	800dcd6 <_printf_float+0x40e>
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	4642      	mov	r2, r8
 800dcf4:	e7df      	b.n	800dcb6 <_printf_float+0x3ee>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	464a      	mov	r2, r9
 800dcfa:	4631      	mov	r1, r6
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	47b8      	blx	r7
 800dd00:	3001      	adds	r0, #1
 800dd02:	f43f ae3c 	beq.w	800d97e <_printf_float+0xb6>
 800dd06:	f108 0801 	add.w	r8, r8, #1
 800dd0a:	68e3      	ldr	r3, [r4, #12]
 800dd0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dd0e:	1a5b      	subs	r3, r3, r1
 800dd10:	4543      	cmp	r3, r8
 800dd12:	dcf0      	bgt.n	800dcf6 <_printf_float+0x42e>
 800dd14:	e6fd      	b.n	800db12 <_printf_float+0x24a>
 800dd16:	f04f 0800 	mov.w	r8, #0
 800dd1a:	f104 0919 	add.w	r9, r4, #25
 800dd1e:	e7f4      	b.n	800dd0a <_printf_float+0x442>

0800dd20 <_printf_common>:
 800dd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd24:	4616      	mov	r6, r2
 800dd26:	4699      	mov	r9, r3
 800dd28:	688a      	ldr	r2, [r1, #8]
 800dd2a:	690b      	ldr	r3, [r1, #16]
 800dd2c:	4607      	mov	r7, r0
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	bfb8      	it	lt
 800dd32:	4613      	movlt	r3, r2
 800dd34:	6033      	str	r3, [r6, #0]
 800dd36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd3a:	460c      	mov	r4, r1
 800dd3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd40:	b10a      	cbz	r2, 800dd46 <_printf_common+0x26>
 800dd42:	3301      	adds	r3, #1
 800dd44:	6033      	str	r3, [r6, #0]
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	0699      	lsls	r1, r3, #26
 800dd4a:	bf42      	ittt	mi
 800dd4c:	6833      	ldrmi	r3, [r6, #0]
 800dd4e:	3302      	addmi	r3, #2
 800dd50:	6033      	strmi	r3, [r6, #0]
 800dd52:	6825      	ldr	r5, [r4, #0]
 800dd54:	f015 0506 	ands.w	r5, r5, #6
 800dd58:	d106      	bne.n	800dd68 <_printf_common+0x48>
 800dd5a:	f104 0a19 	add.w	sl, r4, #25
 800dd5e:	68e3      	ldr	r3, [r4, #12]
 800dd60:	6832      	ldr	r2, [r6, #0]
 800dd62:	1a9b      	subs	r3, r3, r2
 800dd64:	42ab      	cmp	r3, r5
 800dd66:	dc28      	bgt.n	800ddba <_printf_common+0x9a>
 800dd68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd6c:	1e13      	subs	r3, r2, #0
 800dd6e:	6822      	ldr	r2, [r4, #0]
 800dd70:	bf18      	it	ne
 800dd72:	2301      	movne	r3, #1
 800dd74:	0692      	lsls	r2, r2, #26
 800dd76:	d42d      	bmi.n	800ddd4 <_printf_common+0xb4>
 800dd78:	4649      	mov	r1, r9
 800dd7a:	4638      	mov	r0, r7
 800dd7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd80:	47c0      	blx	r8
 800dd82:	3001      	adds	r0, #1
 800dd84:	d020      	beq.n	800ddc8 <_printf_common+0xa8>
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	68e5      	ldr	r5, [r4, #12]
 800dd8a:	f003 0306 	and.w	r3, r3, #6
 800dd8e:	2b04      	cmp	r3, #4
 800dd90:	bf18      	it	ne
 800dd92:	2500      	movne	r5, #0
 800dd94:	6832      	ldr	r2, [r6, #0]
 800dd96:	f04f 0600 	mov.w	r6, #0
 800dd9a:	68a3      	ldr	r3, [r4, #8]
 800dd9c:	bf08      	it	eq
 800dd9e:	1aad      	subeq	r5, r5, r2
 800dda0:	6922      	ldr	r2, [r4, #16]
 800dda2:	bf08      	it	eq
 800dda4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	bfc4      	itt	gt
 800ddac:	1a9b      	subgt	r3, r3, r2
 800ddae:	18ed      	addgt	r5, r5, r3
 800ddb0:	341a      	adds	r4, #26
 800ddb2:	42b5      	cmp	r5, r6
 800ddb4:	d11a      	bne.n	800ddec <_printf_common+0xcc>
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	e008      	b.n	800ddcc <_printf_common+0xac>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	4652      	mov	r2, sl
 800ddbe:	4649      	mov	r1, r9
 800ddc0:	4638      	mov	r0, r7
 800ddc2:	47c0      	blx	r8
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	d103      	bne.n	800ddd0 <_printf_common+0xb0>
 800ddc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd0:	3501      	adds	r5, #1
 800ddd2:	e7c4      	b.n	800dd5e <_printf_common+0x3e>
 800ddd4:	2030      	movs	r0, #48	; 0x30
 800ddd6:	18e1      	adds	r1, r4, r3
 800ddd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dddc:	1c5a      	adds	r2, r3, #1
 800ddde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dde2:	4422      	add	r2, r4
 800dde4:	3302      	adds	r3, #2
 800dde6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddea:	e7c5      	b.n	800dd78 <_printf_common+0x58>
 800ddec:	2301      	movs	r3, #1
 800ddee:	4622      	mov	r2, r4
 800ddf0:	4649      	mov	r1, r9
 800ddf2:	4638      	mov	r0, r7
 800ddf4:	47c0      	blx	r8
 800ddf6:	3001      	adds	r0, #1
 800ddf8:	d0e6      	beq.n	800ddc8 <_printf_common+0xa8>
 800ddfa:	3601      	adds	r6, #1
 800ddfc:	e7d9      	b.n	800ddb2 <_printf_common+0x92>
	...

0800de00 <_printf_i>:
 800de00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de04:	7e0f      	ldrb	r7, [r1, #24]
 800de06:	4691      	mov	r9, r2
 800de08:	2f78      	cmp	r7, #120	; 0x78
 800de0a:	4680      	mov	r8, r0
 800de0c:	460c      	mov	r4, r1
 800de0e:	469a      	mov	sl, r3
 800de10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800de12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800de16:	d807      	bhi.n	800de28 <_printf_i+0x28>
 800de18:	2f62      	cmp	r7, #98	; 0x62
 800de1a:	d80a      	bhi.n	800de32 <_printf_i+0x32>
 800de1c:	2f00      	cmp	r7, #0
 800de1e:	f000 80d9 	beq.w	800dfd4 <_printf_i+0x1d4>
 800de22:	2f58      	cmp	r7, #88	; 0x58
 800de24:	f000 80a4 	beq.w	800df70 <_printf_i+0x170>
 800de28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de30:	e03a      	b.n	800dea8 <_printf_i+0xa8>
 800de32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de36:	2b15      	cmp	r3, #21
 800de38:	d8f6      	bhi.n	800de28 <_printf_i+0x28>
 800de3a:	a101      	add	r1, pc, #4	; (adr r1, 800de40 <_printf_i+0x40>)
 800de3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de40:	0800de99 	.word	0x0800de99
 800de44:	0800dead 	.word	0x0800dead
 800de48:	0800de29 	.word	0x0800de29
 800de4c:	0800de29 	.word	0x0800de29
 800de50:	0800de29 	.word	0x0800de29
 800de54:	0800de29 	.word	0x0800de29
 800de58:	0800dead 	.word	0x0800dead
 800de5c:	0800de29 	.word	0x0800de29
 800de60:	0800de29 	.word	0x0800de29
 800de64:	0800de29 	.word	0x0800de29
 800de68:	0800de29 	.word	0x0800de29
 800de6c:	0800dfbb 	.word	0x0800dfbb
 800de70:	0800dedd 	.word	0x0800dedd
 800de74:	0800df9d 	.word	0x0800df9d
 800de78:	0800de29 	.word	0x0800de29
 800de7c:	0800de29 	.word	0x0800de29
 800de80:	0800dfdd 	.word	0x0800dfdd
 800de84:	0800de29 	.word	0x0800de29
 800de88:	0800dedd 	.word	0x0800dedd
 800de8c:	0800de29 	.word	0x0800de29
 800de90:	0800de29 	.word	0x0800de29
 800de94:	0800dfa5 	.word	0x0800dfa5
 800de98:	682b      	ldr	r3, [r5, #0]
 800de9a:	1d1a      	adds	r2, r3, #4
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	602a      	str	r2, [r5, #0]
 800dea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dea8:	2301      	movs	r3, #1
 800deaa:	e0a4      	b.n	800dff6 <_printf_i+0x1f6>
 800deac:	6820      	ldr	r0, [r4, #0]
 800deae:	6829      	ldr	r1, [r5, #0]
 800deb0:	0606      	lsls	r6, r0, #24
 800deb2:	f101 0304 	add.w	r3, r1, #4
 800deb6:	d50a      	bpl.n	800dece <_printf_i+0xce>
 800deb8:	680e      	ldr	r6, [r1, #0]
 800deba:	602b      	str	r3, [r5, #0]
 800debc:	2e00      	cmp	r6, #0
 800debe:	da03      	bge.n	800dec8 <_printf_i+0xc8>
 800dec0:	232d      	movs	r3, #45	; 0x2d
 800dec2:	4276      	negs	r6, r6
 800dec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dec8:	230a      	movs	r3, #10
 800deca:	485e      	ldr	r0, [pc, #376]	; (800e044 <_printf_i+0x244>)
 800decc:	e019      	b.n	800df02 <_printf_i+0x102>
 800dece:	680e      	ldr	r6, [r1, #0]
 800ded0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ded4:	602b      	str	r3, [r5, #0]
 800ded6:	bf18      	it	ne
 800ded8:	b236      	sxthne	r6, r6
 800deda:	e7ef      	b.n	800debc <_printf_i+0xbc>
 800dedc:	682b      	ldr	r3, [r5, #0]
 800dede:	6820      	ldr	r0, [r4, #0]
 800dee0:	1d19      	adds	r1, r3, #4
 800dee2:	6029      	str	r1, [r5, #0]
 800dee4:	0601      	lsls	r1, r0, #24
 800dee6:	d501      	bpl.n	800deec <_printf_i+0xec>
 800dee8:	681e      	ldr	r6, [r3, #0]
 800deea:	e002      	b.n	800def2 <_printf_i+0xf2>
 800deec:	0646      	lsls	r6, r0, #25
 800deee:	d5fb      	bpl.n	800dee8 <_printf_i+0xe8>
 800def0:	881e      	ldrh	r6, [r3, #0]
 800def2:	2f6f      	cmp	r7, #111	; 0x6f
 800def4:	bf0c      	ite	eq
 800def6:	2308      	moveq	r3, #8
 800def8:	230a      	movne	r3, #10
 800defa:	4852      	ldr	r0, [pc, #328]	; (800e044 <_printf_i+0x244>)
 800defc:	2100      	movs	r1, #0
 800defe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df02:	6865      	ldr	r5, [r4, #4]
 800df04:	2d00      	cmp	r5, #0
 800df06:	bfa8      	it	ge
 800df08:	6821      	ldrge	r1, [r4, #0]
 800df0a:	60a5      	str	r5, [r4, #8]
 800df0c:	bfa4      	itt	ge
 800df0e:	f021 0104 	bicge.w	r1, r1, #4
 800df12:	6021      	strge	r1, [r4, #0]
 800df14:	b90e      	cbnz	r6, 800df1a <_printf_i+0x11a>
 800df16:	2d00      	cmp	r5, #0
 800df18:	d04d      	beq.n	800dfb6 <_printf_i+0x1b6>
 800df1a:	4615      	mov	r5, r2
 800df1c:	fbb6 f1f3 	udiv	r1, r6, r3
 800df20:	fb03 6711 	mls	r7, r3, r1, r6
 800df24:	5dc7      	ldrb	r7, [r0, r7]
 800df26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800df2a:	4637      	mov	r7, r6
 800df2c:	42bb      	cmp	r3, r7
 800df2e:	460e      	mov	r6, r1
 800df30:	d9f4      	bls.n	800df1c <_printf_i+0x11c>
 800df32:	2b08      	cmp	r3, #8
 800df34:	d10b      	bne.n	800df4e <_printf_i+0x14e>
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	07de      	lsls	r6, r3, #31
 800df3a:	d508      	bpl.n	800df4e <_printf_i+0x14e>
 800df3c:	6923      	ldr	r3, [r4, #16]
 800df3e:	6861      	ldr	r1, [r4, #4]
 800df40:	4299      	cmp	r1, r3
 800df42:	bfde      	ittt	le
 800df44:	2330      	movle	r3, #48	; 0x30
 800df46:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df4a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800df4e:	1b52      	subs	r2, r2, r5
 800df50:	6122      	str	r2, [r4, #16]
 800df52:	464b      	mov	r3, r9
 800df54:	4621      	mov	r1, r4
 800df56:	4640      	mov	r0, r8
 800df58:	f8cd a000 	str.w	sl, [sp]
 800df5c:	aa03      	add	r2, sp, #12
 800df5e:	f7ff fedf 	bl	800dd20 <_printf_common>
 800df62:	3001      	adds	r0, #1
 800df64:	d14c      	bne.n	800e000 <_printf_i+0x200>
 800df66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df6a:	b004      	add	sp, #16
 800df6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df70:	4834      	ldr	r0, [pc, #208]	; (800e044 <_printf_i+0x244>)
 800df72:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800df76:	6829      	ldr	r1, [r5, #0]
 800df78:	6823      	ldr	r3, [r4, #0]
 800df7a:	f851 6b04 	ldr.w	r6, [r1], #4
 800df7e:	6029      	str	r1, [r5, #0]
 800df80:	061d      	lsls	r5, r3, #24
 800df82:	d514      	bpl.n	800dfae <_printf_i+0x1ae>
 800df84:	07df      	lsls	r7, r3, #31
 800df86:	bf44      	itt	mi
 800df88:	f043 0320 	orrmi.w	r3, r3, #32
 800df8c:	6023      	strmi	r3, [r4, #0]
 800df8e:	b91e      	cbnz	r6, 800df98 <_printf_i+0x198>
 800df90:	6823      	ldr	r3, [r4, #0]
 800df92:	f023 0320 	bic.w	r3, r3, #32
 800df96:	6023      	str	r3, [r4, #0]
 800df98:	2310      	movs	r3, #16
 800df9a:	e7af      	b.n	800defc <_printf_i+0xfc>
 800df9c:	6823      	ldr	r3, [r4, #0]
 800df9e:	f043 0320 	orr.w	r3, r3, #32
 800dfa2:	6023      	str	r3, [r4, #0]
 800dfa4:	2378      	movs	r3, #120	; 0x78
 800dfa6:	4828      	ldr	r0, [pc, #160]	; (800e048 <_printf_i+0x248>)
 800dfa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dfac:	e7e3      	b.n	800df76 <_printf_i+0x176>
 800dfae:	0659      	lsls	r1, r3, #25
 800dfb0:	bf48      	it	mi
 800dfb2:	b2b6      	uxthmi	r6, r6
 800dfb4:	e7e6      	b.n	800df84 <_printf_i+0x184>
 800dfb6:	4615      	mov	r5, r2
 800dfb8:	e7bb      	b.n	800df32 <_printf_i+0x132>
 800dfba:	682b      	ldr	r3, [r5, #0]
 800dfbc:	6826      	ldr	r6, [r4, #0]
 800dfbe:	1d18      	adds	r0, r3, #4
 800dfc0:	6961      	ldr	r1, [r4, #20]
 800dfc2:	6028      	str	r0, [r5, #0]
 800dfc4:	0635      	lsls	r5, r6, #24
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	d501      	bpl.n	800dfce <_printf_i+0x1ce>
 800dfca:	6019      	str	r1, [r3, #0]
 800dfcc:	e002      	b.n	800dfd4 <_printf_i+0x1d4>
 800dfce:	0670      	lsls	r0, r6, #25
 800dfd0:	d5fb      	bpl.n	800dfca <_printf_i+0x1ca>
 800dfd2:	8019      	strh	r1, [r3, #0]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	4615      	mov	r5, r2
 800dfd8:	6123      	str	r3, [r4, #16]
 800dfda:	e7ba      	b.n	800df52 <_printf_i+0x152>
 800dfdc:	682b      	ldr	r3, [r5, #0]
 800dfde:	2100      	movs	r1, #0
 800dfe0:	1d1a      	adds	r2, r3, #4
 800dfe2:	602a      	str	r2, [r5, #0]
 800dfe4:	681d      	ldr	r5, [r3, #0]
 800dfe6:	6862      	ldr	r2, [r4, #4]
 800dfe8:	4628      	mov	r0, r5
 800dfea:	f000 feeb 	bl	800edc4 <memchr>
 800dfee:	b108      	cbz	r0, 800dff4 <_printf_i+0x1f4>
 800dff0:	1b40      	subs	r0, r0, r5
 800dff2:	6060      	str	r0, [r4, #4]
 800dff4:	6863      	ldr	r3, [r4, #4]
 800dff6:	6123      	str	r3, [r4, #16]
 800dff8:	2300      	movs	r3, #0
 800dffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dffe:	e7a8      	b.n	800df52 <_printf_i+0x152>
 800e000:	462a      	mov	r2, r5
 800e002:	4649      	mov	r1, r9
 800e004:	4640      	mov	r0, r8
 800e006:	6923      	ldr	r3, [r4, #16]
 800e008:	47d0      	blx	sl
 800e00a:	3001      	adds	r0, #1
 800e00c:	d0ab      	beq.n	800df66 <_printf_i+0x166>
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	079b      	lsls	r3, r3, #30
 800e012:	d413      	bmi.n	800e03c <_printf_i+0x23c>
 800e014:	68e0      	ldr	r0, [r4, #12]
 800e016:	9b03      	ldr	r3, [sp, #12]
 800e018:	4298      	cmp	r0, r3
 800e01a:	bfb8      	it	lt
 800e01c:	4618      	movlt	r0, r3
 800e01e:	e7a4      	b.n	800df6a <_printf_i+0x16a>
 800e020:	2301      	movs	r3, #1
 800e022:	4632      	mov	r2, r6
 800e024:	4649      	mov	r1, r9
 800e026:	4640      	mov	r0, r8
 800e028:	47d0      	blx	sl
 800e02a:	3001      	adds	r0, #1
 800e02c:	d09b      	beq.n	800df66 <_printf_i+0x166>
 800e02e:	3501      	adds	r5, #1
 800e030:	68e3      	ldr	r3, [r4, #12]
 800e032:	9903      	ldr	r1, [sp, #12]
 800e034:	1a5b      	subs	r3, r3, r1
 800e036:	42ab      	cmp	r3, r5
 800e038:	dcf2      	bgt.n	800e020 <_printf_i+0x220>
 800e03a:	e7eb      	b.n	800e014 <_printf_i+0x214>
 800e03c:	2500      	movs	r5, #0
 800e03e:	f104 0619 	add.w	r6, r4, #25
 800e042:	e7f5      	b.n	800e030 <_printf_i+0x230>
 800e044:	08010d1e 	.word	0x08010d1e
 800e048:	08010d2f 	.word	0x08010d2f

0800e04c <siprintf>:
 800e04c:	b40e      	push	{r1, r2, r3}
 800e04e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e052:	b500      	push	{lr}
 800e054:	b09c      	sub	sp, #112	; 0x70
 800e056:	ab1d      	add	r3, sp, #116	; 0x74
 800e058:	9002      	str	r0, [sp, #8]
 800e05a:	9006      	str	r0, [sp, #24]
 800e05c:	9107      	str	r1, [sp, #28]
 800e05e:	9104      	str	r1, [sp, #16]
 800e060:	4808      	ldr	r0, [pc, #32]	; (800e084 <siprintf+0x38>)
 800e062:	4909      	ldr	r1, [pc, #36]	; (800e088 <siprintf+0x3c>)
 800e064:	f853 2b04 	ldr.w	r2, [r3], #4
 800e068:	9105      	str	r1, [sp, #20]
 800e06a:	6800      	ldr	r0, [r0, #0]
 800e06c:	a902      	add	r1, sp, #8
 800e06e:	9301      	str	r3, [sp, #4]
 800e070:	f001 fb84 	bl	800f77c <_svfiprintf_r>
 800e074:	2200      	movs	r2, #0
 800e076:	9b02      	ldr	r3, [sp, #8]
 800e078:	701a      	strb	r2, [r3, #0]
 800e07a:	b01c      	add	sp, #112	; 0x70
 800e07c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e080:	b003      	add	sp, #12
 800e082:	4770      	bx	lr
 800e084:	20000070 	.word	0x20000070
 800e088:	ffff0208 	.word	0xffff0208

0800e08c <strncpy>:
 800e08c:	4603      	mov	r3, r0
 800e08e:	b510      	push	{r4, lr}
 800e090:	3901      	subs	r1, #1
 800e092:	b132      	cbz	r2, 800e0a2 <strncpy+0x16>
 800e094:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e098:	3a01      	subs	r2, #1
 800e09a:	f803 4b01 	strb.w	r4, [r3], #1
 800e09e:	2c00      	cmp	r4, #0
 800e0a0:	d1f7      	bne.n	800e092 <strncpy+0x6>
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	441a      	add	r2, r3
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d100      	bne.n	800e0ac <strncpy+0x20>
 800e0aa:	bd10      	pop	{r4, pc}
 800e0ac:	f803 1b01 	strb.w	r1, [r3], #1
 800e0b0:	e7f9      	b.n	800e0a6 <strncpy+0x1a>

0800e0b2 <quorem>:
 800e0b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b6:	6903      	ldr	r3, [r0, #16]
 800e0b8:	690c      	ldr	r4, [r1, #16]
 800e0ba:	4607      	mov	r7, r0
 800e0bc:	42a3      	cmp	r3, r4
 800e0be:	f2c0 8082 	blt.w	800e1c6 <quorem+0x114>
 800e0c2:	3c01      	subs	r4, #1
 800e0c4:	f100 0514 	add.w	r5, r0, #20
 800e0c8:	f101 0814 	add.w	r8, r1, #20
 800e0cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0d0:	9301      	str	r3, [sp, #4]
 800e0d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e0e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0ea:	d331      	bcc.n	800e150 <quorem+0x9e>
 800e0ec:	f04f 0e00 	mov.w	lr, #0
 800e0f0:	4640      	mov	r0, r8
 800e0f2:	46ac      	mov	ip, r5
 800e0f4:	46f2      	mov	sl, lr
 800e0f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800e0fa:	b293      	uxth	r3, r2
 800e0fc:	fb06 e303 	mla	r3, r6, r3, lr
 800e100:	0c12      	lsrs	r2, r2, #16
 800e102:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e106:	b29b      	uxth	r3, r3
 800e108:	fb06 e202 	mla	r2, r6, r2, lr
 800e10c:	ebaa 0303 	sub.w	r3, sl, r3
 800e110:	f8dc a000 	ldr.w	sl, [ip]
 800e114:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e118:	fa1f fa8a 	uxth.w	sl, sl
 800e11c:	4453      	add	r3, sl
 800e11e:	f8dc a000 	ldr.w	sl, [ip]
 800e122:	b292      	uxth	r2, r2
 800e124:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e128:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e132:	4581      	cmp	r9, r0
 800e134:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e138:	f84c 3b04 	str.w	r3, [ip], #4
 800e13c:	d2db      	bcs.n	800e0f6 <quorem+0x44>
 800e13e:	f855 300b 	ldr.w	r3, [r5, fp]
 800e142:	b92b      	cbnz	r3, 800e150 <quorem+0x9e>
 800e144:	9b01      	ldr	r3, [sp, #4]
 800e146:	3b04      	subs	r3, #4
 800e148:	429d      	cmp	r5, r3
 800e14a:	461a      	mov	r2, r3
 800e14c:	d32f      	bcc.n	800e1ae <quorem+0xfc>
 800e14e:	613c      	str	r4, [r7, #16]
 800e150:	4638      	mov	r0, r7
 800e152:	f001 f8c3 	bl	800f2dc <__mcmp>
 800e156:	2800      	cmp	r0, #0
 800e158:	db25      	blt.n	800e1a6 <quorem+0xf4>
 800e15a:	4628      	mov	r0, r5
 800e15c:	f04f 0c00 	mov.w	ip, #0
 800e160:	3601      	adds	r6, #1
 800e162:	f858 1b04 	ldr.w	r1, [r8], #4
 800e166:	f8d0 e000 	ldr.w	lr, [r0]
 800e16a:	b28b      	uxth	r3, r1
 800e16c:	ebac 0303 	sub.w	r3, ip, r3
 800e170:	fa1f f28e 	uxth.w	r2, lr
 800e174:	4413      	add	r3, r2
 800e176:	0c0a      	lsrs	r2, r1, #16
 800e178:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e17c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e180:	b29b      	uxth	r3, r3
 800e182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e186:	45c1      	cmp	r9, r8
 800e188:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e18c:	f840 3b04 	str.w	r3, [r0], #4
 800e190:	d2e7      	bcs.n	800e162 <quorem+0xb0>
 800e192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e19a:	b922      	cbnz	r2, 800e1a6 <quorem+0xf4>
 800e19c:	3b04      	subs	r3, #4
 800e19e:	429d      	cmp	r5, r3
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	d30a      	bcc.n	800e1ba <quorem+0x108>
 800e1a4:	613c      	str	r4, [r7, #16]
 800e1a6:	4630      	mov	r0, r6
 800e1a8:	b003      	add	sp, #12
 800e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ae:	6812      	ldr	r2, [r2, #0]
 800e1b0:	3b04      	subs	r3, #4
 800e1b2:	2a00      	cmp	r2, #0
 800e1b4:	d1cb      	bne.n	800e14e <quorem+0x9c>
 800e1b6:	3c01      	subs	r4, #1
 800e1b8:	e7c6      	b.n	800e148 <quorem+0x96>
 800e1ba:	6812      	ldr	r2, [r2, #0]
 800e1bc:	3b04      	subs	r3, #4
 800e1be:	2a00      	cmp	r2, #0
 800e1c0:	d1f0      	bne.n	800e1a4 <quorem+0xf2>
 800e1c2:	3c01      	subs	r4, #1
 800e1c4:	e7eb      	b.n	800e19e <quorem+0xec>
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	e7ee      	b.n	800e1a8 <quorem+0xf6>
 800e1ca:	0000      	movs	r0, r0
 800e1cc:	0000      	movs	r0, r0
	...

0800e1d0 <_dtoa_r>:
 800e1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d4:	4616      	mov	r6, r2
 800e1d6:	461f      	mov	r7, r3
 800e1d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e1da:	b099      	sub	sp, #100	; 0x64
 800e1dc:	4605      	mov	r5, r0
 800e1de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e1e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800e1e6:	b974      	cbnz	r4, 800e206 <_dtoa_r+0x36>
 800e1e8:	2010      	movs	r0, #16
 800e1ea:	f000 fde3 	bl	800edb4 <malloc>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	6268      	str	r0, [r5, #36]	; 0x24
 800e1f2:	b920      	cbnz	r0, 800e1fe <_dtoa_r+0x2e>
 800e1f4:	21ea      	movs	r1, #234	; 0xea
 800e1f6:	4ba8      	ldr	r3, [pc, #672]	; (800e498 <_dtoa_r+0x2c8>)
 800e1f8:	48a8      	ldr	r0, [pc, #672]	; (800e49c <_dtoa_r+0x2cc>)
 800e1fa:	f001 fbcf 	bl	800f99c <__assert_func>
 800e1fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e202:	6004      	str	r4, [r0, #0]
 800e204:	60c4      	str	r4, [r0, #12]
 800e206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e208:	6819      	ldr	r1, [r3, #0]
 800e20a:	b151      	cbz	r1, 800e222 <_dtoa_r+0x52>
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	2301      	movs	r3, #1
 800e210:	4093      	lsls	r3, r2
 800e212:	604a      	str	r2, [r1, #4]
 800e214:	608b      	str	r3, [r1, #8]
 800e216:	4628      	mov	r0, r5
 800e218:	f000 fe22 	bl	800ee60 <_Bfree>
 800e21c:	2200      	movs	r2, #0
 800e21e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	1e3b      	subs	r3, r7, #0
 800e224:	bfaf      	iteee	ge
 800e226:	2300      	movge	r3, #0
 800e228:	2201      	movlt	r2, #1
 800e22a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e22e:	9305      	strlt	r3, [sp, #20]
 800e230:	bfa8      	it	ge
 800e232:	f8c8 3000 	strge.w	r3, [r8]
 800e236:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800e23a:	4b99      	ldr	r3, [pc, #612]	; (800e4a0 <_dtoa_r+0x2d0>)
 800e23c:	bfb8      	it	lt
 800e23e:	f8c8 2000 	strlt.w	r2, [r8]
 800e242:	ea33 0309 	bics.w	r3, r3, r9
 800e246:	d119      	bne.n	800e27c <_dtoa_r+0xac>
 800e248:	f242 730f 	movw	r3, #9999	; 0x270f
 800e24c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e24e:	6013      	str	r3, [r2, #0]
 800e250:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e254:	4333      	orrs	r3, r6
 800e256:	f000 857f 	beq.w	800ed58 <_dtoa_r+0xb88>
 800e25a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e25c:	b953      	cbnz	r3, 800e274 <_dtoa_r+0xa4>
 800e25e:	4b91      	ldr	r3, [pc, #580]	; (800e4a4 <_dtoa_r+0x2d4>)
 800e260:	e022      	b.n	800e2a8 <_dtoa_r+0xd8>
 800e262:	4b91      	ldr	r3, [pc, #580]	; (800e4a8 <_dtoa_r+0x2d8>)
 800e264:	9303      	str	r3, [sp, #12]
 800e266:	3308      	adds	r3, #8
 800e268:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e26a:	6013      	str	r3, [r2, #0]
 800e26c:	9803      	ldr	r0, [sp, #12]
 800e26e:	b019      	add	sp, #100	; 0x64
 800e270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e274:	4b8b      	ldr	r3, [pc, #556]	; (800e4a4 <_dtoa_r+0x2d4>)
 800e276:	9303      	str	r3, [sp, #12]
 800e278:	3303      	adds	r3, #3
 800e27a:	e7f5      	b.n	800e268 <_dtoa_r+0x98>
 800e27c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e280:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800e284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e288:	2200      	movs	r2, #0
 800e28a:	2300      	movs	r3, #0
 800e28c:	f7f2 fbf8 	bl	8000a80 <__aeabi_dcmpeq>
 800e290:	4680      	mov	r8, r0
 800e292:	b158      	cbz	r0, 800e2ac <_dtoa_r+0xdc>
 800e294:	2301      	movs	r3, #1
 800e296:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e298:	6013      	str	r3, [r2, #0]
 800e29a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f000 8558 	beq.w	800ed52 <_dtoa_r+0xb82>
 800e2a2:	4882      	ldr	r0, [pc, #520]	; (800e4ac <_dtoa_r+0x2dc>)
 800e2a4:	6018      	str	r0, [r3, #0]
 800e2a6:	1e43      	subs	r3, r0, #1
 800e2a8:	9303      	str	r3, [sp, #12]
 800e2aa:	e7df      	b.n	800e26c <_dtoa_r+0x9c>
 800e2ac:	ab16      	add	r3, sp, #88	; 0x58
 800e2ae:	9301      	str	r3, [sp, #4]
 800e2b0:	ab17      	add	r3, sp, #92	; 0x5c
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e2ba:	f001 f8b7 	bl	800f42c <__d2b>
 800e2be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e2c2:	4683      	mov	fp, r0
 800e2c4:	2c00      	cmp	r4, #0
 800e2c6:	d07f      	beq.n	800e3c8 <_dtoa_r+0x1f8>
 800e2c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e2cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e2d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800e2da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e2de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	4b72      	ldr	r3, [pc, #456]	; (800e4b0 <_dtoa_r+0x2e0>)
 800e2e6:	f7f1 ffab 	bl	8000240 <__aeabi_dsub>
 800e2ea:	a365      	add	r3, pc, #404	; (adr r3, 800e480 <_dtoa_r+0x2b0>)
 800e2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f0:	f7f2 f95e 	bl	80005b0 <__aeabi_dmul>
 800e2f4:	a364      	add	r3, pc, #400	; (adr r3, 800e488 <_dtoa_r+0x2b8>)
 800e2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fa:	f7f1 ffa3 	bl	8000244 <__adddf3>
 800e2fe:	4606      	mov	r6, r0
 800e300:	4620      	mov	r0, r4
 800e302:	460f      	mov	r7, r1
 800e304:	f7f2 f8ea 	bl	80004dc <__aeabi_i2d>
 800e308:	a361      	add	r3, pc, #388	; (adr r3, 800e490 <_dtoa_r+0x2c0>)
 800e30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30e:	f7f2 f94f 	bl	80005b0 <__aeabi_dmul>
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	4630      	mov	r0, r6
 800e318:	4639      	mov	r1, r7
 800e31a:	f7f1 ff93 	bl	8000244 <__adddf3>
 800e31e:	4606      	mov	r6, r0
 800e320:	460f      	mov	r7, r1
 800e322:	f7f2 fbf5 	bl	8000b10 <__aeabi_d2iz>
 800e326:	2200      	movs	r2, #0
 800e328:	4682      	mov	sl, r0
 800e32a:	2300      	movs	r3, #0
 800e32c:	4630      	mov	r0, r6
 800e32e:	4639      	mov	r1, r7
 800e330:	f7f2 fbb0 	bl	8000a94 <__aeabi_dcmplt>
 800e334:	b148      	cbz	r0, 800e34a <_dtoa_r+0x17a>
 800e336:	4650      	mov	r0, sl
 800e338:	f7f2 f8d0 	bl	80004dc <__aeabi_i2d>
 800e33c:	4632      	mov	r2, r6
 800e33e:	463b      	mov	r3, r7
 800e340:	f7f2 fb9e 	bl	8000a80 <__aeabi_dcmpeq>
 800e344:	b908      	cbnz	r0, 800e34a <_dtoa_r+0x17a>
 800e346:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e34a:	f1ba 0f16 	cmp.w	sl, #22
 800e34e:	d858      	bhi.n	800e402 <_dtoa_r+0x232>
 800e350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e354:	4b57      	ldr	r3, [pc, #348]	; (800e4b4 <_dtoa_r+0x2e4>)
 800e356:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35e:	f7f2 fb99 	bl	8000a94 <__aeabi_dcmplt>
 800e362:	2800      	cmp	r0, #0
 800e364:	d04f      	beq.n	800e406 <_dtoa_r+0x236>
 800e366:	2300      	movs	r3, #0
 800e368:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e36c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e36e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e370:	1b1c      	subs	r4, r3, r4
 800e372:	1e63      	subs	r3, r4, #1
 800e374:	9309      	str	r3, [sp, #36]	; 0x24
 800e376:	bf49      	itett	mi
 800e378:	f1c4 0301 	rsbmi	r3, r4, #1
 800e37c:	2300      	movpl	r3, #0
 800e37e:	9306      	strmi	r3, [sp, #24]
 800e380:	2300      	movmi	r3, #0
 800e382:	bf54      	ite	pl
 800e384:	9306      	strpl	r3, [sp, #24]
 800e386:	9309      	strmi	r3, [sp, #36]	; 0x24
 800e388:	f1ba 0f00 	cmp.w	sl, #0
 800e38c:	db3d      	blt.n	800e40a <_dtoa_r+0x23a>
 800e38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e390:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e394:	4453      	add	r3, sl
 800e396:	9309      	str	r3, [sp, #36]	; 0x24
 800e398:	2300      	movs	r3, #0
 800e39a:	930a      	str	r3, [sp, #40]	; 0x28
 800e39c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e39e:	2b09      	cmp	r3, #9
 800e3a0:	f200 808c 	bhi.w	800e4bc <_dtoa_r+0x2ec>
 800e3a4:	2b05      	cmp	r3, #5
 800e3a6:	bfc4      	itt	gt
 800e3a8:	3b04      	subgt	r3, #4
 800e3aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 800e3ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e3ae:	bfc8      	it	gt
 800e3b0:	2400      	movgt	r4, #0
 800e3b2:	f1a3 0302 	sub.w	r3, r3, #2
 800e3b6:	bfd8      	it	le
 800e3b8:	2401      	movle	r4, #1
 800e3ba:	2b03      	cmp	r3, #3
 800e3bc:	f200 808a 	bhi.w	800e4d4 <_dtoa_r+0x304>
 800e3c0:	e8df f003 	tbb	[pc, r3]
 800e3c4:	5b4d4f2d 	.word	0x5b4d4f2d
 800e3c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800e3cc:	441c      	add	r4, r3
 800e3ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800e3d2:	2b20      	cmp	r3, #32
 800e3d4:	bfc3      	ittte	gt
 800e3d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e3da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800e3de:	fa09 f303 	lslgt.w	r3, r9, r3
 800e3e2:	f1c3 0320 	rsble	r3, r3, #32
 800e3e6:	bfc6      	itte	gt
 800e3e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e3ec:	4318      	orrgt	r0, r3
 800e3ee:	fa06 f003 	lslle.w	r0, r6, r3
 800e3f2:	f7f2 f863 	bl	80004bc <__aeabi_ui2d>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800e3fc:	3c01      	subs	r4, #1
 800e3fe:	9313      	str	r3, [sp, #76]	; 0x4c
 800e400:	e76f      	b.n	800e2e2 <_dtoa_r+0x112>
 800e402:	2301      	movs	r3, #1
 800e404:	e7b2      	b.n	800e36c <_dtoa_r+0x19c>
 800e406:	900f      	str	r0, [sp, #60]	; 0x3c
 800e408:	e7b1      	b.n	800e36e <_dtoa_r+0x19e>
 800e40a:	9b06      	ldr	r3, [sp, #24]
 800e40c:	eba3 030a 	sub.w	r3, r3, sl
 800e410:	9306      	str	r3, [sp, #24]
 800e412:	f1ca 0300 	rsb	r3, sl, #0
 800e416:	930a      	str	r3, [sp, #40]	; 0x28
 800e418:	2300      	movs	r3, #0
 800e41a:	930e      	str	r3, [sp, #56]	; 0x38
 800e41c:	e7be      	b.n	800e39c <_dtoa_r+0x1cc>
 800e41e:	2300      	movs	r3, #0
 800e420:	930b      	str	r3, [sp, #44]	; 0x2c
 800e422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e424:	2b00      	cmp	r3, #0
 800e426:	dc58      	bgt.n	800e4da <_dtoa_r+0x30a>
 800e428:	f04f 0901 	mov.w	r9, #1
 800e42c:	464b      	mov	r3, r9
 800e42e:	f8cd 9020 	str.w	r9, [sp, #32]
 800e432:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800e436:	2200      	movs	r2, #0
 800e438:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e43a:	6042      	str	r2, [r0, #4]
 800e43c:	2204      	movs	r2, #4
 800e43e:	f102 0614 	add.w	r6, r2, #20
 800e442:	429e      	cmp	r6, r3
 800e444:	6841      	ldr	r1, [r0, #4]
 800e446:	d94e      	bls.n	800e4e6 <_dtoa_r+0x316>
 800e448:	4628      	mov	r0, r5
 800e44a:	f000 fcc9 	bl	800ede0 <_Balloc>
 800e44e:	9003      	str	r0, [sp, #12]
 800e450:	2800      	cmp	r0, #0
 800e452:	d14c      	bne.n	800e4ee <_dtoa_r+0x31e>
 800e454:	4602      	mov	r2, r0
 800e456:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e45a:	4b17      	ldr	r3, [pc, #92]	; (800e4b8 <_dtoa_r+0x2e8>)
 800e45c:	e6cc      	b.n	800e1f8 <_dtoa_r+0x28>
 800e45e:	2301      	movs	r3, #1
 800e460:	e7de      	b.n	800e420 <_dtoa_r+0x250>
 800e462:	2300      	movs	r3, #0
 800e464:	930b      	str	r3, [sp, #44]	; 0x2c
 800e466:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e468:	eb0a 0903 	add.w	r9, sl, r3
 800e46c:	f109 0301 	add.w	r3, r9, #1
 800e470:	2b01      	cmp	r3, #1
 800e472:	9308      	str	r3, [sp, #32]
 800e474:	bfb8      	it	lt
 800e476:	2301      	movlt	r3, #1
 800e478:	e7dd      	b.n	800e436 <_dtoa_r+0x266>
 800e47a:	2301      	movs	r3, #1
 800e47c:	e7f2      	b.n	800e464 <_dtoa_r+0x294>
 800e47e:	bf00      	nop
 800e480:	636f4361 	.word	0x636f4361
 800e484:	3fd287a7 	.word	0x3fd287a7
 800e488:	8b60c8b3 	.word	0x8b60c8b3
 800e48c:	3fc68a28 	.word	0x3fc68a28
 800e490:	509f79fb 	.word	0x509f79fb
 800e494:	3fd34413 	.word	0x3fd34413
 800e498:	08010d4d 	.word	0x08010d4d
 800e49c:	08010d64 	.word	0x08010d64
 800e4a0:	7ff00000 	.word	0x7ff00000
 800e4a4:	08010d49 	.word	0x08010d49
 800e4a8:	08010d40 	.word	0x08010d40
 800e4ac:	08010d1d 	.word	0x08010d1d
 800e4b0:	3ff80000 	.word	0x3ff80000
 800e4b4:	08010e58 	.word	0x08010e58
 800e4b8:	08010dbf 	.word	0x08010dbf
 800e4bc:	2401      	movs	r4, #1
 800e4be:	2300      	movs	r3, #0
 800e4c0:	940b      	str	r4, [sp, #44]	; 0x2c
 800e4c2:	9322      	str	r3, [sp, #136]	; 0x88
 800e4c4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	2312      	movs	r3, #18
 800e4cc:	f8cd 9020 	str.w	r9, [sp, #32]
 800e4d0:	9223      	str	r2, [sp, #140]	; 0x8c
 800e4d2:	e7b0      	b.n	800e436 <_dtoa_r+0x266>
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4d8:	e7f4      	b.n	800e4c4 <_dtoa_r+0x2f4>
 800e4da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800e4de:	464b      	mov	r3, r9
 800e4e0:	f8cd 9020 	str.w	r9, [sp, #32]
 800e4e4:	e7a7      	b.n	800e436 <_dtoa_r+0x266>
 800e4e6:	3101      	adds	r1, #1
 800e4e8:	6041      	str	r1, [r0, #4]
 800e4ea:	0052      	lsls	r2, r2, #1
 800e4ec:	e7a7      	b.n	800e43e <_dtoa_r+0x26e>
 800e4ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e4f0:	9a03      	ldr	r2, [sp, #12]
 800e4f2:	601a      	str	r2, [r3, #0]
 800e4f4:	9b08      	ldr	r3, [sp, #32]
 800e4f6:	2b0e      	cmp	r3, #14
 800e4f8:	f200 80a8 	bhi.w	800e64c <_dtoa_r+0x47c>
 800e4fc:	2c00      	cmp	r4, #0
 800e4fe:	f000 80a5 	beq.w	800e64c <_dtoa_r+0x47c>
 800e502:	f1ba 0f00 	cmp.w	sl, #0
 800e506:	dd34      	ble.n	800e572 <_dtoa_r+0x3a2>
 800e508:	4a9a      	ldr	r2, [pc, #616]	; (800e774 <_dtoa_r+0x5a4>)
 800e50a:	f00a 030f 	and.w	r3, sl, #15
 800e50e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e512:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e516:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e51a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e51e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800e522:	d016      	beq.n	800e552 <_dtoa_r+0x382>
 800e524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e528:	4b93      	ldr	r3, [pc, #588]	; (800e778 <_dtoa_r+0x5a8>)
 800e52a:	2703      	movs	r7, #3
 800e52c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e530:	f7f2 f968 	bl	8000804 <__aeabi_ddiv>
 800e534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e538:	f004 040f 	and.w	r4, r4, #15
 800e53c:	4e8e      	ldr	r6, [pc, #568]	; (800e778 <_dtoa_r+0x5a8>)
 800e53e:	b954      	cbnz	r4, 800e556 <_dtoa_r+0x386>
 800e540:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e548:	f7f2 f95c 	bl	8000804 <__aeabi_ddiv>
 800e54c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e550:	e029      	b.n	800e5a6 <_dtoa_r+0x3d6>
 800e552:	2702      	movs	r7, #2
 800e554:	e7f2      	b.n	800e53c <_dtoa_r+0x36c>
 800e556:	07e1      	lsls	r1, r4, #31
 800e558:	d508      	bpl.n	800e56c <_dtoa_r+0x39c>
 800e55a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e55e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e562:	f7f2 f825 	bl	80005b0 <__aeabi_dmul>
 800e566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e56a:	3701      	adds	r7, #1
 800e56c:	1064      	asrs	r4, r4, #1
 800e56e:	3608      	adds	r6, #8
 800e570:	e7e5      	b.n	800e53e <_dtoa_r+0x36e>
 800e572:	f000 80a5 	beq.w	800e6c0 <_dtoa_r+0x4f0>
 800e576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e57a:	f1ca 0400 	rsb	r4, sl, #0
 800e57e:	4b7d      	ldr	r3, [pc, #500]	; (800e774 <_dtoa_r+0x5a4>)
 800e580:	f004 020f 	and.w	r2, r4, #15
 800e584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58c:	f7f2 f810 	bl	80005b0 <__aeabi_dmul>
 800e590:	2702      	movs	r7, #2
 800e592:	2300      	movs	r3, #0
 800e594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e598:	4e77      	ldr	r6, [pc, #476]	; (800e778 <_dtoa_r+0x5a8>)
 800e59a:	1124      	asrs	r4, r4, #4
 800e59c:	2c00      	cmp	r4, #0
 800e59e:	f040 8084 	bne.w	800e6aa <_dtoa_r+0x4da>
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1d2      	bne.n	800e54c <_dtoa_r+0x37c>
 800e5a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	f000 808b 	beq.w	800e6c4 <_dtoa_r+0x4f4>
 800e5ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e5b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e5b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	4b6f      	ldr	r3, [pc, #444]	; (800e77c <_dtoa_r+0x5ac>)
 800e5be:	f7f2 fa69 	bl	8000a94 <__aeabi_dcmplt>
 800e5c2:	2800      	cmp	r0, #0
 800e5c4:	d07e      	beq.n	800e6c4 <_dtoa_r+0x4f4>
 800e5c6:	9b08      	ldr	r3, [sp, #32]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d07b      	beq.n	800e6c4 <_dtoa_r+0x4f4>
 800e5cc:	f1b9 0f00 	cmp.w	r9, #0
 800e5d0:	dd38      	ble.n	800e644 <_dtoa_r+0x474>
 800e5d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	4b69      	ldr	r3, [pc, #420]	; (800e780 <_dtoa_r+0x5b0>)
 800e5da:	f7f1 ffe9 	bl	80005b0 <__aeabi_dmul>
 800e5de:	464c      	mov	r4, r9
 800e5e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5e4:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800e5e8:	3701      	adds	r7, #1
 800e5ea:	4638      	mov	r0, r7
 800e5ec:	f7f1 ff76 	bl	80004dc <__aeabi_i2d>
 800e5f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5f4:	f7f1 ffdc 	bl	80005b0 <__aeabi_dmul>
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	4b62      	ldr	r3, [pc, #392]	; (800e784 <_dtoa_r+0x5b4>)
 800e5fc:	f7f1 fe22 	bl	8000244 <__adddf3>
 800e600:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e604:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e608:	9611      	str	r6, [sp, #68]	; 0x44
 800e60a:	2c00      	cmp	r4, #0
 800e60c:	d15d      	bne.n	800e6ca <_dtoa_r+0x4fa>
 800e60e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e612:	2200      	movs	r2, #0
 800e614:	4b5c      	ldr	r3, [pc, #368]	; (800e788 <_dtoa_r+0x5b8>)
 800e616:	f7f1 fe13 	bl	8000240 <__aeabi_dsub>
 800e61a:	4602      	mov	r2, r0
 800e61c:	460b      	mov	r3, r1
 800e61e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e622:	4633      	mov	r3, r6
 800e624:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e626:	f7f2 fa53 	bl	8000ad0 <__aeabi_dcmpgt>
 800e62a:	2800      	cmp	r0, #0
 800e62c:	f040 829c 	bne.w	800eb68 <_dtoa_r+0x998>
 800e630:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e636:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e63a:	f7f2 fa2b 	bl	8000a94 <__aeabi_dcmplt>
 800e63e:	2800      	cmp	r0, #0
 800e640:	f040 8290 	bne.w	800eb64 <_dtoa_r+0x994>
 800e644:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800e648:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e64c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f2c0 8152 	blt.w	800e8f8 <_dtoa_r+0x728>
 800e654:	f1ba 0f0e 	cmp.w	sl, #14
 800e658:	f300 814e 	bgt.w	800e8f8 <_dtoa_r+0x728>
 800e65c:	4b45      	ldr	r3, [pc, #276]	; (800e774 <_dtoa_r+0x5a4>)
 800e65e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e662:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e666:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800e66a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f280 80db 	bge.w	800e828 <_dtoa_r+0x658>
 800e672:	9b08      	ldr	r3, [sp, #32]
 800e674:	2b00      	cmp	r3, #0
 800e676:	f300 80d7 	bgt.w	800e828 <_dtoa_r+0x658>
 800e67a:	f040 8272 	bne.w	800eb62 <_dtoa_r+0x992>
 800e67e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e682:	2200      	movs	r2, #0
 800e684:	4b40      	ldr	r3, [pc, #256]	; (800e788 <_dtoa_r+0x5b8>)
 800e686:	f7f1 ff93 	bl	80005b0 <__aeabi_dmul>
 800e68a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e68e:	f7f2 fa15 	bl	8000abc <__aeabi_dcmpge>
 800e692:	9c08      	ldr	r4, [sp, #32]
 800e694:	4626      	mov	r6, r4
 800e696:	2800      	cmp	r0, #0
 800e698:	f040 8248 	bne.w	800eb2c <_dtoa_r+0x95c>
 800e69c:	2331      	movs	r3, #49	; 0x31
 800e69e:	9f03      	ldr	r7, [sp, #12]
 800e6a0:	f10a 0a01 	add.w	sl, sl, #1
 800e6a4:	f807 3b01 	strb.w	r3, [r7], #1
 800e6a8:	e244      	b.n	800eb34 <_dtoa_r+0x964>
 800e6aa:	07e2      	lsls	r2, r4, #31
 800e6ac:	d505      	bpl.n	800e6ba <_dtoa_r+0x4ea>
 800e6ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e6b2:	f7f1 ff7d 	bl	80005b0 <__aeabi_dmul>
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	3701      	adds	r7, #1
 800e6ba:	1064      	asrs	r4, r4, #1
 800e6bc:	3608      	adds	r6, #8
 800e6be:	e76d      	b.n	800e59c <_dtoa_r+0x3cc>
 800e6c0:	2702      	movs	r7, #2
 800e6c2:	e770      	b.n	800e5a6 <_dtoa_r+0x3d6>
 800e6c4:	46d0      	mov	r8, sl
 800e6c6:	9c08      	ldr	r4, [sp, #32]
 800e6c8:	e78f      	b.n	800e5ea <_dtoa_r+0x41a>
 800e6ca:	9903      	ldr	r1, [sp, #12]
 800e6cc:	4b29      	ldr	r3, [pc, #164]	; (800e774 <_dtoa_r+0x5a4>)
 800e6ce:	4421      	add	r1, r4
 800e6d0:	9112      	str	r1, [sp, #72]	; 0x48
 800e6d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e6dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e6e0:	2900      	cmp	r1, #0
 800e6e2:	d055      	beq.n	800e790 <_dtoa_r+0x5c0>
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	4929      	ldr	r1, [pc, #164]	; (800e78c <_dtoa_r+0x5bc>)
 800e6e8:	f7f2 f88c 	bl	8000804 <__aeabi_ddiv>
 800e6ec:	463b      	mov	r3, r7
 800e6ee:	4632      	mov	r2, r6
 800e6f0:	f7f1 fda6 	bl	8000240 <__aeabi_dsub>
 800e6f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e6f8:	9f03      	ldr	r7, [sp, #12]
 800e6fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6fe:	f7f2 fa07 	bl	8000b10 <__aeabi_d2iz>
 800e702:	4604      	mov	r4, r0
 800e704:	f7f1 feea 	bl	80004dc <__aeabi_i2d>
 800e708:	4602      	mov	r2, r0
 800e70a:	460b      	mov	r3, r1
 800e70c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e710:	f7f1 fd96 	bl	8000240 <__aeabi_dsub>
 800e714:	4602      	mov	r2, r0
 800e716:	460b      	mov	r3, r1
 800e718:	3430      	adds	r4, #48	; 0x30
 800e71a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e71e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e722:	f807 4b01 	strb.w	r4, [r7], #1
 800e726:	f7f2 f9b5 	bl	8000a94 <__aeabi_dcmplt>
 800e72a:	2800      	cmp	r0, #0
 800e72c:	d174      	bne.n	800e818 <_dtoa_r+0x648>
 800e72e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e732:	2000      	movs	r0, #0
 800e734:	4911      	ldr	r1, [pc, #68]	; (800e77c <_dtoa_r+0x5ac>)
 800e736:	f7f1 fd83 	bl	8000240 <__aeabi_dsub>
 800e73a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e73e:	f7f2 f9a9 	bl	8000a94 <__aeabi_dcmplt>
 800e742:	2800      	cmp	r0, #0
 800e744:	f040 80b7 	bne.w	800e8b6 <_dtoa_r+0x6e6>
 800e748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e74a:	429f      	cmp	r7, r3
 800e74c:	f43f af7a 	beq.w	800e644 <_dtoa_r+0x474>
 800e750:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e754:	2200      	movs	r2, #0
 800e756:	4b0a      	ldr	r3, [pc, #40]	; (800e780 <_dtoa_r+0x5b0>)
 800e758:	f7f1 ff2a 	bl	80005b0 <__aeabi_dmul>
 800e75c:	2200      	movs	r2, #0
 800e75e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e766:	4b06      	ldr	r3, [pc, #24]	; (800e780 <_dtoa_r+0x5b0>)
 800e768:	f7f1 ff22 	bl	80005b0 <__aeabi_dmul>
 800e76c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e770:	e7c3      	b.n	800e6fa <_dtoa_r+0x52a>
 800e772:	bf00      	nop
 800e774:	08010e58 	.word	0x08010e58
 800e778:	08010e30 	.word	0x08010e30
 800e77c:	3ff00000 	.word	0x3ff00000
 800e780:	40240000 	.word	0x40240000
 800e784:	401c0000 	.word	0x401c0000
 800e788:	40140000 	.word	0x40140000
 800e78c:	3fe00000 	.word	0x3fe00000
 800e790:	4630      	mov	r0, r6
 800e792:	4639      	mov	r1, r7
 800e794:	f7f1 ff0c 	bl	80005b0 <__aeabi_dmul>
 800e798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e79a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e79e:	9c03      	ldr	r4, [sp, #12]
 800e7a0:	9314      	str	r3, [sp, #80]	; 0x50
 800e7a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7a6:	f7f2 f9b3 	bl	8000b10 <__aeabi_d2iz>
 800e7aa:	9015      	str	r0, [sp, #84]	; 0x54
 800e7ac:	f7f1 fe96 	bl	80004dc <__aeabi_i2d>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	460b      	mov	r3, r1
 800e7b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7b8:	f7f1 fd42 	bl	8000240 <__aeabi_dsub>
 800e7bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7be:	4606      	mov	r6, r0
 800e7c0:	3330      	adds	r3, #48	; 0x30
 800e7c2:	f804 3b01 	strb.w	r3, [r4], #1
 800e7c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7c8:	460f      	mov	r7, r1
 800e7ca:	429c      	cmp	r4, r3
 800e7cc:	f04f 0200 	mov.w	r2, #0
 800e7d0:	d124      	bne.n	800e81c <_dtoa_r+0x64c>
 800e7d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e7d6:	4bb0      	ldr	r3, [pc, #704]	; (800ea98 <_dtoa_r+0x8c8>)
 800e7d8:	f7f1 fd34 	bl	8000244 <__adddf3>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	460b      	mov	r3, r1
 800e7e0:	4630      	mov	r0, r6
 800e7e2:	4639      	mov	r1, r7
 800e7e4:	f7f2 f974 	bl	8000ad0 <__aeabi_dcmpgt>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d163      	bne.n	800e8b4 <_dtoa_r+0x6e4>
 800e7ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	49a9      	ldr	r1, [pc, #676]	; (800ea98 <_dtoa_r+0x8c8>)
 800e7f4:	f7f1 fd24 	bl	8000240 <__aeabi_dsub>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	4639      	mov	r1, r7
 800e800:	f7f2 f948 	bl	8000a94 <__aeabi_dcmplt>
 800e804:	2800      	cmp	r0, #0
 800e806:	f43f af1d 	beq.w	800e644 <_dtoa_r+0x474>
 800e80a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e80c:	1e7b      	subs	r3, r7, #1
 800e80e:	9314      	str	r3, [sp, #80]	; 0x50
 800e810:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800e814:	2b30      	cmp	r3, #48	; 0x30
 800e816:	d0f8      	beq.n	800e80a <_dtoa_r+0x63a>
 800e818:	46c2      	mov	sl, r8
 800e81a:	e03b      	b.n	800e894 <_dtoa_r+0x6c4>
 800e81c:	4b9f      	ldr	r3, [pc, #636]	; (800ea9c <_dtoa_r+0x8cc>)
 800e81e:	f7f1 fec7 	bl	80005b0 <__aeabi_dmul>
 800e822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e826:	e7bc      	b.n	800e7a2 <_dtoa_r+0x5d2>
 800e828:	9f03      	ldr	r7, [sp, #12]
 800e82a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e82e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e832:	4640      	mov	r0, r8
 800e834:	4649      	mov	r1, r9
 800e836:	f7f1 ffe5 	bl	8000804 <__aeabi_ddiv>
 800e83a:	f7f2 f969 	bl	8000b10 <__aeabi_d2iz>
 800e83e:	4604      	mov	r4, r0
 800e840:	f7f1 fe4c 	bl	80004dc <__aeabi_i2d>
 800e844:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e848:	f7f1 feb2 	bl	80005b0 <__aeabi_dmul>
 800e84c:	4602      	mov	r2, r0
 800e84e:	460b      	mov	r3, r1
 800e850:	4640      	mov	r0, r8
 800e852:	4649      	mov	r1, r9
 800e854:	f7f1 fcf4 	bl	8000240 <__aeabi_dsub>
 800e858:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800e85c:	f807 6b01 	strb.w	r6, [r7], #1
 800e860:	9e03      	ldr	r6, [sp, #12]
 800e862:	f8dd c020 	ldr.w	ip, [sp, #32]
 800e866:	1bbe      	subs	r6, r7, r6
 800e868:	45b4      	cmp	ip, r6
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	d136      	bne.n	800e8de <_dtoa_r+0x70e>
 800e870:	f7f1 fce8 	bl	8000244 <__adddf3>
 800e874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e878:	4680      	mov	r8, r0
 800e87a:	4689      	mov	r9, r1
 800e87c:	f7f2 f928 	bl	8000ad0 <__aeabi_dcmpgt>
 800e880:	bb58      	cbnz	r0, 800e8da <_dtoa_r+0x70a>
 800e882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e886:	4640      	mov	r0, r8
 800e888:	4649      	mov	r1, r9
 800e88a:	f7f2 f8f9 	bl	8000a80 <__aeabi_dcmpeq>
 800e88e:	b108      	cbz	r0, 800e894 <_dtoa_r+0x6c4>
 800e890:	07e1      	lsls	r1, r4, #31
 800e892:	d422      	bmi.n	800e8da <_dtoa_r+0x70a>
 800e894:	4628      	mov	r0, r5
 800e896:	4659      	mov	r1, fp
 800e898:	f000 fae2 	bl	800ee60 <_Bfree>
 800e89c:	2300      	movs	r3, #0
 800e89e:	703b      	strb	r3, [r7, #0]
 800e8a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e8a2:	f10a 0001 	add.w	r0, sl, #1
 800e8a6:	6018      	str	r0, [r3, #0]
 800e8a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	f43f acde 	beq.w	800e26c <_dtoa_r+0x9c>
 800e8b0:	601f      	str	r7, [r3, #0]
 800e8b2:	e4db      	b.n	800e26c <_dtoa_r+0x9c>
 800e8b4:	4627      	mov	r7, r4
 800e8b6:	463b      	mov	r3, r7
 800e8b8:	461f      	mov	r7, r3
 800e8ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e8be:	2a39      	cmp	r2, #57	; 0x39
 800e8c0:	d107      	bne.n	800e8d2 <_dtoa_r+0x702>
 800e8c2:	9a03      	ldr	r2, [sp, #12]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d1f7      	bne.n	800e8b8 <_dtoa_r+0x6e8>
 800e8c8:	2230      	movs	r2, #48	; 0x30
 800e8ca:	9903      	ldr	r1, [sp, #12]
 800e8cc:	f108 0801 	add.w	r8, r8, #1
 800e8d0:	700a      	strb	r2, [r1, #0]
 800e8d2:	781a      	ldrb	r2, [r3, #0]
 800e8d4:	3201      	adds	r2, #1
 800e8d6:	701a      	strb	r2, [r3, #0]
 800e8d8:	e79e      	b.n	800e818 <_dtoa_r+0x648>
 800e8da:	46d0      	mov	r8, sl
 800e8dc:	e7eb      	b.n	800e8b6 <_dtoa_r+0x6e6>
 800e8de:	2200      	movs	r2, #0
 800e8e0:	4b6e      	ldr	r3, [pc, #440]	; (800ea9c <_dtoa_r+0x8cc>)
 800e8e2:	f7f1 fe65 	bl	80005b0 <__aeabi_dmul>
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	4680      	mov	r8, r0
 800e8ec:	4689      	mov	r9, r1
 800e8ee:	f7f2 f8c7 	bl	8000a80 <__aeabi_dcmpeq>
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	d09b      	beq.n	800e82e <_dtoa_r+0x65e>
 800e8f6:	e7cd      	b.n	800e894 <_dtoa_r+0x6c4>
 800e8f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8fa:	2a00      	cmp	r2, #0
 800e8fc:	f000 80d0 	beq.w	800eaa0 <_dtoa_r+0x8d0>
 800e900:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e902:	2a01      	cmp	r2, #1
 800e904:	f300 80ae 	bgt.w	800ea64 <_dtoa_r+0x894>
 800e908:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e90a:	2a00      	cmp	r2, #0
 800e90c:	f000 80a6 	beq.w	800ea5c <_dtoa_r+0x88c>
 800e910:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e914:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e916:	9f06      	ldr	r7, [sp, #24]
 800e918:	9a06      	ldr	r2, [sp, #24]
 800e91a:	2101      	movs	r1, #1
 800e91c:	441a      	add	r2, r3
 800e91e:	9206      	str	r2, [sp, #24]
 800e920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e922:	4628      	mov	r0, r5
 800e924:	441a      	add	r2, r3
 800e926:	9209      	str	r2, [sp, #36]	; 0x24
 800e928:	f000 fb50 	bl	800efcc <__i2b>
 800e92c:	4606      	mov	r6, r0
 800e92e:	2f00      	cmp	r7, #0
 800e930:	dd0c      	ble.n	800e94c <_dtoa_r+0x77c>
 800e932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e934:	2b00      	cmp	r3, #0
 800e936:	dd09      	ble.n	800e94c <_dtoa_r+0x77c>
 800e938:	42bb      	cmp	r3, r7
 800e93a:	bfa8      	it	ge
 800e93c:	463b      	movge	r3, r7
 800e93e:	9a06      	ldr	r2, [sp, #24]
 800e940:	1aff      	subs	r7, r7, r3
 800e942:	1ad2      	subs	r2, r2, r3
 800e944:	9206      	str	r2, [sp, #24]
 800e946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	9309      	str	r3, [sp, #36]	; 0x24
 800e94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e94e:	b1f3      	cbz	r3, 800e98e <_dtoa_r+0x7be>
 800e950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e952:	2b00      	cmp	r3, #0
 800e954:	f000 80a8 	beq.w	800eaa8 <_dtoa_r+0x8d8>
 800e958:	2c00      	cmp	r4, #0
 800e95a:	dd10      	ble.n	800e97e <_dtoa_r+0x7ae>
 800e95c:	4631      	mov	r1, r6
 800e95e:	4622      	mov	r2, r4
 800e960:	4628      	mov	r0, r5
 800e962:	f000 fbf1 	bl	800f148 <__pow5mult>
 800e966:	465a      	mov	r2, fp
 800e968:	4601      	mov	r1, r0
 800e96a:	4606      	mov	r6, r0
 800e96c:	4628      	mov	r0, r5
 800e96e:	f000 fb43 	bl	800eff8 <__multiply>
 800e972:	4680      	mov	r8, r0
 800e974:	4659      	mov	r1, fp
 800e976:	4628      	mov	r0, r5
 800e978:	f000 fa72 	bl	800ee60 <_Bfree>
 800e97c:	46c3      	mov	fp, r8
 800e97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e980:	1b1a      	subs	r2, r3, r4
 800e982:	d004      	beq.n	800e98e <_dtoa_r+0x7be>
 800e984:	4659      	mov	r1, fp
 800e986:	4628      	mov	r0, r5
 800e988:	f000 fbde 	bl	800f148 <__pow5mult>
 800e98c:	4683      	mov	fp, r0
 800e98e:	2101      	movs	r1, #1
 800e990:	4628      	mov	r0, r5
 800e992:	f000 fb1b 	bl	800efcc <__i2b>
 800e996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e998:	4604      	mov	r4, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	f340 8086 	ble.w	800eaac <_dtoa_r+0x8dc>
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	4601      	mov	r1, r0
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	f000 fbcf 	bl	800f148 <__pow5mult>
 800e9aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	dd7f      	ble.n	800eab2 <_dtoa_r+0x8e2>
 800e9b2:	f04f 0800 	mov.w	r8, #0
 800e9b6:	6923      	ldr	r3, [r4, #16]
 800e9b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e9bc:	6918      	ldr	r0, [r3, #16]
 800e9be:	f000 fab7 	bl	800ef30 <__hi0bits>
 800e9c2:	f1c0 0020 	rsb	r0, r0, #32
 800e9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9c8:	4418      	add	r0, r3
 800e9ca:	f010 001f 	ands.w	r0, r0, #31
 800e9ce:	f000 8092 	beq.w	800eaf6 <_dtoa_r+0x926>
 800e9d2:	f1c0 0320 	rsb	r3, r0, #32
 800e9d6:	2b04      	cmp	r3, #4
 800e9d8:	f340 808a 	ble.w	800eaf0 <_dtoa_r+0x920>
 800e9dc:	f1c0 001c 	rsb	r0, r0, #28
 800e9e0:	9b06      	ldr	r3, [sp, #24]
 800e9e2:	4407      	add	r7, r0
 800e9e4:	4403      	add	r3, r0
 800e9e6:	9306      	str	r3, [sp, #24]
 800e9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ea:	4403      	add	r3, r0
 800e9ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ee:	9b06      	ldr	r3, [sp, #24]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	dd05      	ble.n	800ea00 <_dtoa_r+0x830>
 800e9f4:	4659      	mov	r1, fp
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	f000 fbff 	bl	800f1fc <__lshift>
 800e9fe:	4683      	mov	fp, r0
 800ea00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	dd05      	ble.n	800ea12 <_dtoa_r+0x842>
 800ea06:	4621      	mov	r1, r4
 800ea08:	461a      	mov	r2, r3
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	f000 fbf6 	bl	800f1fc <__lshift>
 800ea10:	4604      	mov	r4, r0
 800ea12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d070      	beq.n	800eafa <_dtoa_r+0x92a>
 800ea18:	4621      	mov	r1, r4
 800ea1a:	4658      	mov	r0, fp
 800ea1c:	f000 fc5e 	bl	800f2dc <__mcmp>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	da6a      	bge.n	800eafa <_dtoa_r+0x92a>
 800ea24:	2300      	movs	r3, #0
 800ea26:	4659      	mov	r1, fp
 800ea28:	220a      	movs	r2, #10
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	f000 fa3a 	bl	800eea4 <__multadd>
 800ea30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea32:	4683      	mov	fp, r0
 800ea34:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f000 8194 	beq.w	800ed66 <_dtoa_r+0xb96>
 800ea3e:	4631      	mov	r1, r6
 800ea40:	2300      	movs	r3, #0
 800ea42:	220a      	movs	r2, #10
 800ea44:	4628      	mov	r0, r5
 800ea46:	f000 fa2d 	bl	800eea4 <__multadd>
 800ea4a:	f1b9 0f00 	cmp.w	r9, #0
 800ea4e:	4606      	mov	r6, r0
 800ea50:	f300 8093 	bgt.w	800eb7a <_dtoa_r+0x9aa>
 800ea54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	dc57      	bgt.n	800eb0a <_dtoa_r+0x93a>
 800ea5a:	e08e      	b.n	800eb7a <_dtoa_r+0x9aa>
 800ea5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea62:	e757      	b.n	800e914 <_dtoa_r+0x744>
 800ea64:	9b08      	ldr	r3, [sp, #32]
 800ea66:	1e5c      	subs	r4, r3, #1
 800ea68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea6a:	42a3      	cmp	r3, r4
 800ea6c:	bfb7      	itett	lt
 800ea6e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ea70:	1b1c      	subge	r4, r3, r4
 800ea72:	1ae2      	sublt	r2, r4, r3
 800ea74:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ea76:	bfbe      	ittt	lt
 800ea78:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ea7a:	189b      	addlt	r3, r3, r2
 800ea7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ea7e:	9b08      	ldr	r3, [sp, #32]
 800ea80:	bfb8      	it	lt
 800ea82:	2400      	movlt	r4, #0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	bfbb      	ittet	lt
 800ea88:	9b06      	ldrlt	r3, [sp, #24]
 800ea8a:	9a08      	ldrlt	r2, [sp, #32]
 800ea8c:	9f06      	ldrge	r7, [sp, #24]
 800ea8e:	1a9f      	sublt	r7, r3, r2
 800ea90:	bfac      	ite	ge
 800ea92:	9b08      	ldrge	r3, [sp, #32]
 800ea94:	2300      	movlt	r3, #0
 800ea96:	e73f      	b.n	800e918 <_dtoa_r+0x748>
 800ea98:	3fe00000 	.word	0x3fe00000
 800ea9c:	40240000 	.word	0x40240000
 800eaa0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800eaa2:	9f06      	ldr	r7, [sp, #24]
 800eaa4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800eaa6:	e742      	b.n	800e92e <_dtoa_r+0x75e>
 800eaa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eaaa:	e76b      	b.n	800e984 <_dtoa_r+0x7b4>
 800eaac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	dc19      	bgt.n	800eae6 <_dtoa_r+0x916>
 800eab2:	9b04      	ldr	r3, [sp, #16]
 800eab4:	b9bb      	cbnz	r3, 800eae6 <_dtoa_r+0x916>
 800eab6:	9b05      	ldr	r3, [sp, #20]
 800eab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eabc:	b99b      	cbnz	r3, 800eae6 <_dtoa_r+0x916>
 800eabe:	9b05      	ldr	r3, [sp, #20]
 800eac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eac4:	0d1b      	lsrs	r3, r3, #20
 800eac6:	051b      	lsls	r3, r3, #20
 800eac8:	b183      	cbz	r3, 800eaec <_dtoa_r+0x91c>
 800eaca:	f04f 0801 	mov.w	r8, #1
 800eace:	9b06      	ldr	r3, [sp, #24]
 800ead0:	3301      	adds	r3, #1
 800ead2:	9306      	str	r3, [sp, #24]
 800ead4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ead6:	3301      	adds	r3, #1
 800ead8:	9309      	str	r3, [sp, #36]	; 0x24
 800eada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f47f af6a 	bne.w	800e9b6 <_dtoa_r+0x7e6>
 800eae2:	2001      	movs	r0, #1
 800eae4:	e76f      	b.n	800e9c6 <_dtoa_r+0x7f6>
 800eae6:	f04f 0800 	mov.w	r8, #0
 800eaea:	e7f6      	b.n	800eada <_dtoa_r+0x90a>
 800eaec:	4698      	mov	r8, r3
 800eaee:	e7f4      	b.n	800eada <_dtoa_r+0x90a>
 800eaf0:	f43f af7d 	beq.w	800e9ee <_dtoa_r+0x81e>
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	301c      	adds	r0, #28
 800eaf8:	e772      	b.n	800e9e0 <_dtoa_r+0x810>
 800eafa:	9b08      	ldr	r3, [sp, #32]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	dc36      	bgt.n	800eb6e <_dtoa_r+0x99e>
 800eb00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eb02:	2b02      	cmp	r3, #2
 800eb04:	dd33      	ble.n	800eb6e <_dtoa_r+0x99e>
 800eb06:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb0a:	f1b9 0f00 	cmp.w	r9, #0
 800eb0e:	d10d      	bne.n	800eb2c <_dtoa_r+0x95c>
 800eb10:	4621      	mov	r1, r4
 800eb12:	464b      	mov	r3, r9
 800eb14:	2205      	movs	r2, #5
 800eb16:	4628      	mov	r0, r5
 800eb18:	f000 f9c4 	bl	800eea4 <__multadd>
 800eb1c:	4601      	mov	r1, r0
 800eb1e:	4604      	mov	r4, r0
 800eb20:	4658      	mov	r0, fp
 800eb22:	f000 fbdb 	bl	800f2dc <__mcmp>
 800eb26:	2800      	cmp	r0, #0
 800eb28:	f73f adb8 	bgt.w	800e69c <_dtoa_r+0x4cc>
 800eb2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eb2e:	9f03      	ldr	r7, [sp, #12]
 800eb30:	ea6f 0a03 	mvn.w	sl, r3
 800eb34:	f04f 0800 	mov.w	r8, #0
 800eb38:	4621      	mov	r1, r4
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f000 f990 	bl	800ee60 <_Bfree>
 800eb40:	2e00      	cmp	r6, #0
 800eb42:	f43f aea7 	beq.w	800e894 <_dtoa_r+0x6c4>
 800eb46:	f1b8 0f00 	cmp.w	r8, #0
 800eb4a:	d005      	beq.n	800eb58 <_dtoa_r+0x988>
 800eb4c:	45b0      	cmp	r8, r6
 800eb4e:	d003      	beq.n	800eb58 <_dtoa_r+0x988>
 800eb50:	4641      	mov	r1, r8
 800eb52:	4628      	mov	r0, r5
 800eb54:	f000 f984 	bl	800ee60 <_Bfree>
 800eb58:	4631      	mov	r1, r6
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f000 f980 	bl	800ee60 <_Bfree>
 800eb60:	e698      	b.n	800e894 <_dtoa_r+0x6c4>
 800eb62:	2400      	movs	r4, #0
 800eb64:	4626      	mov	r6, r4
 800eb66:	e7e1      	b.n	800eb2c <_dtoa_r+0x95c>
 800eb68:	46c2      	mov	sl, r8
 800eb6a:	4626      	mov	r6, r4
 800eb6c:	e596      	b.n	800e69c <_dtoa_r+0x4cc>
 800eb6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f000 80fd 	beq.w	800ed74 <_dtoa_r+0xba4>
 800eb7a:	2f00      	cmp	r7, #0
 800eb7c:	dd05      	ble.n	800eb8a <_dtoa_r+0x9ba>
 800eb7e:	4631      	mov	r1, r6
 800eb80:	463a      	mov	r2, r7
 800eb82:	4628      	mov	r0, r5
 800eb84:	f000 fb3a 	bl	800f1fc <__lshift>
 800eb88:	4606      	mov	r6, r0
 800eb8a:	f1b8 0f00 	cmp.w	r8, #0
 800eb8e:	d05c      	beq.n	800ec4a <_dtoa_r+0xa7a>
 800eb90:	4628      	mov	r0, r5
 800eb92:	6871      	ldr	r1, [r6, #4]
 800eb94:	f000 f924 	bl	800ede0 <_Balloc>
 800eb98:	4607      	mov	r7, r0
 800eb9a:	b928      	cbnz	r0, 800eba8 <_dtoa_r+0x9d8>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eba2:	4b7f      	ldr	r3, [pc, #508]	; (800eda0 <_dtoa_r+0xbd0>)
 800eba4:	f7ff bb28 	b.w	800e1f8 <_dtoa_r+0x28>
 800eba8:	6932      	ldr	r2, [r6, #16]
 800ebaa:	f106 010c 	add.w	r1, r6, #12
 800ebae:	3202      	adds	r2, #2
 800ebb0:	0092      	lsls	r2, r2, #2
 800ebb2:	300c      	adds	r0, #12
 800ebb4:	f7fe fdd4 	bl	800d760 <memcpy>
 800ebb8:	2201      	movs	r2, #1
 800ebba:	4639      	mov	r1, r7
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	f000 fb1d 	bl	800f1fc <__lshift>
 800ebc2:	46b0      	mov	r8, r6
 800ebc4:	4606      	mov	r6, r0
 800ebc6:	9b03      	ldr	r3, [sp, #12]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	9308      	str	r3, [sp, #32]
 800ebcc:	9b03      	ldr	r3, [sp, #12]
 800ebce:	444b      	add	r3, r9
 800ebd0:	930a      	str	r3, [sp, #40]	; 0x28
 800ebd2:	9b04      	ldr	r3, [sp, #16]
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	9309      	str	r3, [sp, #36]	; 0x24
 800ebda:	9b08      	ldr	r3, [sp, #32]
 800ebdc:	4621      	mov	r1, r4
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	4658      	mov	r0, fp
 800ebe2:	9304      	str	r3, [sp, #16]
 800ebe4:	f7ff fa65 	bl	800e0b2 <quorem>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	4641      	mov	r1, r8
 800ebec:	3330      	adds	r3, #48	; 0x30
 800ebee:	9006      	str	r0, [sp, #24]
 800ebf0:	4658      	mov	r0, fp
 800ebf2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebf4:	f000 fb72 	bl	800f2dc <__mcmp>
 800ebf8:	4632      	mov	r2, r6
 800ebfa:	4681      	mov	r9, r0
 800ebfc:	4621      	mov	r1, r4
 800ebfe:	4628      	mov	r0, r5
 800ec00:	f000 fb88 	bl	800f314 <__mdiff>
 800ec04:	68c2      	ldr	r2, [r0, #12]
 800ec06:	4607      	mov	r7, r0
 800ec08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec0a:	bb02      	cbnz	r2, 800ec4e <_dtoa_r+0xa7e>
 800ec0c:	4601      	mov	r1, r0
 800ec0e:	4658      	mov	r0, fp
 800ec10:	f000 fb64 	bl	800f2dc <__mcmp>
 800ec14:	4602      	mov	r2, r0
 800ec16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec18:	4639      	mov	r1, r7
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ec20:	f000 f91e 	bl	800ee60 <_Bfree>
 800ec24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ec26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec28:	9f08      	ldr	r7, [sp, #32]
 800ec2a:	ea43 0102 	orr.w	r1, r3, r2
 800ec2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec30:	430b      	orrs	r3, r1
 800ec32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec34:	d10d      	bne.n	800ec52 <_dtoa_r+0xa82>
 800ec36:	2b39      	cmp	r3, #57	; 0x39
 800ec38:	d029      	beq.n	800ec8e <_dtoa_r+0xabe>
 800ec3a:	f1b9 0f00 	cmp.w	r9, #0
 800ec3e:	dd01      	ble.n	800ec44 <_dtoa_r+0xa74>
 800ec40:	9b06      	ldr	r3, [sp, #24]
 800ec42:	3331      	adds	r3, #49	; 0x31
 800ec44:	9a04      	ldr	r2, [sp, #16]
 800ec46:	7013      	strb	r3, [r2, #0]
 800ec48:	e776      	b.n	800eb38 <_dtoa_r+0x968>
 800ec4a:	4630      	mov	r0, r6
 800ec4c:	e7b9      	b.n	800ebc2 <_dtoa_r+0x9f2>
 800ec4e:	2201      	movs	r2, #1
 800ec50:	e7e2      	b.n	800ec18 <_dtoa_r+0xa48>
 800ec52:	f1b9 0f00 	cmp.w	r9, #0
 800ec56:	db06      	blt.n	800ec66 <_dtoa_r+0xa96>
 800ec58:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ec5a:	ea41 0909 	orr.w	r9, r1, r9
 800ec5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec60:	ea59 0101 	orrs.w	r1, r9, r1
 800ec64:	d120      	bne.n	800eca8 <_dtoa_r+0xad8>
 800ec66:	2a00      	cmp	r2, #0
 800ec68:	ddec      	ble.n	800ec44 <_dtoa_r+0xa74>
 800ec6a:	4659      	mov	r1, fp
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	4628      	mov	r0, r5
 800ec70:	9308      	str	r3, [sp, #32]
 800ec72:	f000 fac3 	bl	800f1fc <__lshift>
 800ec76:	4621      	mov	r1, r4
 800ec78:	4683      	mov	fp, r0
 800ec7a:	f000 fb2f 	bl	800f2dc <__mcmp>
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	9b08      	ldr	r3, [sp, #32]
 800ec82:	dc02      	bgt.n	800ec8a <_dtoa_r+0xaba>
 800ec84:	d1de      	bne.n	800ec44 <_dtoa_r+0xa74>
 800ec86:	07da      	lsls	r2, r3, #31
 800ec88:	d5dc      	bpl.n	800ec44 <_dtoa_r+0xa74>
 800ec8a:	2b39      	cmp	r3, #57	; 0x39
 800ec8c:	d1d8      	bne.n	800ec40 <_dtoa_r+0xa70>
 800ec8e:	2339      	movs	r3, #57	; 0x39
 800ec90:	9a04      	ldr	r2, [sp, #16]
 800ec92:	7013      	strb	r3, [r2, #0]
 800ec94:	463b      	mov	r3, r7
 800ec96:	461f      	mov	r7, r3
 800ec98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	2a39      	cmp	r2, #57	; 0x39
 800eca0:	d050      	beq.n	800ed44 <_dtoa_r+0xb74>
 800eca2:	3201      	adds	r2, #1
 800eca4:	701a      	strb	r2, [r3, #0]
 800eca6:	e747      	b.n	800eb38 <_dtoa_r+0x968>
 800eca8:	2a00      	cmp	r2, #0
 800ecaa:	dd03      	ble.n	800ecb4 <_dtoa_r+0xae4>
 800ecac:	2b39      	cmp	r3, #57	; 0x39
 800ecae:	d0ee      	beq.n	800ec8e <_dtoa_r+0xabe>
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	e7c7      	b.n	800ec44 <_dtoa_r+0xa74>
 800ecb4:	9a08      	ldr	r2, [sp, #32]
 800ecb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ecb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ecbc:	428a      	cmp	r2, r1
 800ecbe:	d02a      	beq.n	800ed16 <_dtoa_r+0xb46>
 800ecc0:	4659      	mov	r1, fp
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	220a      	movs	r2, #10
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	f000 f8ec 	bl	800eea4 <__multadd>
 800eccc:	45b0      	cmp	r8, r6
 800ecce:	4683      	mov	fp, r0
 800ecd0:	f04f 0300 	mov.w	r3, #0
 800ecd4:	f04f 020a 	mov.w	r2, #10
 800ecd8:	4641      	mov	r1, r8
 800ecda:	4628      	mov	r0, r5
 800ecdc:	d107      	bne.n	800ecee <_dtoa_r+0xb1e>
 800ecde:	f000 f8e1 	bl	800eea4 <__multadd>
 800ece2:	4680      	mov	r8, r0
 800ece4:	4606      	mov	r6, r0
 800ece6:	9b08      	ldr	r3, [sp, #32]
 800ece8:	3301      	adds	r3, #1
 800ecea:	9308      	str	r3, [sp, #32]
 800ecec:	e775      	b.n	800ebda <_dtoa_r+0xa0a>
 800ecee:	f000 f8d9 	bl	800eea4 <__multadd>
 800ecf2:	4631      	mov	r1, r6
 800ecf4:	4680      	mov	r8, r0
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	220a      	movs	r2, #10
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	f000 f8d2 	bl	800eea4 <__multadd>
 800ed00:	4606      	mov	r6, r0
 800ed02:	e7f0      	b.n	800ece6 <_dtoa_r+0xb16>
 800ed04:	f1b9 0f00 	cmp.w	r9, #0
 800ed08:	bfcc      	ite	gt
 800ed0a:	464f      	movgt	r7, r9
 800ed0c:	2701      	movle	r7, #1
 800ed0e:	f04f 0800 	mov.w	r8, #0
 800ed12:	9a03      	ldr	r2, [sp, #12]
 800ed14:	4417      	add	r7, r2
 800ed16:	4659      	mov	r1, fp
 800ed18:	2201      	movs	r2, #1
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	9308      	str	r3, [sp, #32]
 800ed1e:	f000 fa6d 	bl	800f1fc <__lshift>
 800ed22:	4621      	mov	r1, r4
 800ed24:	4683      	mov	fp, r0
 800ed26:	f000 fad9 	bl	800f2dc <__mcmp>
 800ed2a:	2800      	cmp	r0, #0
 800ed2c:	dcb2      	bgt.n	800ec94 <_dtoa_r+0xac4>
 800ed2e:	d102      	bne.n	800ed36 <_dtoa_r+0xb66>
 800ed30:	9b08      	ldr	r3, [sp, #32]
 800ed32:	07db      	lsls	r3, r3, #31
 800ed34:	d4ae      	bmi.n	800ec94 <_dtoa_r+0xac4>
 800ed36:	463b      	mov	r3, r7
 800ed38:	461f      	mov	r7, r3
 800ed3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed3e:	2a30      	cmp	r2, #48	; 0x30
 800ed40:	d0fa      	beq.n	800ed38 <_dtoa_r+0xb68>
 800ed42:	e6f9      	b.n	800eb38 <_dtoa_r+0x968>
 800ed44:	9a03      	ldr	r2, [sp, #12]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d1a5      	bne.n	800ec96 <_dtoa_r+0xac6>
 800ed4a:	2331      	movs	r3, #49	; 0x31
 800ed4c:	f10a 0a01 	add.w	sl, sl, #1
 800ed50:	e779      	b.n	800ec46 <_dtoa_r+0xa76>
 800ed52:	4b14      	ldr	r3, [pc, #80]	; (800eda4 <_dtoa_r+0xbd4>)
 800ed54:	f7ff baa8 	b.w	800e2a8 <_dtoa_r+0xd8>
 800ed58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f47f aa81 	bne.w	800e262 <_dtoa_r+0x92>
 800ed60:	4b11      	ldr	r3, [pc, #68]	; (800eda8 <_dtoa_r+0xbd8>)
 800ed62:	f7ff baa1 	b.w	800e2a8 <_dtoa_r+0xd8>
 800ed66:	f1b9 0f00 	cmp.w	r9, #0
 800ed6a:	dc03      	bgt.n	800ed74 <_dtoa_r+0xba4>
 800ed6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	f73f aecb 	bgt.w	800eb0a <_dtoa_r+0x93a>
 800ed74:	9f03      	ldr	r7, [sp, #12]
 800ed76:	4621      	mov	r1, r4
 800ed78:	4658      	mov	r0, fp
 800ed7a:	f7ff f99a 	bl	800e0b2 <quorem>
 800ed7e:	9a03      	ldr	r2, [sp, #12]
 800ed80:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ed84:	f807 3b01 	strb.w	r3, [r7], #1
 800ed88:	1aba      	subs	r2, r7, r2
 800ed8a:	4591      	cmp	r9, r2
 800ed8c:	ddba      	ble.n	800ed04 <_dtoa_r+0xb34>
 800ed8e:	4659      	mov	r1, fp
 800ed90:	2300      	movs	r3, #0
 800ed92:	220a      	movs	r2, #10
 800ed94:	4628      	mov	r0, r5
 800ed96:	f000 f885 	bl	800eea4 <__multadd>
 800ed9a:	4683      	mov	fp, r0
 800ed9c:	e7eb      	b.n	800ed76 <_dtoa_r+0xba6>
 800ed9e:	bf00      	nop
 800eda0:	08010dbf 	.word	0x08010dbf
 800eda4:	08010d1c 	.word	0x08010d1c
 800eda8:	08010d40 	.word	0x08010d40

0800edac <_localeconv_r>:
 800edac:	4800      	ldr	r0, [pc, #0]	; (800edb0 <_localeconv_r+0x4>)
 800edae:	4770      	bx	lr
 800edb0:	200001c4 	.word	0x200001c4

0800edb4 <malloc>:
 800edb4:	4b02      	ldr	r3, [pc, #8]	; (800edc0 <malloc+0xc>)
 800edb6:	4601      	mov	r1, r0
 800edb8:	6818      	ldr	r0, [r3, #0]
 800edba:	f000 bc0f 	b.w	800f5dc <_malloc_r>
 800edbe:	bf00      	nop
 800edc0:	20000070 	.word	0x20000070

0800edc4 <memchr>:
 800edc4:	4603      	mov	r3, r0
 800edc6:	b510      	push	{r4, lr}
 800edc8:	b2c9      	uxtb	r1, r1
 800edca:	4402      	add	r2, r0
 800edcc:	4293      	cmp	r3, r2
 800edce:	4618      	mov	r0, r3
 800edd0:	d101      	bne.n	800edd6 <memchr+0x12>
 800edd2:	2000      	movs	r0, #0
 800edd4:	e003      	b.n	800edde <memchr+0x1a>
 800edd6:	7804      	ldrb	r4, [r0, #0]
 800edd8:	3301      	adds	r3, #1
 800edda:	428c      	cmp	r4, r1
 800eddc:	d1f6      	bne.n	800edcc <memchr+0x8>
 800edde:	bd10      	pop	{r4, pc}

0800ede0 <_Balloc>:
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ede4:	4604      	mov	r4, r0
 800ede6:	460d      	mov	r5, r1
 800ede8:	b976      	cbnz	r6, 800ee08 <_Balloc+0x28>
 800edea:	2010      	movs	r0, #16
 800edec:	f7ff ffe2 	bl	800edb4 <malloc>
 800edf0:	4602      	mov	r2, r0
 800edf2:	6260      	str	r0, [r4, #36]	; 0x24
 800edf4:	b920      	cbnz	r0, 800ee00 <_Balloc+0x20>
 800edf6:	2166      	movs	r1, #102	; 0x66
 800edf8:	4b17      	ldr	r3, [pc, #92]	; (800ee58 <_Balloc+0x78>)
 800edfa:	4818      	ldr	r0, [pc, #96]	; (800ee5c <_Balloc+0x7c>)
 800edfc:	f000 fdce 	bl	800f99c <__assert_func>
 800ee00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee04:	6006      	str	r6, [r0, #0]
 800ee06:	60c6      	str	r6, [r0, #12]
 800ee08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ee0a:	68f3      	ldr	r3, [r6, #12]
 800ee0c:	b183      	cbz	r3, 800ee30 <_Balloc+0x50>
 800ee0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee16:	b9b8      	cbnz	r0, 800ee48 <_Balloc+0x68>
 800ee18:	2101      	movs	r1, #1
 800ee1a:	fa01 f605 	lsl.w	r6, r1, r5
 800ee1e:	1d72      	adds	r2, r6, #5
 800ee20:	4620      	mov	r0, r4
 800ee22:	0092      	lsls	r2, r2, #2
 800ee24:	f000 fb5e 	bl	800f4e4 <_calloc_r>
 800ee28:	b160      	cbz	r0, 800ee44 <_Balloc+0x64>
 800ee2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee2e:	e00e      	b.n	800ee4e <_Balloc+0x6e>
 800ee30:	2221      	movs	r2, #33	; 0x21
 800ee32:	2104      	movs	r1, #4
 800ee34:	4620      	mov	r0, r4
 800ee36:	f000 fb55 	bl	800f4e4 <_calloc_r>
 800ee3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee3c:	60f0      	str	r0, [r6, #12]
 800ee3e:	68db      	ldr	r3, [r3, #12]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d1e4      	bne.n	800ee0e <_Balloc+0x2e>
 800ee44:	2000      	movs	r0, #0
 800ee46:	bd70      	pop	{r4, r5, r6, pc}
 800ee48:	6802      	ldr	r2, [r0, #0]
 800ee4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee4e:	2300      	movs	r3, #0
 800ee50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ee54:	e7f7      	b.n	800ee46 <_Balloc+0x66>
 800ee56:	bf00      	nop
 800ee58:	08010d4d 	.word	0x08010d4d
 800ee5c:	08010dd0 	.word	0x08010dd0

0800ee60 <_Bfree>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ee64:	4605      	mov	r5, r0
 800ee66:	460c      	mov	r4, r1
 800ee68:	b976      	cbnz	r6, 800ee88 <_Bfree+0x28>
 800ee6a:	2010      	movs	r0, #16
 800ee6c:	f7ff ffa2 	bl	800edb4 <malloc>
 800ee70:	4602      	mov	r2, r0
 800ee72:	6268      	str	r0, [r5, #36]	; 0x24
 800ee74:	b920      	cbnz	r0, 800ee80 <_Bfree+0x20>
 800ee76:	218a      	movs	r1, #138	; 0x8a
 800ee78:	4b08      	ldr	r3, [pc, #32]	; (800ee9c <_Bfree+0x3c>)
 800ee7a:	4809      	ldr	r0, [pc, #36]	; (800eea0 <_Bfree+0x40>)
 800ee7c:	f000 fd8e 	bl	800f99c <__assert_func>
 800ee80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee84:	6006      	str	r6, [r0, #0]
 800ee86:	60c6      	str	r6, [r0, #12]
 800ee88:	b13c      	cbz	r4, 800ee9a <_Bfree+0x3a>
 800ee8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ee8c:	6862      	ldr	r2, [r4, #4]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee94:	6021      	str	r1, [r4, #0]
 800ee96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee9a:	bd70      	pop	{r4, r5, r6, pc}
 800ee9c:	08010d4d 	.word	0x08010d4d
 800eea0:	08010dd0 	.word	0x08010dd0

0800eea4 <__multadd>:
 800eea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea8:	4607      	mov	r7, r0
 800eeaa:	460c      	mov	r4, r1
 800eeac:	461e      	mov	r6, r3
 800eeae:	2000      	movs	r0, #0
 800eeb0:	690d      	ldr	r5, [r1, #16]
 800eeb2:	f101 0c14 	add.w	ip, r1, #20
 800eeb6:	f8dc 3000 	ldr.w	r3, [ip]
 800eeba:	3001      	adds	r0, #1
 800eebc:	b299      	uxth	r1, r3
 800eebe:	fb02 6101 	mla	r1, r2, r1, r6
 800eec2:	0c1e      	lsrs	r6, r3, #16
 800eec4:	0c0b      	lsrs	r3, r1, #16
 800eec6:	fb02 3306 	mla	r3, r2, r6, r3
 800eeca:	b289      	uxth	r1, r1
 800eecc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eed0:	4285      	cmp	r5, r0
 800eed2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eed6:	f84c 1b04 	str.w	r1, [ip], #4
 800eeda:	dcec      	bgt.n	800eeb6 <__multadd+0x12>
 800eedc:	b30e      	cbz	r6, 800ef22 <__multadd+0x7e>
 800eede:	68a3      	ldr	r3, [r4, #8]
 800eee0:	42ab      	cmp	r3, r5
 800eee2:	dc19      	bgt.n	800ef18 <__multadd+0x74>
 800eee4:	6861      	ldr	r1, [r4, #4]
 800eee6:	4638      	mov	r0, r7
 800eee8:	3101      	adds	r1, #1
 800eeea:	f7ff ff79 	bl	800ede0 <_Balloc>
 800eeee:	4680      	mov	r8, r0
 800eef0:	b928      	cbnz	r0, 800eefe <__multadd+0x5a>
 800eef2:	4602      	mov	r2, r0
 800eef4:	21b5      	movs	r1, #181	; 0xb5
 800eef6:	4b0c      	ldr	r3, [pc, #48]	; (800ef28 <__multadd+0x84>)
 800eef8:	480c      	ldr	r0, [pc, #48]	; (800ef2c <__multadd+0x88>)
 800eefa:	f000 fd4f 	bl	800f99c <__assert_func>
 800eefe:	6922      	ldr	r2, [r4, #16]
 800ef00:	f104 010c 	add.w	r1, r4, #12
 800ef04:	3202      	adds	r2, #2
 800ef06:	0092      	lsls	r2, r2, #2
 800ef08:	300c      	adds	r0, #12
 800ef0a:	f7fe fc29 	bl	800d760 <memcpy>
 800ef0e:	4621      	mov	r1, r4
 800ef10:	4638      	mov	r0, r7
 800ef12:	f7ff ffa5 	bl	800ee60 <_Bfree>
 800ef16:	4644      	mov	r4, r8
 800ef18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ef1c:	3501      	adds	r5, #1
 800ef1e:	615e      	str	r6, [r3, #20]
 800ef20:	6125      	str	r5, [r4, #16]
 800ef22:	4620      	mov	r0, r4
 800ef24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef28:	08010dbf 	.word	0x08010dbf
 800ef2c:	08010dd0 	.word	0x08010dd0

0800ef30 <__hi0bits>:
 800ef30:	0c02      	lsrs	r2, r0, #16
 800ef32:	0412      	lsls	r2, r2, #16
 800ef34:	4603      	mov	r3, r0
 800ef36:	b9ca      	cbnz	r2, 800ef6c <__hi0bits+0x3c>
 800ef38:	0403      	lsls	r3, r0, #16
 800ef3a:	2010      	movs	r0, #16
 800ef3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ef40:	bf04      	itt	eq
 800ef42:	021b      	lsleq	r3, r3, #8
 800ef44:	3008      	addeq	r0, #8
 800ef46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ef4a:	bf04      	itt	eq
 800ef4c:	011b      	lsleq	r3, r3, #4
 800ef4e:	3004      	addeq	r0, #4
 800ef50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ef54:	bf04      	itt	eq
 800ef56:	009b      	lsleq	r3, r3, #2
 800ef58:	3002      	addeq	r0, #2
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	db05      	blt.n	800ef6a <__hi0bits+0x3a>
 800ef5e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ef62:	f100 0001 	add.w	r0, r0, #1
 800ef66:	bf08      	it	eq
 800ef68:	2020      	moveq	r0, #32
 800ef6a:	4770      	bx	lr
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	e7e5      	b.n	800ef3c <__hi0bits+0xc>

0800ef70 <__lo0bits>:
 800ef70:	6803      	ldr	r3, [r0, #0]
 800ef72:	4602      	mov	r2, r0
 800ef74:	f013 0007 	ands.w	r0, r3, #7
 800ef78:	d00b      	beq.n	800ef92 <__lo0bits+0x22>
 800ef7a:	07d9      	lsls	r1, r3, #31
 800ef7c:	d421      	bmi.n	800efc2 <__lo0bits+0x52>
 800ef7e:	0798      	lsls	r0, r3, #30
 800ef80:	bf49      	itett	mi
 800ef82:	085b      	lsrmi	r3, r3, #1
 800ef84:	089b      	lsrpl	r3, r3, #2
 800ef86:	2001      	movmi	r0, #1
 800ef88:	6013      	strmi	r3, [r2, #0]
 800ef8a:	bf5c      	itt	pl
 800ef8c:	2002      	movpl	r0, #2
 800ef8e:	6013      	strpl	r3, [r2, #0]
 800ef90:	4770      	bx	lr
 800ef92:	b299      	uxth	r1, r3
 800ef94:	b909      	cbnz	r1, 800ef9a <__lo0bits+0x2a>
 800ef96:	2010      	movs	r0, #16
 800ef98:	0c1b      	lsrs	r3, r3, #16
 800ef9a:	b2d9      	uxtb	r1, r3
 800ef9c:	b909      	cbnz	r1, 800efa2 <__lo0bits+0x32>
 800ef9e:	3008      	adds	r0, #8
 800efa0:	0a1b      	lsrs	r3, r3, #8
 800efa2:	0719      	lsls	r1, r3, #28
 800efa4:	bf04      	itt	eq
 800efa6:	091b      	lsreq	r3, r3, #4
 800efa8:	3004      	addeq	r0, #4
 800efaa:	0799      	lsls	r1, r3, #30
 800efac:	bf04      	itt	eq
 800efae:	089b      	lsreq	r3, r3, #2
 800efb0:	3002      	addeq	r0, #2
 800efb2:	07d9      	lsls	r1, r3, #31
 800efb4:	d403      	bmi.n	800efbe <__lo0bits+0x4e>
 800efb6:	085b      	lsrs	r3, r3, #1
 800efb8:	f100 0001 	add.w	r0, r0, #1
 800efbc:	d003      	beq.n	800efc6 <__lo0bits+0x56>
 800efbe:	6013      	str	r3, [r2, #0]
 800efc0:	4770      	bx	lr
 800efc2:	2000      	movs	r0, #0
 800efc4:	4770      	bx	lr
 800efc6:	2020      	movs	r0, #32
 800efc8:	4770      	bx	lr
	...

0800efcc <__i2b>:
 800efcc:	b510      	push	{r4, lr}
 800efce:	460c      	mov	r4, r1
 800efd0:	2101      	movs	r1, #1
 800efd2:	f7ff ff05 	bl	800ede0 <_Balloc>
 800efd6:	4602      	mov	r2, r0
 800efd8:	b928      	cbnz	r0, 800efe6 <__i2b+0x1a>
 800efda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800efde:	4b04      	ldr	r3, [pc, #16]	; (800eff0 <__i2b+0x24>)
 800efe0:	4804      	ldr	r0, [pc, #16]	; (800eff4 <__i2b+0x28>)
 800efe2:	f000 fcdb 	bl	800f99c <__assert_func>
 800efe6:	2301      	movs	r3, #1
 800efe8:	6144      	str	r4, [r0, #20]
 800efea:	6103      	str	r3, [r0, #16]
 800efec:	bd10      	pop	{r4, pc}
 800efee:	bf00      	nop
 800eff0:	08010dbf 	.word	0x08010dbf
 800eff4:	08010dd0 	.word	0x08010dd0

0800eff8 <__multiply>:
 800eff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effc:	4691      	mov	r9, r2
 800effe:	690a      	ldr	r2, [r1, #16]
 800f000:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f004:	460c      	mov	r4, r1
 800f006:	429a      	cmp	r2, r3
 800f008:	bfbe      	ittt	lt
 800f00a:	460b      	movlt	r3, r1
 800f00c:	464c      	movlt	r4, r9
 800f00e:	4699      	movlt	r9, r3
 800f010:	6927      	ldr	r7, [r4, #16]
 800f012:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f016:	68a3      	ldr	r3, [r4, #8]
 800f018:	6861      	ldr	r1, [r4, #4]
 800f01a:	eb07 060a 	add.w	r6, r7, sl
 800f01e:	42b3      	cmp	r3, r6
 800f020:	b085      	sub	sp, #20
 800f022:	bfb8      	it	lt
 800f024:	3101      	addlt	r1, #1
 800f026:	f7ff fedb 	bl	800ede0 <_Balloc>
 800f02a:	b930      	cbnz	r0, 800f03a <__multiply+0x42>
 800f02c:	4602      	mov	r2, r0
 800f02e:	f240 115d 	movw	r1, #349	; 0x15d
 800f032:	4b43      	ldr	r3, [pc, #268]	; (800f140 <__multiply+0x148>)
 800f034:	4843      	ldr	r0, [pc, #268]	; (800f144 <__multiply+0x14c>)
 800f036:	f000 fcb1 	bl	800f99c <__assert_func>
 800f03a:	f100 0514 	add.w	r5, r0, #20
 800f03e:	462b      	mov	r3, r5
 800f040:	2200      	movs	r2, #0
 800f042:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f046:	4543      	cmp	r3, r8
 800f048:	d321      	bcc.n	800f08e <__multiply+0x96>
 800f04a:	f104 0314 	add.w	r3, r4, #20
 800f04e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f052:	f109 0314 	add.w	r3, r9, #20
 800f056:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f05a:	9202      	str	r2, [sp, #8]
 800f05c:	1b3a      	subs	r2, r7, r4
 800f05e:	3a15      	subs	r2, #21
 800f060:	f022 0203 	bic.w	r2, r2, #3
 800f064:	3204      	adds	r2, #4
 800f066:	f104 0115 	add.w	r1, r4, #21
 800f06a:	428f      	cmp	r7, r1
 800f06c:	bf38      	it	cc
 800f06e:	2204      	movcc	r2, #4
 800f070:	9201      	str	r2, [sp, #4]
 800f072:	9a02      	ldr	r2, [sp, #8]
 800f074:	9303      	str	r3, [sp, #12]
 800f076:	429a      	cmp	r2, r3
 800f078:	d80c      	bhi.n	800f094 <__multiply+0x9c>
 800f07a:	2e00      	cmp	r6, #0
 800f07c:	dd03      	ble.n	800f086 <__multiply+0x8e>
 800f07e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f082:	2b00      	cmp	r3, #0
 800f084:	d059      	beq.n	800f13a <__multiply+0x142>
 800f086:	6106      	str	r6, [r0, #16]
 800f088:	b005      	add	sp, #20
 800f08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f08e:	f843 2b04 	str.w	r2, [r3], #4
 800f092:	e7d8      	b.n	800f046 <__multiply+0x4e>
 800f094:	f8b3 a000 	ldrh.w	sl, [r3]
 800f098:	f1ba 0f00 	cmp.w	sl, #0
 800f09c:	d023      	beq.n	800f0e6 <__multiply+0xee>
 800f09e:	46a9      	mov	r9, r5
 800f0a0:	f04f 0c00 	mov.w	ip, #0
 800f0a4:	f104 0e14 	add.w	lr, r4, #20
 800f0a8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f0ac:	f8d9 1000 	ldr.w	r1, [r9]
 800f0b0:	fa1f fb82 	uxth.w	fp, r2
 800f0b4:	b289      	uxth	r1, r1
 800f0b6:	fb0a 110b 	mla	r1, sl, fp, r1
 800f0ba:	4461      	add	r1, ip
 800f0bc:	f8d9 c000 	ldr.w	ip, [r9]
 800f0c0:	0c12      	lsrs	r2, r2, #16
 800f0c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f0c6:	fb0a c202 	mla	r2, sl, r2, ip
 800f0ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f0ce:	b289      	uxth	r1, r1
 800f0d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f0d4:	4577      	cmp	r7, lr
 800f0d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f0da:	f849 1b04 	str.w	r1, [r9], #4
 800f0de:	d8e3      	bhi.n	800f0a8 <__multiply+0xb0>
 800f0e0:	9a01      	ldr	r2, [sp, #4]
 800f0e2:	f845 c002 	str.w	ip, [r5, r2]
 800f0e6:	9a03      	ldr	r2, [sp, #12]
 800f0e8:	3304      	adds	r3, #4
 800f0ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f0ee:	f1b9 0f00 	cmp.w	r9, #0
 800f0f2:	d020      	beq.n	800f136 <__multiply+0x13e>
 800f0f4:	46ae      	mov	lr, r5
 800f0f6:	f04f 0a00 	mov.w	sl, #0
 800f0fa:	6829      	ldr	r1, [r5, #0]
 800f0fc:	f104 0c14 	add.w	ip, r4, #20
 800f100:	f8bc b000 	ldrh.w	fp, [ip]
 800f104:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f108:	b289      	uxth	r1, r1
 800f10a:	fb09 220b 	mla	r2, r9, fp, r2
 800f10e:	4492      	add	sl, r2
 800f110:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f114:	f84e 1b04 	str.w	r1, [lr], #4
 800f118:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f11c:	f8be 1000 	ldrh.w	r1, [lr]
 800f120:	0c12      	lsrs	r2, r2, #16
 800f122:	fb09 1102 	mla	r1, r9, r2, r1
 800f126:	4567      	cmp	r7, ip
 800f128:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f12c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f130:	d8e6      	bhi.n	800f100 <__multiply+0x108>
 800f132:	9a01      	ldr	r2, [sp, #4]
 800f134:	50a9      	str	r1, [r5, r2]
 800f136:	3504      	adds	r5, #4
 800f138:	e79b      	b.n	800f072 <__multiply+0x7a>
 800f13a:	3e01      	subs	r6, #1
 800f13c:	e79d      	b.n	800f07a <__multiply+0x82>
 800f13e:	bf00      	nop
 800f140:	08010dbf 	.word	0x08010dbf
 800f144:	08010dd0 	.word	0x08010dd0

0800f148 <__pow5mult>:
 800f148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f14c:	4615      	mov	r5, r2
 800f14e:	f012 0203 	ands.w	r2, r2, #3
 800f152:	4606      	mov	r6, r0
 800f154:	460f      	mov	r7, r1
 800f156:	d007      	beq.n	800f168 <__pow5mult+0x20>
 800f158:	4c25      	ldr	r4, [pc, #148]	; (800f1f0 <__pow5mult+0xa8>)
 800f15a:	3a01      	subs	r2, #1
 800f15c:	2300      	movs	r3, #0
 800f15e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f162:	f7ff fe9f 	bl	800eea4 <__multadd>
 800f166:	4607      	mov	r7, r0
 800f168:	10ad      	asrs	r5, r5, #2
 800f16a:	d03d      	beq.n	800f1e8 <__pow5mult+0xa0>
 800f16c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f16e:	b97c      	cbnz	r4, 800f190 <__pow5mult+0x48>
 800f170:	2010      	movs	r0, #16
 800f172:	f7ff fe1f 	bl	800edb4 <malloc>
 800f176:	4602      	mov	r2, r0
 800f178:	6270      	str	r0, [r6, #36]	; 0x24
 800f17a:	b928      	cbnz	r0, 800f188 <__pow5mult+0x40>
 800f17c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f180:	4b1c      	ldr	r3, [pc, #112]	; (800f1f4 <__pow5mult+0xac>)
 800f182:	481d      	ldr	r0, [pc, #116]	; (800f1f8 <__pow5mult+0xb0>)
 800f184:	f000 fc0a 	bl	800f99c <__assert_func>
 800f188:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f18c:	6004      	str	r4, [r0, #0]
 800f18e:	60c4      	str	r4, [r0, #12]
 800f190:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f194:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f198:	b94c      	cbnz	r4, 800f1ae <__pow5mult+0x66>
 800f19a:	f240 2171 	movw	r1, #625	; 0x271
 800f19e:	4630      	mov	r0, r6
 800f1a0:	f7ff ff14 	bl	800efcc <__i2b>
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	f8c8 0008 	str.w	r0, [r8, #8]
 800f1ac:	6003      	str	r3, [r0, #0]
 800f1ae:	f04f 0900 	mov.w	r9, #0
 800f1b2:	07eb      	lsls	r3, r5, #31
 800f1b4:	d50a      	bpl.n	800f1cc <__pow5mult+0x84>
 800f1b6:	4639      	mov	r1, r7
 800f1b8:	4622      	mov	r2, r4
 800f1ba:	4630      	mov	r0, r6
 800f1bc:	f7ff ff1c 	bl	800eff8 <__multiply>
 800f1c0:	4680      	mov	r8, r0
 800f1c2:	4639      	mov	r1, r7
 800f1c4:	4630      	mov	r0, r6
 800f1c6:	f7ff fe4b 	bl	800ee60 <_Bfree>
 800f1ca:	4647      	mov	r7, r8
 800f1cc:	106d      	asrs	r5, r5, #1
 800f1ce:	d00b      	beq.n	800f1e8 <__pow5mult+0xa0>
 800f1d0:	6820      	ldr	r0, [r4, #0]
 800f1d2:	b938      	cbnz	r0, 800f1e4 <__pow5mult+0x9c>
 800f1d4:	4622      	mov	r2, r4
 800f1d6:	4621      	mov	r1, r4
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f7ff ff0d 	bl	800eff8 <__multiply>
 800f1de:	6020      	str	r0, [r4, #0]
 800f1e0:	f8c0 9000 	str.w	r9, [r0]
 800f1e4:	4604      	mov	r4, r0
 800f1e6:	e7e4      	b.n	800f1b2 <__pow5mult+0x6a>
 800f1e8:	4638      	mov	r0, r7
 800f1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1ee:	bf00      	nop
 800f1f0:	08010f20 	.word	0x08010f20
 800f1f4:	08010d4d 	.word	0x08010d4d
 800f1f8:	08010dd0 	.word	0x08010dd0

0800f1fc <__lshift>:
 800f1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f200:	460c      	mov	r4, r1
 800f202:	4607      	mov	r7, r0
 800f204:	4691      	mov	r9, r2
 800f206:	6923      	ldr	r3, [r4, #16]
 800f208:	6849      	ldr	r1, [r1, #4]
 800f20a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f20e:	68a3      	ldr	r3, [r4, #8]
 800f210:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f214:	f108 0601 	add.w	r6, r8, #1
 800f218:	42b3      	cmp	r3, r6
 800f21a:	db0b      	blt.n	800f234 <__lshift+0x38>
 800f21c:	4638      	mov	r0, r7
 800f21e:	f7ff fddf 	bl	800ede0 <_Balloc>
 800f222:	4605      	mov	r5, r0
 800f224:	b948      	cbnz	r0, 800f23a <__lshift+0x3e>
 800f226:	4602      	mov	r2, r0
 800f228:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f22c:	4b29      	ldr	r3, [pc, #164]	; (800f2d4 <__lshift+0xd8>)
 800f22e:	482a      	ldr	r0, [pc, #168]	; (800f2d8 <__lshift+0xdc>)
 800f230:	f000 fbb4 	bl	800f99c <__assert_func>
 800f234:	3101      	adds	r1, #1
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	e7ee      	b.n	800f218 <__lshift+0x1c>
 800f23a:	2300      	movs	r3, #0
 800f23c:	f100 0114 	add.w	r1, r0, #20
 800f240:	f100 0210 	add.w	r2, r0, #16
 800f244:	4618      	mov	r0, r3
 800f246:	4553      	cmp	r3, sl
 800f248:	db37      	blt.n	800f2ba <__lshift+0xbe>
 800f24a:	6920      	ldr	r0, [r4, #16]
 800f24c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f250:	f104 0314 	add.w	r3, r4, #20
 800f254:	f019 091f 	ands.w	r9, r9, #31
 800f258:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f25c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f260:	d02f      	beq.n	800f2c2 <__lshift+0xc6>
 800f262:	468a      	mov	sl, r1
 800f264:	f04f 0c00 	mov.w	ip, #0
 800f268:	f1c9 0e20 	rsb	lr, r9, #32
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	fa02 f209 	lsl.w	r2, r2, r9
 800f272:	ea42 020c 	orr.w	r2, r2, ip
 800f276:	f84a 2b04 	str.w	r2, [sl], #4
 800f27a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f27e:	4298      	cmp	r0, r3
 800f280:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f284:	d8f2      	bhi.n	800f26c <__lshift+0x70>
 800f286:	1b03      	subs	r3, r0, r4
 800f288:	3b15      	subs	r3, #21
 800f28a:	f023 0303 	bic.w	r3, r3, #3
 800f28e:	3304      	adds	r3, #4
 800f290:	f104 0215 	add.w	r2, r4, #21
 800f294:	4290      	cmp	r0, r2
 800f296:	bf38      	it	cc
 800f298:	2304      	movcc	r3, #4
 800f29a:	f841 c003 	str.w	ip, [r1, r3]
 800f29e:	f1bc 0f00 	cmp.w	ip, #0
 800f2a2:	d001      	beq.n	800f2a8 <__lshift+0xac>
 800f2a4:	f108 0602 	add.w	r6, r8, #2
 800f2a8:	3e01      	subs	r6, #1
 800f2aa:	4638      	mov	r0, r7
 800f2ac:	4621      	mov	r1, r4
 800f2ae:	612e      	str	r6, [r5, #16]
 800f2b0:	f7ff fdd6 	bl	800ee60 <_Bfree>
 800f2b4:	4628      	mov	r0, r5
 800f2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800f2be:	3301      	adds	r3, #1
 800f2c0:	e7c1      	b.n	800f246 <__lshift+0x4a>
 800f2c2:	3904      	subs	r1, #4
 800f2c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2c8:	4298      	cmp	r0, r3
 800f2ca:	f841 2f04 	str.w	r2, [r1, #4]!
 800f2ce:	d8f9      	bhi.n	800f2c4 <__lshift+0xc8>
 800f2d0:	e7ea      	b.n	800f2a8 <__lshift+0xac>
 800f2d2:	bf00      	nop
 800f2d4:	08010dbf 	.word	0x08010dbf
 800f2d8:	08010dd0 	.word	0x08010dd0

0800f2dc <__mcmp>:
 800f2dc:	4603      	mov	r3, r0
 800f2de:	690a      	ldr	r2, [r1, #16]
 800f2e0:	6900      	ldr	r0, [r0, #16]
 800f2e2:	b530      	push	{r4, r5, lr}
 800f2e4:	1a80      	subs	r0, r0, r2
 800f2e6:	d10d      	bne.n	800f304 <__mcmp+0x28>
 800f2e8:	3314      	adds	r3, #20
 800f2ea:	3114      	adds	r1, #20
 800f2ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f2f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f2f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f2f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f2fc:	4295      	cmp	r5, r2
 800f2fe:	d002      	beq.n	800f306 <__mcmp+0x2a>
 800f300:	d304      	bcc.n	800f30c <__mcmp+0x30>
 800f302:	2001      	movs	r0, #1
 800f304:	bd30      	pop	{r4, r5, pc}
 800f306:	42a3      	cmp	r3, r4
 800f308:	d3f4      	bcc.n	800f2f4 <__mcmp+0x18>
 800f30a:	e7fb      	b.n	800f304 <__mcmp+0x28>
 800f30c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f310:	e7f8      	b.n	800f304 <__mcmp+0x28>
	...

0800f314 <__mdiff>:
 800f314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f318:	460d      	mov	r5, r1
 800f31a:	4607      	mov	r7, r0
 800f31c:	4611      	mov	r1, r2
 800f31e:	4628      	mov	r0, r5
 800f320:	4614      	mov	r4, r2
 800f322:	f7ff ffdb 	bl	800f2dc <__mcmp>
 800f326:	1e06      	subs	r6, r0, #0
 800f328:	d111      	bne.n	800f34e <__mdiff+0x3a>
 800f32a:	4631      	mov	r1, r6
 800f32c:	4638      	mov	r0, r7
 800f32e:	f7ff fd57 	bl	800ede0 <_Balloc>
 800f332:	4602      	mov	r2, r0
 800f334:	b928      	cbnz	r0, 800f342 <__mdiff+0x2e>
 800f336:	f240 2132 	movw	r1, #562	; 0x232
 800f33a:	4b3a      	ldr	r3, [pc, #232]	; (800f424 <__mdiff+0x110>)
 800f33c:	483a      	ldr	r0, [pc, #232]	; (800f428 <__mdiff+0x114>)
 800f33e:	f000 fb2d 	bl	800f99c <__assert_func>
 800f342:	2301      	movs	r3, #1
 800f344:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f348:	4610      	mov	r0, r2
 800f34a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f34e:	bfa4      	itt	ge
 800f350:	4623      	movge	r3, r4
 800f352:	462c      	movge	r4, r5
 800f354:	4638      	mov	r0, r7
 800f356:	6861      	ldr	r1, [r4, #4]
 800f358:	bfa6      	itte	ge
 800f35a:	461d      	movge	r5, r3
 800f35c:	2600      	movge	r6, #0
 800f35e:	2601      	movlt	r6, #1
 800f360:	f7ff fd3e 	bl	800ede0 <_Balloc>
 800f364:	4602      	mov	r2, r0
 800f366:	b918      	cbnz	r0, 800f370 <__mdiff+0x5c>
 800f368:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f36c:	4b2d      	ldr	r3, [pc, #180]	; (800f424 <__mdiff+0x110>)
 800f36e:	e7e5      	b.n	800f33c <__mdiff+0x28>
 800f370:	f102 0814 	add.w	r8, r2, #20
 800f374:	46c2      	mov	sl, r8
 800f376:	f04f 0c00 	mov.w	ip, #0
 800f37a:	6927      	ldr	r7, [r4, #16]
 800f37c:	60c6      	str	r6, [r0, #12]
 800f37e:	692e      	ldr	r6, [r5, #16]
 800f380:	f104 0014 	add.w	r0, r4, #20
 800f384:	f105 0914 	add.w	r9, r5, #20
 800f388:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800f38c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f390:	3410      	adds	r4, #16
 800f392:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800f396:	f859 3b04 	ldr.w	r3, [r9], #4
 800f39a:	fa1f f18b 	uxth.w	r1, fp
 800f39e:	448c      	add	ip, r1
 800f3a0:	b299      	uxth	r1, r3
 800f3a2:	0c1b      	lsrs	r3, r3, #16
 800f3a4:	ebac 0101 	sub.w	r1, ip, r1
 800f3a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f3ac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f3b0:	b289      	uxth	r1, r1
 800f3b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800f3b6:	454e      	cmp	r6, r9
 800f3b8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f3bc:	f84a 3b04 	str.w	r3, [sl], #4
 800f3c0:	d8e7      	bhi.n	800f392 <__mdiff+0x7e>
 800f3c2:	1b73      	subs	r3, r6, r5
 800f3c4:	3b15      	subs	r3, #21
 800f3c6:	f023 0303 	bic.w	r3, r3, #3
 800f3ca:	3515      	adds	r5, #21
 800f3cc:	3304      	adds	r3, #4
 800f3ce:	42ae      	cmp	r6, r5
 800f3d0:	bf38      	it	cc
 800f3d2:	2304      	movcc	r3, #4
 800f3d4:	4418      	add	r0, r3
 800f3d6:	4443      	add	r3, r8
 800f3d8:	461e      	mov	r6, r3
 800f3da:	4605      	mov	r5, r0
 800f3dc:	4575      	cmp	r5, lr
 800f3de:	d30e      	bcc.n	800f3fe <__mdiff+0xea>
 800f3e0:	f10e 0103 	add.w	r1, lr, #3
 800f3e4:	1a09      	subs	r1, r1, r0
 800f3e6:	f021 0103 	bic.w	r1, r1, #3
 800f3ea:	3803      	subs	r0, #3
 800f3ec:	4586      	cmp	lr, r0
 800f3ee:	bf38      	it	cc
 800f3f0:	2100      	movcc	r1, #0
 800f3f2:	4419      	add	r1, r3
 800f3f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800f3f8:	b18b      	cbz	r3, 800f41e <__mdiff+0x10a>
 800f3fa:	6117      	str	r7, [r2, #16]
 800f3fc:	e7a4      	b.n	800f348 <__mdiff+0x34>
 800f3fe:	f855 8b04 	ldr.w	r8, [r5], #4
 800f402:	fa1f f188 	uxth.w	r1, r8
 800f406:	4461      	add	r1, ip
 800f408:	140c      	asrs	r4, r1, #16
 800f40a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f40e:	b289      	uxth	r1, r1
 800f410:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f414:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800f418:	f846 1b04 	str.w	r1, [r6], #4
 800f41c:	e7de      	b.n	800f3dc <__mdiff+0xc8>
 800f41e:	3f01      	subs	r7, #1
 800f420:	e7e8      	b.n	800f3f4 <__mdiff+0xe0>
 800f422:	bf00      	nop
 800f424:	08010dbf 	.word	0x08010dbf
 800f428:	08010dd0 	.word	0x08010dd0

0800f42c <__d2b>:
 800f42c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f430:	2101      	movs	r1, #1
 800f432:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800f436:	4690      	mov	r8, r2
 800f438:	461d      	mov	r5, r3
 800f43a:	f7ff fcd1 	bl	800ede0 <_Balloc>
 800f43e:	4604      	mov	r4, r0
 800f440:	b930      	cbnz	r0, 800f450 <__d2b+0x24>
 800f442:	4602      	mov	r2, r0
 800f444:	f240 310a 	movw	r1, #778	; 0x30a
 800f448:	4b24      	ldr	r3, [pc, #144]	; (800f4dc <__d2b+0xb0>)
 800f44a:	4825      	ldr	r0, [pc, #148]	; (800f4e0 <__d2b+0xb4>)
 800f44c:	f000 faa6 	bl	800f99c <__assert_func>
 800f450:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f454:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800f458:	bb2d      	cbnz	r5, 800f4a6 <__d2b+0x7a>
 800f45a:	9301      	str	r3, [sp, #4]
 800f45c:	f1b8 0300 	subs.w	r3, r8, #0
 800f460:	d026      	beq.n	800f4b0 <__d2b+0x84>
 800f462:	4668      	mov	r0, sp
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	f7ff fd83 	bl	800ef70 <__lo0bits>
 800f46a:	9900      	ldr	r1, [sp, #0]
 800f46c:	b1f0      	cbz	r0, 800f4ac <__d2b+0x80>
 800f46e:	9a01      	ldr	r2, [sp, #4]
 800f470:	f1c0 0320 	rsb	r3, r0, #32
 800f474:	fa02 f303 	lsl.w	r3, r2, r3
 800f478:	430b      	orrs	r3, r1
 800f47a:	40c2      	lsrs	r2, r0
 800f47c:	6163      	str	r3, [r4, #20]
 800f47e:	9201      	str	r2, [sp, #4]
 800f480:	9b01      	ldr	r3, [sp, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	bf14      	ite	ne
 800f486:	2102      	movne	r1, #2
 800f488:	2101      	moveq	r1, #1
 800f48a:	61a3      	str	r3, [r4, #24]
 800f48c:	6121      	str	r1, [r4, #16]
 800f48e:	b1c5      	cbz	r5, 800f4c2 <__d2b+0x96>
 800f490:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f494:	4405      	add	r5, r0
 800f496:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f49a:	603d      	str	r5, [r7, #0]
 800f49c:	6030      	str	r0, [r6, #0]
 800f49e:	4620      	mov	r0, r4
 800f4a0:	b002      	add	sp, #8
 800f4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f4aa:	e7d6      	b.n	800f45a <__d2b+0x2e>
 800f4ac:	6161      	str	r1, [r4, #20]
 800f4ae:	e7e7      	b.n	800f480 <__d2b+0x54>
 800f4b0:	a801      	add	r0, sp, #4
 800f4b2:	f7ff fd5d 	bl	800ef70 <__lo0bits>
 800f4b6:	2101      	movs	r1, #1
 800f4b8:	9b01      	ldr	r3, [sp, #4]
 800f4ba:	6121      	str	r1, [r4, #16]
 800f4bc:	6163      	str	r3, [r4, #20]
 800f4be:	3020      	adds	r0, #32
 800f4c0:	e7e5      	b.n	800f48e <__d2b+0x62>
 800f4c2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800f4c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f4ca:	6038      	str	r0, [r7, #0]
 800f4cc:	6918      	ldr	r0, [r3, #16]
 800f4ce:	f7ff fd2f 	bl	800ef30 <__hi0bits>
 800f4d2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800f4d6:	6031      	str	r1, [r6, #0]
 800f4d8:	e7e1      	b.n	800f49e <__d2b+0x72>
 800f4da:	bf00      	nop
 800f4dc:	08010dbf 	.word	0x08010dbf
 800f4e0:	08010dd0 	.word	0x08010dd0

0800f4e4 <_calloc_r>:
 800f4e4:	b570      	push	{r4, r5, r6, lr}
 800f4e6:	fba1 5402 	umull	r5, r4, r1, r2
 800f4ea:	b934      	cbnz	r4, 800f4fa <_calloc_r+0x16>
 800f4ec:	4629      	mov	r1, r5
 800f4ee:	f000 f875 	bl	800f5dc <_malloc_r>
 800f4f2:	4606      	mov	r6, r0
 800f4f4:	b928      	cbnz	r0, 800f502 <_calloc_r+0x1e>
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	bd70      	pop	{r4, r5, r6, pc}
 800f4fa:	220c      	movs	r2, #12
 800f4fc:	2600      	movs	r6, #0
 800f4fe:	6002      	str	r2, [r0, #0]
 800f500:	e7f9      	b.n	800f4f6 <_calloc_r+0x12>
 800f502:	462a      	mov	r2, r5
 800f504:	4621      	mov	r1, r4
 800f506:	f7fe f939 	bl	800d77c <memset>
 800f50a:	e7f4      	b.n	800f4f6 <_calloc_r+0x12>

0800f50c <_free_r>:
 800f50c:	b538      	push	{r3, r4, r5, lr}
 800f50e:	4605      	mov	r5, r0
 800f510:	2900      	cmp	r1, #0
 800f512:	d040      	beq.n	800f596 <_free_r+0x8a>
 800f514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f518:	1f0c      	subs	r4, r1, #4
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	bfb8      	it	lt
 800f51e:	18e4      	addlt	r4, r4, r3
 800f520:	f000 fa98 	bl	800fa54 <__malloc_lock>
 800f524:	4a1c      	ldr	r2, [pc, #112]	; (800f598 <_free_r+0x8c>)
 800f526:	6813      	ldr	r3, [r2, #0]
 800f528:	b933      	cbnz	r3, 800f538 <_free_r+0x2c>
 800f52a:	6063      	str	r3, [r4, #4]
 800f52c:	6014      	str	r4, [r2, #0]
 800f52e:	4628      	mov	r0, r5
 800f530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f534:	f000 ba94 	b.w	800fa60 <__malloc_unlock>
 800f538:	42a3      	cmp	r3, r4
 800f53a:	d908      	bls.n	800f54e <_free_r+0x42>
 800f53c:	6820      	ldr	r0, [r4, #0]
 800f53e:	1821      	adds	r1, r4, r0
 800f540:	428b      	cmp	r3, r1
 800f542:	bf01      	itttt	eq
 800f544:	6819      	ldreq	r1, [r3, #0]
 800f546:	685b      	ldreq	r3, [r3, #4]
 800f548:	1809      	addeq	r1, r1, r0
 800f54a:	6021      	streq	r1, [r4, #0]
 800f54c:	e7ed      	b.n	800f52a <_free_r+0x1e>
 800f54e:	461a      	mov	r2, r3
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	b10b      	cbz	r3, 800f558 <_free_r+0x4c>
 800f554:	42a3      	cmp	r3, r4
 800f556:	d9fa      	bls.n	800f54e <_free_r+0x42>
 800f558:	6811      	ldr	r1, [r2, #0]
 800f55a:	1850      	adds	r0, r2, r1
 800f55c:	42a0      	cmp	r0, r4
 800f55e:	d10b      	bne.n	800f578 <_free_r+0x6c>
 800f560:	6820      	ldr	r0, [r4, #0]
 800f562:	4401      	add	r1, r0
 800f564:	1850      	adds	r0, r2, r1
 800f566:	4283      	cmp	r3, r0
 800f568:	6011      	str	r1, [r2, #0]
 800f56a:	d1e0      	bne.n	800f52e <_free_r+0x22>
 800f56c:	6818      	ldr	r0, [r3, #0]
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	4401      	add	r1, r0
 800f572:	6011      	str	r1, [r2, #0]
 800f574:	6053      	str	r3, [r2, #4]
 800f576:	e7da      	b.n	800f52e <_free_r+0x22>
 800f578:	d902      	bls.n	800f580 <_free_r+0x74>
 800f57a:	230c      	movs	r3, #12
 800f57c:	602b      	str	r3, [r5, #0]
 800f57e:	e7d6      	b.n	800f52e <_free_r+0x22>
 800f580:	6820      	ldr	r0, [r4, #0]
 800f582:	1821      	adds	r1, r4, r0
 800f584:	428b      	cmp	r3, r1
 800f586:	bf01      	itttt	eq
 800f588:	6819      	ldreq	r1, [r3, #0]
 800f58a:	685b      	ldreq	r3, [r3, #4]
 800f58c:	1809      	addeq	r1, r1, r0
 800f58e:	6021      	streq	r1, [r4, #0]
 800f590:	6063      	str	r3, [r4, #4]
 800f592:	6054      	str	r4, [r2, #4]
 800f594:	e7cb      	b.n	800f52e <_free_r+0x22>
 800f596:	bd38      	pop	{r3, r4, r5, pc}
 800f598:	20000284 	.word	0x20000284

0800f59c <sbrk_aligned>:
 800f59c:	b570      	push	{r4, r5, r6, lr}
 800f59e:	4e0e      	ldr	r6, [pc, #56]	; (800f5d8 <sbrk_aligned+0x3c>)
 800f5a0:	460c      	mov	r4, r1
 800f5a2:	6831      	ldr	r1, [r6, #0]
 800f5a4:	4605      	mov	r5, r0
 800f5a6:	b911      	cbnz	r1, 800f5ae <sbrk_aligned+0x12>
 800f5a8:	f000 f9e8 	bl	800f97c <_sbrk_r>
 800f5ac:	6030      	str	r0, [r6, #0]
 800f5ae:	4621      	mov	r1, r4
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	f000 f9e3 	bl	800f97c <_sbrk_r>
 800f5b6:	1c43      	adds	r3, r0, #1
 800f5b8:	d00a      	beq.n	800f5d0 <sbrk_aligned+0x34>
 800f5ba:	1cc4      	adds	r4, r0, #3
 800f5bc:	f024 0403 	bic.w	r4, r4, #3
 800f5c0:	42a0      	cmp	r0, r4
 800f5c2:	d007      	beq.n	800f5d4 <sbrk_aligned+0x38>
 800f5c4:	1a21      	subs	r1, r4, r0
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f000 f9d8 	bl	800f97c <_sbrk_r>
 800f5cc:	3001      	adds	r0, #1
 800f5ce:	d101      	bne.n	800f5d4 <sbrk_aligned+0x38>
 800f5d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	bd70      	pop	{r4, r5, r6, pc}
 800f5d8:	20000288 	.word	0x20000288

0800f5dc <_malloc_r>:
 800f5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e0:	1ccd      	adds	r5, r1, #3
 800f5e2:	f025 0503 	bic.w	r5, r5, #3
 800f5e6:	3508      	adds	r5, #8
 800f5e8:	2d0c      	cmp	r5, #12
 800f5ea:	bf38      	it	cc
 800f5ec:	250c      	movcc	r5, #12
 800f5ee:	2d00      	cmp	r5, #0
 800f5f0:	4607      	mov	r7, r0
 800f5f2:	db01      	blt.n	800f5f8 <_malloc_r+0x1c>
 800f5f4:	42a9      	cmp	r1, r5
 800f5f6:	d905      	bls.n	800f604 <_malloc_r+0x28>
 800f5f8:	230c      	movs	r3, #12
 800f5fa:	2600      	movs	r6, #0
 800f5fc:	603b      	str	r3, [r7, #0]
 800f5fe:	4630      	mov	r0, r6
 800f600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f604:	4e2e      	ldr	r6, [pc, #184]	; (800f6c0 <_malloc_r+0xe4>)
 800f606:	f000 fa25 	bl	800fa54 <__malloc_lock>
 800f60a:	6833      	ldr	r3, [r6, #0]
 800f60c:	461c      	mov	r4, r3
 800f60e:	bb34      	cbnz	r4, 800f65e <_malloc_r+0x82>
 800f610:	4629      	mov	r1, r5
 800f612:	4638      	mov	r0, r7
 800f614:	f7ff ffc2 	bl	800f59c <sbrk_aligned>
 800f618:	1c43      	adds	r3, r0, #1
 800f61a:	4604      	mov	r4, r0
 800f61c:	d14d      	bne.n	800f6ba <_malloc_r+0xde>
 800f61e:	6834      	ldr	r4, [r6, #0]
 800f620:	4626      	mov	r6, r4
 800f622:	2e00      	cmp	r6, #0
 800f624:	d140      	bne.n	800f6a8 <_malloc_r+0xcc>
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	4631      	mov	r1, r6
 800f62a:	4638      	mov	r0, r7
 800f62c:	eb04 0803 	add.w	r8, r4, r3
 800f630:	f000 f9a4 	bl	800f97c <_sbrk_r>
 800f634:	4580      	cmp	r8, r0
 800f636:	d13a      	bne.n	800f6ae <_malloc_r+0xd2>
 800f638:	6821      	ldr	r1, [r4, #0]
 800f63a:	3503      	adds	r5, #3
 800f63c:	1a6d      	subs	r5, r5, r1
 800f63e:	f025 0503 	bic.w	r5, r5, #3
 800f642:	3508      	adds	r5, #8
 800f644:	2d0c      	cmp	r5, #12
 800f646:	bf38      	it	cc
 800f648:	250c      	movcc	r5, #12
 800f64a:	4638      	mov	r0, r7
 800f64c:	4629      	mov	r1, r5
 800f64e:	f7ff ffa5 	bl	800f59c <sbrk_aligned>
 800f652:	3001      	adds	r0, #1
 800f654:	d02b      	beq.n	800f6ae <_malloc_r+0xd2>
 800f656:	6823      	ldr	r3, [r4, #0]
 800f658:	442b      	add	r3, r5
 800f65a:	6023      	str	r3, [r4, #0]
 800f65c:	e00e      	b.n	800f67c <_malloc_r+0xa0>
 800f65e:	6822      	ldr	r2, [r4, #0]
 800f660:	1b52      	subs	r2, r2, r5
 800f662:	d41e      	bmi.n	800f6a2 <_malloc_r+0xc6>
 800f664:	2a0b      	cmp	r2, #11
 800f666:	d916      	bls.n	800f696 <_malloc_r+0xba>
 800f668:	1961      	adds	r1, r4, r5
 800f66a:	42a3      	cmp	r3, r4
 800f66c:	6025      	str	r5, [r4, #0]
 800f66e:	bf18      	it	ne
 800f670:	6059      	strne	r1, [r3, #4]
 800f672:	6863      	ldr	r3, [r4, #4]
 800f674:	bf08      	it	eq
 800f676:	6031      	streq	r1, [r6, #0]
 800f678:	5162      	str	r2, [r4, r5]
 800f67a:	604b      	str	r3, [r1, #4]
 800f67c:	4638      	mov	r0, r7
 800f67e:	f104 060b 	add.w	r6, r4, #11
 800f682:	f000 f9ed 	bl	800fa60 <__malloc_unlock>
 800f686:	f026 0607 	bic.w	r6, r6, #7
 800f68a:	1d23      	adds	r3, r4, #4
 800f68c:	1af2      	subs	r2, r6, r3
 800f68e:	d0b6      	beq.n	800f5fe <_malloc_r+0x22>
 800f690:	1b9b      	subs	r3, r3, r6
 800f692:	50a3      	str	r3, [r4, r2]
 800f694:	e7b3      	b.n	800f5fe <_malloc_r+0x22>
 800f696:	6862      	ldr	r2, [r4, #4]
 800f698:	42a3      	cmp	r3, r4
 800f69a:	bf0c      	ite	eq
 800f69c:	6032      	streq	r2, [r6, #0]
 800f69e:	605a      	strne	r2, [r3, #4]
 800f6a0:	e7ec      	b.n	800f67c <_malloc_r+0xa0>
 800f6a2:	4623      	mov	r3, r4
 800f6a4:	6864      	ldr	r4, [r4, #4]
 800f6a6:	e7b2      	b.n	800f60e <_malloc_r+0x32>
 800f6a8:	4634      	mov	r4, r6
 800f6aa:	6876      	ldr	r6, [r6, #4]
 800f6ac:	e7b9      	b.n	800f622 <_malloc_r+0x46>
 800f6ae:	230c      	movs	r3, #12
 800f6b0:	4638      	mov	r0, r7
 800f6b2:	603b      	str	r3, [r7, #0]
 800f6b4:	f000 f9d4 	bl	800fa60 <__malloc_unlock>
 800f6b8:	e7a1      	b.n	800f5fe <_malloc_r+0x22>
 800f6ba:	6025      	str	r5, [r4, #0]
 800f6bc:	e7de      	b.n	800f67c <_malloc_r+0xa0>
 800f6be:	bf00      	nop
 800f6c0:	20000284 	.word	0x20000284

0800f6c4 <__ssputs_r>:
 800f6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c8:	688e      	ldr	r6, [r1, #8]
 800f6ca:	4682      	mov	sl, r0
 800f6cc:	429e      	cmp	r6, r3
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	4690      	mov	r8, r2
 800f6d2:	461f      	mov	r7, r3
 800f6d4:	d838      	bhi.n	800f748 <__ssputs_r+0x84>
 800f6d6:	898a      	ldrh	r2, [r1, #12]
 800f6d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f6dc:	d032      	beq.n	800f744 <__ssputs_r+0x80>
 800f6de:	6825      	ldr	r5, [r4, #0]
 800f6e0:	6909      	ldr	r1, [r1, #16]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	eba5 0901 	sub.w	r9, r5, r1
 800f6e8:	6965      	ldr	r5, [r4, #20]
 800f6ea:	444b      	add	r3, r9
 800f6ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6f4:	106d      	asrs	r5, r5, #1
 800f6f6:	429d      	cmp	r5, r3
 800f6f8:	bf38      	it	cc
 800f6fa:	461d      	movcc	r5, r3
 800f6fc:	0553      	lsls	r3, r2, #21
 800f6fe:	d531      	bpl.n	800f764 <__ssputs_r+0xa0>
 800f700:	4629      	mov	r1, r5
 800f702:	f7ff ff6b 	bl	800f5dc <_malloc_r>
 800f706:	4606      	mov	r6, r0
 800f708:	b950      	cbnz	r0, 800f720 <__ssputs_r+0x5c>
 800f70a:	230c      	movs	r3, #12
 800f70c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f710:	f8ca 3000 	str.w	r3, [sl]
 800f714:	89a3      	ldrh	r3, [r4, #12]
 800f716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f71a:	81a3      	strh	r3, [r4, #12]
 800f71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f720:	464a      	mov	r2, r9
 800f722:	6921      	ldr	r1, [r4, #16]
 800f724:	f7fe f81c 	bl	800d760 <memcpy>
 800f728:	89a3      	ldrh	r3, [r4, #12]
 800f72a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f72e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f732:	81a3      	strh	r3, [r4, #12]
 800f734:	6126      	str	r6, [r4, #16]
 800f736:	444e      	add	r6, r9
 800f738:	6026      	str	r6, [r4, #0]
 800f73a:	463e      	mov	r6, r7
 800f73c:	6165      	str	r5, [r4, #20]
 800f73e:	eba5 0509 	sub.w	r5, r5, r9
 800f742:	60a5      	str	r5, [r4, #8]
 800f744:	42be      	cmp	r6, r7
 800f746:	d900      	bls.n	800f74a <__ssputs_r+0x86>
 800f748:	463e      	mov	r6, r7
 800f74a:	4632      	mov	r2, r6
 800f74c:	4641      	mov	r1, r8
 800f74e:	6820      	ldr	r0, [r4, #0]
 800f750:	f000 f966 	bl	800fa20 <memmove>
 800f754:	68a3      	ldr	r3, [r4, #8]
 800f756:	2000      	movs	r0, #0
 800f758:	1b9b      	subs	r3, r3, r6
 800f75a:	60a3      	str	r3, [r4, #8]
 800f75c:	6823      	ldr	r3, [r4, #0]
 800f75e:	4433      	add	r3, r6
 800f760:	6023      	str	r3, [r4, #0]
 800f762:	e7db      	b.n	800f71c <__ssputs_r+0x58>
 800f764:	462a      	mov	r2, r5
 800f766:	f000 f981 	bl	800fa6c <_realloc_r>
 800f76a:	4606      	mov	r6, r0
 800f76c:	2800      	cmp	r0, #0
 800f76e:	d1e1      	bne.n	800f734 <__ssputs_r+0x70>
 800f770:	4650      	mov	r0, sl
 800f772:	6921      	ldr	r1, [r4, #16]
 800f774:	f7ff feca 	bl	800f50c <_free_r>
 800f778:	e7c7      	b.n	800f70a <__ssputs_r+0x46>
	...

0800f77c <_svfiprintf_r>:
 800f77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f780:	4698      	mov	r8, r3
 800f782:	898b      	ldrh	r3, [r1, #12]
 800f784:	4607      	mov	r7, r0
 800f786:	061b      	lsls	r3, r3, #24
 800f788:	460d      	mov	r5, r1
 800f78a:	4614      	mov	r4, r2
 800f78c:	b09d      	sub	sp, #116	; 0x74
 800f78e:	d50e      	bpl.n	800f7ae <_svfiprintf_r+0x32>
 800f790:	690b      	ldr	r3, [r1, #16]
 800f792:	b963      	cbnz	r3, 800f7ae <_svfiprintf_r+0x32>
 800f794:	2140      	movs	r1, #64	; 0x40
 800f796:	f7ff ff21 	bl	800f5dc <_malloc_r>
 800f79a:	6028      	str	r0, [r5, #0]
 800f79c:	6128      	str	r0, [r5, #16]
 800f79e:	b920      	cbnz	r0, 800f7aa <_svfiprintf_r+0x2e>
 800f7a0:	230c      	movs	r3, #12
 800f7a2:	603b      	str	r3, [r7, #0]
 800f7a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7a8:	e0d1      	b.n	800f94e <_svfiprintf_r+0x1d2>
 800f7aa:	2340      	movs	r3, #64	; 0x40
 800f7ac:	616b      	str	r3, [r5, #20]
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800f7b2:	2320      	movs	r3, #32
 800f7b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7b8:	2330      	movs	r3, #48	; 0x30
 800f7ba:	f04f 0901 	mov.w	r9, #1
 800f7be:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f968 <_svfiprintf_r+0x1ec>
 800f7c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7ca:	4623      	mov	r3, r4
 800f7cc:	469a      	mov	sl, r3
 800f7ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7d2:	b10a      	cbz	r2, 800f7d8 <_svfiprintf_r+0x5c>
 800f7d4:	2a25      	cmp	r2, #37	; 0x25
 800f7d6:	d1f9      	bne.n	800f7cc <_svfiprintf_r+0x50>
 800f7d8:	ebba 0b04 	subs.w	fp, sl, r4
 800f7dc:	d00b      	beq.n	800f7f6 <_svfiprintf_r+0x7a>
 800f7de:	465b      	mov	r3, fp
 800f7e0:	4622      	mov	r2, r4
 800f7e2:	4629      	mov	r1, r5
 800f7e4:	4638      	mov	r0, r7
 800f7e6:	f7ff ff6d 	bl	800f6c4 <__ssputs_r>
 800f7ea:	3001      	adds	r0, #1
 800f7ec:	f000 80aa 	beq.w	800f944 <_svfiprintf_r+0x1c8>
 800f7f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7f2:	445a      	add	r2, fp
 800f7f4:	9209      	str	r2, [sp, #36]	; 0x24
 800f7f6:	f89a 3000 	ldrb.w	r3, [sl]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f000 80a2 	beq.w	800f944 <_svfiprintf_r+0x1c8>
 800f800:	2300      	movs	r3, #0
 800f802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f80a:	f10a 0a01 	add.w	sl, sl, #1
 800f80e:	9304      	str	r3, [sp, #16]
 800f810:	9307      	str	r3, [sp, #28]
 800f812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f816:	931a      	str	r3, [sp, #104]	; 0x68
 800f818:	4654      	mov	r4, sl
 800f81a:	2205      	movs	r2, #5
 800f81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f820:	4851      	ldr	r0, [pc, #324]	; (800f968 <_svfiprintf_r+0x1ec>)
 800f822:	f7ff facf 	bl	800edc4 <memchr>
 800f826:	9a04      	ldr	r2, [sp, #16]
 800f828:	b9d8      	cbnz	r0, 800f862 <_svfiprintf_r+0xe6>
 800f82a:	06d0      	lsls	r0, r2, #27
 800f82c:	bf44      	itt	mi
 800f82e:	2320      	movmi	r3, #32
 800f830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f834:	0711      	lsls	r1, r2, #28
 800f836:	bf44      	itt	mi
 800f838:	232b      	movmi	r3, #43	; 0x2b
 800f83a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f83e:	f89a 3000 	ldrb.w	r3, [sl]
 800f842:	2b2a      	cmp	r3, #42	; 0x2a
 800f844:	d015      	beq.n	800f872 <_svfiprintf_r+0xf6>
 800f846:	4654      	mov	r4, sl
 800f848:	2000      	movs	r0, #0
 800f84a:	f04f 0c0a 	mov.w	ip, #10
 800f84e:	9a07      	ldr	r2, [sp, #28]
 800f850:	4621      	mov	r1, r4
 800f852:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f856:	3b30      	subs	r3, #48	; 0x30
 800f858:	2b09      	cmp	r3, #9
 800f85a:	d94e      	bls.n	800f8fa <_svfiprintf_r+0x17e>
 800f85c:	b1b0      	cbz	r0, 800f88c <_svfiprintf_r+0x110>
 800f85e:	9207      	str	r2, [sp, #28]
 800f860:	e014      	b.n	800f88c <_svfiprintf_r+0x110>
 800f862:	eba0 0308 	sub.w	r3, r0, r8
 800f866:	fa09 f303 	lsl.w	r3, r9, r3
 800f86a:	4313      	orrs	r3, r2
 800f86c:	46a2      	mov	sl, r4
 800f86e:	9304      	str	r3, [sp, #16]
 800f870:	e7d2      	b.n	800f818 <_svfiprintf_r+0x9c>
 800f872:	9b03      	ldr	r3, [sp, #12]
 800f874:	1d19      	adds	r1, r3, #4
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	9103      	str	r1, [sp, #12]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	bfbb      	ittet	lt
 800f87e:	425b      	neglt	r3, r3
 800f880:	f042 0202 	orrlt.w	r2, r2, #2
 800f884:	9307      	strge	r3, [sp, #28]
 800f886:	9307      	strlt	r3, [sp, #28]
 800f888:	bfb8      	it	lt
 800f88a:	9204      	strlt	r2, [sp, #16]
 800f88c:	7823      	ldrb	r3, [r4, #0]
 800f88e:	2b2e      	cmp	r3, #46	; 0x2e
 800f890:	d10c      	bne.n	800f8ac <_svfiprintf_r+0x130>
 800f892:	7863      	ldrb	r3, [r4, #1]
 800f894:	2b2a      	cmp	r3, #42	; 0x2a
 800f896:	d135      	bne.n	800f904 <_svfiprintf_r+0x188>
 800f898:	9b03      	ldr	r3, [sp, #12]
 800f89a:	3402      	adds	r4, #2
 800f89c:	1d1a      	adds	r2, r3, #4
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	9203      	str	r2, [sp, #12]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	bfb8      	it	lt
 800f8a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f8aa:	9305      	str	r3, [sp, #20]
 800f8ac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800f96c <_svfiprintf_r+0x1f0>
 800f8b0:	2203      	movs	r2, #3
 800f8b2:	4650      	mov	r0, sl
 800f8b4:	7821      	ldrb	r1, [r4, #0]
 800f8b6:	f7ff fa85 	bl	800edc4 <memchr>
 800f8ba:	b140      	cbz	r0, 800f8ce <_svfiprintf_r+0x152>
 800f8bc:	2340      	movs	r3, #64	; 0x40
 800f8be:	eba0 000a 	sub.w	r0, r0, sl
 800f8c2:	fa03 f000 	lsl.w	r0, r3, r0
 800f8c6:	9b04      	ldr	r3, [sp, #16]
 800f8c8:	3401      	adds	r4, #1
 800f8ca:	4303      	orrs	r3, r0
 800f8cc:	9304      	str	r3, [sp, #16]
 800f8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8d2:	2206      	movs	r2, #6
 800f8d4:	4826      	ldr	r0, [pc, #152]	; (800f970 <_svfiprintf_r+0x1f4>)
 800f8d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8da:	f7ff fa73 	bl	800edc4 <memchr>
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	d038      	beq.n	800f954 <_svfiprintf_r+0x1d8>
 800f8e2:	4b24      	ldr	r3, [pc, #144]	; (800f974 <_svfiprintf_r+0x1f8>)
 800f8e4:	bb1b      	cbnz	r3, 800f92e <_svfiprintf_r+0x1b2>
 800f8e6:	9b03      	ldr	r3, [sp, #12]
 800f8e8:	3307      	adds	r3, #7
 800f8ea:	f023 0307 	bic.w	r3, r3, #7
 800f8ee:	3308      	adds	r3, #8
 800f8f0:	9303      	str	r3, [sp, #12]
 800f8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8f4:	4433      	add	r3, r6
 800f8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800f8f8:	e767      	b.n	800f7ca <_svfiprintf_r+0x4e>
 800f8fa:	460c      	mov	r4, r1
 800f8fc:	2001      	movs	r0, #1
 800f8fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800f902:	e7a5      	b.n	800f850 <_svfiprintf_r+0xd4>
 800f904:	2300      	movs	r3, #0
 800f906:	f04f 0c0a 	mov.w	ip, #10
 800f90a:	4619      	mov	r1, r3
 800f90c:	3401      	adds	r4, #1
 800f90e:	9305      	str	r3, [sp, #20]
 800f910:	4620      	mov	r0, r4
 800f912:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f916:	3a30      	subs	r2, #48	; 0x30
 800f918:	2a09      	cmp	r2, #9
 800f91a:	d903      	bls.n	800f924 <_svfiprintf_r+0x1a8>
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d0c5      	beq.n	800f8ac <_svfiprintf_r+0x130>
 800f920:	9105      	str	r1, [sp, #20]
 800f922:	e7c3      	b.n	800f8ac <_svfiprintf_r+0x130>
 800f924:	4604      	mov	r4, r0
 800f926:	2301      	movs	r3, #1
 800f928:	fb0c 2101 	mla	r1, ip, r1, r2
 800f92c:	e7f0      	b.n	800f910 <_svfiprintf_r+0x194>
 800f92e:	ab03      	add	r3, sp, #12
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	462a      	mov	r2, r5
 800f934:	4638      	mov	r0, r7
 800f936:	4b10      	ldr	r3, [pc, #64]	; (800f978 <_svfiprintf_r+0x1fc>)
 800f938:	a904      	add	r1, sp, #16
 800f93a:	f7fd ffc5 	bl	800d8c8 <_printf_float>
 800f93e:	1c42      	adds	r2, r0, #1
 800f940:	4606      	mov	r6, r0
 800f942:	d1d6      	bne.n	800f8f2 <_svfiprintf_r+0x176>
 800f944:	89ab      	ldrh	r3, [r5, #12]
 800f946:	065b      	lsls	r3, r3, #25
 800f948:	f53f af2c 	bmi.w	800f7a4 <_svfiprintf_r+0x28>
 800f94c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f94e:	b01d      	add	sp, #116	; 0x74
 800f950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f954:	ab03      	add	r3, sp, #12
 800f956:	9300      	str	r3, [sp, #0]
 800f958:	462a      	mov	r2, r5
 800f95a:	4638      	mov	r0, r7
 800f95c:	4b06      	ldr	r3, [pc, #24]	; (800f978 <_svfiprintf_r+0x1fc>)
 800f95e:	a904      	add	r1, sp, #16
 800f960:	f7fe fa4e 	bl	800de00 <_printf_i>
 800f964:	e7eb      	b.n	800f93e <_svfiprintf_r+0x1c2>
 800f966:	bf00      	nop
 800f968:	08010f2c 	.word	0x08010f2c
 800f96c:	08010f32 	.word	0x08010f32
 800f970:	08010f36 	.word	0x08010f36
 800f974:	0800d8c9 	.word	0x0800d8c9
 800f978:	0800f6c5 	.word	0x0800f6c5

0800f97c <_sbrk_r>:
 800f97c:	b538      	push	{r3, r4, r5, lr}
 800f97e:	2300      	movs	r3, #0
 800f980:	4d05      	ldr	r5, [pc, #20]	; (800f998 <_sbrk_r+0x1c>)
 800f982:	4604      	mov	r4, r0
 800f984:	4608      	mov	r0, r1
 800f986:	602b      	str	r3, [r5, #0]
 800f988:	f7f3 f92e 	bl	8002be8 <_sbrk>
 800f98c:	1c43      	adds	r3, r0, #1
 800f98e:	d102      	bne.n	800f996 <_sbrk_r+0x1a>
 800f990:	682b      	ldr	r3, [r5, #0]
 800f992:	b103      	cbz	r3, 800f996 <_sbrk_r+0x1a>
 800f994:	6023      	str	r3, [r4, #0]
 800f996:	bd38      	pop	{r3, r4, r5, pc}
 800f998:	2000028c 	.word	0x2000028c

0800f99c <__assert_func>:
 800f99c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f99e:	4614      	mov	r4, r2
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	4b09      	ldr	r3, [pc, #36]	; (800f9c8 <__assert_func+0x2c>)
 800f9a4:	4605      	mov	r5, r0
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	68d8      	ldr	r0, [r3, #12]
 800f9aa:	b14c      	cbz	r4, 800f9c0 <__assert_func+0x24>
 800f9ac:	4b07      	ldr	r3, [pc, #28]	; (800f9cc <__assert_func+0x30>)
 800f9ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9b2:	9100      	str	r1, [sp, #0]
 800f9b4:	462b      	mov	r3, r5
 800f9b6:	4906      	ldr	r1, [pc, #24]	; (800f9d0 <__assert_func+0x34>)
 800f9b8:	f000 f80e 	bl	800f9d8 <fiprintf>
 800f9bc:	f000 faaa 	bl	800ff14 <abort>
 800f9c0:	4b04      	ldr	r3, [pc, #16]	; (800f9d4 <__assert_func+0x38>)
 800f9c2:	461c      	mov	r4, r3
 800f9c4:	e7f3      	b.n	800f9ae <__assert_func+0x12>
 800f9c6:	bf00      	nop
 800f9c8:	20000070 	.word	0x20000070
 800f9cc:	08010f3d 	.word	0x08010f3d
 800f9d0:	08010f4a 	.word	0x08010f4a
 800f9d4:	08010f78 	.word	0x08010f78

0800f9d8 <fiprintf>:
 800f9d8:	b40e      	push	{r1, r2, r3}
 800f9da:	b503      	push	{r0, r1, lr}
 800f9dc:	4601      	mov	r1, r0
 800f9de:	ab03      	add	r3, sp, #12
 800f9e0:	4805      	ldr	r0, [pc, #20]	; (800f9f8 <fiprintf+0x20>)
 800f9e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9e6:	6800      	ldr	r0, [r0, #0]
 800f9e8:	9301      	str	r3, [sp, #4]
 800f9ea:	f000 f895 	bl	800fb18 <_vfiprintf_r>
 800f9ee:	b002      	add	sp, #8
 800f9f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9f4:	b003      	add	sp, #12
 800f9f6:	4770      	bx	lr
 800f9f8:	20000070 	.word	0x20000070

0800f9fc <__ascii_mbtowc>:
 800f9fc:	b082      	sub	sp, #8
 800f9fe:	b901      	cbnz	r1, 800fa02 <__ascii_mbtowc+0x6>
 800fa00:	a901      	add	r1, sp, #4
 800fa02:	b142      	cbz	r2, 800fa16 <__ascii_mbtowc+0x1a>
 800fa04:	b14b      	cbz	r3, 800fa1a <__ascii_mbtowc+0x1e>
 800fa06:	7813      	ldrb	r3, [r2, #0]
 800fa08:	600b      	str	r3, [r1, #0]
 800fa0a:	7812      	ldrb	r2, [r2, #0]
 800fa0c:	1e10      	subs	r0, r2, #0
 800fa0e:	bf18      	it	ne
 800fa10:	2001      	movne	r0, #1
 800fa12:	b002      	add	sp, #8
 800fa14:	4770      	bx	lr
 800fa16:	4610      	mov	r0, r2
 800fa18:	e7fb      	b.n	800fa12 <__ascii_mbtowc+0x16>
 800fa1a:	f06f 0001 	mvn.w	r0, #1
 800fa1e:	e7f8      	b.n	800fa12 <__ascii_mbtowc+0x16>

0800fa20 <memmove>:
 800fa20:	4288      	cmp	r0, r1
 800fa22:	b510      	push	{r4, lr}
 800fa24:	eb01 0402 	add.w	r4, r1, r2
 800fa28:	d902      	bls.n	800fa30 <memmove+0x10>
 800fa2a:	4284      	cmp	r4, r0
 800fa2c:	4623      	mov	r3, r4
 800fa2e:	d807      	bhi.n	800fa40 <memmove+0x20>
 800fa30:	1e43      	subs	r3, r0, #1
 800fa32:	42a1      	cmp	r1, r4
 800fa34:	d008      	beq.n	800fa48 <memmove+0x28>
 800fa36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa3e:	e7f8      	b.n	800fa32 <memmove+0x12>
 800fa40:	4601      	mov	r1, r0
 800fa42:	4402      	add	r2, r0
 800fa44:	428a      	cmp	r2, r1
 800fa46:	d100      	bne.n	800fa4a <memmove+0x2a>
 800fa48:	bd10      	pop	{r4, pc}
 800fa4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa52:	e7f7      	b.n	800fa44 <memmove+0x24>

0800fa54 <__malloc_lock>:
 800fa54:	4801      	ldr	r0, [pc, #4]	; (800fa5c <__malloc_lock+0x8>)
 800fa56:	f000 bc19 	b.w	801028c <__retarget_lock_acquire_recursive>
 800fa5a:	bf00      	nop
 800fa5c:	20000290 	.word	0x20000290

0800fa60 <__malloc_unlock>:
 800fa60:	4801      	ldr	r0, [pc, #4]	; (800fa68 <__malloc_unlock+0x8>)
 800fa62:	f000 bc14 	b.w	801028e <__retarget_lock_release_recursive>
 800fa66:	bf00      	nop
 800fa68:	20000290 	.word	0x20000290

0800fa6c <_realloc_r>:
 800fa6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa70:	4680      	mov	r8, r0
 800fa72:	4614      	mov	r4, r2
 800fa74:	460e      	mov	r6, r1
 800fa76:	b921      	cbnz	r1, 800fa82 <_realloc_r+0x16>
 800fa78:	4611      	mov	r1, r2
 800fa7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7e:	f7ff bdad 	b.w	800f5dc <_malloc_r>
 800fa82:	b92a      	cbnz	r2, 800fa90 <_realloc_r+0x24>
 800fa84:	f7ff fd42 	bl	800f50c <_free_r>
 800fa88:	4625      	mov	r5, r4
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa90:	f000 fc64 	bl	801035c <_malloc_usable_size_r>
 800fa94:	4284      	cmp	r4, r0
 800fa96:	4607      	mov	r7, r0
 800fa98:	d802      	bhi.n	800faa0 <_realloc_r+0x34>
 800fa9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fa9e:	d812      	bhi.n	800fac6 <_realloc_r+0x5a>
 800faa0:	4621      	mov	r1, r4
 800faa2:	4640      	mov	r0, r8
 800faa4:	f7ff fd9a 	bl	800f5dc <_malloc_r>
 800faa8:	4605      	mov	r5, r0
 800faaa:	2800      	cmp	r0, #0
 800faac:	d0ed      	beq.n	800fa8a <_realloc_r+0x1e>
 800faae:	42bc      	cmp	r4, r7
 800fab0:	4622      	mov	r2, r4
 800fab2:	4631      	mov	r1, r6
 800fab4:	bf28      	it	cs
 800fab6:	463a      	movcs	r2, r7
 800fab8:	f7fd fe52 	bl	800d760 <memcpy>
 800fabc:	4631      	mov	r1, r6
 800fabe:	4640      	mov	r0, r8
 800fac0:	f7ff fd24 	bl	800f50c <_free_r>
 800fac4:	e7e1      	b.n	800fa8a <_realloc_r+0x1e>
 800fac6:	4635      	mov	r5, r6
 800fac8:	e7df      	b.n	800fa8a <_realloc_r+0x1e>

0800faca <__sfputc_r>:
 800faca:	6893      	ldr	r3, [r2, #8]
 800facc:	b410      	push	{r4}
 800face:	3b01      	subs	r3, #1
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	6093      	str	r3, [r2, #8]
 800fad4:	da07      	bge.n	800fae6 <__sfputc_r+0x1c>
 800fad6:	6994      	ldr	r4, [r2, #24]
 800fad8:	42a3      	cmp	r3, r4
 800fada:	db01      	blt.n	800fae0 <__sfputc_r+0x16>
 800fadc:	290a      	cmp	r1, #10
 800fade:	d102      	bne.n	800fae6 <__sfputc_r+0x1c>
 800fae0:	bc10      	pop	{r4}
 800fae2:	f000 b949 	b.w	800fd78 <__swbuf_r>
 800fae6:	6813      	ldr	r3, [r2, #0]
 800fae8:	1c58      	adds	r0, r3, #1
 800faea:	6010      	str	r0, [r2, #0]
 800faec:	7019      	strb	r1, [r3, #0]
 800faee:	4608      	mov	r0, r1
 800faf0:	bc10      	pop	{r4}
 800faf2:	4770      	bx	lr

0800faf4 <__sfputs_r>:
 800faf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faf6:	4606      	mov	r6, r0
 800faf8:	460f      	mov	r7, r1
 800fafa:	4614      	mov	r4, r2
 800fafc:	18d5      	adds	r5, r2, r3
 800fafe:	42ac      	cmp	r4, r5
 800fb00:	d101      	bne.n	800fb06 <__sfputs_r+0x12>
 800fb02:	2000      	movs	r0, #0
 800fb04:	e007      	b.n	800fb16 <__sfputs_r+0x22>
 800fb06:	463a      	mov	r2, r7
 800fb08:	4630      	mov	r0, r6
 800fb0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb0e:	f7ff ffdc 	bl	800faca <__sfputc_r>
 800fb12:	1c43      	adds	r3, r0, #1
 800fb14:	d1f3      	bne.n	800fafe <__sfputs_r+0xa>
 800fb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fb18 <_vfiprintf_r>:
 800fb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1c:	460d      	mov	r5, r1
 800fb1e:	4614      	mov	r4, r2
 800fb20:	4698      	mov	r8, r3
 800fb22:	4606      	mov	r6, r0
 800fb24:	b09d      	sub	sp, #116	; 0x74
 800fb26:	b118      	cbz	r0, 800fb30 <_vfiprintf_r+0x18>
 800fb28:	6983      	ldr	r3, [r0, #24]
 800fb2a:	b90b      	cbnz	r3, 800fb30 <_vfiprintf_r+0x18>
 800fb2c:	f000 fb10 	bl	8010150 <__sinit>
 800fb30:	4b89      	ldr	r3, [pc, #548]	; (800fd58 <_vfiprintf_r+0x240>)
 800fb32:	429d      	cmp	r5, r3
 800fb34:	d11b      	bne.n	800fb6e <_vfiprintf_r+0x56>
 800fb36:	6875      	ldr	r5, [r6, #4]
 800fb38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb3a:	07d9      	lsls	r1, r3, #31
 800fb3c:	d405      	bmi.n	800fb4a <_vfiprintf_r+0x32>
 800fb3e:	89ab      	ldrh	r3, [r5, #12]
 800fb40:	059a      	lsls	r2, r3, #22
 800fb42:	d402      	bmi.n	800fb4a <_vfiprintf_r+0x32>
 800fb44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb46:	f000 fba1 	bl	801028c <__retarget_lock_acquire_recursive>
 800fb4a:	89ab      	ldrh	r3, [r5, #12]
 800fb4c:	071b      	lsls	r3, r3, #28
 800fb4e:	d501      	bpl.n	800fb54 <_vfiprintf_r+0x3c>
 800fb50:	692b      	ldr	r3, [r5, #16]
 800fb52:	b9eb      	cbnz	r3, 800fb90 <_vfiprintf_r+0x78>
 800fb54:	4629      	mov	r1, r5
 800fb56:	4630      	mov	r0, r6
 800fb58:	f000 f96e 	bl	800fe38 <__swsetup_r>
 800fb5c:	b1c0      	cbz	r0, 800fb90 <_vfiprintf_r+0x78>
 800fb5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb60:	07dc      	lsls	r4, r3, #31
 800fb62:	d50e      	bpl.n	800fb82 <_vfiprintf_r+0x6a>
 800fb64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb68:	b01d      	add	sp, #116	; 0x74
 800fb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb6e:	4b7b      	ldr	r3, [pc, #492]	; (800fd5c <_vfiprintf_r+0x244>)
 800fb70:	429d      	cmp	r5, r3
 800fb72:	d101      	bne.n	800fb78 <_vfiprintf_r+0x60>
 800fb74:	68b5      	ldr	r5, [r6, #8]
 800fb76:	e7df      	b.n	800fb38 <_vfiprintf_r+0x20>
 800fb78:	4b79      	ldr	r3, [pc, #484]	; (800fd60 <_vfiprintf_r+0x248>)
 800fb7a:	429d      	cmp	r5, r3
 800fb7c:	bf08      	it	eq
 800fb7e:	68f5      	ldreq	r5, [r6, #12]
 800fb80:	e7da      	b.n	800fb38 <_vfiprintf_r+0x20>
 800fb82:	89ab      	ldrh	r3, [r5, #12]
 800fb84:	0598      	lsls	r0, r3, #22
 800fb86:	d4ed      	bmi.n	800fb64 <_vfiprintf_r+0x4c>
 800fb88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb8a:	f000 fb80 	bl	801028e <__retarget_lock_release_recursive>
 800fb8e:	e7e9      	b.n	800fb64 <_vfiprintf_r+0x4c>
 800fb90:	2300      	movs	r3, #0
 800fb92:	9309      	str	r3, [sp, #36]	; 0x24
 800fb94:	2320      	movs	r3, #32
 800fb96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb9a:	2330      	movs	r3, #48	; 0x30
 800fb9c:	f04f 0901 	mov.w	r9, #1
 800fba0:	f8cd 800c 	str.w	r8, [sp, #12]
 800fba4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800fd64 <_vfiprintf_r+0x24c>
 800fba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbac:	4623      	mov	r3, r4
 800fbae:	469a      	mov	sl, r3
 800fbb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbb4:	b10a      	cbz	r2, 800fbba <_vfiprintf_r+0xa2>
 800fbb6:	2a25      	cmp	r2, #37	; 0x25
 800fbb8:	d1f9      	bne.n	800fbae <_vfiprintf_r+0x96>
 800fbba:	ebba 0b04 	subs.w	fp, sl, r4
 800fbbe:	d00b      	beq.n	800fbd8 <_vfiprintf_r+0xc0>
 800fbc0:	465b      	mov	r3, fp
 800fbc2:	4622      	mov	r2, r4
 800fbc4:	4629      	mov	r1, r5
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	f7ff ff94 	bl	800faf4 <__sfputs_r>
 800fbcc:	3001      	adds	r0, #1
 800fbce:	f000 80aa 	beq.w	800fd26 <_vfiprintf_r+0x20e>
 800fbd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbd4:	445a      	add	r2, fp
 800fbd6:	9209      	str	r2, [sp, #36]	; 0x24
 800fbd8:	f89a 3000 	ldrb.w	r3, [sl]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	f000 80a2 	beq.w	800fd26 <_vfiprintf_r+0x20e>
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbec:	f10a 0a01 	add.w	sl, sl, #1
 800fbf0:	9304      	str	r3, [sp, #16]
 800fbf2:	9307      	str	r3, [sp, #28]
 800fbf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fbf8:	931a      	str	r3, [sp, #104]	; 0x68
 800fbfa:	4654      	mov	r4, sl
 800fbfc:	2205      	movs	r2, #5
 800fbfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc02:	4858      	ldr	r0, [pc, #352]	; (800fd64 <_vfiprintf_r+0x24c>)
 800fc04:	f7ff f8de 	bl	800edc4 <memchr>
 800fc08:	9a04      	ldr	r2, [sp, #16]
 800fc0a:	b9d8      	cbnz	r0, 800fc44 <_vfiprintf_r+0x12c>
 800fc0c:	06d1      	lsls	r1, r2, #27
 800fc0e:	bf44      	itt	mi
 800fc10:	2320      	movmi	r3, #32
 800fc12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc16:	0713      	lsls	r3, r2, #28
 800fc18:	bf44      	itt	mi
 800fc1a:	232b      	movmi	r3, #43	; 0x2b
 800fc1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc20:	f89a 3000 	ldrb.w	r3, [sl]
 800fc24:	2b2a      	cmp	r3, #42	; 0x2a
 800fc26:	d015      	beq.n	800fc54 <_vfiprintf_r+0x13c>
 800fc28:	4654      	mov	r4, sl
 800fc2a:	2000      	movs	r0, #0
 800fc2c:	f04f 0c0a 	mov.w	ip, #10
 800fc30:	9a07      	ldr	r2, [sp, #28]
 800fc32:	4621      	mov	r1, r4
 800fc34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc38:	3b30      	subs	r3, #48	; 0x30
 800fc3a:	2b09      	cmp	r3, #9
 800fc3c:	d94e      	bls.n	800fcdc <_vfiprintf_r+0x1c4>
 800fc3e:	b1b0      	cbz	r0, 800fc6e <_vfiprintf_r+0x156>
 800fc40:	9207      	str	r2, [sp, #28]
 800fc42:	e014      	b.n	800fc6e <_vfiprintf_r+0x156>
 800fc44:	eba0 0308 	sub.w	r3, r0, r8
 800fc48:	fa09 f303 	lsl.w	r3, r9, r3
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	46a2      	mov	sl, r4
 800fc50:	9304      	str	r3, [sp, #16]
 800fc52:	e7d2      	b.n	800fbfa <_vfiprintf_r+0xe2>
 800fc54:	9b03      	ldr	r3, [sp, #12]
 800fc56:	1d19      	adds	r1, r3, #4
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	9103      	str	r1, [sp, #12]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	bfbb      	ittet	lt
 800fc60:	425b      	neglt	r3, r3
 800fc62:	f042 0202 	orrlt.w	r2, r2, #2
 800fc66:	9307      	strge	r3, [sp, #28]
 800fc68:	9307      	strlt	r3, [sp, #28]
 800fc6a:	bfb8      	it	lt
 800fc6c:	9204      	strlt	r2, [sp, #16]
 800fc6e:	7823      	ldrb	r3, [r4, #0]
 800fc70:	2b2e      	cmp	r3, #46	; 0x2e
 800fc72:	d10c      	bne.n	800fc8e <_vfiprintf_r+0x176>
 800fc74:	7863      	ldrb	r3, [r4, #1]
 800fc76:	2b2a      	cmp	r3, #42	; 0x2a
 800fc78:	d135      	bne.n	800fce6 <_vfiprintf_r+0x1ce>
 800fc7a:	9b03      	ldr	r3, [sp, #12]
 800fc7c:	3402      	adds	r4, #2
 800fc7e:	1d1a      	adds	r2, r3, #4
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	9203      	str	r2, [sp, #12]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	bfb8      	it	lt
 800fc88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fc8c:	9305      	str	r3, [sp, #20]
 800fc8e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800fd68 <_vfiprintf_r+0x250>
 800fc92:	2203      	movs	r2, #3
 800fc94:	4650      	mov	r0, sl
 800fc96:	7821      	ldrb	r1, [r4, #0]
 800fc98:	f7ff f894 	bl	800edc4 <memchr>
 800fc9c:	b140      	cbz	r0, 800fcb0 <_vfiprintf_r+0x198>
 800fc9e:	2340      	movs	r3, #64	; 0x40
 800fca0:	eba0 000a 	sub.w	r0, r0, sl
 800fca4:	fa03 f000 	lsl.w	r0, r3, r0
 800fca8:	9b04      	ldr	r3, [sp, #16]
 800fcaa:	3401      	adds	r4, #1
 800fcac:	4303      	orrs	r3, r0
 800fcae:	9304      	str	r3, [sp, #16]
 800fcb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcb4:	2206      	movs	r2, #6
 800fcb6:	482d      	ldr	r0, [pc, #180]	; (800fd6c <_vfiprintf_r+0x254>)
 800fcb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcbc:	f7ff f882 	bl	800edc4 <memchr>
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	d03f      	beq.n	800fd44 <_vfiprintf_r+0x22c>
 800fcc4:	4b2a      	ldr	r3, [pc, #168]	; (800fd70 <_vfiprintf_r+0x258>)
 800fcc6:	bb1b      	cbnz	r3, 800fd10 <_vfiprintf_r+0x1f8>
 800fcc8:	9b03      	ldr	r3, [sp, #12]
 800fcca:	3307      	adds	r3, #7
 800fccc:	f023 0307 	bic.w	r3, r3, #7
 800fcd0:	3308      	adds	r3, #8
 800fcd2:	9303      	str	r3, [sp, #12]
 800fcd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcd6:	443b      	add	r3, r7
 800fcd8:	9309      	str	r3, [sp, #36]	; 0x24
 800fcda:	e767      	b.n	800fbac <_vfiprintf_r+0x94>
 800fcdc:	460c      	mov	r4, r1
 800fcde:	2001      	movs	r0, #1
 800fce0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fce4:	e7a5      	b.n	800fc32 <_vfiprintf_r+0x11a>
 800fce6:	2300      	movs	r3, #0
 800fce8:	f04f 0c0a 	mov.w	ip, #10
 800fcec:	4619      	mov	r1, r3
 800fcee:	3401      	adds	r4, #1
 800fcf0:	9305      	str	r3, [sp, #20]
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcf8:	3a30      	subs	r2, #48	; 0x30
 800fcfa:	2a09      	cmp	r2, #9
 800fcfc:	d903      	bls.n	800fd06 <_vfiprintf_r+0x1ee>
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d0c5      	beq.n	800fc8e <_vfiprintf_r+0x176>
 800fd02:	9105      	str	r1, [sp, #20]
 800fd04:	e7c3      	b.n	800fc8e <_vfiprintf_r+0x176>
 800fd06:	4604      	mov	r4, r0
 800fd08:	2301      	movs	r3, #1
 800fd0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd0e:	e7f0      	b.n	800fcf2 <_vfiprintf_r+0x1da>
 800fd10:	ab03      	add	r3, sp, #12
 800fd12:	9300      	str	r3, [sp, #0]
 800fd14:	462a      	mov	r2, r5
 800fd16:	4630      	mov	r0, r6
 800fd18:	4b16      	ldr	r3, [pc, #88]	; (800fd74 <_vfiprintf_r+0x25c>)
 800fd1a:	a904      	add	r1, sp, #16
 800fd1c:	f7fd fdd4 	bl	800d8c8 <_printf_float>
 800fd20:	4607      	mov	r7, r0
 800fd22:	1c78      	adds	r0, r7, #1
 800fd24:	d1d6      	bne.n	800fcd4 <_vfiprintf_r+0x1bc>
 800fd26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd28:	07d9      	lsls	r1, r3, #31
 800fd2a:	d405      	bmi.n	800fd38 <_vfiprintf_r+0x220>
 800fd2c:	89ab      	ldrh	r3, [r5, #12]
 800fd2e:	059a      	lsls	r2, r3, #22
 800fd30:	d402      	bmi.n	800fd38 <_vfiprintf_r+0x220>
 800fd32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd34:	f000 faab 	bl	801028e <__retarget_lock_release_recursive>
 800fd38:	89ab      	ldrh	r3, [r5, #12]
 800fd3a:	065b      	lsls	r3, r3, #25
 800fd3c:	f53f af12 	bmi.w	800fb64 <_vfiprintf_r+0x4c>
 800fd40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd42:	e711      	b.n	800fb68 <_vfiprintf_r+0x50>
 800fd44:	ab03      	add	r3, sp, #12
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	462a      	mov	r2, r5
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	4b09      	ldr	r3, [pc, #36]	; (800fd74 <_vfiprintf_r+0x25c>)
 800fd4e:	a904      	add	r1, sp, #16
 800fd50:	f7fe f856 	bl	800de00 <_printf_i>
 800fd54:	e7e4      	b.n	800fd20 <_vfiprintf_r+0x208>
 800fd56:	bf00      	nop
 800fd58:	080110a4 	.word	0x080110a4
 800fd5c:	080110c4 	.word	0x080110c4
 800fd60:	08011084 	.word	0x08011084
 800fd64:	08010f2c 	.word	0x08010f2c
 800fd68:	08010f32 	.word	0x08010f32
 800fd6c:	08010f36 	.word	0x08010f36
 800fd70:	0800d8c9 	.word	0x0800d8c9
 800fd74:	0800faf5 	.word	0x0800faf5

0800fd78 <__swbuf_r>:
 800fd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd7a:	460e      	mov	r6, r1
 800fd7c:	4614      	mov	r4, r2
 800fd7e:	4605      	mov	r5, r0
 800fd80:	b118      	cbz	r0, 800fd8a <__swbuf_r+0x12>
 800fd82:	6983      	ldr	r3, [r0, #24]
 800fd84:	b90b      	cbnz	r3, 800fd8a <__swbuf_r+0x12>
 800fd86:	f000 f9e3 	bl	8010150 <__sinit>
 800fd8a:	4b21      	ldr	r3, [pc, #132]	; (800fe10 <__swbuf_r+0x98>)
 800fd8c:	429c      	cmp	r4, r3
 800fd8e:	d12b      	bne.n	800fde8 <__swbuf_r+0x70>
 800fd90:	686c      	ldr	r4, [r5, #4]
 800fd92:	69a3      	ldr	r3, [r4, #24]
 800fd94:	60a3      	str	r3, [r4, #8]
 800fd96:	89a3      	ldrh	r3, [r4, #12]
 800fd98:	071a      	lsls	r2, r3, #28
 800fd9a:	d52f      	bpl.n	800fdfc <__swbuf_r+0x84>
 800fd9c:	6923      	ldr	r3, [r4, #16]
 800fd9e:	b36b      	cbz	r3, 800fdfc <__swbuf_r+0x84>
 800fda0:	6923      	ldr	r3, [r4, #16]
 800fda2:	6820      	ldr	r0, [r4, #0]
 800fda4:	b2f6      	uxtb	r6, r6
 800fda6:	1ac0      	subs	r0, r0, r3
 800fda8:	6963      	ldr	r3, [r4, #20]
 800fdaa:	4637      	mov	r7, r6
 800fdac:	4283      	cmp	r3, r0
 800fdae:	dc04      	bgt.n	800fdba <__swbuf_r+0x42>
 800fdb0:	4621      	mov	r1, r4
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	f000 f938 	bl	8010028 <_fflush_r>
 800fdb8:	bb30      	cbnz	r0, 800fe08 <__swbuf_r+0x90>
 800fdba:	68a3      	ldr	r3, [r4, #8]
 800fdbc:	3001      	adds	r0, #1
 800fdbe:	3b01      	subs	r3, #1
 800fdc0:	60a3      	str	r3, [r4, #8]
 800fdc2:	6823      	ldr	r3, [r4, #0]
 800fdc4:	1c5a      	adds	r2, r3, #1
 800fdc6:	6022      	str	r2, [r4, #0]
 800fdc8:	701e      	strb	r6, [r3, #0]
 800fdca:	6963      	ldr	r3, [r4, #20]
 800fdcc:	4283      	cmp	r3, r0
 800fdce:	d004      	beq.n	800fdda <__swbuf_r+0x62>
 800fdd0:	89a3      	ldrh	r3, [r4, #12]
 800fdd2:	07db      	lsls	r3, r3, #31
 800fdd4:	d506      	bpl.n	800fde4 <__swbuf_r+0x6c>
 800fdd6:	2e0a      	cmp	r6, #10
 800fdd8:	d104      	bne.n	800fde4 <__swbuf_r+0x6c>
 800fdda:	4621      	mov	r1, r4
 800fddc:	4628      	mov	r0, r5
 800fdde:	f000 f923 	bl	8010028 <_fflush_r>
 800fde2:	b988      	cbnz	r0, 800fe08 <__swbuf_r+0x90>
 800fde4:	4638      	mov	r0, r7
 800fde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fde8:	4b0a      	ldr	r3, [pc, #40]	; (800fe14 <__swbuf_r+0x9c>)
 800fdea:	429c      	cmp	r4, r3
 800fdec:	d101      	bne.n	800fdf2 <__swbuf_r+0x7a>
 800fdee:	68ac      	ldr	r4, [r5, #8]
 800fdf0:	e7cf      	b.n	800fd92 <__swbuf_r+0x1a>
 800fdf2:	4b09      	ldr	r3, [pc, #36]	; (800fe18 <__swbuf_r+0xa0>)
 800fdf4:	429c      	cmp	r4, r3
 800fdf6:	bf08      	it	eq
 800fdf8:	68ec      	ldreq	r4, [r5, #12]
 800fdfa:	e7ca      	b.n	800fd92 <__swbuf_r+0x1a>
 800fdfc:	4621      	mov	r1, r4
 800fdfe:	4628      	mov	r0, r5
 800fe00:	f000 f81a 	bl	800fe38 <__swsetup_r>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d0cb      	beq.n	800fda0 <__swbuf_r+0x28>
 800fe08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fe0c:	e7ea      	b.n	800fde4 <__swbuf_r+0x6c>
 800fe0e:	bf00      	nop
 800fe10:	080110a4 	.word	0x080110a4
 800fe14:	080110c4 	.word	0x080110c4
 800fe18:	08011084 	.word	0x08011084

0800fe1c <__ascii_wctomb>:
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	4608      	mov	r0, r1
 800fe20:	b141      	cbz	r1, 800fe34 <__ascii_wctomb+0x18>
 800fe22:	2aff      	cmp	r2, #255	; 0xff
 800fe24:	d904      	bls.n	800fe30 <__ascii_wctomb+0x14>
 800fe26:	228a      	movs	r2, #138	; 0x8a
 800fe28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe2c:	601a      	str	r2, [r3, #0]
 800fe2e:	4770      	bx	lr
 800fe30:	2001      	movs	r0, #1
 800fe32:	700a      	strb	r2, [r1, #0]
 800fe34:	4770      	bx	lr
	...

0800fe38 <__swsetup_r>:
 800fe38:	4b32      	ldr	r3, [pc, #200]	; (800ff04 <__swsetup_r+0xcc>)
 800fe3a:	b570      	push	{r4, r5, r6, lr}
 800fe3c:	681d      	ldr	r5, [r3, #0]
 800fe3e:	4606      	mov	r6, r0
 800fe40:	460c      	mov	r4, r1
 800fe42:	b125      	cbz	r5, 800fe4e <__swsetup_r+0x16>
 800fe44:	69ab      	ldr	r3, [r5, #24]
 800fe46:	b913      	cbnz	r3, 800fe4e <__swsetup_r+0x16>
 800fe48:	4628      	mov	r0, r5
 800fe4a:	f000 f981 	bl	8010150 <__sinit>
 800fe4e:	4b2e      	ldr	r3, [pc, #184]	; (800ff08 <__swsetup_r+0xd0>)
 800fe50:	429c      	cmp	r4, r3
 800fe52:	d10f      	bne.n	800fe74 <__swsetup_r+0x3c>
 800fe54:	686c      	ldr	r4, [r5, #4]
 800fe56:	89a3      	ldrh	r3, [r4, #12]
 800fe58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe5c:	0719      	lsls	r1, r3, #28
 800fe5e:	d42c      	bmi.n	800feba <__swsetup_r+0x82>
 800fe60:	06dd      	lsls	r5, r3, #27
 800fe62:	d411      	bmi.n	800fe88 <__swsetup_r+0x50>
 800fe64:	2309      	movs	r3, #9
 800fe66:	6033      	str	r3, [r6, #0]
 800fe68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fe6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe70:	81a3      	strh	r3, [r4, #12]
 800fe72:	e03e      	b.n	800fef2 <__swsetup_r+0xba>
 800fe74:	4b25      	ldr	r3, [pc, #148]	; (800ff0c <__swsetup_r+0xd4>)
 800fe76:	429c      	cmp	r4, r3
 800fe78:	d101      	bne.n	800fe7e <__swsetup_r+0x46>
 800fe7a:	68ac      	ldr	r4, [r5, #8]
 800fe7c:	e7eb      	b.n	800fe56 <__swsetup_r+0x1e>
 800fe7e:	4b24      	ldr	r3, [pc, #144]	; (800ff10 <__swsetup_r+0xd8>)
 800fe80:	429c      	cmp	r4, r3
 800fe82:	bf08      	it	eq
 800fe84:	68ec      	ldreq	r4, [r5, #12]
 800fe86:	e7e6      	b.n	800fe56 <__swsetup_r+0x1e>
 800fe88:	0758      	lsls	r0, r3, #29
 800fe8a:	d512      	bpl.n	800feb2 <__swsetup_r+0x7a>
 800fe8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe8e:	b141      	cbz	r1, 800fea2 <__swsetup_r+0x6a>
 800fe90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe94:	4299      	cmp	r1, r3
 800fe96:	d002      	beq.n	800fe9e <__swsetup_r+0x66>
 800fe98:	4630      	mov	r0, r6
 800fe9a:	f7ff fb37 	bl	800f50c <_free_r>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	6363      	str	r3, [r4, #52]	; 0x34
 800fea2:	89a3      	ldrh	r3, [r4, #12]
 800fea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fea8:	81a3      	strh	r3, [r4, #12]
 800feaa:	2300      	movs	r3, #0
 800feac:	6063      	str	r3, [r4, #4]
 800feae:	6923      	ldr	r3, [r4, #16]
 800feb0:	6023      	str	r3, [r4, #0]
 800feb2:	89a3      	ldrh	r3, [r4, #12]
 800feb4:	f043 0308 	orr.w	r3, r3, #8
 800feb8:	81a3      	strh	r3, [r4, #12]
 800feba:	6923      	ldr	r3, [r4, #16]
 800febc:	b94b      	cbnz	r3, 800fed2 <__swsetup_r+0x9a>
 800febe:	89a3      	ldrh	r3, [r4, #12]
 800fec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fec8:	d003      	beq.n	800fed2 <__swsetup_r+0x9a>
 800feca:	4621      	mov	r1, r4
 800fecc:	4630      	mov	r0, r6
 800fece:	f000 fa05 	bl	80102dc <__smakebuf_r>
 800fed2:	89a0      	ldrh	r0, [r4, #12]
 800fed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fed8:	f010 0301 	ands.w	r3, r0, #1
 800fedc:	d00a      	beq.n	800fef4 <__swsetup_r+0xbc>
 800fede:	2300      	movs	r3, #0
 800fee0:	60a3      	str	r3, [r4, #8]
 800fee2:	6963      	ldr	r3, [r4, #20]
 800fee4:	425b      	negs	r3, r3
 800fee6:	61a3      	str	r3, [r4, #24]
 800fee8:	6923      	ldr	r3, [r4, #16]
 800feea:	b943      	cbnz	r3, 800fefe <__swsetup_r+0xc6>
 800feec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fef0:	d1ba      	bne.n	800fe68 <__swsetup_r+0x30>
 800fef2:	bd70      	pop	{r4, r5, r6, pc}
 800fef4:	0781      	lsls	r1, r0, #30
 800fef6:	bf58      	it	pl
 800fef8:	6963      	ldrpl	r3, [r4, #20]
 800fefa:	60a3      	str	r3, [r4, #8]
 800fefc:	e7f4      	b.n	800fee8 <__swsetup_r+0xb0>
 800fefe:	2000      	movs	r0, #0
 800ff00:	e7f7      	b.n	800fef2 <__swsetup_r+0xba>
 800ff02:	bf00      	nop
 800ff04:	20000070 	.word	0x20000070
 800ff08:	080110a4 	.word	0x080110a4
 800ff0c:	080110c4 	.word	0x080110c4
 800ff10:	08011084 	.word	0x08011084

0800ff14 <abort>:
 800ff14:	2006      	movs	r0, #6
 800ff16:	b508      	push	{r3, lr}
 800ff18:	f000 fa50 	bl	80103bc <raise>
 800ff1c:	2001      	movs	r0, #1
 800ff1e:	f7f2 fdf0 	bl	8002b02 <_exit>
	...

0800ff24 <__sflush_r>:
 800ff24:	898a      	ldrh	r2, [r1, #12]
 800ff26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff28:	4605      	mov	r5, r0
 800ff2a:	0710      	lsls	r0, r2, #28
 800ff2c:	460c      	mov	r4, r1
 800ff2e:	d457      	bmi.n	800ffe0 <__sflush_r+0xbc>
 800ff30:	684b      	ldr	r3, [r1, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	dc04      	bgt.n	800ff40 <__sflush_r+0x1c>
 800ff36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	dc01      	bgt.n	800ff40 <__sflush_r+0x1c>
 800ff3c:	2000      	movs	r0, #0
 800ff3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff42:	2e00      	cmp	r6, #0
 800ff44:	d0fa      	beq.n	800ff3c <__sflush_r+0x18>
 800ff46:	2300      	movs	r3, #0
 800ff48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff4c:	682f      	ldr	r7, [r5, #0]
 800ff4e:	602b      	str	r3, [r5, #0]
 800ff50:	d032      	beq.n	800ffb8 <__sflush_r+0x94>
 800ff52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff54:	89a3      	ldrh	r3, [r4, #12]
 800ff56:	075a      	lsls	r2, r3, #29
 800ff58:	d505      	bpl.n	800ff66 <__sflush_r+0x42>
 800ff5a:	6863      	ldr	r3, [r4, #4]
 800ff5c:	1ac0      	subs	r0, r0, r3
 800ff5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff60:	b10b      	cbz	r3, 800ff66 <__sflush_r+0x42>
 800ff62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff64:	1ac0      	subs	r0, r0, r3
 800ff66:	2300      	movs	r3, #0
 800ff68:	4602      	mov	r2, r0
 800ff6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	6a21      	ldr	r1, [r4, #32]
 800ff70:	47b0      	blx	r6
 800ff72:	1c43      	adds	r3, r0, #1
 800ff74:	89a3      	ldrh	r3, [r4, #12]
 800ff76:	d106      	bne.n	800ff86 <__sflush_r+0x62>
 800ff78:	6829      	ldr	r1, [r5, #0]
 800ff7a:	291d      	cmp	r1, #29
 800ff7c:	d82c      	bhi.n	800ffd8 <__sflush_r+0xb4>
 800ff7e:	4a29      	ldr	r2, [pc, #164]	; (8010024 <__sflush_r+0x100>)
 800ff80:	40ca      	lsrs	r2, r1
 800ff82:	07d6      	lsls	r6, r2, #31
 800ff84:	d528      	bpl.n	800ffd8 <__sflush_r+0xb4>
 800ff86:	2200      	movs	r2, #0
 800ff88:	6062      	str	r2, [r4, #4]
 800ff8a:	6922      	ldr	r2, [r4, #16]
 800ff8c:	04d9      	lsls	r1, r3, #19
 800ff8e:	6022      	str	r2, [r4, #0]
 800ff90:	d504      	bpl.n	800ff9c <__sflush_r+0x78>
 800ff92:	1c42      	adds	r2, r0, #1
 800ff94:	d101      	bne.n	800ff9a <__sflush_r+0x76>
 800ff96:	682b      	ldr	r3, [r5, #0]
 800ff98:	b903      	cbnz	r3, 800ff9c <__sflush_r+0x78>
 800ff9a:	6560      	str	r0, [r4, #84]	; 0x54
 800ff9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff9e:	602f      	str	r7, [r5, #0]
 800ffa0:	2900      	cmp	r1, #0
 800ffa2:	d0cb      	beq.n	800ff3c <__sflush_r+0x18>
 800ffa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffa8:	4299      	cmp	r1, r3
 800ffaa:	d002      	beq.n	800ffb2 <__sflush_r+0x8e>
 800ffac:	4628      	mov	r0, r5
 800ffae:	f7ff faad 	bl	800f50c <_free_r>
 800ffb2:	2000      	movs	r0, #0
 800ffb4:	6360      	str	r0, [r4, #52]	; 0x34
 800ffb6:	e7c2      	b.n	800ff3e <__sflush_r+0x1a>
 800ffb8:	6a21      	ldr	r1, [r4, #32]
 800ffba:	2301      	movs	r3, #1
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	47b0      	blx	r6
 800ffc0:	1c41      	adds	r1, r0, #1
 800ffc2:	d1c7      	bne.n	800ff54 <__sflush_r+0x30>
 800ffc4:	682b      	ldr	r3, [r5, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d0c4      	beq.n	800ff54 <__sflush_r+0x30>
 800ffca:	2b1d      	cmp	r3, #29
 800ffcc:	d001      	beq.n	800ffd2 <__sflush_r+0xae>
 800ffce:	2b16      	cmp	r3, #22
 800ffd0:	d101      	bne.n	800ffd6 <__sflush_r+0xb2>
 800ffd2:	602f      	str	r7, [r5, #0]
 800ffd4:	e7b2      	b.n	800ff3c <__sflush_r+0x18>
 800ffd6:	89a3      	ldrh	r3, [r4, #12]
 800ffd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffdc:	81a3      	strh	r3, [r4, #12]
 800ffde:	e7ae      	b.n	800ff3e <__sflush_r+0x1a>
 800ffe0:	690f      	ldr	r7, [r1, #16]
 800ffe2:	2f00      	cmp	r7, #0
 800ffe4:	d0aa      	beq.n	800ff3c <__sflush_r+0x18>
 800ffe6:	0793      	lsls	r3, r2, #30
 800ffe8:	bf18      	it	ne
 800ffea:	2300      	movne	r3, #0
 800ffec:	680e      	ldr	r6, [r1, #0]
 800ffee:	bf08      	it	eq
 800fff0:	694b      	ldreq	r3, [r1, #20]
 800fff2:	1bf6      	subs	r6, r6, r7
 800fff4:	600f      	str	r7, [r1, #0]
 800fff6:	608b      	str	r3, [r1, #8]
 800fff8:	2e00      	cmp	r6, #0
 800fffa:	dd9f      	ble.n	800ff3c <__sflush_r+0x18>
 800fffc:	4633      	mov	r3, r6
 800fffe:	463a      	mov	r2, r7
 8010000:	4628      	mov	r0, r5
 8010002:	6a21      	ldr	r1, [r4, #32]
 8010004:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8010008:	47e0      	blx	ip
 801000a:	2800      	cmp	r0, #0
 801000c:	dc06      	bgt.n	801001c <__sflush_r+0xf8>
 801000e:	89a3      	ldrh	r3, [r4, #12]
 8010010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010018:	81a3      	strh	r3, [r4, #12]
 801001a:	e790      	b.n	800ff3e <__sflush_r+0x1a>
 801001c:	4407      	add	r7, r0
 801001e:	1a36      	subs	r6, r6, r0
 8010020:	e7ea      	b.n	800fff8 <__sflush_r+0xd4>
 8010022:	bf00      	nop
 8010024:	20400001 	.word	0x20400001

08010028 <_fflush_r>:
 8010028:	b538      	push	{r3, r4, r5, lr}
 801002a:	690b      	ldr	r3, [r1, #16]
 801002c:	4605      	mov	r5, r0
 801002e:	460c      	mov	r4, r1
 8010030:	b913      	cbnz	r3, 8010038 <_fflush_r+0x10>
 8010032:	2500      	movs	r5, #0
 8010034:	4628      	mov	r0, r5
 8010036:	bd38      	pop	{r3, r4, r5, pc}
 8010038:	b118      	cbz	r0, 8010042 <_fflush_r+0x1a>
 801003a:	6983      	ldr	r3, [r0, #24]
 801003c:	b90b      	cbnz	r3, 8010042 <_fflush_r+0x1a>
 801003e:	f000 f887 	bl	8010150 <__sinit>
 8010042:	4b14      	ldr	r3, [pc, #80]	; (8010094 <_fflush_r+0x6c>)
 8010044:	429c      	cmp	r4, r3
 8010046:	d11b      	bne.n	8010080 <_fflush_r+0x58>
 8010048:	686c      	ldr	r4, [r5, #4]
 801004a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d0ef      	beq.n	8010032 <_fflush_r+0xa>
 8010052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010054:	07d0      	lsls	r0, r2, #31
 8010056:	d404      	bmi.n	8010062 <_fflush_r+0x3a>
 8010058:	0599      	lsls	r1, r3, #22
 801005a:	d402      	bmi.n	8010062 <_fflush_r+0x3a>
 801005c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801005e:	f000 f915 	bl	801028c <__retarget_lock_acquire_recursive>
 8010062:	4628      	mov	r0, r5
 8010064:	4621      	mov	r1, r4
 8010066:	f7ff ff5d 	bl	800ff24 <__sflush_r>
 801006a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801006c:	4605      	mov	r5, r0
 801006e:	07da      	lsls	r2, r3, #31
 8010070:	d4e0      	bmi.n	8010034 <_fflush_r+0xc>
 8010072:	89a3      	ldrh	r3, [r4, #12]
 8010074:	059b      	lsls	r3, r3, #22
 8010076:	d4dd      	bmi.n	8010034 <_fflush_r+0xc>
 8010078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801007a:	f000 f908 	bl	801028e <__retarget_lock_release_recursive>
 801007e:	e7d9      	b.n	8010034 <_fflush_r+0xc>
 8010080:	4b05      	ldr	r3, [pc, #20]	; (8010098 <_fflush_r+0x70>)
 8010082:	429c      	cmp	r4, r3
 8010084:	d101      	bne.n	801008a <_fflush_r+0x62>
 8010086:	68ac      	ldr	r4, [r5, #8]
 8010088:	e7df      	b.n	801004a <_fflush_r+0x22>
 801008a:	4b04      	ldr	r3, [pc, #16]	; (801009c <_fflush_r+0x74>)
 801008c:	429c      	cmp	r4, r3
 801008e:	bf08      	it	eq
 8010090:	68ec      	ldreq	r4, [r5, #12]
 8010092:	e7da      	b.n	801004a <_fflush_r+0x22>
 8010094:	080110a4 	.word	0x080110a4
 8010098:	080110c4 	.word	0x080110c4
 801009c:	08011084 	.word	0x08011084

080100a0 <std>:
 80100a0:	2300      	movs	r3, #0
 80100a2:	b510      	push	{r4, lr}
 80100a4:	4604      	mov	r4, r0
 80100a6:	e9c0 3300 	strd	r3, r3, [r0]
 80100aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100ae:	6083      	str	r3, [r0, #8]
 80100b0:	8181      	strh	r1, [r0, #12]
 80100b2:	6643      	str	r3, [r0, #100]	; 0x64
 80100b4:	81c2      	strh	r2, [r0, #14]
 80100b6:	6183      	str	r3, [r0, #24]
 80100b8:	4619      	mov	r1, r3
 80100ba:	2208      	movs	r2, #8
 80100bc:	305c      	adds	r0, #92	; 0x5c
 80100be:	f7fd fb5d 	bl	800d77c <memset>
 80100c2:	4b05      	ldr	r3, [pc, #20]	; (80100d8 <std+0x38>)
 80100c4:	6224      	str	r4, [r4, #32]
 80100c6:	6263      	str	r3, [r4, #36]	; 0x24
 80100c8:	4b04      	ldr	r3, [pc, #16]	; (80100dc <std+0x3c>)
 80100ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80100cc:	4b04      	ldr	r3, [pc, #16]	; (80100e0 <std+0x40>)
 80100ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80100d0:	4b04      	ldr	r3, [pc, #16]	; (80100e4 <std+0x44>)
 80100d2:	6323      	str	r3, [r4, #48]	; 0x30
 80100d4:	bd10      	pop	{r4, pc}
 80100d6:	bf00      	nop
 80100d8:	080103f5 	.word	0x080103f5
 80100dc:	08010417 	.word	0x08010417
 80100e0:	0801044f 	.word	0x0801044f
 80100e4:	08010473 	.word	0x08010473

080100e8 <_cleanup_r>:
 80100e8:	4901      	ldr	r1, [pc, #4]	; (80100f0 <_cleanup_r+0x8>)
 80100ea:	f000 b8af 	b.w	801024c <_fwalk_reent>
 80100ee:	bf00      	nop
 80100f0:	08010029 	.word	0x08010029

080100f4 <__sfmoreglue>:
 80100f4:	2268      	movs	r2, #104	; 0x68
 80100f6:	b570      	push	{r4, r5, r6, lr}
 80100f8:	1e4d      	subs	r5, r1, #1
 80100fa:	4355      	muls	r5, r2
 80100fc:	460e      	mov	r6, r1
 80100fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010102:	f7ff fa6b 	bl	800f5dc <_malloc_r>
 8010106:	4604      	mov	r4, r0
 8010108:	b140      	cbz	r0, 801011c <__sfmoreglue+0x28>
 801010a:	2100      	movs	r1, #0
 801010c:	e9c0 1600 	strd	r1, r6, [r0]
 8010110:	300c      	adds	r0, #12
 8010112:	60a0      	str	r0, [r4, #8]
 8010114:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010118:	f7fd fb30 	bl	800d77c <memset>
 801011c:	4620      	mov	r0, r4
 801011e:	bd70      	pop	{r4, r5, r6, pc}

08010120 <__sfp_lock_acquire>:
 8010120:	4801      	ldr	r0, [pc, #4]	; (8010128 <__sfp_lock_acquire+0x8>)
 8010122:	f000 b8b3 	b.w	801028c <__retarget_lock_acquire_recursive>
 8010126:	bf00      	nop
 8010128:	20000291 	.word	0x20000291

0801012c <__sfp_lock_release>:
 801012c:	4801      	ldr	r0, [pc, #4]	; (8010134 <__sfp_lock_release+0x8>)
 801012e:	f000 b8ae 	b.w	801028e <__retarget_lock_release_recursive>
 8010132:	bf00      	nop
 8010134:	20000291 	.word	0x20000291

08010138 <__sinit_lock_acquire>:
 8010138:	4801      	ldr	r0, [pc, #4]	; (8010140 <__sinit_lock_acquire+0x8>)
 801013a:	f000 b8a7 	b.w	801028c <__retarget_lock_acquire_recursive>
 801013e:	bf00      	nop
 8010140:	20000292 	.word	0x20000292

08010144 <__sinit_lock_release>:
 8010144:	4801      	ldr	r0, [pc, #4]	; (801014c <__sinit_lock_release+0x8>)
 8010146:	f000 b8a2 	b.w	801028e <__retarget_lock_release_recursive>
 801014a:	bf00      	nop
 801014c:	20000292 	.word	0x20000292

08010150 <__sinit>:
 8010150:	b510      	push	{r4, lr}
 8010152:	4604      	mov	r4, r0
 8010154:	f7ff fff0 	bl	8010138 <__sinit_lock_acquire>
 8010158:	69a3      	ldr	r3, [r4, #24]
 801015a:	b11b      	cbz	r3, 8010164 <__sinit+0x14>
 801015c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010160:	f7ff bff0 	b.w	8010144 <__sinit_lock_release>
 8010164:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010168:	6523      	str	r3, [r4, #80]	; 0x50
 801016a:	4b13      	ldr	r3, [pc, #76]	; (80101b8 <__sinit+0x68>)
 801016c:	4a13      	ldr	r2, [pc, #76]	; (80101bc <__sinit+0x6c>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	62a2      	str	r2, [r4, #40]	; 0x28
 8010172:	42a3      	cmp	r3, r4
 8010174:	bf08      	it	eq
 8010176:	2301      	moveq	r3, #1
 8010178:	4620      	mov	r0, r4
 801017a:	bf08      	it	eq
 801017c:	61a3      	streq	r3, [r4, #24]
 801017e:	f000 f81f 	bl	80101c0 <__sfp>
 8010182:	6060      	str	r0, [r4, #4]
 8010184:	4620      	mov	r0, r4
 8010186:	f000 f81b 	bl	80101c0 <__sfp>
 801018a:	60a0      	str	r0, [r4, #8]
 801018c:	4620      	mov	r0, r4
 801018e:	f000 f817 	bl	80101c0 <__sfp>
 8010192:	2200      	movs	r2, #0
 8010194:	2104      	movs	r1, #4
 8010196:	60e0      	str	r0, [r4, #12]
 8010198:	6860      	ldr	r0, [r4, #4]
 801019a:	f7ff ff81 	bl	80100a0 <std>
 801019e:	2201      	movs	r2, #1
 80101a0:	2109      	movs	r1, #9
 80101a2:	68a0      	ldr	r0, [r4, #8]
 80101a4:	f7ff ff7c 	bl	80100a0 <std>
 80101a8:	2202      	movs	r2, #2
 80101aa:	2112      	movs	r1, #18
 80101ac:	68e0      	ldr	r0, [r4, #12]
 80101ae:	f7ff ff77 	bl	80100a0 <std>
 80101b2:	2301      	movs	r3, #1
 80101b4:	61a3      	str	r3, [r4, #24]
 80101b6:	e7d1      	b.n	801015c <__sinit+0xc>
 80101b8:	08010d08 	.word	0x08010d08
 80101bc:	080100e9 	.word	0x080100e9

080101c0 <__sfp>:
 80101c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101c2:	4607      	mov	r7, r0
 80101c4:	f7ff ffac 	bl	8010120 <__sfp_lock_acquire>
 80101c8:	4b1e      	ldr	r3, [pc, #120]	; (8010244 <__sfp+0x84>)
 80101ca:	681e      	ldr	r6, [r3, #0]
 80101cc:	69b3      	ldr	r3, [r6, #24]
 80101ce:	b913      	cbnz	r3, 80101d6 <__sfp+0x16>
 80101d0:	4630      	mov	r0, r6
 80101d2:	f7ff ffbd 	bl	8010150 <__sinit>
 80101d6:	3648      	adds	r6, #72	; 0x48
 80101d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80101dc:	3b01      	subs	r3, #1
 80101de:	d503      	bpl.n	80101e8 <__sfp+0x28>
 80101e0:	6833      	ldr	r3, [r6, #0]
 80101e2:	b30b      	cbz	r3, 8010228 <__sfp+0x68>
 80101e4:	6836      	ldr	r6, [r6, #0]
 80101e6:	e7f7      	b.n	80101d8 <__sfp+0x18>
 80101e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80101ec:	b9d5      	cbnz	r5, 8010224 <__sfp+0x64>
 80101ee:	4b16      	ldr	r3, [pc, #88]	; (8010248 <__sfp+0x88>)
 80101f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80101f4:	60e3      	str	r3, [r4, #12]
 80101f6:	6665      	str	r5, [r4, #100]	; 0x64
 80101f8:	f000 f847 	bl	801028a <__retarget_lock_init_recursive>
 80101fc:	f7ff ff96 	bl	801012c <__sfp_lock_release>
 8010200:	2208      	movs	r2, #8
 8010202:	4629      	mov	r1, r5
 8010204:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010208:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801020c:	6025      	str	r5, [r4, #0]
 801020e:	61a5      	str	r5, [r4, #24]
 8010210:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010214:	f7fd fab2 	bl	800d77c <memset>
 8010218:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801021c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010220:	4620      	mov	r0, r4
 8010222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010224:	3468      	adds	r4, #104	; 0x68
 8010226:	e7d9      	b.n	80101dc <__sfp+0x1c>
 8010228:	2104      	movs	r1, #4
 801022a:	4638      	mov	r0, r7
 801022c:	f7ff ff62 	bl	80100f4 <__sfmoreglue>
 8010230:	4604      	mov	r4, r0
 8010232:	6030      	str	r0, [r6, #0]
 8010234:	2800      	cmp	r0, #0
 8010236:	d1d5      	bne.n	80101e4 <__sfp+0x24>
 8010238:	f7ff ff78 	bl	801012c <__sfp_lock_release>
 801023c:	230c      	movs	r3, #12
 801023e:	603b      	str	r3, [r7, #0]
 8010240:	e7ee      	b.n	8010220 <__sfp+0x60>
 8010242:	bf00      	nop
 8010244:	08010d08 	.word	0x08010d08
 8010248:	ffff0001 	.word	0xffff0001

0801024c <_fwalk_reent>:
 801024c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010250:	4606      	mov	r6, r0
 8010252:	4688      	mov	r8, r1
 8010254:	2700      	movs	r7, #0
 8010256:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801025a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801025e:	f1b9 0901 	subs.w	r9, r9, #1
 8010262:	d505      	bpl.n	8010270 <_fwalk_reent+0x24>
 8010264:	6824      	ldr	r4, [r4, #0]
 8010266:	2c00      	cmp	r4, #0
 8010268:	d1f7      	bne.n	801025a <_fwalk_reent+0xe>
 801026a:	4638      	mov	r0, r7
 801026c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010270:	89ab      	ldrh	r3, [r5, #12]
 8010272:	2b01      	cmp	r3, #1
 8010274:	d907      	bls.n	8010286 <_fwalk_reent+0x3a>
 8010276:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801027a:	3301      	adds	r3, #1
 801027c:	d003      	beq.n	8010286 <_fwalk_reent+0x3a>
 801027e:	4629      	mov	r1, r5
 8010280:	4630      	mov	r0, r6
 8010282:	47c0      	blx	r8
 8010284:	4307      	orrs	r7, r0
 8010286:	3568      	adds	r5, #104	; 0x68
 8010288:	e7e9      	b.n	801025e <_fwalk_reent+0x12>

0801028a <__retarget_lock_init_recursive>:
 801028a:	4770      	bx	lr

0801028c <__retarget_lock_acquire_recursive>:
 801028c:	4770      	bx	lr

0801028e <__retarget_lock_release_recursive>:
 801028e:	4770      	bx	lr

08010290 <__swhatbuf_r>:
 8010290:	b570      	push	{r4, r5, r6, lr}
 8010292:	460e      	mov	r6, r1
 8010294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010298:	4614      	mov	r4, r2
 801029a:	2900      	cmp	r1, #0
 801029c:	461d      	mov	r5, r3
 801029e:	b096      	sub	sp, #88	; 0x58
 80102a0:	da08      	bge.n	80102b4 <__swhatbuf_r+0x24>
 80102a2:	2200      	movs	r2, #0
 80102a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80102a8:	602a      	str	r2, [r5, #0]
 80102aa:	061a      	lsls	r2, r3, #24
 80102ac:	d410      	bmi.n	80102d0 <__swhatbuf_r+0x40>
 80102ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102b2:	e00e      	b.n	80102d2 <__swhatbuf_r+0x42>
 80102b4:	466a      	mov	r2, sp
 80102b6:	f000 f903 	bl	80104c0 <_fstat_r>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	dbf1      	blt.n	80102a2 <__swhatbuf_r+0x12>
 80102be:	9a01      	ldr	r2, [sp, #4]
 80102c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80102c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80102c8:	425a      	negs	r2, r3
 80102ca:	415a      	adcs	r2, r3
 80102cc:	602a      	str	r2, [r5, #0]
 80102ce:	e7ee      	b.n	80102ae <__swhatbuf_r+0x1e>
 80102d0:	2340      	movs	r3, #64	; 0x40
 80102d2:	2000      	movs	r0, #0
 80102d4:	6023      	str	r3, [r4, #0]
 80102d6:	b016      	add	sp, #88	; 0x58
 80102d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080102dc <__smakebuf_r>:
 80102dc:	898b      	ldrh	r3, [r1, #12]
 80102de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102e0:	079d      	lsls	r5, r3, #30
 80102e2:	4606      	mov	r6, r0
 80102e4:	460c      	mov	r4, r1
 80102e6:	d507      	bpl.n	80102f8 <__smakebuf_r+0x1c>
 80102e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80102ec:	6023      	str	r3, [r4, #0]
 80102ee:	6123      	str	r3, [r4, #16]
 80102f0:	2301      	movs	r3, #1
 80102f2:	6163      	str	r3, [r4, #20]
 80102f4:	b002      	add	sp, #8
 80102f6:	bd70      	pop	{r4, r5, r6, pc}
 80102f8:	466a      	mov	r2, sp
 80102fa:	ab01      	add	r3, sp, #4
 80102fc:	f7ff ffc8 	bl	8010290 <__swhatbuf_r>
 8010300:	9900      	ldr	r1, [sp, #0]
 8010302:	4605      	mov	r5, r0
 8010304:	4630      	mov	r0, r6
 8010306:	f7ff f969 	bl	800f5dc <_malloc_r>
 801030a:	b948      	cbnz	r0, 8010320 <__smakebuf_r+0x44>
 801030c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010310:	059a      	lsls	r2, r3, #22
 8010312:	d4ef      	bmi.n	80102f4 <__smakebuf_r+0x18>
 8010314:	f023 0303 	bic.w	r3, r3, #3
 8010318:	f043 0302 	orr.w	r3, r3, #2
 801031c:	81a3      	strh	r3, [r4, #12]
 801031e:	e7e3      	b.n	80102e8 <__smakebuf_r+0xc>
 8010320:	4b0d      	ldr	r3, [pc, #52]	; (8010358 <__smakebuf_r+0x7c>)
 8010322:	62b3      	str	r3, [r6, #40]	; 0x28
 8010324:	89a3      	ldrh	r3, [r4, #12]
 8010326:	6020      	str	r0, [r4, #0]
 8010328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801032c:	81a3      	strh	r3, [r4, #12]
 801032e:	9b00      	ldr	r3, [sp, #0]
 8010330:	6120      	str	r0, [r4, #16]
 8010332:	6163      	str	r3, [r4, #20]
 8010334:	9b01      	ldr	r3, [sp, #4]
 8010336:	b15b      	cbz	r3, 8010350 <__smakebuf_r+0x74>
 8010338:	4630      	mov	r0, r6
 801033a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801033e:	f000 f8d1 	bl	80104e4 <_isatty_r>
 8010342:	b128      	cbz	r0, 8010350 <__smakebuf_r+0x74>
 8010344:	89a3      	ldrh	r3, [r4, #12]
 8010346:	f023 0303 	bic.w	r3, r3, #3
 801034a:	f043 0301 	orr.w	r3, r3, #1
 801034e:	81a3      	strh	r3, [r4, #12]
 8010350:	89a0      	ldrh	r0, [r4, #12]
 8010352:	4305      	orrs	r5, r0
 8010354:	81a5      	strh	r5, [r4, #12]
 8010356:	e7cd      	b.n	80102f4 <__smakebuf_r+0x18>
 8010358:	080100e9 	.word	0x080100e9

0801035c <_malloc_usable_size_r>:
 801035c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010360:	1f18      	subs	r0, r3, #4
 8010362:	2b00      	cmp	r3, #0
 8010364:	bfbc      	itt	lt
 8010366:	580b      	ldrlt	r3, [r1, r0]
 8010368:	18c0      	addlt	r0, r0, r3
 801036a:	4770      	bx	lr

0801036c <_raise_r>:
 801036c:	291f      	cmp	r1, #31
 801036e:	b538      	push	{r3, r4, r5, lr}
 8010370:	4604      	mov	r4, r0
 8010372:	460d      	mov	r5, r1
 8010374:	d904      	bls.n	8010380 <_raise_r+0x14>
 8010376:	2316      	movs	r3, #22
 8010378:	6003      	str	r3, [r0, #0]
 801037a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801037e:	bd38      	pop	{r3, r4, r5, pc}
 8010380:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010382:	b112      	cbz	r2, 801038a <_raise_r+0x1e>
 8010384:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010388:	b94b      	cbnz	r3, 801039e <_raise_r+0x32>
 801038a:	4620      	mov	r0, r4
 801038c:	f000 f830 	bl	80103f0 <_getpid_r>
 8010390:	462a      	mov	r2, r5
 8010392:	4601      	mov	r1, r0
 8010394:	4620      	mov	r0, r4
 8010396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801039a:	f000 b817 	b.w	80103cc <_kill_r>
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d00a      	beq.n	80103b8 <_raise_r+0x4c>
 80103a2:	1c59      	adds	r1, r3, #1
 80103a4:	d103      	bne.n	80103ae <_raise_r+0x42>
 80103a6:	2316      	movs	r3, #22
 80103a8:	6003      	str	r3, [r0, #0]
 80103aa:	2001      	movs	r0, #1
 80103ac:	e7e7      	b.n	801037e <_raise_r+0x12>
 80103ae:	2400      	movs	r4, #0
 80103b0:	4628      	mov	r0, r5
 80103b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103b6:	4798      	blx	r3
 80103b8:	2000      	movs	r0, #0
 80103ba:	e7e0      	b.n	801037e <_raise_r+0x12>

080103bc <raise>:
 80103bc:	4b02      	ldr	r3, [pc, #8]	; (80103c8 <raise+0xc>)
 80103be:	4601      	mov	r1, r0
 80103c0:	6818      	ldr	r0, [r3, #0]
 80103c2:	f7ff bfd3 	b.w	801036c <_raise_r>
 80103c6:	bf00      	nop
 80103c8:	20000070 	.word	0x20000070

080103cc <_kill_r>:
 80103cc:	b538      	push	{r3, r4, r5, lr}
 80103ce:	2300      	movs	r3, #0
 80103d0:	4d06      	ldr	r5, [pc, #24]	; (80103ec <_kill_r+0x20>)
 80103d2:	4604      	mov	r4, r0
 80103d4:	4608      	mov	r0, r1
 80103d6:	4611      	mov	r1, r2
 80103d8:	602b      	str	r3, [r5, #0]
 80103da:	f7f2 fb82 	bl	8002ae2 <_kill>
 80103de:	1c43      	adds	r3, r0, #1
 80103e0:	d102      	bne.n	80103e8 <_kill_r+0x1c>
 80103e2:	682b      	ldr	r3, [r5, #0]
 80103e4:	b103      	cbz	r3, 80103e8 <_kill_r+0x1c>
 80103e6:	6023      	str	r3, [r4, #0]
 80103e8:	bd38      	pop	{r3, r4, r5, pc}
 80103ea:	bf00      	nop
 80103ec:	2000028c 	.word	0x2000028c

080103f0 <_getpid_r>:
 80103f0:	f7f2 bb70 	b.w	8002ad4 <_getpid>

080103f4 <__sread>:
 80103f4:	b510      	push	{r4, lr}
 80103f6:	460c      	mov	r4, r1
 80103f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103fc:	f000 f894 	bl	8010528 <_read_r>
 8010400:	2800      	cmp	r0, #0
 8010402:	bfab      	itete	ge
 8010404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010406:	89a3      	ldrhlt	r3, [r4, #12]
 8010408:	181b      	addge	r3, r3, r0
 801040a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801040e:	bfac      	ite	ge
 8010410:	6563      	strge	r3, [r4, #84]	; 0x54
 8010412:	81a3      	strhlt	r3, [r4, #12]
 8010414:	bd10      	pop	{r4, pc}

08010416 <__swrite>:
 8010416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801041a:	461f      	mov	r7, r3
 801041c:	898b      	ldrh	r3, [r1, #12]
 801041e:	4605      	mov	r5, r0
 8010420:	05db      	lsls	r3, r3, #23
 8010422:	460c      	mov	r4, r1
 8010424:	4616      	mov	r6, r2
 8010426:	d505      	bpl.n	8010434 <__swrite+0x1e>
 8010428:	2302      	movs	r3, #2
 801042a:	2200      	movs	r2, #0
 801042c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010430:	f000 f868 	bl	8010504 <_lseek_r>
 8010434:	89a3      	ldrh	r3, [r4, #12]
 8010436:	4632      	mov	r2, r6
 8010438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801043c:	81a3      	strh	r3, [r4, #12]
 801043e:	4628      	mov	r0, r5
 8010440:	463b      	mov	r3, r7
 8010442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801044a:	f000 b817 	b.w	801047c <_write_r>

0801044e <__sseek>:
 801044e:	b510      	push	{r4, lr}
 8010450:	460c      	mov	r4, r1
 8010452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010456:	f000 f855 	bl	8010504 <_lseek_r>
 801045a:	1c43      	adds	r3, r0, #1
 801045c:	89a3      	ldrh	r3, [r4, #12]
 801045e:	bf15      	itete	ne
 8010460:	6560      	strne	r0, [r4, #84]	; 0x54
 8010462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801046a:	81a3      	strheq	r3, [r4, #12]
 801046c:	bf18      	it	ne
 801046e:	81a3      	strhne	r3, [r4, #12]
 8010470:	bd10      	pop	{r4, pc}

08010472 <__sclose>:
 8010472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010476:	f000 b813 	b.w	80104a0 <_close_r>
	...

0801047c <_write_r>:
 801047c:	b538      	push	{r3, r4, r5, lr}
 801047e:	4604      	mov	r4, r0
 8010480:	4608      	mov	r0, r1
 8010482:	4611      	mov	r1, r2
 8010484:	2200      	movs	r2, #0
 8010486:	4d05      	ldr	r5, [pc, #20]	; (801049c <_write_r+0x20>)
 8010488:	602a      	str	r2, [r5, #0]
 801048a:	461a      	mov	r2, r3
 801048c:	f7f2 fb60 	bl	8002b50 <_write>
 8010490:	1c43      	adds	r3, r0, #1
 8010492:	d102      	bne.n	801049a <_write_r+0x1e>
 8010494:	682b      	ldr	r3, [r5, #0]
 8010496:	b103      	cbz	r3, 801049a <_write_r+0x1e>
 8010498:	6023      	str	r3, [r4, #0]
 801049a:	bd38      	pop	{r3, r4, r5, pc}
 801049c:	2000028c 	.word	0x2000028c

080104a0 <_close_r>:
 80104a0:	b538      	push	{r3, r4, r5, lr}
 80104a2:	2300      	movs	r3, #0
 80104a4:	4d05      	ldr	r5, [pc, #20]	; (80104bc <_close_r+0x1c>)
 80104a6:	4604      	mov	r4, r0
 80104a8:	4608      	mov	r0, r1
 80104aa:	602b      	str	r3, [r5, #0]
 80104ac:	f7f2 fb6c 	bl	8002b88 <_close>
 80104b0:	1c43      	adds	r3, r0, #1
 80104b2:	d102      	bne.n	80104ba <_close_r+0x1a>
 80104b4:	682b      	ldr	r3, [r5, #0]
 80104b6:	b103      	cbz	r3, 80104ba <_close_r+0x1a>
 80104b8:	6023      	str	r3, [r4, #0]
 80104ba:	bd38      	pop	{r3, r4, r5, pc}
 80104bc:	2000028c 	.word	0x2000028c

080104c0 <_fstat_r>:
 80104c0:	b538      	push	{r3, r4, r5, lr}
 80104c2:	2300      	movs	r3, #0
 80104c4:	4d06      	ldr	r5, [pc, #24]	; (80104e0 <_fstat_r+0x20>)
 80104c6:	4604      	mov	r4, r0
 80104c8:	4608      	mov	r0, r1
 80104ca:	4611      	mov	r1, r2
 80104cc:	602b      	str	r3, [r5, #0]
 80104ce:	f7f2 fb66 	bl	8002b9e <_fstat>
 80104d2:	1c43      	adds	r3, r0, #1
 80104d4:	d102      	bne.n	80104dc <_fstat_r+0x1c>
 80104d6:	682b      	ldr	r3, [r5, #0]
 80104d8:	b103      	cbz	r3, 80104dc <_fstat_r+0x1c>
 80104da:	6023      	str	r3, [r4, #0]
 80104dc:	bd38      	pop	{r3, r4, r5, pc}
 80104de:	bf00      	nop
 80104e0:	2000028c 	.word	0x2000028c

080104e4 <_isatty_r>:
 80104e4:	b538      	push	{r3, r4, r5, lr}
 80104e6:	2300      	movs	r3, #0
 80104e8:	4d05      	ldr	r5, [pc, #20]	; (8010500 <_isatty_r+0x1c>)
 80104ea:	4604      	mov	r4, r0
 80104ec:	4608      	mov	r0, r1
 80104ee:	602b      	str	r3, [r5, #0]
 80104f0:	f7f2 fb64 	bl	8002bbc <_isatty>
 80104f4:	1c43      	adds	r3, r0, #1
 80104f6:	d102      	bne.n	80104fe <_isatty_r+0x1a>
 80104f8:	682b      	ldr	r3, [r5, #0]
 80104fa:	b103      	cbz	r3, 80104fe <_isatty_r+0x1a>
 80104fc:	6023      	str	r3, [r4, #0]
 80104fe:	bd38      	pop	{r3, r4, r5, pc}
 8010500:	2000028c 	.word	0x2000028c

08010504 <_lseek_r>:
 8010504:	b538      	push	{r3, r4, r5, lr}
 8010506:	4604      	mov	r4, r0
 8010508:	4608      	mov	r0, r1
 801050a:	4611      	mov	r1, r2
 801050c:	2200      	movs	r2, #0
 801050e:	4d05      	ldr	r5, [pc, #20]	; (8010524 <_lseek_r+0x20>)
 8010510:	602a      	str	r2, [r5, #0]
 8010512:	461a      	mov	r2, r3
 8010514:	f7f2 fb5c 	bl	8002bd0 <_lseek>
 8010518:	1c43      	adds	r3, r0, #1
 801051a:	d102      	bne.n	8010522 <_lseek_r+0x1e>
 801051c:	682b      	ldr	r3, [r5, #0]
 801051e:	b103      	cbz	r3, 8010522 <_lseek_r+0x1e>
 8010520:	6023      	str	r3, [r4, #0]
 8010522:	bd38      	pop	{r3, r4, r5, pc}
 8010524:	2000028c 	.word	0x2000028c

08010528 <_read_r>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	4604      	mov	r4, r0
 801052c:	4608      	mov	r0, r1
 801052e:	4611      	mov	r1, r2
 8010530:	2200      	movs	r2, #0
 8010532:	4d05      	ldr	r5, [pc, #20]	; (8010548 <_read_r+0x20>)
 8010534:	602a      	str	r2, [r5, #0]
 8010536:	461a      	mov	r2, r3
 8010538:	f7f2 faed 	bl	8002b16 <_read>
 801053c:	1c43      	adds	r3, r0, #1
 801053e:	d102      	bne.n	8010546 <_read_r+0x1e>
 8010540:	682b      	ldr	r3, [r5, #0]
 8010542:	b103      	cbz	r3, 8010546 <_read_r+0x1e>
 8010544:	6023      	str	r3, [r4, #0]
 8010546:	bd38      	pop	{r3, r4, r5, pc}
 8010548:	2000028c 	.word	0x2000028c

0801054c <_init>:
 801054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801054e:	bf00      	nop
 8010550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010552:	bc08      	pop	{r3}
 8010554:	469e      	mov	lr, r3
 8010556:	4770      	bx	lr

08010558 <_fini>:
 8010558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055a:	bf00      	nop
 801055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801055e:	bc08      	pop	{r3}
 8010560:	469e      	mov	lr, r3
 8010562:	4770      	bx	lr
